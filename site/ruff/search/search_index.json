{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Ruff","text":"<p>Docs | Playground</p> <p>An extremely fast Python linter and code formatter, written in Rust.</p> <p> </p> <p> </p> <p> Linting the CPython codebase from scratch. </p> <ul> <li>\u26a1\ufe0f 10-100x faster than existing linters (like Flake8) and formatters (like Black)</li> <li>\ud83d\udc0d Installable via <code>pip</code></li> <li>\ud83d\udee0\ufe0f <code>pyproject.toml</code> support</li> <li>\ud83e\udd1d Python 3.13 compatibility</li> <li>\u2696\ufe0f Drop-in parity with Flake8, isort, and Black</li> <li>\ud83d\udce6 Built-in caching, to avoid re-analyzing unchanged files</li> <li>\ud83d\udd27 Fix support, for automatic error correction (e.g., automatically remove unused imports)</li> <li>\ud83d\udccf Over 800 built-in rules, with native re-implementations     of popular Flake8 plugins, like flake8-bugbear</li> <li>\u2328\ufe0f First-party editor integrations for     VS Code and more</li> <li>\ud83c\udf0e Monorepo-friendly, with hierarchical and cascading configuration</li> </ul> <p>Ruff aims to be orders of magnitude faster than alternative tools while integrating more functionality behind a single, common interface.</p> <p>Ruff can be used to replace Flake8 (plus dozens of plugins), Black, isort, pydocstyle, pyupgrade, autoflake, and more, all while executing tens or hundreds of times faster than any individual tool.</p> <p>Ruff is extremely actively developed and used in major open-source projects like:</p> <ul> <li>Apache Airflow</li> <li>Apache Superset</li> <li>FastAPI</li> <li>Hugging Face</li> <li>Pandas</li> <li>SciPy</li> </ul> <p>...and many more.</p> <p>Ruff is backed by Astral. Read the launch post, or the original project announcement.</p>"},{"location":"#testimonials","title":"Testimonials","text":"<p>Sebasti\u00e1n Ram\u00edrez, creator of FastAPI:</p> <p>Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it's actually running and checking the code.</p> <p>Nick Schrock, founder of Elementl, co-creator of GraphQL:</p> <p>Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On our largest module (dagster itself, 250k LOC) pylint takes about 2.5 minutes, parallelized across 4 cores on my M1. Running ruff against our entire codebase takes .4 seconds.</p> <p>Bryan Van de Ven, co-creator of Bokeh, original author of Conda:</p> <p>Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of ~20s. This is an enormous quality of life improvement for local dev. It's fast enough that I added it as an actual commit hook, which is terrific.</p> <p>Timothy Crosley, creator of isort:</p> <p>Just switched my first project to Ruff. Only one downside so far: it's so fast I couldn't believe it was working till I intentionally introduced some errors.</p> <p>Tim Abbott, lead developer of Zulip:</p> <p>This is just ridiculously fast... <code>ruff</code> is amazing.</p>"},{"location":"configuration/","title":"Configuring Ruff","text":"<p>Ruff can be configured through a <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file.</p> <p>Whether you're using Ruff as a linter, formatter, or both, the underlying configuration strategy and semantics are the same.</p> <p>For a complete enumeration of the available configuration options, see Settings.</p> <p>If left unspecified, Ruff's default configuration is equivalent to:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Exclude a variety of commonly ignored directories.\nexclude = [\n\".bzr\",\n\".direnv\",\n\".eggs\",\n\".git\",\n\".git-rewrite\",\n\".hg\",\n\".ipynb_checkpoints\",\n\".mypy_cache\",\n\".nox\",\n\".pants.d\",\n\".pyenv\",\n\".pytest_cache\",\n\".pytype\",\n\".ruff_cache\",\n\".svn\",\n\".tox\",\n\".venv\",\n\".vscode\",\n\"__pypackages__\",\n\"_build\",\n\"buck-out\",\n\"build\",\n\"dist\",\n\"node_modules\",\n\"site-packages\",\n\"venv\",\n]\n# Same as Black.\nline-length = 88\nindent-width = 4\n# Assume Python 3.9\ntarget-version = \"py39\"\n[tool.ruff.lint]\n# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.\n# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or\n# McCabe complexity (`C901`) by default.\nselect = [\"E4\", \"E7\", \"E9\", \"F\"]\nignore = []\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n[tool.ruff.format]\n# Like Black, use double quotes for strings.\nquote-style = \"double\"\n# Like Black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n# Like Black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n# Enable auto-formatting of code examples in docstrings. Markdown,\n# reStructuredText code/literal blocks and doctests are all supported.\n#\n# This is currently disabled by default, but it is planned for this\n# to be opt-out in the future.\ndocstring-code-format = false\n# Set the line length limit used when formatting code snippets in\n# docstrings.\n#\n# This only has an effect when the `docstring-code-format` setting is\n# enabled.\ndocstring-code-line-length = \"dynamic\"\n</code></pre> <pre><code># Exclude a variety of commonly ignored directories.\nexclude = [\n\".bzr\",\n\".direnv\",\n\".eggs\",\n\".git\",\n\".git-rewrite\",\n\".hg\",\n\".ipynb_checkpoints\",\n\".mypy_cache\",\n\".nox\",\n\".pants.d\",\n\".pyenv\",\n\".pytest_cache\",\n\".pytype\",\n\".ruff_cache\",\n\".svn\",\n\".tox\",\n\".venv\",\n\".vscode\",\n\"__pypackages__\",\n\"_build\",\n\"buck-out\",\n\"build\",\n\"dist\",\n\"node_modules\",\n\"site-packages\",\n\"venv\",\n]\n# Same as Black.\nline-length = 88\nindent-width = 4\n# Assume Python 3.9\ntarget-version = \"py39\"\n[lint]\n# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.\n# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or\n# McCabe complexity (`C901`) by default.\nselect = [\"E4\", \"E7\", \"E9\", \"F\"]\nignore = []\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n[format]\n# Like Black, use double quotes for strings.\nquote-style = \"double\"\n# Like Black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n# Like Black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n# Enable auto-formatting of code examples in docstrings. Markdown,\n# reStructuredText code/literal blocks and doctests are all supported.\n#\n# This is currently disabled by default, but it is planned for this\n# to be opt-out in the future.\ndocstring-code-format = false\n# Set the line length limit used when formatting code snippets in\n# docstrings.\n#\n# This only has an effect when the `docstring-code-format` setting is\n# enabled.\ndocstring-code-line-length = \"dynamic\"\n</code></pre> <p>As an example, the following would configure Ruff to:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# 1. Enable flake8-bugbear (`B`) rules, in addition to the defaults.\nselect = [\"E4\", \"E7\", \"E9\", \"F\", \"B\"]\n# 2. Avoid enforcing line-length violations (`E501`)\nignore = [\"E501\"]\n# 3. Avoid trying to fix flake8-bugbear (`B`) violations.\nunfixable = [\"B\"]\n# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in selected subdirectories.\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"E402\"]\n\"**/{tests,docs,tools}/*\" = [\"E402\"]\n[tool.ruff.format]\n# 5. Use single quotes in `ruff format`.\nquote-style = \"single\"\n</code></pre> <pre><code>[lint]\n# 1. Enable flake8-bugbear (`B`) rules, in addition to the defaults.\nselect = [\"E4\", \"E7\", \"E9\", \"F\", \"B\"]\n# 2. Avoid enforcing line-length violations (`E501`)\nignore = [\"E501\"]\n# 3. Avoid trying to fix flake8-bugbear (`B`) violations.\nunfixable = [\"B\"]\n# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in selected subdirectories.\n[lint.per-file-ignores]\n\"__init__.py\" = [\"E402\"]\n\"**/{tests,docs,tools}/*\" = [\"E402\"]\n[format]\n# 5. Use single quotes in `ruff format`.\nquote-style = \"single\"\n</code></pre> <p>Linter plugin configurations are expressed as subsections, e.g.:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Add \"Q\" to the list of enabled codes.\nselect = [\"E4\", \"E7\", \"E9\", \"F\", \"Q\"]\n[tool.ruff.lint.flake8-quotes]\ndocstring-quotes = \"double\"\n</code></pre> <pre><code>[lint]\n# Add \"Q\" to the list of enabled codes.\nselect = [\"E4\", \"E7\", \"E9\", \"F\", \"Q\"]\n[lint.flake8-quotes]\ndocstring-quotes = \"double\"\n</code></pre> <p>Ruff respects <code>pyproject.toml</code>, <code>ruff.toml</code>, and <code>.ruff.toml</code> files. All three implement an equivalent schema (though in the <code>ruff.toml</code> and <code>.ruff.toml</code> versions, the <code>[tool.ruff]</code> header and <code>tool.ruff</code> section prefix is omitted).</p> <p>For a complete enumeration of the available configuration options, see Settings.</p>"},{"location":"configuration/#config-file-discovery","title":"Config file discovery","text":"<p>Similar to ESLint, Ruff supports hierarchical configuration, such that the \"closest\" config file in the directory hierarchy is used for every individual file, with all paths in the config file (e.g., <code>exclude</code> globs, <code>src</code> paths) being resolved relative to the directory containing that config file.</p> <p>There are a few exceptions to these rules:</p> <ol> <li>In locating the \"closest\" <code>pyproject.toml</code> file for a given path, Ruff ignores any     <code>pyproject.toml</code> files that lack a <code>[tool.ruff]</code> section.</li> <li>If a configuration file is passed directly via <code>--config</code>, those settings are used for all     analyzed files, and any relative paths in that configuration file (like <code>exclude</code> globs or     <code>src</code> paths) are resolved relative to the current working directory.</li> <li>If no config file is found in the filesystem hierarchy, Ruff will fall back to using     a default configuration. If a user-specific configuration file exists     at <code>${config_dir}/ruff/pyproject.toml</code>, that file will be used instead of the default     configuration, with <code>${config_dir}</code> being determined via <code>etcetera</code>'s native strategy,     and all relative paths being again resolved relative to the current working directory.</li> <li>Any config-file-supported settings that are provided on the command-line (e.g., via     <code>--select</code>) will override the settings in every resolved configuration file.</li> </ol> <p>Unlike ESLint, Ruff does not merge settings across configuration files; instead, the \"closest\" configuration file is used, and any parent configuration files are ignored. In lieu of this implicit cascade, Ruff supports an <code>extend</code> field, which allows you to inherit the settings from another config file, like so:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Extend the `pyproject.toml` file in the parent directory...\nextend = \"../pyproject.toml\"\n# ...but use a different line length.\nline-length = 100\n</code></pre> <pre><code># Extend the `ruff.toml` file in the parent directory...\nextend = \"../ruff.toml\"\n# ...but use a different line length.\nline-length = 100\n</code></pre> <p>All of the above rules apply equivalently to <code>pyproject.toml</code>, <code>ruff.toml</code>, and <code>.ruff.toml</code> files. If Ruff detects multiple configuration files in the same directory, the <code>.ruff.toml</code> file will take precedence over the <code>ruff.toml</code> file, and the <code>ruff.toml</code> file will take precedence over the <code>pyproject.toml</code> file.</p>"},{"location":"configuration/#python-file-discovery","title":"Python file discovery","text":"<p>When passed a path on the command-line, Ruff will automatically discover all Python files in that path, taking into account the <code>exclude</code> and <code>extend-exclude</code> settings in each directory's configuration file.</p> <p>Files can also be selectively excluded from linting or formatting by scoping the <code>exclude</code> setting to the tool-specific configuration tables. For example, the following would prevent <code>ruff</code> from formatting <code>.pyi</code> files, but would continue to include them in linting:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\nexclude = [\"*.pyi\"]\n</code></pre> <pre><code>[format]\nexclude = [\"*.pyi\"]\n</code></pre> <p>By default, Ruff will also skip any files that are omitted via <code>.ignore</code>, <code>.gitignore</code>, <code>.git/info/exclude</code>, and global <code>gitignore</code> files (see: <code>respect-gitignore</code>).</p> <p>Files that are passed to <code>ruff</code> directly are always analyzed, regardless of the above criteria. For example, <code>ruff check /path/to/excluded/file.py</code> will always lint <code>file.py</code>.</p>"},{"location":"configuration/#default-inclusions","title":"Default inclusions","text":"<p>By default, Ruff will discover files matching <code>*.py</code>, <code>*.pyi</code>, <code>*.ipynb</code>, or <code>pyproject.toml</code>.</p> <p>To lint or format files with additional file extensions, use the <code>extend-include</code> setting. You can also change the default selection using the <code>include</code> setting.</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\ninclude = [\"pyproject.toml\", \"src/**/*.py\", \"scripts/**/*.py\"]\n</code></pre> <pre><code>include = [\"pyproject.toml\", \"src/**/*.py\", \"scripts/**/*.py\"]\n</code></pre> <p>Warning</p> <p>Paths provided to <code>include</code> must match files. For example, <code>include = [\"src\"]</code> will fail since it matches a directory.</p>"},{"location":"configuration/#jupyter-notebook-discovery","title":"Jupyter Notebook discovery","text":"<p>Ruff has built-in support for linting and formatting Jupyter Notebooks, which are linted and formatted by default on version <code>0.6.0</code> and higher.</p> <p>If you'd prefer to either only lint or only format Jupyter Notebook files, you can use the section-specific <code>exclude</code> option to do so. For example, the following would only lint Jupyter Notebook files and not format them:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\nexclude = [\"*.ipynb\"]\n</code></pre> <pre><code>[format]\nexclude = [\"*.ipynb\"]\n</code></pre> <p>And, conversely, the following would only format Jupyter Notebook files and not lint them:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nexclude = [\"*.ipynb\"]\n</code></pre> <pre><code>[lint]\nexclude = [\"*.ipynb\"]\n</code></pre> <p>You can completely disable Jupyter Notebook support by updating the <code>extend-exclude</code> setting:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nextend-exclude = [\"*.ipynb\"]\n</code></pre> <pre><code>extend-exclude = [\"*.ipynb\"]\n</code></pre> <p>If you'd like to ignore certain rules specifically for Jupyter Notebook files, you can do so by using the <code>per-file-ignores</code> setting:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.per-file-ignores]\n\"*.ipynb\" = [\"T20\"]\n</code></pre> <pre><code>[lint.per-file-ignores]\n\"*.ipynb\" = [\"T20\"]\n</code></pre> <p>Some rules have different behavior when applied to Jupyter Notebook files. For example, when applied to <code>.py</code> files the <code>module-import-not-at-top-of-file</code> (<code>E402</code>) rule detect imports at the top of a file, but for notebooks it detects imports at the top of a cell. For a given rule, the rule's documentation will always specify if it has different behavior when applied to Jupyter Notebook files.</p>"},{"location":"configuration/#command-line-interface","title":"Command-line interface","text":"<p>Some configuration options can be provided or overridden via dedicated flags on the command line. This includes those related to rule enablement and disablement, file discovery, logging level, and more:</p> <pre><code>$ ruff check path/to/code/ --select F401 --select F403 --quiet\n</code></pre> <p>All other configuration options can be set via the command line using the <code>--config</code> flag, detailed below.</p>"},{"location":"configuration/#the-config-cli-flag","title":"The <code>--config</code> CLI flag","text":"<p>The <code>--config</code> flag has two uses. It is most often used to point to the configuration file that you would like Ruff to use, for example:</p> <pre><code>$ ruff check path/to/directory --config path/to/ruff.toml\n</code></pre> <p>However, the <code>--config</code> flag can also be used to provide arbitrary overrides of configuration settings using TOML <code>&lt;KEY&gt; = &lt;VALUE&gt;</code> pairs. This is mostly useful in situations where you wish to override a configuration setting that does not have a dedicated command-line flag.</p> <p>In the below example, the <code>--config</code> flag is the only way of overriding the <code>dummy-variable-rgx</code> configuration setting from the command line, since this setting has no dedicated CLI flag. The <code>per-file-ignores</code> setting could also have been overridden via the <code>--per-file-ignores</code> dedicated flag, but using <code>--config</code> to override the setting is also fine:</p> <pre><code>$ ruff check path/to/file --config path/to/ruff.toml --config \"lint.dummy-variable-rgx = '__.*'\" --config \"lint.per-file-ignores = {'some_file.py' = ['F841']}\"\n</code></pre> <p>Configuration options passed to <code>--config</code> are parsed in the same way as configuration options in a <code>ruff.toml</code> file. As such, options specific to the Ruff linter need to be prefixed with <code>lint.</code> (<code>--config \"lint.dummy-variable-rgx = '__.*'\"</code> rather than simply <code>--config \"dummy-variable-rgx = '__.*'\"</code>), and options specific to the Ruff formatter need to be prefixed with <code>format.</code>.</p> <p>If a specific configuration option is simultaneously overridden by a dedicated flag and by the <code>--config</code> flag, the dedicated flag takes priority. In this example, the maximum permitted line length will be set to 90, not 100:</p> <pre><code>$ ruff format path/to/file --line-length=90 --config \"line-length=100\"\n</code></pre> <p>Specifying <code>--config \"line-length=90\"</code> will override the <code>line-length</code> setting from all configuration files detected by Ruff, including configuration files discovered in subdirectories. In this respect, specifying <code>--config \"line-length=90\"</code> has the same effect as specifying <code>--line-length=90</code>, which will similarly override the <code>line-length</code> setting from all configuration files detected by Ruff, regardless of where a specific configuration file is located.</p>"},{"location":"configuration/#full-command-line-interface","title":"Full command-line interface","text":"<p>See <code>ruff help</code> for the full list of Ruff's top-level commands:</p> <pre><code>Ruff: An extremely fast Python linter and code formatter.\n\nUsage: ruff [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  check    Run Ruff on the given files or directories\n  rule     Explain a rule (or all rules)\n  config   List or describe the available configuration options\n  linter   List all supported upstream linters\n  clean    Clear any caches in the current directory and any subdirectories\n  format   Run the Ruff formatter on the given files or directories\n  server   Run the language server\n  analyze  Run analysis over Python source code\n  version  Display Ruff's version\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\nLog levels:\n  -v, --verbose  Enable verbose logging\n  -q, --quiet    Print diagnostics, but nothing else\n  -s, --silent   Disable all logging (but still exit with status code \"1\" upon\n                 detecting diagnostics)\n\nGlobal options:\n      --config &lt;CONFIG_OPTION&gt;\n          Either a path to a TOML configuration file (`pyproject.toml` or\n          `ruff.toml`), or a TOML `&lt;KEY&gt; = &lt;VALUE&gt;` pair (such as you might\n          find in a `ruff.toml` configuration file) overriding a specific\n          configuration option. Overrides of individual settings using this\n          option always take precedence over all configuration files, including\n          configuration files that were also specified using `--config`\n      --isolated\n          Ignore all configuration files\n\nFor help with a specific command, see: `ruff help &lt;command&gt;`.\n</code></pre> <p>Or <code>ruff help check</code> for more on the linting command:</p> <pre><code>Run Ruff on the given files or directories\n\nUsage: ruff check [OPTIONS] [FILES]...\n\nArguments:\n  [FILES]...  List of files or directories to check [default: .]\n\nOptions:\n      --fix\n          Apply fixes to resolve lint violations. Use `--no-fix` to disable or\n          `--unsafe-fixes` to include unsafe fixes\n      --unsafe-fixes\n          Include fixes that may not retain the original intent of the code.\n          Use `--no-unsafe-fixes` to disable\n      --show-fixes\n          Show an enumeration of all fixed lint violations. Use\n          `--no-show-fixes` to disable\n      --diff\n          Avoid writing any fixed files back; instead, output a diff for each\n          changed file to stdout, and exit 0 if there are no diffs. Implies\n          `--fix-only`\n  -w, --watch\n          Run in watch mode by re-running whenever files change\n      --fix-only\n          Apply fixes to resolve lint violations, but don't report on, or exit\n          non-zero for, leftover violations. Implies `--fix`. Use\n          `--no-fix-only` to disable or `--unsafe-fixes` to include unsafe\n          fixes\n      --ignore-noqa\n          Ignore any `# noqa` comments\n      --output-format &lt;OUTPUT_FORMAT&gt;\n          Output serialization format for violations. The default serialization\n          format is \"full\" [env: RUFF_OUTPUT_FORMAT=] [possible values:\n          concise, full, json, json-lines, junit, grouped, github, gitlab,\n          pylint, rdjson, azure, sarif]\n  -o, --output-file &lt;OUTPUT_FILE&gt;\n          Specify file to write the linter output to (default: stdout) [env:\n          RUFF_OUTPUT_FILE=]\n      --target-version &lt;TARGET_VERSION&gt;\n          The minimum Python version that should be supported [possible values:\n          py37, py38, py39, py310, py311, py312, py313]\n      --preview\n          Enable preview mode; checks will include unstable rules and fixes.\n          Use `--no-preview` to disable\n      --extension &lt;EXTENSION&gt;\n          List of mappings from file extension to language (one of `python`,\n          `ipynb`, `pyi`). For example, to treat `.ipy` files as IPython\n          notebooks, use `--extension ipy:ipynb`\n      --statistics\n          Show counts for every rule with at least one violation\n      --add-noqa\n          Enable automatic additions of `noqa` directives to failing lines\n      --show-files\n          See the files Ruff will be run against with the current settings\n      --show-settings\n          See the settings Ruff will use to lint a given Python file\n  -h, --help\n          Print help\n\nRule selection:\n      --select &lt;RULE_CODE&gt;\n          Comma-separated list of rule codes to enable (or ALL, to enable all\n          rules)\n      --ignore &lt;RULE_CODE&gt;\n          Comma-separated list of rule codes to disable\n      --extend-select &lt;RULE_CODE&gt;\n          Like --select, but adds additional rule codes on top of those already\n          specified\n      --per-file-ignores &lt;PER_FILE_IGNORES&gt;\n          List of mappings from file pattern to code to exclude\n      --extend-per-file-ignores &lt;EXTEND_PER_FILE_IGNORES&gt;\n          Like `--per-file-ignores`, but adds additional ignores on top of\n          those already specified\n      --fixable &lt;RULE_CODE&gt;\n          List of rule codes to treat as eligible for fix. Only applicable when\n          fix itself is enabled (e.g., via `--fix`)\n      --unfixable &lt;RULE_CODE&gt;\n          List of rule codes to treat as ineligible for fix. Only applicable\n          when fix itself is enabled (e.g., via `--fix`)\n      --extend-fixable &lt;RULE_CODE&gt;\n          Like --fixable, but adds additional rule codes on top of those\n          already specified\n\nFile selection:\n      --exclude &lt;FILE_PATTERN&gt;\n          List of paths, used to omit files and/or directories from analysis\n      --extend-exclude &lt;FILE_PATTERN&gt;\n          Like --exclude, but adds additional files and directories on top of\n          those already excluded\n      --respect-gitignore\n          Respect file exclusions via `.gitignore` and other standard ignore\n          files. Use `--no-respect-gitignore` to disable\n      --force-exclude\n          Enforce exclusions, even for paths passed to Ruff directly on the\n          command-line. Use `--no-force-exclude` to disable\n\nMiscellaneous:\n  -n, --no-cache\n          Disable cache reads [env: RUFF_NO_CACHE=]\n      --cache-dir &lt;CACHE_DIR&gt;\n          Path to the cache directory [env: RUFF_CACHE_DIR=]\n      --stdin-filename &lt;STDIN_FILENAME&gt;\n          The name of the file when passing it through stdin\n  -e, --exit-zero\n          Exit with status code \"0\", even upon detecting lint violations\n      --exit-non-zero-on-fix\n          Exit with a non-zero status code if any files were modified via fix,\n          even if no lint violations remain\n\nLog levels:\n  -v, --verbose  Enable verbose logging\n  -q, --quiet    Print diagnostics, but nothing else\n  -s, --silent   Disable all logging (but still exit with status code \"1\" upon\n                 detecting diagnostics)\n\nGlobal options:\n      --config &lt;CONFIG_OPTION&gt;\n          Either a path to a TOML configuration file (`pyproject.toml` or\n          `ruff.toml`), or a TOML `&lt;KEY&gt; = &lt;VALUE&gt;` pair (such as you might\n          find in a `ruff.toml` configuration file) overriding a specific\n          configuration option. Overrides of individual settings using this\n          option always take precedence over all configuration files, including\n          configuration files that were also specified using `--config`\n      --isolated\n          Ignore all configuration files\n</code></pre> <p>Or <code>ruff help format</code> for more on the formatting command:</p> <pre><code>Run the Ruff formatter on the given files or directories\n\nUsage: ruff format [OPTIONS] [FILES]...\n\nArguments:\n  [FILES]...  List of files or directories to format [default: .]\n\nOptions:\n      --check\n          Avoid writing any formatted files back; instead, exit with a non-zero\n          status code if any files would have been modified, and zero otherwise\n      --diff\n          Avoid writing any formatted files back; instead, exit with a non-zero\n          status code and the difference between the current file and how the\n          formatted file would look like\n      --extension &lt;EXTENSION&gt;\n          List of mappings from file extension to language (one of `python`,\n          `ipynb`, `pyi`). For example, to treat `.ipy` files as IPython\n          notebooks, use `--extension ipy:ipynb`\n      --target-version &lt;TARGET_VERSION&gt;\n          The minimum Python version that should be supported [possible values:\n          py37, py38, py39, py310, py311, py312, py313]\n      --preview\n          Enable preview mode; enables unstable formatting. Use `--no-preview`\n          to disable\n  -h, --help\n          Print help (see more with '--help')\n\nMiscellaneous:\n  -n, --no-cache\n          Disable cache reads [env: RUFF_NO_CACHE=]\n      --cache-dir &lt;CACHE_DIR&gt;\n          Path to the cache directory [env: RUFF_CACHE_DIR=]\n      --stdin-filename &lt;STDIN_FILENAME&gt;\n          The name of the file when passing it through stdin\n\nFile selection:\n      --respect-gitignore\n          Respect file exclusions via `.gitignore` and other standard ignore\n          files. Use `--no-respect-gitignore` to disable\n      --exclude &lt;FILE_PATTERN&gt;\n          List of paths, used to omit files and/or directories from analysis\n      --force-exclude\n          Enforce exclusions, even for paths passed to Ruff directly on the\n          command-line. Use `--no-force-exclude` to disable\n\nFormat configuration:\n      --line-length &lt;LINE_LENGTH&gt;  Set the line-length\n\nEditor options:\n      --range &lt;RANGE&gt;  When specified, Ruff will try to only format the code in\n                       the given range.\n                       It might be necessary to extend the start backwards or\n                       the end forwards, to fully enclose a logical line.\n                       The `&lt;RANGE&gt;` uses the format\n                       `&lt;start_line&gt;:&lt;start_column&gt;-&lt;end_line&gt;:&lt;end_column&gt;`.\n\nLog levels:\n  -v, --verbose  Enable verbose logging\n  -q, --quiet    Print diagnostics, but nothing else\n  -s, --silent   Disable all logging (but still exit with status code \"1\" upon\n                 detecting diagnostics)\n\nGlobal options:\n      --config &lt;CONFIG_OPTION&gt;\n          Either a path to a TOML configuration file (`pyproject.toml` or\n          `ruff.toml`), or a TOML `&lt;KEY&gt; = &lt;VALUE&gt;` pair (such as you might\n          find in a `ruff.toml` configuration file) overriding a specific\n          configuration option. Overrides of individual settings using this\n          option always take precedence over all configuration files, including\n          configuration files that were also specified using `--config`\n      --isolated\n          Ignore all configuration files\n</code></pre>"},{"location":"configuration/#shell-autocompletion","title":"Shell autocompletion","text":"<p>Ruff supports autocompletion for most shells. A shell-specific completion script can be generated by <code>ruff generate-shell-completion &lt;SHELL&gt;</code>, where <code>&lt;SHELL&gt;</code> is one of <code>bash</code>, <code>elvish</code>, <code>fig</code>, <code>fish</code>, <code>powershell</code>, or <code>zsh</code>.</p> <p>The exact steps required to enable autocompletion will vary by shell. For example instructions, see the Poetry or ripgrep documentation.</p> <p>As an example: to enable autocompletion for Zsh, run <code>ruff generate-shell-completion zsh &gt; ~/.zfunc/_ruff</code>. Then add the following line to your <code>~/.zshrc</code> file, if they're not already present:</p> <pre><code>fpath+=~/.zfunc\nautoload -Uz compinit &amp;&amp; compinit\n</code></pre>"},{"location":"contributing/","title":"Contributing to Ruff","text":"<p>Welcome! We're happy to have you here. Thank you in advance for your contribution to Ruff.</p>"},{"location":"contributing/#the-basics","title":"The Basics","text":"<p>Ruff welcomes contributions in the form of pull requests.</p> <p>For small changes (e.g., bug fixes), feel free to submit a PR.</p> <p>For larger changes (e.g., new lint rules, new functionality, new configuration options), consider creating an issue outlining your proposed change. You can also join us on Discord to discuss your idea with the community. We've labeled beginner-friendly tasks in the issue tracker, along with bugs and improvements that are ready for contributions.</p> <p>If you have suggestions on how we might improve the contributing documentation, let us know!</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>Ruff is written in Rust. You'll need to install the Rust toolchain for development.</p> <p>You'll also need Insta to update snapshot tests:</p> <pre><code>cargo install cargo-insta\n</code></pre> <p>You'll need uv (or <code>pipx</code> and <code>pip</code>) to run Python utility commands.</p> <p>You can optionally install pre-commit hooks to automatically run the validation checks when making a commit:</p> <pre><code>uv tool install pre-commit\npre-commit install\n</code></pre> <p>We recommend nextest to run Ruff's test suite (via <code>cargo nextest run</code>), though it's not strictly necessary:</p> <pre><code>cargo install cargo-nextest --locked\n</code></pre> <p>Throughout this guide, any usages of <code>cargo test</code> can be replaced with <code>cargo nextest run</code>, if you choose to install <code>nextest</code>.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>After cloning the repository, run Ruff locally from the repository root with:</p> <pre><code>cargo run -p ruff -- check /path/to/file.py --no-cache\n</code></pre> <p>Prior to opening a pull request, ensure that your code has been auto-formatted, and that it passes both the lint and test validation checks:</p> <pre><code>cargo clippy --workspace --all-targets --all-features -- -D warnings  # Rust linting\nRUFF_UPDATE_SCHEMA=1 cargo test  # Rust testing and updating ruff.schema.json\nuvx pre-commit run --all-files --show-diff-on-failure  # Rust and Python formatting, Markdown and Python linting, etc.\n</code></pre> <p>These checks will run on GitHub Actions when you open your pull request, but running them locally will save you time and expedite the merge process.</p> <p>If you're using VS Code, you can also install the recommended rust-analyzer extension to get these checks while editing.</p> <p>Note that many code changes also require updating the snapshot tests, which is done interactively after running <code>cargo test</code> like so:</p> <pre><code>cargo insta review\n</code></pre> <p>If your pull request relates to a specific lint rule, include the category and rule code in the title, as in the following examples:</p> <ul> <li>[<code>flake8-bugbear</code>] Avoid false positive for usage after <code>continue</code> (<code>B031</code>)</li> <li>[<code>flake8-simplify</code>] Detect implicit <code>else</code> cases in <code>needless-bool</code> (<code>SIM103</code>)</li> <li>[<code>pycodestyle</code>] Implement <code>redundant-backslash</code> (<code>E502</code>)</li> </ul> <p>Your pull request will be reviewed by a maintainer, which may involve a few rounds of iteration prior to merging.</p>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<p>Ruff is structured as a monorepo with a flat crate structure, such that all crates are contained in a flat <code>crates</code> directory.</p> <p>The vast majority of the code, including all lint rules, lives in the <code>ruff_linter</code> crate (located at <code>crates/ruff_linter</code>). As a contributor, that's the crate that'll be most relevant to you.</p> <p>At the time of writing, the repository includes the following crates:</p> <ul> <li><code>crates/ruff_linter</code>: library crate containing all lint rules and the core logic for running them.     If you're working on a rule, this is the crate for you.</li> <li><code>crates/ruff_benchmark</code>: binary crate for running micro-benchmarks.</li> <li><code>crates/ruff_cache</code>: library crate for caching lint results.</li> <li><code>crates/ruff</code>: binary crate containing Ruff's command-line interface.</li> <li><code>crates/ruff_dev</code>: binary crate containing utilities used in the development of Ruff itself (e.g.,     <code>cargo dev generate-all</code>), see the <code>cargo dev</code> section below.</li> <li><code>crates/ruff_diagnostics</code>: library crate for the rule-independent abstractions in the lint     diagnostics APIs.</li> <li><code>crates/ruff_formatter</code>: library crate for language agnostic code formatting logic based on an     intermediate representation. The backend for <code>ruff_python_formatter</code>.</li> <li><code>crates/ruff_index</code>: library crate inspired by <code>rustc_index</code>.</li> <li><code>crates/ruff_macros</code>: proc macro crate containing macros used by Ruff.</li> <li><code>crates/ruff_notebook</code>: library crate for parsing and manipulating Jupyter notebooks.</li> <li><code>crates/ruff_python_ast</code>: library crate containing Python-specific AST types and utilities.</li> <li><code>crates/ruff_python_codegen</code>: library crate containing utilities for generating Python source code.</li> <li><code>crates/ruff_python_formatter</code>: library crate implementing the Python formatter. Emits an     intermediate representation for each node, which <code>ruff_formatter</code> prints based on the configured     line length.</li> <li><code>crates/ruff_python_semantic</code>: library crate containing Python-specific semantic analysis logic,     including Ruff's semantic model. Used to resolve queries like \"What import does this variable     refer to?\"</li> <li><code>crates/ruff_python_stdlib</code>: library crate containing Python-specific standard library data, e.g.     the names of all built-in exceptions and which standard library types are immutable.</li> <li><code>crates/ruff_python_trivia</code>: library crate containing Python-specific trivia utilities (e.g.,     for analyzing indentation, newlines, etc.).</li> <li><code>crates/ruff_python_parser</code>: library crate containing the Python parser.</li> <li><code>crates/ruff_wasm</code>: library crate for exposing Ruff as a WebAssembly module. Powers the     Ruff Playground.</li> </ul>"},{"location":"contributing/#example-adding-a-new-lint-rule","title":"Example: Adding a new lint rule","text":"<p>At a high level, the steps involved in adding a new lint rule are as follows:</p> <ol> <li> <p>Determine a name for the new rule as per our rule naming convention     (e.g., <code>AssertFalse</code>, as in, \"allow <code>assert False</code>\").</p> </li> <li> <p>Create a file for your rule (e.g., <code>crates/ruff_linter/src/rules/flake8_bugbear/rules/assert_false.rs</code>).</p> </li> <li> <p>In that file, define a violation struct (e.g., <code>pub struct AssertFalse</code>). You can grep for     <code>#[violation]</code> to see examples.</p> </li> <li> <p>In that file, define a function that adds the violation to the diagnostic list as appropriate     (e.g., <code>pub(crate) fn assert_false</code>) based on whatever inputs are required for the rule (e.g.,     an <code>ast::StmtAssert</code> node).</p> </li> <li> <p>Define the logic for invoking the diagnostic in <code>crates/ruff_linter/src/checkers/ast/analyze</code> (for     AST-based rules), <code>crates/ruff_linter/src/checkers/tokens.rs</code> (for token-based rules),     <code>crates/ruff_linter/src/checkers/physical_lines.rs</code> (for text-based rules),     <code>crates/ruff_linter/src/checkers/filesystem.rs</code> (for filesystem-based rules), etc. For AST-based rules,     you'll likely want to modify <code>analyze/statement.rs</code> (if your rule is based on analyzing     statements, like imports) or <code>analyze/expression.rs</code> (if your rule is based on analyzing     expressions, like function calls).</p> </li> <li> <p>Map the violation struct to a rule code in <code>crates/ruff_linter/src/codes.rs</code> (e.g., <code>B011</code>). New rules     should be added in <code>RuleGroup::Preview</code>.</p> </li> <li> <p>Add proper testing for your rule.</p> </li> <li> <p>Update the generated files (documentation and generated code).</p> </li> </ol> <p>To trigger the violation, you'll likely want to augment the logic in <code>crates/ruff_linter/src/checkers/ast.rs</code> to call your new function at the appropriate time and with the appropriate inputs. The <code>Checker</code> defined therein is a Python AST visitor, which iterates over the AST, building up a semantic model, and calling out to lint rule analyzer functions as it goes.</p> <p>If you need to inspect the AST, you can run <code>cargo dev print-ast</code> with a Python file. Grep for the <code>Diagnostic::new</code> invocations to understand how other, similar rules are implemented.</p> <p>Once you're satisfied with your code, add tests for your rule (see: rule testing), and regenerate the documentation and associated assets (like our JSON Schema) with <code>cargo dev generate-all</code>.</p> <p>Finally, submit a pull request, and include the category, rule name, and rule code in the title, as in:</p> <p>[<code>pycodestyle</code>] Implement <code>redundant-backslash</code> (<code>E502</code>)</p>"},{"location":"contributing/#rule-naming-convention","title":"Rule naming convention","text":"<p>Like Clippy, Ruff's rule names should make grammatical and logical sense when read as \"allow ${rule}\" or \"allow ${rule} items\", as in the context of suppression comments.</p> <p>For example, <code>AssertFalse</code> fits this convention: it flags <code>assert False</code> statements, and so a suppression comment would be framed as \"allow <code>assert False</code>\".</p> <p>As such, rule names should...</p> <ul> <li> <p>Highlight the pattern that is being linted against, rather than the preferred alternative.     For example, <code>AssertFalse</code> guards against <code>assert False</code> statements.</p> </li> <li> <p>Not contain instructions on how to fix the violation, which instead belong in the rule     documentation and the <code>fix_title</code>.</p> </li> <li> <p>Not contain a redundant prefix, like <code>Disallow</code> or <code>Banned</code>, which are already implied by the     convention.</p> </li> </ul> <p>When re-implementing rules from other linters, we prioritize adhering to this convention over preserving the original rule name.</p>"},{"location":"contributing/#rule-testing-fixtures-and-snapshots","title":"Rule testing: fixtures and snapshots","text":"<p>To test rules, Ruff uses snapshots of Ruff's output for a given file (fixture). Generally, there will be one file per rule (e.g., <code>E402.py</code>), and each file will contain all necessary examples of both violations and non-violations. <code>cargo insta review</code> will generate a snapshot file containing Ruff's output for each fixture, which you can then commit alongside your changes.</p> <p>Once you've completed the code for the rule itself, you can define tests with the following steps:</p> <ol> <li> <p>Add a Python file to <code>crates/ruff_linter/resources/test/fixtures/[linter]</code> that contains the code you     want to test. The file name should match the rule name (e.g., <code>E402.py</code>), and it should include     examples of both violations and non-violations.</p> </li> <li> <p>Run Ruff locally against your file and verify the output is as expected. Once you're satisfied     with the output (you see the violations you expect, and no others), proceed to the next step.     For example, if you're adding a new rule named <code>E402</code>, you would run:</p> <pre><code>cargo run -p ruff -- check crates/ruff_linter/resources/test/fixtures/pycodestyle/E402.py --no-cache --preview --select E402\n</code></pre> <p>Note: Only a subset of rules are enabled by default. When testing a new rule, ensure that you activate it by adding <code>--select ${rule_code}</code> to the command.</p> </li> <li> <p>Add the test to the relevant <code>crates/ruff_linter/src/rules/[linter]/mod.rs</code> file. If you're contributing     a rule to a pre-existing set, you should be able to find a similar example to pattern-match     against. If you're adding a new linter, you'll need to create a new <code>mod.rs</code> file (see,     e.g., <code>crates/ruff_linter/src/rules/flake8_bugbear/mod.rs</code>)</p> </li> <li> <p>Run <code>cargo test</code>. Your test will fail, but you'll be prompted to follow-up     with <code>cargo insta review</code>. Run <code>cargo insta review</code>, review and accept the generated snapshot,     then commit the snapshot file alongside the rest of your changes.</p> </li> <li> <p>Run <code>cargo test</code> again to ensure that your test passes.</p> </li> </ol>"},{"location":"contributing/#example-adding-a-new-configuration-option","title":"Example: Adding a new configuration option","text":"<p>Ruff's user-facing settings live in a few different places.</p> <p>First, the command-line options are defined via the <code>Args</code> struct in <code>crates/ruff/src/args.rs</code>.</p> <p>Second, the <code>pyproject.toml</code> options are defined in <code>crates/ruff_workspace/src/options.rs</code> (via the <code>Options</code> struct), <code>crates/ruff_workspace/src/configuration.rs</code> (via the <code>Configuration</code> struct), and <code>crates/ruff_workspace/src/settings.rs</code> (via the <code>Settings</code> struct), which then includes the <code>LinterSettings</code> struct as a field.</p> <p>These represent, respectively: the schema used to parse the <code>pyproject.toml</code> file; an internal, intermediate representation; and the final, internal representation used to power Ruff.</p> <p>To add a new configuration option, you'll likely want to modify these latter few files (along with <code>args.rs</code>, if appropriate). If you want to pattern-match against an existing example, grep for <code>dummy_variable_rgx</code>, which defines a regular expression to match against acceptable unused variables (e.g., <code>_</code>).</p> <p>Note that plugin-specific configuration options are defined in their own modules (e.g., <code>Settings</code> in <code>crates/ruff_linter/src/flake8_unused_arguments/settings.rs</code> coupled with <code>Flake8UnusedArgumentsOptions</code> in <code>crates/ruff_workspace/src/options.rs</code>).</p> <p>Finally, regenerate the documentation and generated code with <code>cargo dev generate-all</code>.</p>"},{"location":"contributing/#mkdocs","title":"MkDocs","text":"<p>To preview any changes to the documentation locally:</p> <ol> <li> <p>Install the Rust toolchain.</p> </li> <li> <p>Generate the MkDocs site with:</p> <pre><code>uv run --no-project --isolated --with-requirements docs/requirements.txt scripts/generate_mkdocs.py\n</code></pre> </li> <li> <p>Run the development server with:</p> <pre><code># For contributors.\nuvx --with-requirements docs/requirements.txt -- mkdocs serve -f mkdocs.public.yml\n\n# For members of the Astral org, which has access to MkDocs Insiders via sponsorship.\nuvx --with-requirements docs/requirements-insiders.txt -- mkdocs serve -f mkdocs.insiders.yml\n</code></pre> </li> </ol> <p>The documentation should then be available locally at http://127.0.0.1:8000/ruff/.</p>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>As of now, Ruff has an ad hoc release process: releases are cut with high frequency via GitHub Actions, which automatically generates the appropriate wheels across architectures and publishes them to PyPI.</p> <p>Ruff follows the semver versioning standard. However, as pre-1.0 software, even patch releases may contain non-backwards-compatible changes.</p>"},{"location":"contributing/#creating-a-new-release","title":"Creating a new release","text":"<ol> <li> <p>Install <code>uv</code>: <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code></p> </li> <li> <p>Run <code>./scripts/release.sh</code>; this command will:</p> <ul> <li>Generate a temporary virtual environment with <code>rooster</code></li> <li>Generate a changelog entry in <code>CHANGELOG.md</code></li> <li>Update versions in <code>pyproject.toml</code> and <code>Cargo.toml</code></li> <li>Update references to versions in the <code>README.md</code> and documentation</li> <li>Display contributors for the release</li> </ul> </li> <li> <p>The changelog should then be editorialized for consistency</p> <ul> <li>Often labels will be missing from pull requests they will need to be manually organized into the proper section</li> <li>Changes should be edited to be user-facing descriptions, avoiding internal details</li> </ul> </li> <li> <p>Highlight any breaking changes in <code>BREAKING_CHANGES.md</code></p> </li> <li> <p>Run <code>cargo check</code>. This should update the lock file with new versions.</p> </li> <li> <p>Create a pull request with the changelog and version updates</p> </li> <li> <p>Merge the PR</p> </li> <li> <p>Run the release workflow with:</p> <ul> <li>The new version number (without starting <code>v</code>)</li> </ul> </li> <li> <p>The release workflow will do the following:</p> <ol> <li>Build all the assets. If this fails (even though we tested in step 4), we haven't tagged or     uploaded anything, you can restart after pushing a fix. If you just need to rerun the build,     make sure you're re-running all the failed     jobs and not just a single failed job.</li> <li>Upload to PyPI.</li> <li>Create and push the Git tag (as extracted from <code>pyproject.toml</code>). We create the Git tag only     after building the wheels and uploading to PyPI, since we can't delete or modify the tag (#4468).</li> <li>Attach artifacts to draft GitHub release</li> <li>Trigger downstream repositories. This can fail non-catastrophically, as we can run any     downstream jobs manually if needed.</li> </ol> </li> <li> <p>Verify the GitHub release:</p> <ol> <li>The Changelog should match the content of <code>CHANGELOG.md</code></li> <li>Append the contributors from the <code>scripts/release.sh</code> script</li> </ol> </li> <li> <p>If needed, update the schemastore.</p> <ol> <li>One can determine if an update is needed when     <code>git diff old-version-tag new-version-tag -- ruff.schema.json</code> returns a non-empty diff.</li> <li>Once run successfully, you should follow the link in the output to create a PR.</li> </ol> </li> <li> <p>If needed, update the <code>ruff-lsp</code> and     <code>ruff-vscode</code> repositories and follow     the release instructions in those repositories. <code>ruff-lsp</code> should always be updated     before <code>ruff-vscode</code>.</p> <p>This step is generally not required for a patch release, but should always be done for a minor release.</p> </li> </ol>"},{"location":"contributing/#ecosystem-ci","title":"Ecosystem CI","text":"<p>GitHub Actions will run your changes against a number of real-world projects from GitHub and report on any linter or formatter differences. You can also run those checks locally via:</p> <pre><code>uvx --from ./python/ruff-ecosystem ruff-ecosystem check ruff \"./target/debug/ruff\"\nuvx --from ./python/ruff-ecosystem ruff-ecosystem format ruff \"./target/debug/ruff\"\n</code></pre> <p>See the ruff-ecosystem package for more details.</p>"},{"location":"contributing/#benchmarking-and-profiling","title":"Benchmarking and Profiling","text":"<p>We have several ways of benchmarking and profiling Ruff:</p> <ul> <li>Our main performance benchmark comparing Ruff with other tools on the CPython codebase</li> <li>Microbenchmarks which run the linter or the formatter on individual files. These run on pull requests.</li> <li>Profiling the linter on either the microbenchmarks or entire projects</li> </ul> <p>Note When running benchmarks, ensure that your CPU is otherwise idle (e.g., close any background applications, like web browsers). You may also want to switch your CPU to a \"performance\" mode, if it exists, especially when benchmarking short-lived processes.</p>"},{"location":"contributing/#cpython-benchmark","title":"CPython Benchmark","text":"<p>First, clone CPython. It's a large and diverse Python codebase, which makes it a good target for benchmarking.</p> <pre><code>git clone --branch 3.10 https://github.com/python/cpython.git crates/ruff_linter/resources/test/cpython\n</code></pre> <p>Install <code>hyperfine</code>:</p> <pre><code>cargo install hyperfine\n</code></pre> <p>To benchmark the release build:</p> <pre><code>cargo build --release &amp;&amp; hyperfine --warmup 10 \\\n\"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ --no-cache -e\" \\\n\"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ -e\"\nBenchmark 1: ./target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache\n  Time (mean \u00b1 \u03c3):     293.8 ms \u00b1   3.2 ms    [User: 2384.6 ms, System: 90.3 ms]\nRange (min \u2026 max):   289.9 ms \u2026 301.6 ms    10 runs\n\nBenchmark 2: ./target/release/ruff ./crates/ruff_linter/resources/test/cpython/\n  Time (mean \u00b1 \u03c3):      48.0 ms \u00b1   3.1 ms    [User: 65.2 ms, System: 124.7 ms]\nRange (min \u2026 max):    45.0 ms \u2026  66.7 ms    62 runs\n\nSummary\n  './target/release/ruff ./crates/ruff_linter/resources/test/cpython/' ran\n    6.12 \u00b1 0.41 times faster than './target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache'\n</code></pre> <p>To benchmark against the ecosystem's existing tools:</p> <pre><code>hyperfine --ignore-failure --warmup 5 \\\n\"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ --no-cache\" \\\n\"pyflakes crates/ruff_linter/resources/test/cpython\" \\\n\"autoflake --recursive --expand-star-imports --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys resources/test/cpython\" \\\n\"pycodestyle crates/ruff_linter/resources/test/cpython\" \\\n\"flake8 crates/ruff_linter/resources/test/cpython\"\nBenchmark 1: ./target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache\n  Time (mean \u00b1 \u03c3):     294.3 ms \u00b1   3.3 ms    [User: 2467.5 ms, System: 89.6 ms]\nRange (min \u2026 max):   291.1 ms \u2026 302.8 ms    10 runs\n\nWarning: Ignoring non-zero exit code.\n\nBenchmark 2: pyflakes crates/ruff_linter/resources/test/cpython\n  Time (mean \u00b1 \u03c3):     15.786 s \u00b1  0.143 s    [User: 15.560 s, System: 0.214 s]\nRange (min \u2026 max):   15.640 s \u2026 16.157 s    10 runs\n\nWarning: Ignoring non-zero exit code.\n\nBenchmark 3: autoflake --recursive --expand-star-imports --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys resources/test/cpython\n  Time (mean \u00b1 \u03c3):      6.175 s \u00b1  0.169 s    [User: 54.102 s, System: 1.057 s]\nRange (min \u2026 max):    5.950 s \u2026  6.391 s    10 runs\n\nBenchmark 4: pycodestyle crates/ruff_linter/resources/test/cpython\n  Time (mean \u00b1 \u03c3):     46.921 s \u00b1  0.508 s    [User: 46.699 s, System: 0.202 s]\nRange (min \u2026 max):   46.171 s \u2026 47.863 s    10 runs\n\nWarning: Ignoring non-zero exit code.\n\nBenchmark 5: flake8 crates/ruff_linter/resources/test/cpython\n  Time (mean \u00b1 \u03c3):     12.260 s \u00b1  0.321 s    [User: 102.934 s, System: 1.230 s]\nRange (min \u2026 max):   11.848 s \u2026 12.933 s    10 runs\n\nWarning: Ignoring non-zero exit code.\n\nSummary\n  './target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache' ran\n   20.98 \u00b1 0.62 times faster than 'autoflake --recursive --expand-star-imports --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys resources/test/cpython'\n41.66 \u00b1 1.18 times faster than 'flake8 crates/ruff_linter/resources/test/cpython'\n53.64 \u00b1 0.77 times faster than 'pyflakes crates/ruff_linter/resources/test/cpython'\n159.43 \u00b1 2.48 times faster than 'pycodestyle crates/ruff_linter/resources/test/cpython'\n</code></pre> <p>To benchmark a subset of rules, e.g. <code>LineTooLong</code> and <code>DocLineTooLong</code>:</p> <pre><code>cargo build --release &amp;&amp; hyperfine --warmup 10 \\\n\"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ --no-cache -e --select W505,E501\"\n</code></pre> <p>You can run <code>poetry install</code> from <code>./scripts/benchmarks</code> to create a working environment for the above. All reported benchmarks were computed using the versions specified by <code>./scripts/benchmarks/pyproject.toml</code> on Python 3.11.</p> <p>To benchmark Pylint, remove the following files from the CPython repository:</p> <pre><code>rm Lib/test/bad_coding.py \\\nLib/test/bad_coding2.py \\\nLib/test/bad_getattr.py \\\nLib/test/bad_getattr2.py \\\nLib/test/bad_getattr3.py \\\nLib/test/badcert.pem \\\nLib/test/badkey.pem \\\nLib/test/badsyntax_3131.py \\\nLib/test/badsyntax_future10.py \\\nLib/test/badsyntax_future3.py \\\nLib/test/badsyntax_future4.py \\\nLib/test/badsyntax_future5.py \\\nLib/test/badsyntax_future6.py \\\nLib/test/badsyntax_future7.py \\\nLib/test/badsyntax_future8.py \\\nLib/test/badsyntax_future9.py \\\nLib/test/badsyntax_pep3120.py \\\nLib/test/test_asyncio/test_runners.py \\\nLib/test/test_copy.py \\\nLib/test/test_inspect.py \\\nLib/test/test_typing.py\n</code></pre> <p>Then, from <code>crates/ruff_linter/resources/test/cpython</code>, run: <code>time pylint -j 0 -E $(git ls-files '*.py')</code>. This will execute Pylint with maximum parallelism and only report errors.</p> <p>To benchmark Pyupgrade, run the following from <code>crates/ruff_linter/resources/test/cpython</code>:</p> <pre><code>hyperfine --ignore-failure --warmup 5 --prepare \"git reset --hard HEAD\" \\\n\"find . -type f -name \\\"*.py\\\" | xargs -P 0 pyupgrade --py311-plus\"\nBenchmark 1: find . -type f -name \"*.py\" | xargs -P 0 pyupgrade --py311-plus\n  Time (mean \u00b1 \u03c3):     30.119 s \u00b1  0.195 s    [User: 28.638 s, System: 0.390 s]\nRange (min \u2026 max):   29.813 s \u2026 30.356 s    10 runs\n</code></pre>"},{"location":"contributing/#microbenchmarks","title":"Microbenchmarks","text":"<p>The <code>ruff_benchmark</code> crate benchmarks the linter and the formatter on individual files.</p> <p>You can run the benchmarks with</p> <pre><code>cargo benchmark\n</code></pre> <p><code>cargo benchmark</code> is an alias for <code>cargo bench -p ruff_benchmark --bench linter --bench formatter --</code></p>"},{"location":"contributing/#benchmark-driven-development","title":"Benchmark-driven Development","text":"<p>Ruff uses Criterion.rs for benchmarks. You can use <code>--save-baseline=&lt;name&gt;</code> to store an initial baseline benchmark (e.g. on <code>main</code>) and then use <code>--benchmark=&lt;name&gt;</code> to compare against that benchmark. Criterion will print a message telling you if the benchmark improved/regressed compared to that baseline.</p> <pre><code># Run once on your \"baseline\" code\ncargo bench -p ruff_benchmark -- --save-baseline=main\n\n# Then iterate with\ncargo bench -p ruff_benchmark -- --baseline=main\n</code></pre>"},{"location":"contributing/#pr-summary","title":"PR Summary","text":"<p>You can use <code>--save-baseline</code> and <code>critcmp</code> to get a pretty comparison between two recordings. This is useful to illustrate the improvements of a PR.</p> <pre><code># On main\ncargo bench -p ruff_benchmark -- --save-baseline=main\n\n# After applying your changes\ncargo bench -p ruff_benchmark -- --save-baseline=pr\n\ncritcmp main pr\n</code></pre> <p>You must install <code>critcmp</code> for the comparison.</p> <pre><code>cargo install critcmp\n</code></pre>"},{"location":"contributing/#tips","title":"Tips","text":"<ul> <li>Use <code>cargo bench -p ruff_benchmark &lt;filter&gt;</code> to only run specific benchmarks. For example: <code>cargo bench -p ruff_benchmark lexer</code>     to only run the lexer benchmarks.</li> <li>Use <code>cargo bench -p ruff_benchmark -- --quiet</code> for a more cleaned up output (without statistical relevance)</li> <li>Use <code>cargo bench -p ruff_benchmark -- --quick</code> to get faster results (more prone to noise)</li> </ul>"},{"location":"contributing/#profiling-projects","title":"Profiling Projects","text":"<p>You can either use the microbenchmarks from above or a project directory for benchmarking. There are a lot of profiling tools out there, The Rust Performance Book lists some examples.</p>"},{"location":"contributing/#linux","title":"Linux","text":"<p>Install <code>perf</code> and build <code>ruff_benchmark</code> with the <code>profiling</code> profile and then run it with perf</p> <pre><code>cargo bench -p ruff_benchmark --no-run --profile=profiling &amp;&amp; perf record --call-graph dwarf -F 9999 cargo bench -p ruff_benchmark --profile=profiling -- --profile-time=1\n</code></pre> <p>You can also use the <code>ruff_dev</code> launcher to run <code>ruff check</code> multiple times on a repository to gather enough samples for a good flamegraph (change the 999, the sample rate, and the 30, the number of checks, to your liking)</p> <pre><code>cargo build --bin ruff_dev --profile=profiling\nperf record -g -F 999 target/profiling/ruff_dev repeat --repeat 30 --exit-zero --no-cache path/to/cpython &gt; /dev/null\n</code></pre> <p>Then convert the recorded profile</p> <pre><code>perf script -F +pid &gt; /tmp/test.perf\n</code></pre> <p>You can now view the converted file with firefox profiler, with a more in-depth guide here</p> <p>An alternative is to convert the perf data to <code>flamegraph.svg</code> using flamegraph (<code>cargo install flamegraph</code>):</p> <pre><code>flamegraph --perfdata perf.data --no-inline\n</code></pre>"},{"location":"contributing/#mac","title":"Mac","text":"<p>Install <code>cargo-instruments</code>:</p> <pre><code>cargo install cargo-instruments\n</code></pre> <p>Then run the profiler with</p> <pre><code>cargo instruments -t time --bench linter --profile profiling -p ruff_benchmark -- --profile-time=1\n</code></pre> <ul> <li><code>-t</code>: Specifies what to profile. Useful options are <code>time</code> to profile the wall time and <code>alloc</code>     for profiling the allocations.</li> <li>You may want to pass an additional filter to run a single test file</li> </ul> <p>Otherwise, follow the instructions from the linux section.</p>"},{"location":"contributing/#cargo-dev","title":"<code>cargo dev</code>","text":"<p><code>cargo dev</code> is a shortcut for <code>cargo run --package ruff_dev --bin ruff_dev</code>. You can run some useful utils with it:</p> <ul> <li><code>cargo dev print-ast &lt;file&gt;</code>: Print the AST of a python file using Ruff's     Python parser.     For <code>if True: pass # comment</code>, you can see the syntax tree, the byte offsets for start and     stop of each node and also how the <code>:</code> token, the comment and whitespace are not represented     anymore:</li> </ul> <pre><code>[\n    If(\n        StmtIf {\n            range: 0..13,\n            test: Constant(\n                ExprConstant {\n                    range: 3..7,\n                    value: Bool(\n                        true,\n                    ),\n                    kind: None,\n                },\n            ),\n            body: [\n                Pass(\n                    StmtPass {\n                        range: 9..13,\n                    },\n                ),\n            ],\n            orelse: [],\n        },\n    ),\n]\n</code></pre> <ul> <li><code>cargo dev print-tokens &lt;file&gt;</code>: Print the tokens that the AST is built upon. Again for     <code>if True: pass # comment</code>:</li> </ul> <pre><code>0 If 2\n3 True 7\n7 Colon 8\n9 Pass 13\n14 Comment(\n    \"# comment\",\n) 23\n23 Newline 24\n</code></pre> <ul> <li><code>cargo dev print-cst &lt;file&gt;</code>: Print the CST of a python file using     LibCST, which is used in addition to the RustPython parser     in Ruff. E.g. for <code>if True: pass # comment</code> everything including the whitespace is represented:</li> </ul> <pre><code>Module {\n    body: [\n        Compound(\n            If(\n                If {\n                    test: Name(\n                        Name {\n                            value: \"True\",\n                            lpar: [],\n                            rpar: [],\n                        },\n                    ),\n                    body: SimpleStatementSuite(\n                        SimpleStatementSuite {\n                            body: [\n                                Pass(\n                                    Pass {\n                                        semicolon: None,\n                                    },\n                                ),\n                            ],\n                            leading_whitespace: SimpleWhitespace(\n                                \" \",\n                            ),\n                            trailing_whitespace: TrailingWhitespace {\n                                whitespace: SimpleWhitespace(\n                                    \" \",\n                                ),\n                                comment: Some(\n                                    Comment(\n                                        \"# comment\",\n                                    ),\n                                ),\n                                newline: Newline(\n                                    None,\n                                    Real,\n                                ),\n                            },\n                        },\n                    ),\n                    orelse: None,\n                    leading_lines: [],\n                    whitespace_before_test: SimpleWhitespace(\n                        \" \",\n                    ),\n                    whitespace_after_test: SimpleWhitespace(\n                        \"\",\n                    ),\n                    is_elif: false,\n                },\n            ),\n        ),\n    ],\n    header: [],\n    footer: [],\n    default_indent: \"    \",\n    default_newline: \"\\n\",\n    has_trailing_newline: true,\n    encoding: \"utf-8\",\n}\n</code></pre> <ul> <li><code>cargo dev generate-all</code>: Update <code>ruff.schema.json</code>, <code>docs/configuration.md</code> and <code>docs/rules</code>.     You can also set <code>RUFF_UPDATE_SCHEMA=1</code> to update <code>ruff.schema.json</code> during <code>cargo test</code>.</li> <li><code>cargo dev generate-cli-help</code>, <code>cargo dev generate-docs</code> and <code>cargo dev generate-json-schema</code>:     Update just <code>docs/configuration.md</code>, <code>docs/rules</code> and <code>ruff.schema.json</code> respectively.</li> <li><code>cargo dev generate-options</code>: Generate a markdown-compatible table of all <code>pyproject.toml</code>     options. Used for https://docs.astral.sh/ruff/settings/.</li> <li><code>cargo dev generate-rules-table</code>: Generate a markdown-compatible table of all rules. Used for https://docs.astral.sh/ruff/rules/.</li> <li><code>cargo dev round-trip &lt;python file or jupyter notebook&gt;</code>: Read a Python file or Jupyter Notebook,     parse it, serialize the parsed representation and write it back. Used to check how good our     representation is so that fixes don't rewrite irrelevant parts of a file.</li> <li><code>cargo dev format_dev</code>: See ruff_python_formatter README.md</li> </ul>"},{"location":"contributing/#subsystems","title":"Subsystems","text":""},{"location":"contributing/#compilation-pipeline","title":"Compilation Pipeline","text":"<p>If we view Ruff as a compiler, in which the inputs are paths to Python files and the outputs are diagnostics, then our current compilation pipeline proceeds as follows:</p> <ol> <li> <p>File discovery: Given paths like <code>foo/</code>, locate all Python files in any specified subdirectories, taking into account our hierarchical settings system and any <code>exclude</code> options.</p> </li> <li> <p>Package resolution: Determine the \"package root\" for every file by traversing over its parent directories and looking for <code>__init__.py</code> files.</p> </li> <li> <p>Cache initialization: For every \"package root\", initialize an empty cache.</p> </li> <li> <p>Analysis: For every file, in parallel:</p> <ol> <li> <p>Cache read: If the file is cached (i.e., its modification timestamp hasn't changed since it was last analyzed), short-circuit, and return the cached diagnostics.</p> </li> <li> <p>Tokenization: Run the lexer over the file to generate a token stream.</p> </li> <li> <p>Indexing: Extract metadata from the token stream, such as: comment ranges, <code># noqa</code> locations, <code># isort: off</code> locations, \"doc lines\", etc.</p> </li> <li> <p>Token-based rule evaluation: Run any lint rules that are based on the contents of the token stream (e.g., commented-out code).</p> </li> <li> <p>Filesystem-based rule evaluation: Run any lint rules that are based on the contents of the filesystem (e.g., lack of <code>__init__.py</code> file in a package).</p> </li> <li> <p>Logical line-based rule evaluation: Run any lint rules that are based on logical lines (e.g., stylistic rules).</p> </li> <li> <p>Parsing: Run the parser over the token stream to produce an AST. (This consumes the token stream, so anything that relies on the token stream needs to happen before parsing.)</p> </li> <li> <p>AST-based rule evaluation: Run any lint rules that are based on the AST. This includes the vast majority of lint rules. As part of this step, we also build the semantic model for the current file as we traverse over the AST. Some lint rules are evaluated eagerly, as we iterate over the AST, while others are evaluated in a deferred manner (e.g., unused imports, since we can't determine whether an import is unused until we've finished analyzing the entire file), after we've finished the initial traversal.</p> </li> <li> <p>Import-based rule evaluation: Run any lint rules that are based on the module's imports (e.g., import sorting). These could, in theory, be included in the AST-based rule evaluation phase \u2014 they're just separated for simplicity.</p> </li> <li> <p>Physical line-based rule evaluation: Run any lint rules that are based on physical lines (e.g., line-length).</p> </li> <li> <p>Suppression enforcement: Remove any violations that are suppressed via <code># noqa</code> directives or <code>per-file-ignores</code>.</p> </li> <li> <p>Cache write: Write the generated diagnostics to the package cache using the file as a key.</p> </li> </ol> </li> <li> <p>Reporting: Print diagnostics in the specified format (text, JSON, etc.), to the specified output channel (stdout, a file, etc.).</p> </li> </ol>"},{"location":"contributing/#import-categorization","title":"Import Categorization","text":"<p>To understand Ruff's import categorization system, we first need to define two concepts:</p> <ul> <li>\"Project root\": The directory containing the <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file,     discovered by identifying the \"closest\" such directory for each Python file. (If you're running     via <code>ruff --config /path/to/pyproject.toml</code>, then the current working directory is used as the     \"project root\".)</li> <li>\"Package root\": The top-most directory defining the Python package that includes a given Python     file. To find the package root for a given Python file, traverse up its parent directories until     you reach a parent directory that doesn't contain an <code>__init__.py</code> file (and isn't in a subtree     marked as a namespace package); take the directory     just before that, i.e., the first directory in the package.</li> </ul> <p>For example, given:</p> <pre><code>my_project\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 foo\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 bar\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 baz.py\n</code></pre> <p>Then when analyzing <code>baz.py</code>, the project root would be the top-level directory (<code>./my_project</code>), and the package root would be <code>./my_project/src/foo</code>.</p>"},{"location":"contributing/#project-root","title":"Project root","text":"<p>The project root does not have a significant impact beyond that all relative paths within the loaded configuration file are resolved relative to the project root.</p> <p>For example, to indicate that <code>bar</code> above is a namespace package (it isn't, but let's run with it), the <code>pyproject.toml</code> would list <code>namespace-packages = [\"./src/bar\"]</code>, which would resolve to <code>my_project/src/bar</code>.</p> <p>The same logic applies when providing a configuration file via <code>--config</code>. In that case, the current working directory is used as the project root, and so all paths in that configuration file are resolved relative to the current working directory. (As a general rule, we want to avoid relying on the current working directory as much as possible, to ensure that Ruff exhibits the same behavior regardless of where and how you invoke it \u2014 but that's hard to avoid in this case.)</p> <p>Additionally, if a <code>pyproject.toml</code> file extends another configuration file, Ruff will still use the directory containing that <code>pyproject.toml</code> file as the project root. For example, if <code>./my_project/pyproject.toml</code> contains:</p> <pre><code>[tool.ruff]\nextend = \"/path/to/pyproject.toml\"\n</code></pre> <p>Then Ruff will use <code>./my_project</code> as the project root, even though the configuration file extends <code>/path/to/pyproject.toml</code>. As such, if the configuration file at <code>/path/to/pyproject.toml</code> contains any relative paths, they will be resolved relative to <code>./my_project</code>.</p> <p>If a project uses nested configuration files, then Ruff would detect multiple project roots, one for each configuration file.</p>"},{"location":"contributing/#package-root","title":"Package root","text":"<p>The package root is used to determine a file's \"module path\". Consider, again, <code>baz.py</code>. In that case, <code>./my_project/src/foo</code> was identified as the package root, so the module path for <code>baz.py</code> would resolve to  <code>foo.bar.baz</code> \u2014 as computed by taking the relative path from the package root (inclusive of the root itself). The module path can be thought of as \"the path you would use to import the module\" (e.g., <code>import foo.bar.baz</code>).</p> <p>The package root and module path are used to, e.g., convert relative to absolute imports, and for import categorization, as described below.</p>"},{"location":"contributing/#import-categorization_1","title":"Import categorization","text":"<p>When sorting and formatting import blocks, Ruff categorizes every import into one of five categories:</p> <ol> <li>\"Future\": the import is a <code>__future__</code> import. That's easy: just look at the name of the     imported module!</li> <li>\"Standard library\": the import comes from the Python standard library (e.g., <code>import os</code>).     This is easy too: we include a list of all known standard library modules in Ruff itself, so it's     a simple lookup.</li> <li>\"Local folder\": the import is a relative import (e.g., <code>from .foo import bar</code>). This is easy     too: just check if the import includes a <code>level</code> (i.e., a dot-prefix).</li> <li>\"First party\": the import is part of the current project. (More on this below.)</li> <li>\"Third party\": everything else.</li> </ol> <p>The real challenge lies in determining whether an import is first-party \u2014 everything else is either trivial, or (as in the case of third-party) merely defined as \"not first-party\".</p> <p>There are three ways in which an import can be categorized as \"first-party\":</p> <ol> <li>Explicit settings: the import is marked as such via the <code>known-first-party</code> setting. (This     should generally be seen as an escape hatch.)</li> <li>Same-package: the imported module is in the same package as the current file. This gets back     to the importance of the \"package root\" and the file's \"module path\". Imagine that we're     analyzing <code>baz.py</code> above. If <code>baz.py</code> contains any imports that appear to come from the <code>foo</code>     package (e.g., <code>from foo import bar</code> or <code>import foo.bar</code>), they'll be classified as first-party     automatically. This check is as simple as comparing the first segment of the current file's     module path to the first segment of the import.</li> <li>Source roots: Ruff supports a <code>src</code> setting, which     sets the directories to scan when identifying first-party imports. The algorithm is     straightforward: given an import, like <code>import foo</code>, iterate over the directories enumerated in     the <code>src</code> setting and, for each directory, check for the existence of a subdirectory <code>foo</code> or a     file <code>foo.py</code>.</li> </ol> <p>By default, <code>src</code> is set to the project root, along with <code>\"src\"</code> subdirectory in the project root. This ensures that Ruff supports both flat and \"src\" layouts out of the box.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#is-the-ruff-linter-compatible-with-black","title":"Is the Ruff linter compatible with Black?","text":"<p>Yes. The Ruff linter is compatible with Black out-of-the-box, as long as the <code>line-length</code> setting is consistent between the two.</p> <p>Ruff is designed to be used alongside a formatter (like Ruff's own formatter, or Black) and, as such, will defer implementing stylistic rules that are obviated by automated formatting.</p> <p>Note that Ruff's linter and Black treat line-length enforcement a little differently. Black, like Ruff's formatter, makes a best-effort attempt to adhere to the <code>line-length</code>, but avoids automatic line-wrapping in some cases (e.g., within comments). Ruff, on the other hand, will flag <code>line-too-long</code> (<code>E501</code>) for any line that exceeds the <code>line-length</code> setting. As such, if <code>line-too-long</code> (<code>E501</code>) is enabled, Ruff can still trigger line-length violations even when Black or <code>ruff format</code> is enabled.</p>"},{"location":"faq/#how-does-ruffs-formatter-compare-to-black","title":"How does Ruff's formatter compare to Black?","text":"<p>The Ruff formatter is designed to be a drop-in replacement for Black.</p> <p>Specifically, the formatter is intended to emit near-identical output when run over Black-formatted code. When run over extensive Black-formatted projects like Django and Zulip, &gt; 99.9% of lines are formatted identically. When migrating an existing project from Black to Ruff, you should expect to see a few differences on the margins, but the vast majority of your code should be unchanged.</p> <p>When run over non-Black-formatted code, the formatter makes some different decisions than Black, and so more deviations should be expected, especially around the treatment of end-of-line comments.</p> <p>See Black compatibility for more.</p>"},{"location":"faq/#how-does-ruffs-linter-compare-to-flake8","title":"How does Ruff's linter compare to Flake8?","text":"<p>Ruff can be used as a drop-in replacement for Flake8 when used (1) without or with a small number of plugins, (2) alongside Black, and (3) on Python 3 code.</p> <p>Under those conditions, Ruff implements every rule in Flake8. In practice, that means Ruff implements all of the <code>F</code> rules (which originate from Pyflakes), along with a subset of the <code>E</code> and <code>W</code> rules (which originate from pycodestyle).</p> <p>Ruff also re-implements some of the most popular Flake8 plugins and related code quality tools natively, including:</p> <ul> <li>autoflake</li> <li>eradicate</li> <li>flake8-2020</li> <li>flake8-annotations</li> <li>flake8-async</li> <li>flake8-bandit (#1646)</li> <li>flake8-blind-except</li> <li>flake8-boolean-trap</li> <li>flake8-bugbear</li> <li>flake8-builtins</li> <li>flake8-commas</li> <li>flake8-comprehensions</li> <li>flake8-copyright</li> <li>flake8-datetimez</li> <li>flake8-debugger</li> <li>flake8-django</li> <li>flake8-docstrings</li> <li>flake8-eradicate</li> <li>flake8-errmsg</li> <li>flake8-executable</li> <li>flake8-gettext</li> <li>flake8-implicit-str-concat</li> <li>flake8-import-conventions</li> <li>flake8-logging</li> <li>flake8-logging-format</li> <li>flake8-no-pep420</li> <li>flake8-pie</li> <li>flake8-print</li> <li>flake8-pyi</li> <li>flake8-pytest-style</li> <li>flake8-quotes</li> <li>flake8-raise</li> <li>flake8-return</li> <li>flake8-self</li> <li>flake8-simplify</li> <li>flake8-slots</li> <li>flake8-super</li> <li>flake8-tidy-imports</li> <li>flake8-todos</li> <li>flake8-type-checking</li> <li>flake8-use-pathlib</li> <li>flynt (#2102)</li> <li>isort</li> <li>mccabe</li> <li>pandas-vet</li> <li>pep8-naming</li> <li>perflint (#4789)</li> <li>pydocstyle</li> <li>pygrep-hooks</li> <li>pyupgrade</li> <li>tryceratops</li> <li>yesqa</li> </ul> <p>Note that, in some cases, Ruff uses different rule codes and prefixes than would be found in the originating Flake8 plugins. For example, Ruff uses <code>TID252</code> to represent the <code>I252</code> rule from flake8-tidy-imports. This helps minimize conflicts across plugins and allows any individual plugin to be toggled on or off with a single (e.g.) <code>--select TID</code>, as opposed to <code>--select I2</code> (to avoid conflicts with the isort rules, like <code>I001</code>).</p> <p>Beyond the rule set, Ruff's primary limitation vis-\u00e0-vis Flake8 is that it does not support custom lint rules. (Instead, popular Flake8 plugins are re-implemented in Rust as part of Ruff itself.) One minor difference is that Ruff doesn't include all the 'opinionated' rules from flake8-bugbear.</p>"},{"location":"faq/#how-does-ruffs-linter-compare-to-pylint","title":"How does Ruff's linter compare to Pylint?","text":"<p>At time of writing, Pylint implements ~409 total rules, while Ruff implements over 800, of which at least 209 overlap with the Pylint rule set (see: #970).</p> <p>Pylint implements many rules that Ruff does not, and vice versa. For example, Pylint does more type inference than Ruff (e.g., Pylint can validate the number of arguments in a function call). As such, Ruff is not a \"pure\" drop-in replacement for Pylint (and vice versa), as they enforce different sets of rules.</p> <p>Despite these differences, many users have successfully switched from Pylint to Ruff, especially those using Ruff alongside a type checker, which can cover some of the functionality that Pylint provides.</p> <p>Like Flake8, Pylint supports plugins (called \"checkers\"), while Ruff implements all rules natively and does not support custom or third-party rules. Unlike Pylint, Ruff is capable of automatically fixing its own lint violations.</p> <p>In some cases, Ruff's rules may yield slightly different results than their Pylint counterparts. For example, Ruff's <code>too-many-branches</code> does not count <code>try</code> blocks as their own branches, unlike Pylint's <code>R0912</code>. Ruff's <code>PL</code> rule group also includes a small number of rules from Pylint extensions (like <code>magic-value-comparison</code>), which need to be explicitly activated when using Pylint. By enabling Ruff's <code>PL</code> group, you may see violations for rules that weren't previously enabled through your Pylint configuration.</p> <p>Pylint parity is being tracked in #970.</p>"},{"location":"faq/#how-does-ruff-compare-to-mypy-or-pyright-or-pyre","title":"How does Ruff compare to Mypy, or Pyright, or Pyre?","text":"<p>Ruff is a linter, not a type checker. It can detect some of the same problems that a type checker can, but a type checker will catch certain errors that Ruff would miss. The opposite is also true: Ruff will catch certain errors that a type checker would typically ignore.</p> <p>For example, unlike a type checker, Ruff will notify you if an import is unused, by looking for references to that import in the source code; on the other hand, a type checker could flag that you passed an integer argument to a function that expects a string, which Ruff would miss. The tools are complementary.</p> <p>It's recommended that you use Ruff in conjunction with a type checker, like Mypy, Pyright, or Pyre, with Ruff providing faster feedback on lint violations and the type checker providing more detailed feedback on type errors.</p>"},{"location":"faq/#which-tools-does-ruff-replace","title":"Which tools does Ruff replace?","text":"<p>Today, Ruff can be used to replace Flake8 when used with any of the following plugins:</p> <ul> <li>flake8-2020</li> <li>flake8-annotations</li> <li>flake8-async</li> <li>flake8-bandit (#1646)</li> <li>flake8-blind-except</li> <li>flake8-boolean-trap</li> <li>flake8-bugbear</li> <li>flake8-builtins</li> <li>flake8-commas</li> <li>flake8-comprehensions</li> <li>flake8-copyright</li> <li>flake8-datetimez</li> <li>flake8-debugger</li> <li>flake8-django</li> <li>flake8-docstrings</li> <li>flake8-eradicate</li> <li>flake8-errmsg</li> <li>flake8-executable</li> <li>flake8-gettext</li> <li>flake8-implicit-str-concat</li> <li>flake8-import-conventions</li> <li>flake8-logging</li> <li>flake8-logging-format</li> <li>flake8-no-pep420</li> <li>flake8-pie</li> <li>flake8-print</li> <li>flake8-pytest-style</li> <li>flake8-quotes</li> <li>flake8-raise</li> <li>flake8-return</li> <li>flake8-self</li> <li>flake8-simplify</li> <li>flake8-slots</li> <li>flake8-super</li> <li>flake8-tidy-imports</li> <li>flake8-todos</li> <li>flake8-type-checking</li> <li>flake8-use-pathlib</li> <li>flynt (#2102)</li> <li>mccabe</li> <li>pandas-vet</li> <li>pep8-naming</li> <li>perflint (#4789)</li> <li>pydocstyle</li> <li>tryceratops</li> </ul> <p>Ruff can also replace Black, isort, yesqa, eradicate, and most of the rules implemented in pyupgrade.</p> <p>If you're looking to use Ruff, but rely on an unsupported Flake8 plugin, feel free to file an issue.</p>"},{"location":"faq/#do-i-have-to-use-ruffs-linter-and-formatter-together","title":"Do I have to use Ruff's linter and formatter together?","text":"<p>Nope! Ruff's linter and formatter can be used independently of one another -- you can use Ruff as a formatter, but not a linter, or vice versa.</p>"},{"location":"faq/#what-versions-of-python-does-ruff-support","title":"What versions of Python does Ruff support?","text":"<p>Ruff can lint code for any Python version from 3.7 onwards, including Python 3.13.</p> <p>Ruff does not support Python 2. Ruff may run on pre-Python 3.7 code, although such versions are not officially supported (e.g., Ruff does not respect type comments).</p> <p>Ruff is installable under any Python version from 3.7 onwards.</p>"},{"location":"faq/#do-i-need-to-install-rust-to-use-ruff","title":"Do I need to install Rust to use Ruff?","text":"<p>Nope! Ruff is available as <code>ruff</code> on PyPI:</p> <pre><code>$ pip install ruff\n</code></pre> <p>Ruff ships with wheels for all major platforms, which enables <code>pip</code> to install Ruff without relying on Rust at all.</p>"},{"location":"faq/#can-i-write-my-own-linter-plugins-for-ruff","title":"Can I write my own linter plugins for Ruff?","text":"<p>Ruff does not yet support third-party plugins, though a plugin system is within-scope for the project. See #283 for more.</p>"},{"location":"faq/#how-does-ruffs-import-sorting-compare-to-isort","title":"How does Ruff's import sorting compare to isort?","text":"<p>Ruff's import sorting is intended to be near-equivalent to isort's when using isort's <code>profile = \"black\"</code>.</p> <p>There are a few known differences in how Ruff and isort treat aliased imports, and in how Ruff and isort treat inline comments in some cases (see: #1381, #2104).</p> <p>For example, Ruff tends to group non-aliased imports from the same module:</p> <pre><code>from numpy import cos, int8, int16, int32, int64, tan, uint8, uint16, uint32, uint64\nfrom numpy import sin as np_sin\n</code></pre> <p>Whereas isort splits them into separate import statements at each aliased boundary:</p> <pre><code>from numpy import cos, int8, int16, int32, int64\nfrom numpy import sin as np_sin\nfrom numpy import tan, uint8, uint16, uint32, uint64\n</code></pre> <p>Ruff also correctly classifies some modules as standard-library that aren't recognized by isort, like <code>_string</code> and <code>idlelib</code>.</p> <p>Like isort, Ruff's import sorting is compatible with Black.</p>"},{"location":"faq/#how-does-ruff-determine-which-of-my-imports-are-first-party-third-party-etc","title":"How does Ruff determine which of my imports are first-party, third-party, etc.?","text":"<p>Ruff accepts a <code>src</code> option that in your <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file, specifies the directories that Ruff should consider when determining whether an import is first-party.</p> <p>For example, if you have a project with the following structure:</p> <pre><code>my_project\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 foo\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 bar\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 baz.py\n</code></pre> <p>When Ruff sees an import like <code>import foo</code>, it will then iterate over the <code>src</code> directories, looking for a corresponding Python module (in reality, a directory named <code>foo</code> or a file named <code>foo.py</code>).</p> <p>If the <code>src</code> field is omitted, Ruff will default to using the \"project root\", along with a <code>\"src\"</code> subdirectory, as the first-party sources, to support both flat and nested project layouts. The \"project root\" is typically the directory containing your <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file, unless a configuration file is provided on the command-line via the <code>--config</code> option, in which case, the current working directory is used as the project root.</p> <p>In this case, Ruff would check the <code>\"src\"</code> directory by default, but we can configure it as an explicit, exclusive first-party source like so:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Ruff supports a top-level `src` option in lieu of isort's `src_paths` setting.\n# All paths are relative to the project root, which is the directory containing the pyproject.toml.\nsrc = [\"src\"]\n</code></pre> <pre><code># Ruff supports a top-level `src` option in lieu of isort's `src_paths` setting.\n# All paths are relative to the project root, which is the directory containing the pyproject.toml.\nsrc = [\"src\"]\n</code></pre> <p>If your <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> extends another configuration file, Ruff will still use the directory containing your <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file as the project root (as opposed to the directory of the file pointed to via the <code>extends</code> option).</p> <p>For example, if you add a configuration file to the <code>tests</code> directory in the above example, you'll want to explicitly set the <code>src</code> option in the extended configuration file:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nextend = \"../pyproject.toml\"\nsrc = [\"../src\"]\n</code></pre> <pre><code>extend = \"../pyproject.toml\"\nsrc = [\"../src\"]\n</code></pre> <p>Beyond this <code>src</code>-based detection, Ruff will also attempt to determine the current Python package for a given Python file, and mark imports from within the same package as first-party. For example, above, <code>baz.py</code> would be identified as part of the Python package beginning at <code>./my_project/src/foo</code>, and so any imports in <code>baz.py</code> that begin with <code>foo</code> (like <code>import foo.bar</code>) would be considered first-party based on this same-package heuristic.</p> <p>For a detailed explanation of <code>src</code> resolution, see the contributing guide.</p> <p>Ruff can also be configured to treat certain modules as (e.g.) always first-party, regardless of their location on the filesystem. For example, you can set <code>known-first-party</code> like so:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nsrc = [\"src\", \"tests\"]\n[tool.ruff.lint]\nselect = [\n# Pyflakes\n\"F\",\n# Pycodestyle\n\"E\",\n\"W\",\n# isort\n\"I001\"\n]\n[tool.ruff.lint.isort]\nknown-first-party = [\"my_module1\", \"my_module2\"]\n</code></pre> <pre><code>src = [\"src\", \"tests\"]\n[lint]\nselect = [\n# Pyflakes\n\"F\",\n# Pycodestyle\n\"E\",\n\"W\",\n# isort\n\"I001\"\n]\n[lint.isort]\nknown-first-party = [\"my_module1\", \"my_module2\"]\n</code></pre> <p>Ruff does not yet support all of isort's configuration options, though it does support many of them. You can find the supported settings in the API reference.</p>"},{"location":"faq/#does-ruff-support-jupyter-notebooks","title":"Does Ruff support Jupyter Notebooks?","text":"<p>Ruff has built-in support for linting and formatting Jupyter Notebooks. Refer to the Jupyter Notebook section for more details.</p> <p>Ruff also integrates with nbQA, a tool for running linters and code formatters over Jupyter Notebooks.</p> <p>After installing <code>ruff</code> and <code>nbqa</code>, you can run Ruff over a notebook like so:</p> <pre><code>$ nbqa ruff Untitled.ipynb\nUntitled.ipynb:cell_1:2:5: F841 Local variable `x` is assigned to but never used\nUntitled.ipynb:cell_2:1:1: E402 Module level import not at top of file\nUntitled.ipynb:cell_2:1:8: F401 `os` imported but unused\nFound 3 errors.\n1 potentially fixable with the --fix option.\n</code></pre>"},{"location":"faq/#does-ruff-support-numpy-or-google-style-docstrings","title":"Does Ruff support NumPy- or Google-style docstrings?","text":"<p>Yes! To enforce a docstring convention, add a <code>convention</code> setting following to your configuration file:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pydocstyle]\nconvention = \"google\"  # Accepts: \"google\", \"numpy\", or \"pep257\".\n</code></pre> <pre><code>[lint.pydocstyle]\nconvention = \"google\"  # Accepts: \"google\", \"numpy\", or \"pep257\".\n</code></pre> <p>For example, if you're coming from flake8-docstrings, and your originating configuration uses <code>--docstring-convention=numpy</code>, you'd instead set <code>convention = \"numpy\"</code> in your <code>pyproject.toml</code>, as above.</p> <p>Alongside <code>convention</code>, you'll want to explicitly enable the <code>D</code> rule code prefix, since the <code>D</code> rules are not enabled by default:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nselect = [\"D\"]\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <pre><code>[lint]\nselect = [\"D\"]\n[lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>Enabling a <code>convention</code> will disable any rules that are not included in the specified convention. As such, the intended workflow is to enable a convention and then selectively enable or disable any additional rules on top of it:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nselect = [\n\"D\",\n# Augment the convention by requiring an imperative mood for all docstrings.\n\"D401\",\n]\nignore = [\n# Relax the convention by _not_ requiring documentation for every function parameter.\n\"D417\",\n]\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <pre><code>[lint]\nselect = [\n\"D\",\n# Augment the convention by requiring an imperative mood for all docstrings.\n\"D401\",\n]\nignore = [\n# Relax the convention by _not_ requiring documentation for every function parameter.\n\"D417\",\n]\n[lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>The PEP 257 convention includes all <code>D</code> errors apart from: <code>D203</code>, <code>D212</code>, <code>D213</code>, <code>D214</code>, <code>D215</code>, <code>D404</code>, <code>D405</code>, <code>D406</code>, <code>D407</code>, <code>D408</code>, <code>D409</code>, <code>D410</code>, <code>D411</code>, <code>D413</code>, <code>D415</code>, <code>D416</code>, and <code>D417</code>.</p> <p>The NumPy convention includes all <code>D</code> errors apart from: <code>D107</code>, <code>D203</code>, <code>D212</code>, <code>D213</code>, <code>D402</code>, <code>D413</code>, <code>D415</code>, <code>D416</code>, and <code>D417</code>.</p> <p>The Google convention includes all <code>D</code> errors apart from: <code>D203</code>, <code>D204</code>, <code>D213</code>, <code>D215</code>, <code>D400</code>, <code>D401</code>, <code>D404</code>, <code>D406</code>, <code>D407</code>, <code>D408</code>, <code>D409</code>, and <code>D413</code>.</p> <p>By default, no <code>convention</code> is set, and so the enabled rules are determined by the <code>select</code> setting alone.</p>"},{"location":"faq/#what-is-preview","title":"What is \"preview\"?","text":"<p>Preview enables a collection of newer rules and fixes that are considered experimental or unstable. See the preview documentation for more details; or, to see which rules are currently in preview, visit the rules reference.</p>"},{"location":"faq/#how-can-i-tell-what-settings-ruff-is-using-to-check-my-code","title":"How can I tell what settings Ruff is using to check my code?","text":"<p>Run <code>ruff check /path/to/code.py --show-settings</code> to view the resolved settings for a given file.</p>"},{"location":"faq/#i-want-to-use-ruff-but-i-dont-want-to-use-pyprojecttoml-what-are-my-options","title":"I want to use Ruff, but I don't want to use <code>pyproject.toml</code>. What are my options?","text":"<p>In lieu of a <code>pyproject.toml</code> file, you can use a <code>ruff.toml</code> file for configuration. The two files are functionally equivalent and have an identical schema, with the exception that a <code>ruff.toml</code> file can omit the <code>[tool.ruff]</code> section header. For example:</p> pyproject.toml <pre><code>[tool.ruff]\nline-length = 88\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> ruff.toml <pre><code>line-length = 88\n[lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>Ruff doesn't currently support INI files, like <code>setup.cfg</code> or <code>tox.ini</code>.</p>"},{"location":"faq/#how-can-i-change-ruffs-default-configuration","title":"How can I change Ruff's default configuration?","text":"<p>When no configuration file is found, Ruff will look for a user-specific <code>ruff.toml</code> file as a last resort. This behavior is similar to Flake8's <code>~/.config/flake8</code>.</p> <p>On macOS and Linux, Ruff expects that file to be located at <code>~/.config/ruff/ruff.toml</code>, and respects the <code>XDG_CONFIG_HOME</code> specification.</p> <p>On Windows, Ruff expects that file to be located at <code>~\\AppData\\Roaming\\ruff\\ruff.toml</code>.</p> <p>Note</p> <p>Prior to <code>v0.5.0</code>, Ruff would read user-specific configuration from <code>~/Library/Application Support/ruff/ruff.toml</code> on macOS. While Ruff will still respect such configuration files, the use of <code>~/Library/Application Support</code> is considered deprecated.</p> <p>For more, see the <code>etcetera</code> crate.</p>"},{"location":"faq/#ruff-tried-to-fix-something-but-it-broke-my-code-whats-going-on","title":"Ruff tried to fix something \u2014 but it broke my code. What's going on?","text":"<p>Ruff labels fixes as \"safe\" and \"unsafe\". By default, Ruff will fix all violations for which safe fixes are available, while unsafe fixes can be enabled via the <code>unsafe-fixes</code> setting, or passing the <code>--unsafe-fixes</code> flag to <code>ruff check</code>. For more, see the fix documentation.</p> <p>Even still, given the dynamic nature of Python, it's difficult to have complete certainty when making changes to code, even for seemingly trivial fixes. If a \"safe\" fix breaks your code, please file an Issue.</p>"},{"location":"faq/#how-can-i-disableforce-ruffs-color-output","title":"How can I disable/force Ruff's color output?","text":"<p>Ruff's color output is powered by the <code>colored</code> crate, which attempts to automatically detect whether the output stream supports color. However, you can force colors off by setting the <code>NO_COLOR</code> environment variable to any value (e.g., <code>NO_COLOR=1</code>), or force colors on by setting <code>FORCE_COLOR</code> to any non-empty value (e.g. <code>FORCE_COLOR=1</code>).</p> <p><code>colored</code> also supports the <code>CLICOLOR</code> and <code>CLICOLOR_FORCE</code> environment variables (see the spec).</p>"},{"location":"formatter/","title":"The Ruff Formatter","text":"<p>The Ruff formatter is an extremely fast Python code formatter designed as a drop-in replacement for Black, available as part of the <code>ruff</code> CLI via <code>ruff format</code>.</p> <p>The Ruff formatter is available as of Ruff v0.1.2.</p>"},{"location":"formatter/#ruff-format","title":"<code>ruff format</code>","text":"<p><code>ruff format</code> is the primary entrypoint to the formatter. It accepts a list of files or directories, and formats all discovered Python files:</p> <pre><code>ruff format                   # Format all files in the current directory.\nruff format path/to/code/     # Format all files in `path/to/code` (and any subdirectories).\nruff format path/to/file.py   # Format a single file.\n</code></pre> <p>Similar to Black, running <code>ruff format /path/to/file.py</code> will format the given file or directory in-place, while <code>ruff format --check /path/to/file.py</code> will avoid writing any formatted files back, and instead exit with a non-zero status code upon detecting any unformatted files.</p> <p>For the full list of supported options, run <code>ruff format --help</code>.</p> <p>Note</p> <p>As of Ruff v0.1.7 the <code>ruff format</code> command uses the current working directory (<code>.</code>) as the default path to format. See the file discovery documentation for details.</p>"},{"location":"formatter/#philosophy","title":"Philosophy","text":"<p>The initial goal of the Ruff formatter is not to innovate on code style, but rather, to innovate on performance, and provide a unified toolchain across Ruff's linter, formatter, and any and all future tools.</p> <p>As such, the formatter is designed as a drop-in replacement for Black, but with an excessive focus on performance and direct integration with Ruff. Given Black's popularity within the Python ecosystem, targeting Black compatibility ensures that formatter adoption is minimally disruptive for the vast majority of projects.</p> <p>Specifically, the formatter is intended to emit near-identical output when run over existing Black-formatted code. When run over extensive Black-formatted projects like Django and Zulip, &gt; 99.9% of lines are formatted identically. (See: Black compatibility.)</p> <p>Given this focus on Black compatibility, the formatter thus adheres to Black's (stable) code style, which aims for \"consistency, generality, readability and reducing git diffs\". To give you a sense for the enforced code style, here's an example:</p> <pre><code># Input\ndef _make_ssl_transport(\nrawsock, protocol, sslcontext, waiter=None,\n*, server_side=False, server_hostname=None,\nextra=None, server=None,\nssl_handshake_timeout=None,\ncall_connection_made=True):\n'''Make an SSL transport.'''\nif waiter is None:\nwaiter = Future(loop=loop)\nif extra is None:\nextra = {}\n...\n# Ruff\ndef _make_ssl_transport(\nrawsock,\nprotocol,\nsslcontext,\nwaiter=None,\n*,\nserver_side=False,\nserver_hostname=None,\nextra=None,\nserver=None,\nssl_handshake_timeout=None,\ncall_connection_made=True,\n):\n\"\"\"Make an SSL transport.\"\"\"\nif waiter is None:\nwaiter = Future(loop=loop)\nif extra is None:\nextra = {}\n...\n</code></pre> <p>Like Black, the Ruff formatter does not support extensive code style configuration; however, unlike Black, it does support configuring the desired quote style, indent style, line endings, and more. (See: Configuration.)</p> <p>While the formatter is designed to be a drop-in replacement for Black, it is not intended to be used interchangeably with Black on an ongoing basis, as the formatter does differ from Black in a few conscious ways (see: Known deviations). In general, deviations are limited to cases in which Ruff's behavior was deemed more consistent, or significantly simpler to support (with negligible end-user impact) given the differences in the underlying implementations between Black and Ruff.</p> <p>Going forward, the Ruff Formatter will support Black's preview style under Ruff's own preview mode.</p>"},{"location":"formatter/#configuration","title":"Configuration","text":"<p>The Ruff Formatter exposes a small set of configuration options, some of which are also supported by Black (like line width), some of which are unique to Ruff (like quote, indentation style and formatting code examples in docstrings).</p> <p>For example, to configure the formatter to use single quotes, format code examples in docstrings, a line width of 100, and tab indentation, add the following to your configuration file:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nline-length = 100\n[tool.ruff.format]\nquote-style = \"single\"\nindent-style = \"tab\"\ndocstring-code-format = true\n</code></pre> <pre><code>line-length = 100\n[format]\nquote-style = \"single\"\nindent-style = \"tab\"\ndocstring-code-format = true\n</code></pre> <p>For the full list of supported settings, see Settings. For more on configuring Ruff via <code>pyproject.toml</code>, see Configuring Ruff.</p> <p>Given the focus on Black compatibility (and unlike formatters like YAPF), Ruff does not currently expose any other configuration options.</p>"},{"location":"formatter/#docstring-formatting","title":"Docstring formatting","text":"<p>The Ruff formatter provides an opt-in feature for automatically formatting Python code examples in docstrings. The Ruff formatter currently recognizes code examples in the following formats:</p> <ul> <li>The Python doctest format.</li> <li>CommonMark fenced code blocks with the following info strings: <code>python</code>, <code>py</code>, <code>python3</code>, or <code>py3</code>. Fenced code blocks without an info string are assumed to be Python code examples and also formatted.</li> <li>reStructuredText literal blocks. While literal blocks may contain things other than Python, this is meant to reflect a long-standing convention in the Python ecosystem where literal blocks often contain Python code.</li> <li>reStructuredText [<code>code-block</code> and <code>sourcecode</code> directives]. As with Markdown, the language names recognized for Python are <code>python</code>, <code>py</code>, <code>python3</code>, or <code>py3</code>.</li> </ul> <p>If a code example is recognized and treated as Python, the Ruff formatter will automatically skip it if the code does not parse as valid Python or if the reformatted code would produce an invalid Python program.</p> <p>Users may also configure the line length limit used for reformatting Python code examples in docstrings. The default is a special value, <code>dynamic</code>, which instructs the formatter to respect the line length limit setting for the surrounding Python code. The <code>dynamic</code> setting ensures that even when code examples are found inside indented docstrings, the line length limit configured for the surrounding Python code will not be exceeded. Users may also configure a fixed line length limit for code examples in docstrings.</p> <p>For example, this configuration shows how to enable docstring code formatting with a fixed line length limit:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\ndocstring-code-format = true\ndocstring-code-line-length = 20\n</code></pre> <pre><code>[format]\ndocstring-code-format = true\ndocstring-code-line-length = 20\n</code></pre> <p>With the above configuration, this code:</p> <pre><code>def f(x):\n'''\n    Something about `f`. And an example:\n    .. code-block:: python\n        foo, bar, quux = this_is_a_long_line(lion, hippo, lemur, bear)\n    '''\npass\n</code></pre> <p>... will be reformatted (assuming the rest of the options are set to their defaults) as:</p> <pre><code>def f(x):\n\"\"\"\n    Something about `f`. And an example:\n    .. code-block:: python\n        (\n            foo,\n            bar,\n            quux,\n        ) = this_is_a_long_line(\n            lion,\n            hippo,\n            lemur,\n            bear,\n        )\n    \"\"\"\npass\n</code></pre>"},{"location":"formatter/#format-suppression","title":"Format suppression","text":"<p>Like Black, Ruff supports <code># fmt: on</code>, <code># fmt: off</code>, and <code># fmt: skip</code> pragma comments, which can be used to temporarily disable formatting for a given code block.</p> <p><code># fmt: on</code> and <code># fmt: off</code> comments are enforced at the statement level:</p> <pre><code># fmt: off\nnot_formatted=3\nalso_not_formatted=4\n# fmt: on\n</code></pre> <p>As such, adding <code># fmt: on</code> and <code># fmt: off</code> comments within expressions will have no effect. In the following example, both list entries will be formatted, despite the <code># fmt: off</code>:</p> <pre><code>[\n# fmt: off\n'1',\n# fmt: on\n'2',\n]\n</code></pre> <p>Instead, apply the <code># fmt: off</code> comment to the entire statement:</p> <pre><code># fmt: off\n[\n'1',\n'2',\n]\n# fmt: on\n</code></pre> <p>Like Black, Ruff will also recognize YAPF's <code># yapf: disable</code> and <code># yapf: enable</code> pragma comments, which are treated equivalently to <code># fmt: off</code> and <code># fmt: on</code>, respectively.</p> <p><code># fmt: skip</code> comments suppress formatting for a preceding statement, case header, decorator, function definition, or class definition:</p> <pre><code>if True:\npass\nelif False: # fmt: skip\npass\n@Test\n@Test2 # fmt: skip\ndef test(): ...\na = [1, 2, 3, 4, 5] # fmt: skip\ndef test(a, b, c, d, e, f) -&gt; int: # fmt: skip\npass\n</code></pre> <p>As such, adding an <code># fmt: skip</code> comment at the end of an expression will have no effect. In the following example, the list entry <code>'1'</code> will be formatted, despite the <code># fmt: skip</code>:</p> <pre><code>a = call(\n[\n'1',  # fmt: skip\n'2',\n],\nb\n)\n</code></pre> <p>Instead, apply the <code># fmt: skip</code> comment to the entire statement:</p> <pre><code>a = call(\n[\n'1',\n'2',\n],\nb\n)  # fmt: skip\n</code></pre>"},{"location":"formatter/#conflicting-lint-rules","title":"Conflicting lint rules","text":"<p>Ruff's formatter is designed to be used alongside the linter. However, the linter includes some rules that, when enabled, can cause conflicts with the formatter, leading to unexpected behavior. When configured appropriately, the goal of Ruff's formatter-linter compatibility is such that running the formatter should never introduce new lint errors.</p> <p>When using Ruff as a formatter, we recommend avoiding the following lint rules:</p> <ul> <li><code>tab-indentation</code> (<code>W191</code>)</li> <li><code>indentation-with-invalid-multiple</code> (<code>E111</code>)</li> <li><code>indentation-with-invalid-multiple-comment</code> (<code>E114</code>)</li> <li><code>over-indented</code> (<code>E117</code>)</li> <li><code>indent-with-spaces</code> (<code>D206</code>)</li> <li><code>triple-single-quotes</code> (<code>D300</code>)</li> <li><code>bad-quotes-inline-string</code> (<code>Q000</code>)</li> <li><code>bad-quotes-multiline-string</code> (<code>Q001</code>)</li> <li><code>bad-quotes-docstring</code> (<code>Q002</code>)</li> <li><code>avoidable-escaped-quote</code> (<code>Q003</code>)</li> <li><code>missing-trailing-comma</code> (<code>COM812</code>)</li> <li><code>prohibited-trailing-comma</code> (<code>COM819</code>)</li> <li><code>single-line-implicit-string-concatenation</code> (<code>ISC001</code>)</li> <li><code>multi-line-implicit-string-concatenation</code> (<code>ISC002</code>)</li> </ul> <p>While the <code>line-too-long</code> (<code>E501</code>) rule can be used alongside the formatter, the formatter only makes a best-effort attempt to wrap lines at the configured <code>line-length</code>. As such, formatted code may exceed the line length, leading to <code>line-too-long</code> (<code>E501</code>) errors.</p> <p>None of the above are included in Ruff's default configuration. However, if you've enabled any of these rules or their parent categories (like <code>Q</code>), we recommend disabling them via the linter's <code>lint.ignore</code> setting.</p> <p>Similarly, we recommend avoiding the following isort settings, which are incompatible with the formatter's treatment of import statements when set to non-default values:</p> <ul> <li><code>force-single-line</code></li> <li><code>force-wrap-aliases</code></li> <li><code>lines-after-imports</code></li> <li><code>lines-between-types</code></li> <li><code>split-on-trailing-comma</code></li> </ul> <p>If you've configured any of these settings to take on non-default values, we recommend removing them from your Ruff configuration.</p> <p>When an incompatible lint rule or setting is enabled, <code>ruff format</code> will emit a warning. If your <code>ruff format</code> is free of warnings, you're good to go!</p>"},{"location":"formatter/#exit-codes","title":"Exit codes","text":"<p><code>ruff format</code> exits with the following status codes:</p> <ul> <li><code>0</code> if Ruff terminates successfully, regardless of whether any files were formatted.</li> <li><code>2</code> if Ruff terminates abnormally due to invalid configuration, invalid CLI options, or an     internal error.</li> </ul> <p>Meanwhile, <code>ruff format --check</code> exits with the following status codes:</p> <ul> <li><code>0</code> if Ruff terminates successfully, and no files would be formatted if <code>--check</code> were not     specified.</li> <li><code>1</code> if Ruff terminates successfully, and one or more files would be formatted if <code>--check</code> were     not specified.</li> <li><code>2</code> if Ruff terminates abnormally due to invalid configuration, invalid CLI options, or an     internal error.</li> </ul>"},{"location":"formatter/#black-compatibility","title":"Black compatibility","text":"<p>The formatter is designed to be a drop-in replacement for Black.</p> <p>Specifically, the formatter is intended to emit near-identical output when run over Black-formatted code. When run over extensive Black-formatted projects like Django and Zulip, &gt; 99.9% of lines are formatted identically. When migrating an existing project from Black to Ruff, you should expect to see a few differences on the margins, but the vast majority of your code should be unchanged.</p> <p>When run over non-Black-formatted code, the formatter makes some different decisions than Black, and so more deviations should be expected, especially around the treatment of end-of-line comments.</p> <p>If you identify deviations in your project, spot-check them against the known deviations, as well as the unintentional deviations filed in the issue tracker. If you've identified a new deviation, please file an issue.</p>"},{"location":"formatter/#intentional-deviations","title":"Intentional deviations","text":"<p>While the Ruff formatter aims to be a drop-in replacement for Black, it does differ from Black in a few known ways. Some of these differences emerge from conscious attempts to improve upon Black's code style, while others fall out of differences in the underlying implementations.</p> <p>For a complete enumeration of these intentional deviations, see Known deviations.</p> <p>Unintentional deviations from Black are tracked in the issue tracker.</p>"},{"location":"formatter/#preview-style","title":"Preview style","text":"<p>Black gates formatting changes behind a <code>preview</code> flag. The formatter does not yet support Black's preview style, though the intention is to support it within the coming months behind Ruff's own <code>preview</code> flag.</p> <p>Black promotes some of its preview styling to stable at the end of each year. Ruff will similarly implement formatting changes under the <code>preview</code> flag, promoting them to stable through minor releases, in accordance with our versioning policy.</p>"},{"location":"formatter/#sorting-imports","title":"Sorting imports","text":"<p>Currently, the Ruff formatter does not sort imports. In order to both sort imports and format, call the Ruff linter and then the formatter:</p> <pre><code>ruff check --select I --fix\nruff format\n</code></pre> <p>A unified command for both linting and formatting is planned.</p>"},{"location":"installation/","title":"Installing Ruff","text":"<p>Ruff is available as <code>ruff</code> on PyPI:</p> <pre><code>$ pip install ruff\n</code></pre> <p>Once installed, you can run Ruff from the command line:</p> <pre><code>$ ruff check   # Lint all files in the current directory.\n$ ruff format  # Format all files in the current directory.\n</code></pre> <p>Starting with version <code>0.5.0</code>, Ruff can be installed with our standalone installers:</p> <pre><code>$ # On macOS and Linux.\n$ curl -LsSf https://astral.sh/ruff/install.sh | sh\n\n$ # On Windows.\n$ powershell -c \"irm https://astral.sh/ruff/install.ps1 | iex\"\n$ # For a specific version.\n$ curl -LsSf https://astral.sh/ruff/0.5.0/install.sh | sh\n$ powershell -c \"irm https://astral.sh/ruff/0.5.0/install.ps1 | iex\"\n</code></pre> <p>For macOS Homebrew and Linuxbrew users, Ruff is also available as <code>ruff</code> on Homebrew:</p> <pre><code>$ brew install ruff\n</code></pre> <p>For Conda users, Ruff is also available as <code>ruff</code> on <code>conda-forge</code>:</p> <pre><code>$ conda install -c conda-forge ruff\n</code></pre> <p>For pkgx users, Ruff is also available as <code>ruff</code> on the <code>pkgx</code> registry:</p> <pre><code>$ pkgx install ruff\n</code></pre> <p>For Arch Linux users, Ruff is also available as <code>ruff</code> on the official repositories:</p> <pre><code>$ pacman -S ruff\n</code></pre> <p>For Alpine users, Ruff is also available as <code>ruff</code> on the testing repositories:</p> <pre><code>$ apk add ruff\n</code></pre> <p>For openSUSE Tumbleweed users, Ruff is also available in the distribution repository:</p> <pre><code>$ sudo zypper install python3-ruff\n</code></pre> <p>On Docker, it is published as <code>ghcr.io/astral-sh/ruff</code>, tagged for each release and <code>latest</code> for the latest release.</p> <pre><code>$ docker run -v .:/io --rm ghcr.io/astral-sh/ruff check\n$ docker run -v .:/io --rm ghcr.io/astral-sh/ruff:0.3.0 check\n\n$ # Or, for Podman on SELinux.\n$ docker run -v .:/io:Z --rm ghcr.io/astral-sh/ruff check\n</code></pre> <p></p>"},{"location":"integrations/","title":"Integrations","text":""},{"location":"integrations/#github-actions","title":"GitHub Actions","text":"<p>GitHub Actions has everything you need to run Ruff out-of-the-box:</p> <pre><code>name: CI\non: push\njobs:\nbuild:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v4\n- name: Install Python\nuses: actions/setup-python@v5\nwith:\npython-version: \"3.11\"\n- name: Install dependencies\nrun: |\npython -m pip install --upgrade pip\npip install ruff\n# Update output format to enable automatic inline annotations.\n- name: Run Ruff\nrun: ruff check --output-format=github .\n</code></pre> <p>Ruff can also be used as a GitHub Action via <code>ruff-action</code>.</p> <p>By default, <code>ruff-action</code> runs as a pass-fail test to ensure that a given repository doesn't contain any lint rule violations as per its configuration. However, under-the-hood, <code>ruff-action</code> installs and runs <code>ruff</code> directly, so it can be used to execute any supported <code>ruff</code> command (e.g., <code>ruff check --fix</code>).</p> <p><code>ruff-action</code> supports all GitHub-hosted runners, and can be used with any published Ruff version (i.e., any version available on PyPI).</p> <p>To use <code>ruff-action</code>, create a file (e.g., <code>.github/workflows/ruff.yml</code>) inside your repository with:</p> <pre><code>name: Ruff\non: [ push, pull_request ]\njobs:\nruff:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v4\n- uses: astral-sh/ruff-action@v1\n</code></pre> <p>Alternatively, you can include <code>ruff-action</code> as a step in any other workflow file:</p> <pre><code>      - uses: astral-sh/ruff-action@v1\n</code></pre> <p><code>ruff-action</code> accepts optional configuration parameters via <code>with:</code>, including:</p> <ul> <li><code>version</code>: The Ruff version to install (default: latest).</li> <li><code>args</code>: The command-line arguments to pass to Ruff (default: <code>\"check\"</code>).</li> <li><code>src</code>: The source paths to pass to Ruff (default: <code>[\".\", \"src\"]</code>).</li> </ul> <p>For example, to run <code>ruff check --select B ./src</code> using Ruff version <code>0.0.259</code>:</p> <pre><code>- uses: astral-sh/ruff-action@v1\nwith:\nversion: 0.0.259\nargs: check --select B\nsrc: \"./src\"\n</code></pre>"},{"location":"integrations/#gitlab-cicd","title":"GitLab CI/CD","text":"<p>You can add the following configuration to <code>.gitlab-ci.yml</code> to run a <code>ruff format</code> in parallel with a <code>ruff check</code> compatible with GitLab's codequality report.</p> <pre><code>.base_ruff:\nstage: build\ninterruptible: true\nimage:\nname: ghcr.io/astral-sh/ruff:0.8.0-alpine\nbefore_script:\n- cd $CI_PROJECT_DIR\n- ruff --version\nRuff Check:\nextends: .base_ruff\nscript:\n- ruff check --output-format=gitlab &gt; code-quality-report.json\nartifacts:\nreports:\ncodequality: $CI_PROJECT_DIR/code-quality-report.json\nRuff Format:\nextends: .base_ruff\nscript:\n- ruff format --diff\n</code></pre>"},{"location":"integrations/#pre-commit","title":"pre-commit","text":"<p>Ruff can be used as a pre-commit hook via <code>ruff-pre-commit</code>:</p> <pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n# Ruff version.\nrev: v0.8.0\nhooks:\n# Run the linter.\n- id: ruff\n# Run the formatter.\n- id: ruff-format\n</code></pre> <p>To enable lint fixes, add the <code>--fix</code> argument to the lint hook:</p> <pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n# Ruff version.\nrev: v0.8.0\nhooks:\n# Run the linter.\n- id: ruff\nargs: [ --fix ]\n# Run the formatter.\n- id: ruff-format\n</code></pre> <p>To run the hooks over Jupyter Notebooks too, add <code>jupyter</code> to the list of allowed filetypes:</p> <pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n# Ruff version.\nrev: v0.8.0\nhooks:\n# Run the linter.\n- id: ruff\ntypes_or: [ python, pyi, jupyter ]\nargs: [ --fix ]\n# Run the formatter.\n- id: ruff-format\ntypes_or: [ python, pyi, jupyter ]\n</code></pre> <p>When running with <code>--fix</code>, Ruff's lint hook should be placed before Ruff's formatter hook, and before Black, isort, and other formatting tools, as Ruff's fix behavior can output code changes that require reformatting.</p> <p>When running without <code>--fix</code>, Ruff's formatter hook can be placed before or after Ruff's lint hook.</p> <p>(As long as your Ruff configuration avoids any linter-formatter incompatibilities, <code>ruff format</code> should never introduce new lint errors, so it's safe to run Ruff's format hook after <code>ruff check --fix</code>.)</p>"},{"location":"integrations/#mdformat","title":"<code>mdformat</code>","text":"<p>mdformat is capable of formatting code blocks within Markdown. The <code>mdformat-ruff</code> plugin enables mdformat to format Python code blocks with Ruff.</p>"},{"location":"integrations/#docker","title":"Docker","text":"<p>Ruff provides a distroless Docker image including the <code>ruff</code> binary. The following tags are published:</p> <ul> <li><code>ruff:latest</code></li> <li><code>ruff:{major}.{minor}.{patch}</code>, e.g., <code>ruff:0.6.6</code></li> <li><code>ruff:{major}.{minor}</code>, e.g., <code>ruff:0.6</code> (the latest patch version)</li> </ul> <p>In addition, ruff publishes the following images:</p> <ul> <li>Based on <code>alpine:3.20</code>:</li> <li><code>ruff:alpine</code></li> <li><code>ruff:alpine3.20</code></li> <li>Based on <code>debian:bookworm-slim</code>:</li> <li><code>ruff:debian-slim</code></li> <li><code>ruff:bookworm-slim</code></li> <li>Based on <code>buildpack-deps:bookworm</code>:</li> <li><code>ruff:debian</code></li> <li><code>ruff:bookworm</code></li> </ul> <p>As with the distroless image, each image is published with ruff version tags as <code>ruff:{major}.{minor}.{patch}-{base}</code> and <code>ruff:{major}.{minor}-{base}</code>, e.g., <code>ruff:0.6.6-alpine</code>.</p>"},{"location":"linter/","title":"The Ruff Linter","text":"<p>The Ruff Linter is an extremely fast Python linter designed as a drop-in replacement for Flake8 (plus dozens of plugins), isort, pydocstyle, pyupgrade, autoflake, and more.</p>"},{"location":"linter/#ruff-check","title":"<code>ruff check</code>","text":"<p><code>ruff check</code> is the primary entrypoint to the Ruff linter. It accepts a list of files or directories, and lints all discovered Python files, optionally fixing any fixable errors:</p> <pre><code>$ ruff check                  # Lint all files in the current directory.\n$ ruff check --fix            # Lint all files in the current directory, and fix any fixable errors.\n$ ruff check --watch          # Lint all files in the current directory, and re-lint on change.\n$ ruff check path/to/code/    # Lint all files in `path/to/code` (and any subdirectories).\n</code></pre> <p>For the full list of supported options, run <code>ruff check --help</code>.</p> <p>Note</p> <p>As of Ruff v0.1.7 the <code>ruff check</code> command uses the current working directory (<code>.</code>) as the default path to check. On older versions, you must provide this manually e.g. <code>ruff check .</code>. See the file discovery documentation for details.</p>"},{"location":"linter/#rule-selection","title":"Rule selection","text":"<p>The set of enabled rules is controlled via the <code>lint.select</code>, <code>lint.extend-select</code>, and <code>lint.ignore</code> settings.</p> <p>Ruff's linter mirrors Flake8's rule code system, in which each rule code consists of a one-to-three letter prefix, followed by three digits (e.g., <code>F401</code>). The prefix indicates that \"source\" of the rule (e.g., <code>F</code> for Pyflakes, <code>E</code> for pycodestyle, <code>ANN</code> for flake8-annotations).</p> <p>Rule selectors like <code>lint.select</code> and <code>lint.ignore</code> accept either a full rule code (e.g., <code>F401</code>) or any valid prefix (e.g., <code>F</code>). For example, given the following configuration file:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nselect = [\"E\", \"F\"]\nignore = [\"F401\"]\n</code></pre> <pre><code>[lint]\nselect = [\"E\", \"F\"]\nignore = [\"F401\"]\n</code></pre> <p>Ruff would enable all rules with the <code>E</code> (pycodestyle) or <code>F</code> (Pyflakes) prefix, with the exception of <code>F401</code>. For more on configuring Ruff via <code>pyproject.toml</code>, see Configuring Ruff.</p> <p>As a special-case, Ruff also supports the <code>ALL</code> code, which enables all rules. Note that some pydocstyle rules conflict (e.g., <code>D203</code> and <code>D211</code>) as they represent alternative docstring formats. Ruff will automatically disable any conflicting rules when <code>ALL</code> is enabled.</p> <p>If you're wondering how to configure Ruff, here are some recommended guidelines:</p> <ul> <li>Prefer <code>lint.select</code> over <code>lint.extend-select</code> to make your rule set explicit.</li> <li>Use <code>ALL</code> with discretion. Enabling <code>ALL</code> will implicitly enable new rules whenever you upgrade.</li> <li>Start with a small set of rules (<code>select = [\"E\", \"F\"]</code>) and add a category at-a-time. For example,     you might consider expanding to <code>select = [\"E\", \"F\", \"B\"]</code> to enable the popular flake8-bugbear     extension.</li> </ul> <p>For example, a configuration that enables some of the most popular rules (without being too pedantic) might look like the following:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nselect = [\n# pycodestyle\n\"E\",\n# Pyflakes\n\"F\",\n# pyupgrade\n\"UP\",\n# flake8-bugbear\n\"B\",\n# flake8-simplify\n\"SIM\",\n# isort\n\"I\",\n]\n</code></pre> <pre><code>[lint]\nselect = [\n# pycodestyle\n\"E\",\n# Pyflakes\n\"F\",\n# pyupgrade\n\"UP\",\n# flake8-bugbear\n\"B\",\n# flake8-simplify\n\"SIM\",\n# isort\n\"I\",\n]\n</code></pre> <p>To resolve the enabled rule set, Ruff may need to reconcile <code>lint.select</code> and <code>lint.ignore</code> from a variety of sources, including the current <code>pyproject.toml</code>, any inherited <code>pyproject.toml</code> files, and the CLI (e.g., <code>--select</code>).</p> <p>In those scenarios, Ruff uses the \"highest-priority\" <code>select</code> as the basis for the rule set, and then applies <code>extend-select</code> and <code>ignore</code> adjustments. CLI options are given higher priority than <code>pyproject.toml</code> options, and the current <code>pyproject.toml</code> file is given higher priority than any inherited <code>pyproject.toml</code> files.</p> <p>For example, given the following configuration file:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nselect = [\"E\", \"F\"]\nignore = [\"F401\"]\n</code></pre> <pre><code>[lint]\nselect = [\"E\", \"F\"]\nignore = [\"F401\"]\n</code></pre> <p>Running <code>ruff check --select F401</code> would result in Ruff enforcing <code>F401</code>, and no other rules.</p> <p>Running <code>ruff check --extend-select B</code> would result in Ruff enforcing the <code>E</code>, <code>F</code>, and <code>B</code> rules, with the exception of <code>F401</code>.</p>"},{"location":"linter/#fixes","title":"Fixes","text":"<p>Ruff supports automatic fixes for a variety of lint errors. For example, Ruff can remove unused imports, reformat docstrings, rewrite type annotations to use newer Python syntax, and more.</p> <p>To enable fixes, pass the <code>--fix</code> flag to <code>ruff check</code>:</p> <pre><code>$ ruff check --fix\n</code></pre> <p>By default, Ruff will fix all violations for which safe fixes are available; to determine whether a rule supports fixing, see Rules.</p>"},{"location":"linter/#fix-safety","title":"Fix safety","text":"<p>Ruff labels fixes as \"safe\" and \"unsafe\". The meaning and intent of your code will be retained when applying safe fixes, but the meaning could change when applying unsafe fixes.</p> <p>Specifically, an unsafe fix could lead to a change in runtime behavior, the removal of comments, or both, while safe fixes are intended to preserve runtime behavior and will only remove comments when deleting entire statements or expressions (e.g., removing unused imports).</p> <p>For example, <code>unnecessary-iterable-allocation-for-first-element</code> (<code>RUF015</code>) is a rule which checks for potentially unperformant use of <code>list(...)[0]</code>. The fix replaces this pattern with <code>next(iter(...))</code> which can result in a drastic speedup:</p> <pre><code>$ python -m timeit \"head = list(range(99999999))[0]\"\n1 loop, best of 5: 1.69 sec per loop\n</code></pre> <pre><code>$ python -m timeit \"head = next(iter(range(99999999)))\"\n5000000 loops, best of 5: 70.8 nsec per loop\n</code></pre> <p>However, when the collection is empty, this raised exception changes from an <code>IndexError</code> to <code>StopIteration</code>:</p> <pre><code>$ python -c 'list(range(0))[0]'\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre> <pre><code>$ python -c 'next(iter(range(0)))[0]'\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre> <p>Since the change in exception type could break error handling upstream, this fix is categorized as unsafe.</p> <p>Ruff only enables safe fixes by default. Unsafe fixes can be enabled by settings <code>unsafe-fixes</code> in your configuration file or passing the <code>--unsafe-fixes</code> flag to <code>ruff check</code>:</p> <pre><code># Show unsafe fixes\nruff check --unsafe-fixes\n# Apply unsafe fixes\nruff check --fix --unsafe-fixes\n</code></pre> <p>By default, Ruff will display a hint when unsafe fixes are available but not enabled. The suggestion can be silenced by setting the <code>unsafe-fixes</code> setting to <code>false</code> or using the <code>--no-unsafe-fixes</code> flag.</p> <p>The safety of fixes can be adjusted per rule using the <code>lint.extend-safe-fixes</code> and <code>lint.extend-unsafe-fixes</code> settings.</p> <p>For example, the following configuration would promote unsafe fixes for <code>F601</code> to safe fixes and demote safe fixes for <code>UP034</code> to unsafe fixes:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nextend-safe-fixes = [\"F601\"]\nextend-unsafe-fixes = [\"UP034\"]\n</code></pre> <pre><code>[lint]\nextend-safe-fixes = [\"F601\"]\nextend-unsafe-fixes = [\"UP034\"]\n</code></pre> <p>You may use prefixes to select rules as well, e.g., <code>F</code> can be used to promote fixes for all rules in Pyflakes to safe.</p> <p>Note</p> <p>All fixes will always be displayed by Ruff when using the <code>json</code> output format. The safety of each fix is available under the <code>applicability</code> field.</p>"},{"location":"linter/#disabling-fixes","title":"Disabling fixes","text":"<p>To limit the set of rules that Ruff should fix, use the <code>lint.fixable</code> or <code>lint.extend-fixable</code>, and <code>lint.unfixable</code> settings.</p> <p>For example, the following configuration would enable fixes for all rules except <code>unused-imports</code> (<code>F401</code>):</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nfixable = [\"ALL\"]\nunfixable = [\"F401\"]\n</code></pre> <pre><code>[lint]\nfixable = [\"ALL\"]\nunfixable = [\"F401\"]\n</code></pre> <p>Conversely, the following configuration would only enable fixes for <code>F401</code>:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nfixable = [\"F401\"]\n</code></pre> <pre><code>[lint]\nfixable = [\"F401\"]\n</code></pre>"},{"location":"linter/#error-suppression","title":"Error suppression","text":"<p>Ruff supports several mechanisms for suppressing lint errors, be they false positives or permissible violations.</p> <p>To omit a lint rule entirely, add it to the \"ignore\" list via the <code>lint.ignore</code> setting, either on the command-line or in your <code>pyproject.toml</code> or <code>ruff.toml</code> file.</p> <p>To suppress a violation inline, Ruff uses a <code>noqa</code> system similar to Flake8. To ignore an individual violation, add <code># noqa: {code}</code> to the end of the line, like so:</p> <pre><code># Ignore F841.\nx = 1  # noqa: F841\n# Ignore E741 and F841.\ni = 1  # noqa: E741, F841\n# Ignore _all_ violations.\nx = 1  # noqa\n</code></pre> <p>For multi-line strings (like docstrings), the <code>noqa</code> directive should come at the end of the string (after the closing triple quote), and will apply to the entire string, like so:</p> <pre><code>\"\"\"Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\n\"\"\"  # noqa: E501\n</code></pre> <p>For import sorting, the <code>noqa</code> should come at the end of the first line in the import block, and will apply to all imports in the block, like so:</p> <pre><code>import os  # noqa: I001\nimport abc\n</code></pre> <p>To ignore all violations across an entire file, add the line <code># ruff: noqa</code> anywhere in the file, preferably towards the top, like so:</p> <pre><code># ruff: noqa\n</code></pre> <p>To ignore a specific rule across an entire file, add the line <code># ruff: noqa: {code}</code> anywhere in the file, preferably towards the top, like so:</p> <pre><code># ruff: noqa: F841\n</code></pre> <p>Or see the <code>lint.per-file-ignores</code> setting, which enables the same functionality from within your <code>pyproject.toml</code> or <code>ruff.toml</code> file.</p> <p>Global <code>noqa</code> comments must be on their own line to disambiguate from comments which ignore violations on a single line.</p> <p>Note that Ruff will also respect Flake8's <code># flake8: noqa</code> directive, and will treat it as equivalent to <code># ruff: noqa</code>.</p>"},{"location":"linter/#detecting-unused-suppression-comments","title":"Detecting unused suppression comments","text":"<p>Ruff implements a special rule, <code>unused-noqa</code>, under the <code>RUF100</code> code, to enforce that your <code>noqa</code> directives are \"valid\", in that the violations they say they ignore are actually being triggered on that line (and thus suppressed). To flag unused <code>noqa</code> directives, run: <code>ruff check /path/to/file.py --extend-select RUF100</code>.</p> <p>Ruff can also remove any unused <code>noqa</code> directives via its fix functionality. To remove any unused <code>noqa</code> directives, run: <code>ruff check /path/to/file.py --extend-select RUF100 --fix</code>.</p>"},{"location":"linter/#inserting-necessary-suppression-comments","title":"Inserting necessary suppression comments","text":"<p>Ruff can automatically add <code>noqa</code> directives to all lines that contain violations, which is useful when migrating a new codebase to Ruff. To automatically add <code>noqa</code> directives to all relevant lines (with the appropriate rule codes), run: <code>ruff check /path/to/file.py --add-noqa</code>.</p>"},{"location":"linter/#action-comments","title":"Action comments","text":"<p>Ruff respects isort's action comments (<code># isort: skip_file</code>, <code># isort: on</code>, <code># isort: off</code>, <code># isort: skip</code>, and <code># isort: split</code>), which enable selectively enabling and disabling import sorting for blocks of code and other inline configuration.</p> <p>Ruff will also respect variants of these action comments with a <code># ruff:</code> prefix (e.g., <code># ruff: isort: skip_file</code>, <code># ruff: isort: on</code>, and so on). These variants more clearly convey that the action comment is intended for Ruff, but are functionally equivalent to the isort variants.</p> <p>Unlike isort, Ruff does not respect action comments within docstrings.</p> <p>See the isort documentation for more.</p>"},{"location":"linter/#exit-codes","title":"Exit codes","text":"<p>By default, <code>ruff check</code> exits with the following status codes:</p> <ul> <li><code>0</code> if no violations were found, or if all present violations were fixed automatically.</li> <li><code>1</code> if violations were found.</li> <li><code>2</code> if Ruff terminates abnormally due to invalid configuration, invalid CLI options, or an     internal error.</li> </ul> <p>This convention mirrors that of tools like ESLint, Prettier, and RuboCop.</p> <p><code>ruff check</code> supports two command-line flags that alter its exit code behavior:</p> <ul> <li><code>--exit-zero</code> will cause Ruff to exit with a status code of <code>0</code> even if violations were found.     Note that Ruff will still exit with a status code of <code>2</code> if it terminates abnormally.</li> <li><code>--exit-non-zero-on-fix</code> will cause Ruff to exit with a status code of <code>1</code> if violations were     found, even if all such violations were fixed automatically. Note that the use of     <code>--exit-non-zero-on-fix</code> can result in a non-zero exit code even if no violations remain after     fixing.</li> </ul>"},{"location":"preview/","title":"Preview","text":"<p>Ruff includes an opt-in preview mode to provide an opportunity for community feedback and increase confidence that changes are a net-benefit before enabling them for everyone.</p> <p>Preview mode enables a collection of unstable features such as new lint rules and fixes, formatter style changes, interface updates, and more. Warnings about deprecated features may turn into errors when using preview mode.</p> <p>Enabling preview mode does not on its own enable all preview rules. See the rules section for details on selecting preview rules.</p>"},{"location":"preview/#enabling-preview-mode","title":"Enabling preview mode","text":"<p>Preview mode can be enabled with the <code>--preview</code> flag on the CLI or by setting <code>preview = true</code> in your Ruff configuration file.</p> <p>Preview mode can be configured separately for linting and formatting (requires Ruff v0.1.1+). To enable preview lint rules without preview style formatting:</p> pyproject.tomlruff.tomlCLI <pre><code>[tool.ruff.lint]\npreview = true\n</code></pre> <pre><code>[lint]\npreview = true\n</code></pre> <pre><code>ruff check --preview\n</code></pre> <p>To enable preview style formatting without enabling any preview lint rules:</p> pyproject.tomlruff.tomlCLI <pre><code>[tool.ruff.format]\npreview = true\n</code></pre> <pre><code>[format]\npreview = true\n</code></pre> <pre><code>ruff format --preview\n</code></pre>"},{"location":"preview/#using-rules-that-are-in-preview","title":"Using rules that are in preview","text":"<p>If a rule is marked as preview, it can only be selected if preview mode is enabled. For example, consider a hypothetical rule, <code>HYP001</code>. If <code>HYP001</code> were in preview, it would not be enabled by adding it to the selected rule set.</p> pyproject.tomlruff.tomlCLI <pre><code>[tool.ruff.lint]\nextend-select = [\"HYP001\"]\n</code></pre> <pre><code>[lint]\nextend-select = [\"HYP001\"]\n</code></pre> <pre><code>ruff check --extend-select HYP001\n</code></pre> <p>It also would not be enabled by selecting the <code>HYP</code> category, like so:</p> pyproject.tomlruff.tomlCLI <pre><code>[tool.ruff.lint]\nextend-select = [\"HYP\"]\n</code></pre> <pre><code>[lint]\nextend-select = [\"HYP\"]\n</code></pre> <pre><code>ruff check --extend-select HYP\n</code></pre> <p>Similarly, it would not be enabled via the <code>ALL</code> selector:</p> pyproject.tomlruff.tomlCLI <pre><code>[tool.ruff.lint]\nselect = [\"ALL\"]\n</code></pre> <pre><code>[lint]\nselect = [\"ALL\"]\n</code></pre> <pre><code>ruff check --select ALL\n</code></pre> <p>However, it would be enabled in any of the above cases if you enabled preview mode:</p> pyproject.tomlruff.tomlCLI <pre><code>[tool.ruff.lint]\nextend-select = [\"HYP\"]\npreview = true\n</code></pre> <pre><code>[lint]\nextend-select = [\"HYP\"]\npreview = true\n</code></pre> <pre><code>ruff check --extend-select HYP --preview\n</code></pre> <p>To see which rules are currently in preview, visit the rules reference.</p>"},{"location":"preview/#selecting-single-preview-rules","title":"Selecting single preview rules","text":"<p>When preview mode is enabled, selecting rule categories or prefixes will include all preview rules that match. If you'd prefer to opt in to each preview rule individually, you can toggle the <code>explicit-preview-rules</code> setting in your configuration file:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\npreview = true\nexplicit-preview-rules = true\n</code></pre> <pre><code>[lint]\npreview = true\nexplicit-preview-rules = true\n</code></pre> <p>In our previous example, <code>--select</code> with <code>ALL</code> <code>HYP</code>, <code>HYP0</code>, or <code>HYP00</code> would not enable <code>HYP001</code>. Each preview rule will need to be selected with its exact code, e.g. <code>--select ALL,HYP001</code>.</p> <p>If preview mode is not enabled, this setting has no effect.</p>"},{"location":"preview/#deprecated-rules","title":"Deprecated rules","text":"<p>When preview mode is enabled, deprecated rules will be disabled. If a deprecated rule is selected explicitly, an error will be raised. Deprecated rules will not be included if selected via a rule category or prefix.</p>"},{"location":"rules/","title":"Rules","text":"<p>Ruff supports over 800 lint rules, many of which are inspired by popular tools like Flake8, isort, pyupgrade, and others. Regardless of the rule's origin, Ruff re-implements every rule in Rust as a first-party feature.</p> <p>By default, Ruff enables Flake8's <code>F</code> rules, along with a subset of the <code>E</code> rules, omitting any stylistic rules that overlap with the use of a formatter, like <code>ruff format</code> or Black.</p> <p>If you're just getting started with Ruff, the default rule set is a great place to start: it catches a wide variety of common errors (like unused imports) with zero configuration.</p>"},{"location":"rules/#legend","title":"Legend","text":"<p>\u00a0\u00a0\u00a0\u00a0\u2714\ufe0f\u00a0\u00a0\u00a0\u00a0 The rule is stable.\u00a0\u00a0\u00a0\u00a0\ud83e\uddea\u00a0\u00a0\u00a0\u00a0 The rule is unstable and is in \"preview\".\u00a0\u00a0\u00a0\u00a0\u26a0\ufe0f\u00a0\u00a0\u00a0\u00a0 The rule has been deprecated and will be removed in a future release.\u00a0\u00a0\u00a0\u00a0\u274c\u00a0\u00a0\u00a0\u00a0 The rule has been removed only the documentation is available.\u00a0\u00a0\u00a0\u00a0\ud83d\udee0\ufe0f\u00a0\u00a0\u00a0\u00a0 The rule is automatically fixable by the <code>--fix</code> command-line option.</p>"},{"location":"rules/#pyflakes-f","title":"Pyflakes (F)","text":"<p>For more, see Pyflakes on PyPI.</p> Code Name Message F401 unused-import <code>{name}</code> imported but unused; consider using <code>importlib.util.find_spec</code> to test for availability \u2714\ufe0f \ud83d\udee0\ufe0f F402 import-shadowed-by-loop-var Import <code>{name}</code> from {row} shadowed by loop variable \u2714\ufe0f \ud83d\udee0\ufe0f F403 undefined-local-with-import-star <code>from {name} import *</code> used; unable to detect undefined names \u2714\ufe0f \ud83d\udee0\ufe0f F404 late-future-import <code>from __future__</code> imports must occur at the beginning of the file \u2714\ufe0f \ud83d\udee0\ufe0f F405 undefined-local-with-import-star-usage <code>{name}</code> may be undefined, or defined from star imports \u2714\ufe0f \ud83d\udee0\ufe0f F406 undefined-local-with-nested-import-star-usage <code>from {name} import *</code> only allowed at module level \u2714\ufe0f \ud83d\udee0\ufe0f F407 future-feature-not-defined Future feature <code>{name}</code> is not defined \u2714\ufe0f \ud83d\udee0\ufe0f F501 percent-format-invalid-format <code>%</code>-format string has invalid format string: {message} \u2714\ufe0f \ud83d\udee0\ufe0f F502 percent-format-expected-mapping <code>%</code>-format string expected mapping but got sequence \u2714\ufe0f \ud83d\udee0\ufe0f F503 percent-format-expected-sequence <code>%</code>-format string expected sequence but got mapping \u2714\ufe0f \ud83d\udee0\ufe0f F504 percent-format-extra-named-arguments <code>%</code>-format string has unused named argument(s): {message} \u2714\ufe0f \ud83d\udee0\ufe0f F505 percent-format-missing-argument <code>%</code>-format string is missing argument(s) for placeholder(s): {message} \u2714\ufe0f \ud83d\udee0\ufe0f F506 percent-format-mixed-positional-and-named <code>%</code>-format string has mixed positional and named placeholders \u2714\ufe0f \ud83d\udee0\ufe0f F507 percent-format-positional-count-mismatch <code>%</code>-format string has {wanted} placeholder(s) but {got} substitution(s) \u2714\ufe0f \ud83d\udee0\ufe0f F508 percent-format-star-requires-sequence <code>%</code>-format string <code>*</code> specifier requires sequence \u2714\ufe0f \ud83d\udee0\ufe0f F509 percent-format-unsupported-format-character <code>%</code>-format string has unsupported format character <code>{char}</code> \u2714\ufe0f \ud83d\udee0\ufe0f F521 string-dot-format-invalid-format <code>.format</code> call has invalid format string: {message} \u2714\ufe0f \ud83d\udee0\ufe0f F522 string-dot-format-extra-named-arguments <code>.format</code> call has unused named argument(s): {message} \u2714\ufe0f \ud83d\udee0\ufe0f F523 string-dot-format-extra-positional-arguments <code>.format</code> call has unused arguments at position(s): {message} \u2714\ufe0f \ud83d\udee0\ufe0f F524 string-dot-format-missing-arguments <code>.format</code> call is missing argument(s) for placeholder(s): {message} \u2714\ufe0f \ud83d\udee0\ufe0f F525 string-dot-format-mixing-automatic <code>.format</code> string mixes automatic and manual numbering \u2714\ufe0f \ud83d\udee0\ufe0f F541 f-string-missing-placeholders f-string without any placeholders \u2714\ufe0f \ud83d\udee0\ufe0f F601 multi-value-repeated-key-literal Dictionary key literal <code>{name}</code> repeated \u2714\ufe0f \ud83d\udee0\ufe0f F602 multi-value-repeated-key-variable Dictionary key <code>{name}</code> repeated \u2714\ufe0f \ud83d\udee0\ufe0f F621 expressions-in-star-assignment Too many expressions in star-unpacking assignment \u2714\ufe0f \ud83d\udee0\ufe0f F622 multiple-starred-expressions Two starred expressions in assignment \u2714\ufe0f \ud83d\udee0\ufe0f F631 assert-tuple Assert test is a non-empty tuple, which is always <code>True</code> \u2714\ufe0f \ud83d\udee0\ufe0f F632 is-literal Use <code>==</code> to compare constant literals \u2714\ufe0f \ud83d\udee0\ufe0f F633 invalid-print-syntax Use of <code>&gt;&gt;</code> is invalid with <code>print</code> function \u2714\ufe0f \ud83d\udee0\ufe0f F634 if-tuple If test is a tuple, which is always <code>True</code> \u2714\ufe0f \ud83d\udee0\ufe0f F701 break-outside-loop <code>break</code> outside loop \u2714\ufe0f \ud83d\udee0\ufe0f F702 continue-outside-loop <code>continue</code> not properly in loop \u2714\ufe0f \ud83d\udee0\ufe0f F704 yield-outside-function <code>{keyword}</code> statement outside of a function \u2714\ufe0f \ud83d\udee0\ufe0f F706 return-outside-function <code>return</code> statement outside of a function/method \u2714\ufe0f \ud83d\udee0\ufe0f F707 default-except-not-last An <code>except</code> block as not the last exception handler \u2714\ufe0f \ud83d\udee0\ufe0f F722 forward-annotation-syntax-error Syntax error in forward annotation: <code>{body}</code> \u2714\ufe0f \ud83d\udee0\ufe0f F811 redefined-while-unused Redefinition of unused <code>{name}</code> from {row} \u2714\ufe0f \ud83d\udee0\ufe0f F821 undefined-name Undefined name <code>{name}</code>. {tip} \u2714\ufe0f \ud83d\udee0\ufe0f F822 undefined-export Undefined name <code>{name}</code> in <code>__all__</code> \u2714\ufe0f \ud83d\udee0\ufe0f F823 undefined-local Local variable <code>{name}</code> referenced before assignment \u2714\ufe0f \ud83d\udee0\ufe0f F841 unused-variable Local variable <code>{name}</code> is assigned to but never used \u2714\ufe0f \ud83d\udee0\ufe0f F842 unused-annotation Local variable <code>{name}</code> is annotated but never used \u2714\ufe0f \ud83d\udee0\ufe0f F901 raise-not-implemented <code>raise NotImplemented</code> should be <code>raise NotImplementedError</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#pycodestyle-e-w","title":"pycodestyle (E, W)","text":"<p>For more, see pycodestyle on PyPI.</p> <p>For related settings, see pycodestyle.</p>"},{"location":"rules/#error-e","title":"Error (E)","text":"Code Name Message E101 mixed-spaces-and-tabs Indentation contains mixed spaces and tabs \u2714\ufe0f \ud83d\udee0\ufe0f E111 indentation-with-invalid-multiple Indentation is not a multiple of {indent_width} \ud83e\uddea \ud83d\udee0\ufe0f E112 no-indented-block Expected an indented block \ud83e\uddea \ud83d\udee0\ufe0f E113 unexpected-indentation Unexpected indentation \ud83e\uddea \ud83d\udee0\ufe0f E114 indentation-with-invalid-multiple-comment Indentation is not a multiple of {indent_width} (comment) \ud83e\uddea \ud83d\udee0\ufe0f E115 no-indented-block-comment Expected an indented block (comment) \ud83e\uddea \ud83d\udee0\ufe0f E116 unexpected-indentation-comment Unexpected indentation (comment) \ud83e\uddea \ud83d\udee0\ufe0f E117 over-indented Over-indented (comment) \ud83e\uddea \ud83d\udee0\ufe0f E201 whitespace-after-open-bracket Whitespace after '{symbol}' \ud83e\uddea \ud83d\udee0\ufe0f E202 whitespace-before-close-bracket Whitespace before '{symbol}' \ud83e\uddea \ud83d\udee0\ufe0f E203 whitespace-before-punctuation Whitespace before '{symbol}' \ud83e\uddea \ud83d\udee0\ufe0f E204 whitespace-after-decorator Whitespace after decorator \ud83e\uddea \ud83d\udee0\ufe0f E211 whitespace-before-parameters Whitespace before '{bracket}' \ud83e\uddea \ud83d\udee0\ufe0f E221 multiple-spaces-before-operator Multiple spaces before operator \ud83e\uddea \ud83d\udee0\ufe0f E222 multiple-spaces-after-operator Multiple spaces after operator \ud83e\uddea \ud83d\udee0\ufe0f E223 tab-before-operator Tab before operator \ud83e\uddea \ud83d\udee0\ufe0f E224 tab-after-operator Tab after operator \ud83e\uddea \ud83d\udee0\ufe0f E225 missing-whitespace-around-operator Missing whitespace around operator \ud83e\uddea \ud83d\udee0\ufe0f E226 missing-whitespace-around-arithmetic-operator Missing whitespace around arithmetic operator \ud83e\uddea \ud83d\udee0\ufe0f E227 missing-whitespace-around-bitwise-or-shift-operator Missing whitespace around bitwise or shift operator \ud83e\uddea \ud83d\udee0\ufe0f E228 missing-whitespace-around-modulo-operator Missing whitespace around modulo operator \ud83e\uddea \ud83d\udee0\ufe0f E231 missing-whitespace Missing whitespace after {} \ud83e\uddea \ud83d\udee0\ufe0f E241 multiple-spaces-after-comma Multiple spaces after comma \ud83e\uddea \ud83d\udee0\ufe0f E242 tab-after-comma Tab after comma \ud83e\uddea \ud83d\udee0\ufe0f E251 unexpected-spaces-around-keyword-parameter-equals Unexpected spaces around keyword / parameter equals \ud83e\uddea \ud83d\udee0\ufe0f E252 missing-whitespace-around-parameter-equals Missing whitespace around parameter equals \ud83e\uddea \ud83d\udee0\ufe0f E261 too-few-spaces-before-inline-comment Insert at least two spaces before an inline comment \ud83e\uddea \ud83d\udee0\ufe0f E262 no-space-after-inline-comment Inline comment should start with <code>#</code> \ud83e\uddea \ud83d\udee0\ufe0f E265 no-space-after-block-comment Block comment should start with <code>#</code> \ud83e\uddea \ud83d\udee0\ufe0f E266 multiple-leading-hashes-for-block-comment Too many leading <code>#</code> before block comment \ud83e\uddea \ud83d\udee0\ufe0f E271 multiple-spaces-after-keyword Multiple spaces after keyword \ud83e\uddea \ud83d\udee0\ufe0f E272 multiple-spaces-before-keyword Multiple spaces before keyword \ud83e\uddea \ud83d\udee0\ufe0f E273 tab-after-keyword Tab after keyword \ud83e\uddea \ud83d\udee0\ufe0f E274 tab-before-keyword Tab before keyword \ud83e\uddea \ud83d\udee0\ufe0f E275 missing-whitespace-after-keyword Missing whitespace after keyword \ud83e\uddea \ud83d\udee0\ufe0f E301 blank-line-between-methods Expected {BLANK_LINES_NESTED_LEVEL:?} blank line, found 0 \ud83e\uddea \ud83d\udee0\ufe0f E302 blank-lines-top-level Expected {expected_blank_lines:?} blank lines, found {actual_blank_lines} \ud83e\uddea \ud83d\udee0\ufe0f E303 too-many-blank-lines Too many blank lines ({actual_blank_lines}) \ud83e\uddea \ud83d\udee0\ufe0f E304 blank-line-after-decorator Blank lines found after function decorator ({lines}) \ud83e\uddea \ud83d\udee0\ufe0f E305 blank-lines-after-function-or-class Expected 2 blank lines after class or function definition, found ({blank_lines}) \ud83e\uddea \ud83d\udee0\ufe0f E306 blank-lines-before-nested-definition Expected 1 blank line before a nested definition, found 0 \ud83e\uddea \ud83d\udee0\ufe0f E401 multiple-imports-on-one-line Multiple imports on one line \u2714\ufe0f \ud83d\udee0\ufe0f E402 module-import-not-at-top-of-file Module level import not at top of cell \u2714\ufe0f \ud83d\udee0\ufe0f E501 line-too-long Line too long ({width} &gt; {limit}) \u2714\ufe0f \ud83d\udee0\ufe0f E502 redundant-backslash Redundant backslash \ud83e\uddea \ud83d\udee0\ufe0f E701 multiple-statements-on-one-line-colon Multiple statements on one line (colon) \u2714\ufe0f \ud83d\udee0\ufe0f E702 multiple-statements-on-one-line-semicolon Multiple statements on one line (semicolon) \u2714\ufe0f \ud83d\udee0\ufe0f E703 useless-semicolon Statement ends with an unnecessary semicolon \u2714\ufe0f \ud83d\udee0\ufe0f E711 none-comparison Comparison to <code>None</code> should be <code>cond is None</code> \u2714\ufe0f \ud83d\udee0\ufe0f E712 true-false-comparison Avoid equality comparisons to <code>True</code>; use <code>if {cond}:</code> for truth checks \u2714\ufe0f \ud83d\udee0\ufe0f E713 not-in-test Test for membership should be <code>not in</code> \u2714\ufe0f \ud83d\udee0\ufe0f E714 not-is-test Test for object identity should be <code>is not</code> \u2714\ufe0f \ud83d\udee0\ufe0f E721 type-comparison Use <code>is</code> and <code>is not</code> for type comparisons, or <code>isinstance()</code> for isinstance checks \u2714\ufe0f \ud83d\udee0\ufe0f E722 bare-except Do not use bare <code>except</code> \u2714\ufe0f \ud83d\udee0\ufe0f E731 lambda-assignment Do not assign a <code>lambda</code> expression, use a <code>def</code> \u2714\ufe0f \ud83d\udee0\ufe0f E741 ambiguous-variable-name Ambiguous variable name: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f E742 ambiguous-class-name Ambiguous class name: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f E743 ambiguous-function-name Ambiguous function name: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f E902 io-error {message} \u2714\ufe0f \ud83d\udee0\ufe0f E999 syntax-error SyntaxError \u274c \ud83d\udee0\ufe0f"},{"location":"rules/#warning-w","title":"Warning (W)","text":"Code Name Message W191 tab-indentation Indentation contains tabs \u2714\ufe0f \ud83d\udee0\ufe0f W291 trailing-whitespace Trailing whitespace \u2714\ufe0f \ud83d\udee0\ufe0f W292 missing-newline-at-end-of-file No newline at end of file \u2714\ufe0f \ud83d\udee0\ufe0f W293 blank-line-with-whitespace Blank line contains whitespace \u2714\ufe0f \ud83d\udee0\ufe0f W391 too-many-newlines-at-end-of-file Too many newlines at end of file \ud83e\uddea \ud83d\udee0\ufe0f W505 doc-line-too-long Doc line too long ({width} &gt; {limit}) \u2714\ufe0f \ud83d\udee0\ufe0f W605 invalid-escape-sequence Invalid escape sequence: <code>\\{ch}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#mccabe-c90","title":"mccabe (C90)","text":"<p>For more, see mccabe on PyPI.</p> <p>For related settings, see mccabe.</p> Code Name Message C901 complex-structure <code>{name}</code> is too complex ({complexity} &gt; {max_complexity}) \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#isort-i","title":"isort (I)","text":"<p>For more, see isort on PyPI.</p> <p>For related settings, see isort.</p> Code Name Message I001 unsorted-imports Import block is un-sorted or un-formatted \u2714\ufe0f \ud83d\udee0\ufe0f I002 missing-required-import Missing required import: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#pep8-naming-n","title":"pep8-naming (N)","text":"<p>For more, see pep8-naming on PyPI.</p> <p>For related settings, see pep8-naming.</p> Code Name Message N801 invalid-class-name Class name <code>{name}</code> should use CapWords convention \u2714\ufe0f \ud83d\udee0\ufe0f N802 invalid-function-name Function name <code>{name}</code> should be lowercase \u2714\ufe0f \ud83d\udee0\ufe0f N803 invalid-argument-name Argument name <code>{name}</code> should be lowercase \u2714\ufe0f \ud83d\udee0\ufe0f N804 invalid-first-argument-name-for-class-method First argument of a class method should be named <code>cls</code> \u2714\ufe0f \ud83d\udee0\ufe0f N805 invalid-first-argument-name-for-method First argument of a method should be named <code>self</code> \u2714\ufe0f \ud83d\udee0\ufe0f N806 non-lowercase-variable-in-function Variable <code>{name}</code> in function should be lowercase \u2714\ufe0f \ud83d\udee0\ufe0f N807 dunder-function-name Function name should not start and end with <code>__</code> \u2714\ufe0f \ud83d\udee0\ufe0f N811 constant-imported-as-non-constant Constant <code>{name}</code> imported as non-constant <code>{asname}</code> \u2714\ufe0f \ud83d\udee0\ufe0f N812 lowercase-imported-as-non-lowercase Lowercase <code>{name}</code> imported as non-lowercase <code>{asname}</code> \u2714\ufe0f \ud83d\udee0\ufe0f N813 camelcase-imported-as-lowercase Camelcase <code>{name}</code> imported as lowercase <code>{asname}</code> \u2714\ufe0f \ud83d\udee0\ufe0f N814 camelcase-imported-as-constant Camelcase <code>{name}</code> imported as constant <code>{asname}</code> \u2714\ufe0f \ud83d\udee0\ufe0f N815 mixed-case-variable-in-class-scope Variable <code>{name}</code> in class scope should not be mixedCase \u2714\ufe0f \ud83d\udee0\ufe0f N816 mixed-case-variable-in-global-scope Variable <code>{name}</code> in global scope should not be mixedCase \u2714\ufe0f \ud83d\udee0\ufe0f N817 camelcase-imported-as-acronym CamelCase <code>{name}</code> imported as acronym <code>{asname}</code> \u2714\ufe0f \ud83d\udee0\ufe0f N818 error-suffix-on-exception-name Exception name <code>{name}</code> should be named with an Error suffix \u2714\ufe0f \ud83d\udee0\ufe0f N999 invalid-module-name Invalid module name: '{name}' \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#pydocstyle-d","title":"pydocstyle (D)","text":"<p>For more, see pydocstyle on PyPI.</p> <p>For related settings, see pydocstyle.</p> Code Name Message D100 undocumented-public-module Missing docstring in public module \u2714\ufe0f \ud83d\udee0\ufe0f D101 undocumented-public-class Missing docstring in public class \u2714\ufe0f \ud83d\udee0\ufe0f D102 undocumented-public-method Missing docstring in public method \u2714\ufe0f \ud83d\udee0\ufe0f D103 undocumented-public-function Missing docstring in public function \u2714\ufe0f \ud83d\udee0\ufe0f D104 undocumented-public-package Missing docstring in public package \u2714\ufe0f \ud83d\udee0\ufe0f D105 undocumented-magic-method Missing docstring in magic method \u2714\ufe0f \ud83d\udee0\ufe0f D106 undocumented-public-nested-class Missing docstring in public nested class \u2714\ufe0f \ud83d\udee0\ufe0f D107 undocumented-public-init Missing docstring in <code>__init__</code> \u2714\ufe0f \ud83d\udee0\ufe0f D200 fits-on-one-line One-line docstring should fit on one line \u2714\ufe0f \ud83d\udee0\ufe0f D201 no-blank-line-before-function No blank lines allowed before function docstring (found {num_lines}) \u2714\ufe0f \ud83d\udee0\ufe0f D202 no-blank-line-after-function No blank lines allowed after function docstring (found {num_lines}) \u2714\ufe0f \ud83d\udee0\ufe0f D203 one-blank-line-before-class 1 blank line required before class docstring \u2714\ufe0f \ud83d\udee0\ufe0f D204 one-blank-line-after-class 1 blank line required after class docstring \u2714\ufe0f \ud83d\udee0\ufe0f D205 blank-line-after-summary 1 blank line required between summary line and description \u2714\ufe0f \ud83d\udee0\ufe0f D206 indent-with-spaces Docstring should be indented with spaces, not tabs \u2714\ufe0f \ud83d\udee0\ufe0f D207 under-indentation Docstring is under-indented \u2714\ufe0f \ud83d\udee0\ufe0f D208 over-indentation Docstring is over-indented \u2714\ufe0f \ud83d\udee0\ufe0f D209 new-line-after-last-paragraph Multi-line docstring closing quotes should be on a separate line \u2714\ufe0f \ud83d\udee0\ufe0f D210 surrounding-whitespace No whitespaces allowed surrounding docstring text \u2714\ufe0f \ud83d\udee0\ufe0f D211 blank-line-before-class No blank lines allowed before class docstring \u2714\ufe0f \ud83d\udee0\ufe0f D212 multi-line-summary-first-line Multi-line docstring summary should start at the first line \u2714\ufe0f \ud83d\udee0\ufe0f D213 multi-line-summary-second-line Multi-line docstring summary should start at the second line \u2714\ufe0f \ud83d\udee0\ufe0f D214 section-not-over-indented Section is over-indented (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D215 section-underline-not-over-indented Section underline is over-indented (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D300 triple-single-quotes Use triple double quotes <code>\"\"\"</code> \u2714\ufe0f \ud83d\udee0\ufe0f D301 escape-sequence-in-docstring Use <code>r\"\"\"</code> if any backslashes in a docstring \u2714\ufe0f \ud83d\udee0\ufe0f D400 ends-in-period First line should end with a period \u2714\ufe0f \ud83d\udee0\ufe0f D401 non-imperative-mood First line of docstring should be in imperative mood: \"{first_line}\" \u2714\ufe0f \ud83d\udee0\ufe0f D402 no-signature First line should not be the function's signature \u2714\ufe0f \ud83d\udee0\ufe0f D403 first-line-capitalized First word of the first line should be capitalized: <code>{}</code> -&gt; <code>{}</code> \u2714\ufe0f \ud83d\udee0\ufe0f D404 docstring-starts-with-this First word of the docstring should not be \"This\" \u2714\ufe0f \ud83d\udee0\ufe0f D405 capitalize-section-name Section name should be properly capitalized (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D406 new-line-after-section-name Section name should end with a newline (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D407 dashed-underline-after-section Missing dashed underline after section (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D408 section-underline-after-name Section underline should be in the line following the section's name (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D409 section-underline-matches-section-length Section underline should match the length of its name (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D410 no-blank-line-after-section Missing blank line after section (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D411 no-blank-line-before-section Missing blank line before section (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D412 blank-lines-between-header-and-content No blank lines allowed between a section header and its content (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D413 blank-line-after-last-section Missing blank line after last section (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D414 empty-docstring-section Section has no content (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D415 ends-in-punctuation First line should end with a period, question mark, or exclamation point \u2714\ufe0f \ud83d\udee0\ufe0f D416 section-name-ends-in-colon Section name should end with a colon (\"{name}\") \u2714\ufe0f \ud83d\udee0\ufe0f D417 undocumented-param Missing argument description in the docstring for <code>{definition}</code>: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f D418 overload-with-docstring Function decorated with <code>@overload</code> shouldn't contain a docstring \u2714\ufe0f \ud83d\udee0\ufe0f D419 empty-docstring Docstring is empty \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#pyupgrade-up","title":"pyupgrade (UP)","text":"<p>For more, see pyupgrade on PyPI.</p> <p>For related settings, see pyupgrade.</p> Code Name Message UP001 useless-metaclass-type <code>__metaclass__ = type</code> is implied \u2714\ufe0f \ud83d\udee0\ufe0f UP003 type-of-primitive Use <code>{}</code> instead of <code>type(...)</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP004 useless-object-inheritance Class <code>{name}</code> inherits from <code>object</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP005 deprecated-unittest-alias <code>{alias}</code> is deprecated, use <code>{target}</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP006 non-pep585-annotation Use <code>{to}</code> instead of <code>{from}</code> for type annotation \u2714\ufe0f \ud83d\udee0\ufe0f UP007 non-pep604-annotation Use <code>X | Y</code> for type annotations \u2714\ufe0f \ud83d\udee0\ufe0f UP008 super-call-with-parameters Use <code>super()</code> instead of <code>super(__class__, self)</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP009 utf8-encoding-declaration UTF-8 encoding declaration is unnecessary \u2714\ufe0f \ud83d\udee0\ufe0f UP010 unnecessary-future-import Unnecessary <code>__future__</code> import <code>{import}</code> for target Python version \u2714\ufe0f \ud83d\udee0\ufe0f UP011 lru-cache-without-parameters Unnecessary parentheses to <code>functools.lru_cache</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP012 unnecessary-encode-utf8 Unnecessary call to <code>encode</code> as UTF-8 \u2714\ufe0f \ud83d\udee0\ufe0f UP013 convert-typed-dict-functional-to-class Convert <code>{name}</code> from <code>TypedDict</code> functional to class syntax \u2714\ufe0f \ud83d\udee0\ufe0f UP014 convert-named-tuple-functional-to-class Convert <code>{name}</code> from <code>NamedTuple</code> functional to class syntax \u2714\ufe0f \ud83d\udee0\ufe0f UP015 redundant-open-modes Unnecessary open mode parameters \u2714\ufe0f \ud83d\udee0\ufe0f UP017 datetime-timezone-utc Use <code>datetime.UTC</code> alias \u2714\ufe0f \ud83d\udee0\ufe0f UP018 native-literals Unnecessary <code>{literal_type}</code> call (rewrite as a literal) \u2714\ufe0f \ud83d\udee0\ufe0f UP019 typing-text-str-alias <code>typing.Text</code> is deprecated, use <code>str</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP020 open-alias Use builtin <code>open</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP021 replace-universal-newlines <code>universal_newlines</code> is deprecated, use <code>text</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP022 replace-stdout-stderr Prefer <code>capture_output</code> over sending <code>stdout</code> and <code>stderr</code> to <code>PIPE</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP023 deprecated-c-element-tree <code>cElementTree</code> is deprecated, use <code>ElementTree</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP024 os-error-alias Replace aliased errors with <code>OSError</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP025 unicode-kind-prefix Remove unicode literals from strings \u2714\ufe0f \ud83d\udee0\ufe0f UP026 deprecated-mock-import <code>mock</code> is deprecated, use <code>unittest.mock</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP027 unpacked-list-comprehension Replace unpacked list comprehension with a generator expression \u274c \ud83d\udee0\ufe0f UP028 yield-in-for-loop Replace <code>yield</code> over <code>for</code> loop with <code>yield from</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP029 unnecessary-builtin-import Unnecessary builtin import: <code>{import}</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP030 format-literals Use implicit references for positional format fields \u2714\ufe0f \ud83d\udee0\ufe0f UP031 printf-string-formatting Use format specifiers instead of percent format \u2714\ufe0f \ud83d\udee0\ufe0f UP032 f-string Use f-string instead of <code>format</code> call \u2714\ufe0f \ud83d\udee0\ufe0f UP033 lru-cache-with-maxsize-none Use <code>@functools.cache</code> instead of <code>@functools.lru_cache(maxsize=None)</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP034 extraneous-parentheses Avoid extraneous parentheses \u2714\ufe0f \ud83d\udee0\ufe0f UP035 deprecated-import Import from <code>{target}</code> instead: {names} \u2714\ufe0f \ud83d\udee0\ufe0f UP036 outdated-version-block Version block is outdated for minimum Python version \u2714\ufe0f \ud83d\udee0\ufe0f UP037 quoted-annotation Remove quotes from type annotation \u2714\ufe0f \ud83d\udee0\ufe0f UP038 non-pep604-isinstance Use <code>X | Y</code> in <code>{}</code> call instead of <code>(X, Y)</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP039 unnecessary-class-parentheses Unnecessary parentheses after class definition \u2714\ufe0f \ud83d\udee0\ufe0f UP040 non-pep695-type-alias Type alias <code>{name}</code> uses {type_alias_method} instead of the <code>type</code> keyword \u2714\ufe0f \ud83d\udee0\ufe0f UP041 timeout-error-alias Replace aliased errors with <code>TimeoutError</code> \u2714\ufe0f \ud83d\udee0\ufe0f UP042 replace-str-enum Class {name} inherits from both <code>str</code> and <code>enum.Enum</code> \ud83e\uddea \ud83d\udee0\ufe0f UP043 unnecessary-default-type-args Unnecessary default type arguments \u2714\ufe0f \ud83d\udee0\ufe0f UP044 non-pep646-unpack Use <code>*</code> for unpacking \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-2020-ytt","title":"flake8-2020 (YTT)","text":"<p>For more, see flake8-2020 on PyPI.</p> Code Name Message YTT101 sys-version-slice3 <code>sys.version[:3]</code> referenced (python3.10), use <code>sys.version_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f YTT102 sys-version2 <code>sys.version[2]</code> referenced (python3.10), use <code>sys.version_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f YTT103 sys-version-cmp-str3 <code>sys.version</code> compared to string (python3.10), use <code>sys.version_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f YTT201 sys-version-info0-eq3 <code>sys.version_info[0] == 3</code> referenced (python4), use <code>&gt;=</code> \u2714\ufe0f \ud83d\udee0\ufe0f YTT202 six-py3 <code>six.PY3</code> referenced (python4), use <code>not six.PY2</code> \u2714\ufe0f \ud83d\udee0\ufe0f YTT203 sys-version-info1-cmp-int <code>sys.version_info[1]</code> compared to integer (python4), compare <code>sys.version_info</code> to tuple \u2714\ufe0f \ud83d\udee0\ufe0f YTT204 sys-version-info-minor-cmp-int <code>sys.version_info.minor</code> compared to integer (python4), compare <code>sys.version_info</code> to tuple \u2714\ufe0f \ud83d\udee0\ufe0f YTT301 sys-version0 <code>sys.version[0]</code> referenced (python10), use <code>sys.version_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f YTT302 sys-version-cmp-str10 <code>sys.version</code> compared to string (python10), use <code>sys.version_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f YTT303 sys-version-slice1 <code>sys.version[:1]</code> referenced (python10), use <code>sys.version_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-annotations-ann","title":"flake8-annotations (ANN)","text":"<p>For more, see flake8-annotations on PyPI.</p> <p>For related settings, see flake8-annotations.</p> Code Name Message ANN001 missing-type-function-argument Missing type annotation for function argument <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN002 missing-type-args Missing type annotation for <code>*{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN003 missing-type-kwargs Missing type annotation for <code>**{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN101 missing-type-self Missing type annotation for <code>{name}</code> in method \u274c \ud83d\udee0\ufe0f ANN102 missing-type-cls Missing type annotation for <code>{name}</code> in classmethod \u274c \ud83d\udee0\ufe0f ANN201 missing-return-type-undocumented-public-function Missing return type annotation for public function <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN202 missing-return-type-private-function Missing return type annotation for private function <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN204 missing-return-type-special-method Missing return type annotation for special method <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN205 missing-return-type-static-method Missing return type annotation for staticmethod <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN206 missing-return-type-class-method Missing return type annotation for classmethod <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ANN401 any-type Dynamically typed expressions (typing.Any) are disallowed in <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-async-async","title":"flake8-async (ASYNC)","text":"<p>For more, see flake8-async on PyPI.</p> Code Name Message ASYNC100 cancel-scope-no-checkpoint A <code>with {method_name}(...):</code> context does not contain any <code>await</code> statements. This makes it pointless, as the timeout can only be triggered by a checkpoint. \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC105 trio-sync-call Call to <code>{method_name}</code> is not immediately awaited \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC109 async-function-with-timeout Async function definition with a <code>timeout</code> parameter \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC110 async-busy-wait Use <code>{module}.Event</code> instead of awaiting <code>{module}.sleep</code> in a <code>while</code> loop \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC115 async-zero-sleep Use <code>{module}.lowlevel.checkpoint()</code> instead of <code>{module}.sleep(0)</code> \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC116 long-sleep-not-forever <code>{module}.sleep()</code> with &gt;24 hour interval should usually be <code>{module}.sleep_forever()</code> \ud83e\uddea \ud83d\udee0\ufe0f ASYNC210 blocking-http-call-in-async-function Async functions should not call blocking HTTP methods \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC220 create-subprocess-in-async-function Async functions should not create subprocesses with blocking methods \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC221 run-process-in-async-function Async functions should not run processes with blocking methods \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC222 wait-for-process-in-async-function Async functions should not wait on processes with blocking methods \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC230 blocking-open-call-in-async-function Async functions should not open files with blocking methods like <code>open</code> \u2714\ufe0f \ud83d\udee0\ufe0f ASYNC251 blocking-sleep-in-async-function Async functions should not call <code>time.sleep</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-bandit-s","title":"flake8-bandit (S)","text":"<p>For more, see flake8-bandit on PyPI.</p> <p>For related settings, see flake8-bandit.</p> Code Name Message S101 assert Use of <code>assert</code> detected \u2714\ufe0f \ud83d\udee0\ufe0f S102 exec-builtin Use of <code>exec</code> detected \u2714\ufe0f \ud83d\udee0\ufe0f S103 bad-file-permissions <code>os.chmod</code> setting a permissive mask <code>{mask:#o}</code> on file or directory \u2714\ufe0f \ud83d\udee0\ufe0f S104 hardcoded-bind-all-interfaces Possible binding to all interfaces \u2714\ufe0f \ud83d\udee0\ufe0f S105 hardcoded-password-string Possible hardcoded password assigned to: \"{}\" \u2714\ufe0f \ud83d\udee0\ufe0f S106 hardcoded-password-func-arg Possible hardcoded password assigned to argument: \"{}\" \u2714\ufe0f \ud83d\udee0\ufe0f S107 hardcoded-password-default Possible hardcoded password assigned to function default: \"{}\" \u2714\ufe0f \ud83d\udee0\ufe0f S108 hardcoded-temp-file Probable insecure usage of temporary file or directory: \"{}\" \u2714\ufe0f \ud83d\udee0\ufe0f S110 try-except-pass <code>try</code>-<code>except</code>-<code>pass</code> detected, consider logging the exception \u2714\ufe0f \ud83d\udee0\ufe0f S112 try-except-continue <code>try</code>-<code>except</code>-<code>continue</code> detected, consider logging the exception \u2714\ufe0f \ud83d\udee0\ufe0f S113 request-without-timeout Probable use of <code>{module}</code> call without timeout \u2714\ufe0f \ud83d\udee0\ufe0f S201 flask-debug-true Use of <code>debug=True</code> in Flask app detected \u2714\ufe0f \ud83d\udee0\ufe0f S202 tarfile-unsafe-members Uses of <code>tarfile.extractall()</code> \u2714\ufe0f \ud83d\udee0\ufe0f S301 suspicious-pickle-usage <code>pickle</code> and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue \u2714\ufe0f \ud83d\udee0\ufe0f S302 suspicious-marshal-usage Deserialization with the <code>marshal</code> module is possibly dangerous \u2714\ufe0f \ud83d\udee0\ufe0f S303 suspicious-insecure-hash-usage Use of insecure MD2, MD4, MD5, or SHA1 hash function \u2714\ufe0f \ud83d\udee0\ufe0f S304 suspicious-insecure-cipher-usage Use of insecure cipher, replace with a known secure cipher such as AES \u2714\ufe0f \ud83d\udee0\ufe0f S305 suspicious-insecure-cipher-mode-usage Use of insecure block cipher mode, replace with a known secure mode such as CBC or CTR \u2714\ufe0f \ud83d\udee0\ufe0f S306 suspicious-mktemp-usage Use of insecure and deprecated function (<code>mktemp</code>) \u2714\ufe0f \ud83d\udee0\ufe0f S307 suspicious-eval-usage Use of possibly insecure function; consider using <code>ast.literal_eval</code> \u2714\ufe0f \ud83d\udee0\ufe0f S308 suspicious-mark-safe-usage Use of <code>mark_safe</code> may expose cross-site scripting vulnerabilities \u2714\ufe0f \ud83d\udee0\ufe0f S310 suspicious-url-open-usage Audit URL open for permitted schemes. Allowing use of <code>file:</code> or custom schemes is often unexpected. \u2714\ufe0f \ud83d\udee0\ufe0f S311 suspicious-non-cryptographic-random-usage Standard pseudo-random generators are not suitable for cryptographic purposes \u2714\ufe0f \ud83d\udee0\ufe0f S312 suspicious-telnet-usage Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol. \u2714\ufe0f \ud83d\udee0\ufe0f S313 suspicious-xmlc-element-tree-usage Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents \u2714\ufe0f \ud83d\udee0\ufe0f S314 suspicious-xml-element-tree-usage Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents \u2714\ufe0f \ud83d\udee0\ufe0f S315 suspicious-xml-expat-reader-usage Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents \u2714\ufe0f \ud83d\udee0\ufe0f S316 suspicious-xml-expat-builder-usage Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents \u2714\ufe0f \ud83d\udee0\ufe0f S317 suspicious-xml-sax-usage Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents \u2714\ufe0f \ud83d\udee0\ufe0f S318 suspicious-xml-mini-dom-usage Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents \u2714\ufe0f \ud83d\udee0\ufe0f S319 suspicious-xml-pull-dom-usage Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents \u2714\ufe0f \ud83d\udee0\ufe0f S320 suspicious-xmle-tree-usage Using <code>lxml</code> to parse untrusted data is known to be vulnerable to XML attacks \u2714\ufe0f \ud83d\udee0\ufe0f S321 suspicious-ftp-lib-usage FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol. \u2714\ufe0f \ud83d\udee0\ufe0f S323 suspicious-unverified-context-usage Python allows using an insecure context via the <code>_create_unverified_context</code> that reverts to the previous behavior that does not validate certificates or perform hostname checks. \u2714\ufe0f \ud83d\udee0\ufe0f S324 hashlib-insecure-hash-function Probable use of insecure hash functions in <code>{library}</code>: <code>{string}</code> \u2714\ufe0f \ud83d\udee0\ufe0f S401 suspicious-telnetlib-import <code>telnetlib</code> and related modules are considered insecure. Use SSH or another encrypted protocol. \ud83e\uddea \ud83d\udee0\ufe0f S402 suspicious-ftplib-import <code>ftplib</code> and related modules are considered insecure. Use SSH, SFTP, SCP, or another encrypted protocol. \ud83e\uddea \ud83d\udee0\ufe0f S403 suspicious-pickle-import <code>pickle</code>, <code>cPickle</code>, <code>dill</code>, and <code>shelve</code> modules are possibly insecure \ud83e\uddea \ud83d\udee0\ufe0f S404 suspicious-subprocess-import <code>subprocess</code> module is possibly insecure \ud83e\uddea \ud83d\udee0\ufe0f S405 suspicious-xml-etree-import <code>xml.etree</code> methods are vulnerable to XML attacks \ud83e\uddea \ud83d\udee0\ufe0f S406 suspicious-xml-sax-import <code>xml.sax</code> methods are vulnerable to XML attacks \ud83e\uddea \ud83d\udee0\ufe0f S407 suspicious-xml-expat-import <code>xml.dom.expatbuilder</code> is vulnerable to XML attacks \ud83e\uddea \ud83d\udee0\ufe0f S408 suspicious-xml-minidom-import <code>xml.dom.minidom</code> is vulnerable to XML attacks \ud83e\uddea \ud83d\udee0\ufe0f S409 suspicious-xml-pulldom-import <code>xml.dom.pulldom</code> is vulnerable to XML attacks \ud83e\uddea \ud83d\udee0\ufe0f S410 suspicious-lxml-import <code>lxml</code> is vulnerable to XML attacks \u274c \ud83d\udee0\ufe0f S411 suspicious-xmlrpc-import XMLRPC is vulnerable to remote XML attacks \ud83e\uddea \ud83d\udee0\ufe0f S412 suspicious-httpoxy-import <code>httpoxy</code> is a set of vulnerabilities that affect application code running inCGI, or CGI-like environments. The use of CGI for web applications should be avoided \ud83e\uddea \ud83d\udee0\ufe0f S413 suspicious-pycrypto-import <code>pycrypto</code> library is known to have publicly disclosed buffer overflow vulnerability \ud83e\uddea \ud83d\udee0\ufe0f S415 suspicious-pyghmi-import An IPMI-related module is being imported. Prefer an encrypted protocol over IPMI. \ud83e\uddea \ud83d\udee0\ufe0f S501 request-with-no-cert-validation Probable use of <code>{string}</code> call with <code>verify=False</code> disabling SSL certificate checks \u2714\ufe0f \ud83d\udee0\ufe0f S502 ssl-insecure-version Call made with insecure SSL protocol: <code>{protocol}</code> \u2714\ufe0f \ud83d\udee0\ufe0f S503 ssl-with-bad-defaults Argument default set to insecure SSL protocol: <code>{protocol}</code> \u2714\ufe0f \ud83d\udee0\ufe0f S504 ssl-with-no-version <code>ssl.wrap_socket</code> called without an `ssl_version`` \u2714\ufe0f \ud83d\udee0\ufe0f S505 weak-cryptographic-key {cryptographic_key} key sizes below {minimum_key_size} bits are considered breakable \u2714\ufe0f \ud83d\udee0\ufe0f S506 unsafe-yaml-load Probable use of unsafe loader <code>{name}</code> with <code>yaml.load</code>. Allows instantiation of arbitrary objects. Consider <code>yaml.safe_load</code>. \u2714\ufe0f \ud83d\udee0\ufe0f S507 ssh-no-host-key-verification Paramiko call with policy set to automatically trust the unknown host key \u2714\ufe0f \ud83d\udee0\ufe0f S508 snmp-insecure-version The use of SNMPv1 and SNMPv2 is insecure. Use SNMPv3 if able. \u2714\ufe0f \ud83d\udee0\ufe0f S509 snmp-weak-cryptography You should not use SNMPv3 without encryption. <code>noAuthNoPriv</code> &amp; <code>authNoPriv</code> is insecure. \u2714\ufe0f \ud83d\udee0\ufe0f S601 paramiko-call Possible shell injection via Paramiko call; check inputs are properly sanitized \u2714\ufe0f \ud83d\udee0\ufe0f S602 subprocess-popen-with-shell-equals-true <code>subprocess</code> call with <code>shell=True</code> seems safe, but may be changed in the future; consider rewriting without <code>shell</code> \u2714\ufe0f \ud83d\udee0\ufe0f S603 subprocess-without-shell-equals-true <code>subprocess</code> call: check for execution of untrusted input \u2714\ufe0f \ud83d\udee0\ufe0f S604 call-with-shell-equals-true Function call with <code>shell=True</code> parameter identified, security issue \u2714\ufe0f \ud83d\udee0\ufe0f S605 start-process-with-a-shell Starting a process with a shell: seems safe, but may be changed in the future; consider rewriting without <code>shell</code> \u2714\ufe0f \ud83d\udee0\ufe0f S606 start-process-with-no-shell Starting a process without a shell \u2714\ufe0f \ud83d\udee0\ufe0f S607 start-process-with-partial-path Starting a process with a partial executable path \u2714\ufe0f \ud83d\udee0\ufe0f S608 hardcoded-sql-expression Possible SQL injection vector through string-based query construction \u2714\ufe0f \ud83d\udee0\ufe0f S609 unix-command-wildcard-injection Possible wildcard injection in call due to <code>*</code> usage \u2714\ufe0f \ud83d\udee0\ufe0f S610 django-extra Use of Django <code>extra</code> can lead to SQL injection vulnerabilities \u2714\ufe0f \ud83d\udee0\ufe0f S611 django-raw-sql Use of <code>RawSQL</code> can lead to SQL injection vulnerabilities \u2714\ufe0f \ud83d\udee0\ufe0f S612 logging-config-insecure-listen Use of insecure <code>logging.config.listen</code> detected \u2714\ufe0f \ud83d\udee0\ufe0f S701 jinja2-autoescape-false Using jinja2 templates with <code>autoescape=False</code> is dangerous and can lead to XSS. Ensure <code>autoescape=True</code> or use the <code>select_autoescape</code> function. \u2714\ufe0f \ud83d\udee0\ufe0f S702 mako-templates Mako templates allow HTML and JavaScript rendering by default and are inherently open to XSS attacks \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-blind-except-ble","title":"flake8-blind-except (BLE)","text":"<p>For more, see flake8-blind-except on PyPI.</p> Code Name Message BLE001 blind-except Do not catch blind exception: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-boolean-trap-fbt","title":"flake8-boolean-trap (FBT)","text":"<p>For more, see flake8-boolean-trap on PyPI.</p> <p>For related settings, see flake8-boolean-trap.</p> Code Name Message FBT001 boolean-type-hint-positional-argument Boolean-typed positional argument in function definition \u2714\ufe0f \ud83d\udee0\ufe0f FBT002 boolean-default-value-positional-argument Boolean default positional argument in function definition \u2714\ufe0f \ud83d\udee0\ufe0f FBT003 boolean-positional-value-in-call Boolean positional value in function call \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-bugbear-b","title":"flake8-bugbear (B)","text":"<p>For more, see flake8-bugbear on PyPI.</p> <p>For related settings, see flake8-bugbear.</p> Code Name Message B002 unary-prefix-increment-decrement Python does not support the unary prefix increment operator (<code>++</code>) \u2714\ufe0f \ud83d\udee0\ufe0f B003 assignment-to-os-environ Assigning to <code>os.environ</code> doesn't clear the environment \u2714\ufe0f \ud83d\udee0\ufe0f B004 unreliable-callable-check Using <code>hasattr(x, \"__call__\")</code> to test if x is callable is unreliable. Use <code>callable(x)</code> for consistent results. \u2714\ufe0f \ud83d\udee0\ufe0f B005 strip-with-multi-characters Using <code>.strip()</code> with multi-character strings is misleading \u2714\ufe0f \ud83d\udee0\ufe0f B006 mutable-argument-default Do not use mutable data structures for argument defaults \u2714\ufe0f \ud83d\udee0\ufe0f B007 unused-loop-control-variable Loop control variable <code>{name}</code> not used within loop body \u2714\ufe0f \ud83d\udee0\ufe0f B008 function-call-in-default-argument Do not perform function call <code>{name}</code> in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable \u2714\ufe0f \ud83d\udee0\ufe0f B009 get-attr-with-constant Do not call <code>getattr</code> with a constant attribute value. It is not any safer than normal property access. \u2714\ufe0f \ud83d\udee0\ufe0f B010 set-attr-with-constant Do not call <code>setattr</code> with a constant attribute value. It is not any safer than normal property access. \u2714\ufe0f \ud83d\udee0\ufe0f B011 assert-false Do not <code>assert False</code> (<code>python -O</code> removes these calls), raise <code>AssertionError()</code> \u2714\ufe0f \ud83d\udee0\ufe0f B012 jump-statement-in-finally <code>{name}</code> inside <code>finally</code> blocks cause exceptions to be silenced \u2714\ufe0f \ud83d\udee0\ufe0f B013 redundant-tuple-in-exception-handler A length-one tuple literal is redundant in exception handlers \u2714\ufe0f \ud83d\udee0\ufe0f B014 duplicate-handler-exception Exception handler with duplicate exception: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f B015 useless-comparison Pointless comparison. Did you mean to assign a value? Otherwise, prepend <code>assert</code> or remove it. \u2714\ufe0f \ud83d\udee0\ufe0f B016 raise-literal Cannot raise a literal. Did you intend to return it or raise an Exception? \u2714\ufe0f \ud83d\udee0\ufe0f B017 assert-raises-exception <code>{assertion}({exception})</code> should be considered evil \u2714\ufe0f \ud83d\udee0\ufe0f B018 useless-expression Found useless expression. Either assign it to a variable or remove it. \u2714\ufe0f \ud83d\udee0\ufe0f B019 cached-instance-method Use of <code>functools.lru_cache</code> or <code>functools.cache</code> on methods can lead to memory leaks \u2714\ufe0f \ud83d\udee0\ufe0f B020 loop-variable-overrides-iterator Loop control variable <code>{name}</code> overrides iterable it iterates \u2714\ufe0f \ud83d\udee0\ufe0f B021 f-string-docstring f-string used as docstring. Python will interpret this as a joined string, rather than a docstring. \u2714\ufe0f \ud83d\udee0\ufe0f B022 useless-contextlib-suppress No arguments passed to <code>contextlib.suppress</code>. No exceptions will be suppressed and therefore this context manager is redundant \u2714\ufe0f \ud83d\udee0\ufe0f B023 function-uses-loop-variable Function definition does not bind loop variable <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f B024 abstract-base-class-without-abstract-method <code>{name}</code> is an abstract base class, but it has no abstract methods or properties \u2714\ufe0f \ud83d\udee0\ufe0f B025 duplicate-try-block-exception try-except block with duplicate exception <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f B026 star-arg-unpacking-after-keyword-arg Star-arg unpacking after a keyword argument is strongly discouraged \u2714\ufe0f \ud83d\udee0\ufe0f B027 empty-method-without-abstract-decorator <code>{name}</code> is an empty method in an abstract base class, but has no abstract decorator \u2714\ufe0f \ud83d\udee0\ufe0f B028 no-explicit-stacklevel No explicit <code>stacklevel</code> keyword argument found \u2714\ufe0f \ud83d\udee0\ufe0f B029 except-with-empty-tuple Using <code>except ():</code> with an empty tuple does not catch anything; add exceptions to handle \u2714\ufe0f \ud83d\udee0\ufe0f B030 except-with-non-exception-classes <code>except</code> handlers should only be exception classes or tuples of exception classes \u2714\ufe0f \ud83d\udee0\ufe0f B031 reuse-of-groupby-generator Using the generator returned from <code>itertools.groupby()</code> more than once will do nothing on the second usage \u2714\ufe0f \ud83d\udee0\ufe0f B032 unintentional-type-annotation Possible unintentional type annotation (using <code>:</code>). Did you mean to assign (using <code>=</code>)? \u2714\ufe0f \ud83d\udee0\ufe0f B033 duplicate-value Sets should not contain duplicate item <code>{value}</code> \u2714\ufe0f \ud83d\udee0\ufe0f B034 re-sub-positional-args <code>{method}</code> should pass <code>{param_name}</code> and <code>flags</code> as keyword arguments to avoid confusion due to unintuitive argument positions \u2714\ufe0f \ud83d\udee0\ufe0f B035 static-key-dict-comprehension Dictionary comprehension uses static key: <code>{key}</code> \u2714\ufe0f \ud83d\udee0\ufe0f B039 mutable-contextvar-default Do not use mutable data structures for <code>ContextVar</code> defaults \u2714\ufe0f \ud83d\udee0\ufe0f B901 return-in-generator Using <code>yield</code> and <code>return {value}</code> in a generator function can lead to confusing behavior \ud83e\uddea \ud83d\udee0\ufe0f B904 raise-without-from-inside-except Within an <code>except</code> clause, raise exceptions with <code>raise ... from err</code> or <code>raise ... from None</code> to distinguish them from errors in exception handling \u2714\ufe0f \ud83d\udee0\ufe0f B905 zip-without-explicit-strict <code>zip()</code> without an explicit <code>strict=</code> parameter \u2714\ufe0f \ud83d\udee0\ufe0f B909 loop-iterator-mutation Mutation to loop iterable <code>{name}</code> during iteration \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-builtins-a","title":"flake8-builtins (A)","text":"<p>For more, see flake8-builtins on PyPI.</p> <p>For related settings, see flake8-builtins.</p> Code Name Message A001 builtin-variable-shadowing Variable <code>{name}</code> is shadowing a Python builtin \u2714\ufe0f \ud83d\udee0\ufe0f A002 builtin-argument-shadowing Function argument <code>{name}</code> is shadowing a Python builtin \u2714\ufe0f \ud83d\udee0\ufe0f A003 builtin-attribute-shadowing Python builtin is shadowed by class attribute <code>{name}</code> from {row} \u2714\ufe0f \ud83d\udee0\ufe0f A004 builtin-import-shadowing Import <code>{name}</code> is shadowing a Python builtin \u2714\ufe0f \ud83d\udee0\ufe0f A005 builtin-module-shadowing Module <code>{name}</code> is shadowing a Python builtin module \ud83e\uddea \ud83d\udee0\ufe0f A006 builtin-lambda-argument-shadowing Lambda argument <code>{name}</code> is shadowing a Python builtin \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-commas-com","title":"flake8-commas (COM)","text":"<p>For more, see flake8-commas on PyPI.</p> Code Name Message COM812 missing-trailing-comma Trailing comma missing \u2714\ufe0f \ud83d\udee0\ufe0f COM818 trailing-comma-on-bare-tuple Trailing comma on bare tuple prohibited \u2714\ufe0f \ud83d\udee0\ufe0f COM819 prohibited-trailing-comma Trailing comma prohibited \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-copyright-cpy","title":"flake8-copyright (CPY)","text":"<p>For more, see flake8-copyright on PyPI.</p> <p>For related settings, see flake8-copyright.</p> Code Name Message CPY001 missing-copyright-notice Missing copyright notice at top of file \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-comprehensions-c4","title":"flake8-comprehensions (C4)","text":"<p>For more, see flake8-comprehensions on PyPI.</p> <p>For related settings, see flake8-comprehensions.</p> Code Name Message C400 unnecessary-generator-list Unnecessary generator (rewrite using <code>list()</code>) \u2714\ufe0f \ud83d\udee0\ufe0f C401 unnecessary-generator-set Unnecessary generator (rewrite using <code>set()</code>) \u2714\ufe0f \ud83d\udee0\ufe0f C402 unnecessary-generator-dict Unnecessary generator (rewrite as a <code>dict</code> comprehension) \u2714\ufe0f \ud83d\udee0\ufe0f C403 unnecessary-list-comprehension-set Unnecessary <code>list</code> comprehension (rewrite as a <code>set</code> comprehension) \u2714\ufe0f \ud83d\udee0\ufe0f C404 unnecessary-list-comprehension-dict Unnecessary <code>list</code> comprehension (rewrite as a <code>dict</code> comprehension) \u2714\ufe0f \ud83d\udee0\ufe0f C405 unnecessary-literal-set Unnecessary <code>{obj_type}</code> literal (rewrite as a <code>set</code> literal) \u2714\ufe0f \ud83d\udee0\ufe0f C406 unnecessary-literal-dict Unnecessary <code>{obj_type}</code> literal (rewrite as a <code>dict</code> literal) \u2714\ufe0f \ud83d\udee0\ufe0f C408 unnecessary-collection-call Unnecessary <code>{obj_type}</code> call (rewrite as a literal) \u2714\ufe0f \ud83d\udee0\ufe0f C409 unnecessary-literal-within-tuple-call Unnecessary <code>list</code> literal passed to <code>tuple()</code> (rewrite as a <code>tuple</code> literal) \u2714\ufe0f \ud83d\udee0\ufe0f C410 unnecessary-literal-within-list-call Unnecessary <code>{literal}</code> literal passed to <code>list()</code> (remove the outer call to <code>list()</code>) \u2714\ufe0f \ud83d\udee0\ufe0f C411 unnecessary-list-call Unnecessary <code>list</code> call (remove the outer call to <code>list()</code>) \u2714\ufe0f \ud83d\udee0\ufe0f C413 unnecessary-call-around-sorted Unnecessary <code>{func}</code> call around <code>sorted()</code> \u2714\ufe0f \ud83d\udee0\ufe0f C414 unnecessary-double-cast-or-process Unnecessary <code>{inner}</code> call within <code>{outer}()</code> \u2714\ufe0f \ud83d\udee0\ufe0f C415 unnecessary-subscript-reversal Unnecessary subscript reversal of iterable within <code>{func}()</code> \u2714\ufe0f \ud83d\udee0\ufe0f C416 unnecessary-comprehension Unnecessary <code>{obj_type}</code> comprehension (rewrite using <code>{obj_type}()</code>) \u2714\ufe0f \ud83d\udee0\ufe0f C417 unnecessary-map Unnecessary <code>map</code> usage (rewrite using a {object_type}) \u2714\ufe0f \ud83d\udee0\ufe0f C418 unnecessary-literal-within-dict-call Unnecessary <code>dict</code> {kind} passed to <code>dict()</code> (remove the outer call to <code>dict()</code>) \u2714\ufe0f \ud83d\udee0\ufe0f C419 unnecessary-comprehension-in-call Unnecessary list comprehension \u2714\ufe0f \ud83d\udee0\ufe0f C420 unnecessary-dict-comprehension-for-iterable Unnecessary dict comprehension for iterable; use <code>dict.fromkeys</code> instead \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-datetimez-dtz","title":"flake8-datetimez (DTZ)","text":"<p>For more, see flake8-datetimez on PyPI.</p> Code Name Message DTZ001 call-datetime-without-tzinfo <code>datetime.datetime()</code> called without a <code>tzinfo</code> argument \u2714\ufe0f \ud83d\udee0\ufe0f DTZ002 call-datetime-today <code>datetime.datetime.today()</code> used \u2714\ufe0f \ud83d\udee0\ufe0f DTZ003 call-datetime-utcnow <code>datetime.datetime.utcnow()</code> used \u2714\ufe0f \ud83d\udee0\ufe0f DTZ004 call-datetime-utcfromtimestamp <code>datetime.datetime.utcfromtimestamp()</code> used \u2714\ufe0f \ud83d\udee0\ufe0f DTZ005 call-datetime-now-without-tzinfo <code>datetime.datetime.now()</code> called without a <code>tz</code> argument \u2714\ufe0f \ud83d\udee0\ufe0f DTZ006 call-datetime-fromtimestamp <code>datetime.datetime.fromtimestamp()</code> called without a <code>tz</code> argument \u2714\ufe0f \ud83d\udee0\ufe0f DTZ007 call-datetime-strptime-without-zone Naive datetime constructed using <code>datetime.datetime.strptime()</code> without %z \u2714\ufe0f \ud83d\udee0\ufe0f DTZ011 call-date-today <code>datetime.date.today()</code> used \u2714\ufe0f \ud83d\udee0\ufe0f DTZ012 call-date-fromtimestamp <code>datetime.date.fromtimestamp()</code> used \u2714\ufe0f \ud83d\udee0\ufe0f DTZ901 datetime-min-max Use of <code>datetime.datetime.{min_max}</code> without timezone information \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-debugger-t10","title":"flake8-debugger (T10)","text":"<p>For more, see flake8-debugger on PyPI.</p> Code Name Message T100 debugger Trace found: <code>{name}</code> used \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-django-dj","title":"flake8-django (DJ)","text":"<p>For more, see flake8-django on PyPI.</p> Code Name Message DJ001 django-nullable-model-string-field Avoid using <code>null=True</code> on string-based fields such as <code>{field_name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f DJ003 django-locals-in-render-function Avoid passing <code>locals()</code> as context to a <code>render</code> function \u2714\ufe0f \ud83d\udee0\ufe0f DJ006 django-exclude-with-model-form Do not use <code>exclude</code> with <code>ModelForm</code>, use <code>fields</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f DJ007 django-all-with-model-form Do not use <code>__all__</code> with <code>ModelForm</code>, use <code>fields</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f DJ008 django-model-without-dunder-str Model does not define <code>__str__</code> method \u2714\ufe0f \ud83d\udee0\ufe0f DJ012 django-unordered-body-content-in-model Order of model's inner classes, methods, and fields does not follow the Django Style Guide: {element_type} should come before {prev_element_type} \u2714\ufe0f \ud83d\udee0\ufe0f DJ013 django-non-leading-receiver-decorator <code>@receiver</code> decorator must be on top of all the other decorators \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-errmsg-em","title":"flake8-errmsg (EM)","text":"<p>For more, see flake8-errmsg on PyPI.</p> <p>For related settings, see flake8-errmsg.</p> Code Name Message EM101 raw-string-in-exception Exception must not use a string literal, assign to variable first \u2714\ufe0f \ud83d\udee0\ufe0f EM102 f-string-in-exception Exception must not use an f-string literal, assign to variable first \u2714\ufe0f \ud83d\udee0\ufe0f EM103 dot-format-in-exception Exception must not use a <code>.format()</code> string directly, assign to variable first \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-executable-exe","title":"flake8-executable (EXE)","text":"<p>For more, see flake8-executable on PyPI.</p> Code Name Message EXE001 shebang-not-executable Shebang is present but file is not executable \u2714\ufe0f \ud83d\udee0\ufe0f EXE002 shebang-missing-executable-file The file is executable but no shebang is present \u2714\ufe0f \ud83d\udee0\ufe0f EXE003 shebang-missing-python Shebang should contain <code>python</code> \u2714\ufe0f \ud83d\udee0\ufe0f EXE004 shebang-leading-whitespace Avoid whitespace before shebang \u2714\ufe0f \ud83d\udee0\ufe0f EXE005 shebang-not-first-line Shebang should be at the beginning of the file \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-future-annotations-fa","title":"flake8-future-annotations (FA)","text":"<p>For more, see flake8-future-annotations on PyPI.</p> Code Name Message FA100 future-rewritable-type-annotation Add <code>from __future__ import annotations</code> to simplify <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f FA102 future-required-type-annotation Missing <code>from __future__ import annotations</code>, but uses {reason} \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-implicit-str-concat-isc","title":"flake8-implicit-str-concat (ISC)","text":"<p>For more, see flake8-implicit-str-concat on PyPI.</p> <p>For related settings, see flake8-implicit-str-concat.</p> Code Name Message ISC001 single-line-implicit-string-concatenation Implicitly concatenated string literals on one line \u2714\ufe0f \ud83d\udee0\ufe0f ISC002 multi-line-implicit-string-concatenation Implicitly concatenated string literals over multiple lines \u2714\ufe0f \ud83d\udee0\ufe0f ISC003 explicit-string-concatenation Explicitly concatenated string should be implicitly concatenated \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-import-conventions-icn","title":"flake8-import-conventions (ICN)","text":"<p>For more, see flake8-import-conventions on GitHub.</p> <p>For related settings, see flake8-import-conventions.</p> Code Name Message ICN001 unconventional-import-alias <code>{name}</code> should be imported as <code>{asname}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ICN002 banned-import-alias <code>{name}</code> should not be imported as <code>{asname}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ICN003 banned-import-from Members of <code>{name}</code> should not be imported explicitly \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-logging-log","title":"flake8-logging (LOG)","text":"<p>For more, see flake8-logging on PyPI.</p> Code Name Message LOG001 direct-logger-instantiation Use <code>logging.getLogger()</code> to instantiate loggers \u2714\ufe0f \ud83d\udee0\ufe0f LOG002 invalid-get-logger-argument Use <code>__name__</code> with <code>logging.getLogger()</code> \u2714\ufe0f \ud83d\udee0\ufe0f LOG007 exception-without-exc-info Use of <code>logging.exception</code> with falsy <code>exc_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f LOG009 undocumented-warn Use of undocumented <code>logging.WARN</code> constant \u2714\ufe0f \ud83d\udee0\ufe0f LOG015 root-logger-call <code>{}()</code> call on root logger \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-logging-format-g","title":"flake8-logging-format (G)","text":"<p>For more, see flake8-logging-format on PyPI.</p> Code Name Message G001 logging-string-format Logging statement uses <code>str.format</code> \u2714\ufe0f \ud83d\udee0\ufe0f G002 logging-percent-format Logging statement uses <code>%</code> \u2714\ufe0f \ud83d\udee0\ufe0f G003 logging-string-concat Logging statement uses <code>+</code> \u2714\ufe0f \ud83d\udee0\ufe0f G004 logging-f-string Logging statement uses f-string \u2714\ufe0f \ud83d\udee0\ufe0f G010 logging-warn Logging statement uses <code>warn</code> instead of <code>warning</code> \u2714\ufe0f \ud83d\udee0\ufe0f G101 logging-extra-attr-clash Logging statement uses an <code>extra</code> field that clashes with a <code>LogRecord</code> field: <code>{key}</code> \u2714\ufe0f \ud83d\udee0\ufe0f G201 logging-exc-info Logging <code>.exception(...)</code> should be used instead of <code>.error(..., exc_info=True)</code> \u2714\ufe0f \ud83d\udee0\ufe0f G202 logging-redundant-exc-info Logging statement has redundant <code>exc_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-no-pep420-inp","title":"flake8-no-pep420 (INP)","text":"<p>For more, see flake8-no-pep420 on PyPI.</p> Code Name Message INP001 implicit-namespace-package File <code>{filename}</code> is part of an implicit namespace package. Add an <code>__init__.py</code>. \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-pie-pie","title":"flake8-pie (PIE)","text":"<p>For more, see flake8-pie on PyPI.</p> Code Name Message PIE790 unnecessary-placeholder Unnecessary <code>pass</code> statement \u2714\ufe0f \ud83d\udee0\ufe0f PIE794 duplicate-class-field-definition Class field <code>{name}</code> is defined multiple times \u2714\ufe0f \ud83d\udee0\ufe0f PIE796 non-unique-enums Enum contains duplicate value: <code>{value}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PIE800 unnecessary-spread Unnecessary spread <code>**</code> \u2714\ufe0f \ud83d\udee0\ufe0f PIE804 unnecessary-dict-kwargs Unnecessary <code>dict</code> kwargs \u2714\ufe0f \ud83d\udee0\ufe0f PIE807 reimplemented-container-builtin Prefer <code>{container}</code> over useless lambda \u2714\ufe0f \ud83d\udee0\ufe0f PIE808 unnecessary-range-start Unnecessary <code>start</code> argument in <code>range</code> \u2714\ufe0f \ud83d\udee0\ufe0f PIE810 multiple-starts-ends-with Call <code>{attr}</code> once with a <code>tuple</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-print-t20","title":"flake8-print (T20)","text":"<p>For more, see flake8-print on PyPI.</p> Code Name Message T201 print <code>print</code> found \u2714\ufe0f \ud83d\udee0\ufe0f T203 p-print <code>pprint</code> found \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-pyi-pyi","title":"flake8-pyi (PYI)","text":"<p>For more, see flake8-pyi on PyPI.</p> Code Name Message PYI001 unprefixed-type-param Name of private <code>{kind}</code> must start with <code>_</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI002 complex-if-statement-in-stub <code>if</code> test must be a simple comparison against <code>sys.platform</code> or <code>sys.version_info</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI003 unrecognized-version-info-check Unrecognized <code>sys.version_info</code> check \u2714\ufe0f \ud83d\udee0\ufe0f PYI004 patch-version-comparison Version comparison must use only major and minor version \u2714\ufe0f \ud83d\udee0\ufe0f PYI005 wrong-tuple-length-version-comparison Version comparison must be against a length-{expected_length} tuple \u2714\ufe0f \ud83d\udee0\ufe0f PYI006 bad-version-info-comparison Use <code>&lt;</code> or <code>&gt;=</code> for <code>sys.version_info</code> comparisons \u2714\ufe0f \ud83d\udee0\ufe0f PYI007 unrecognized-platform-check Unrecognized <code>sys.platform</code> check \u2714\ufe0f \ud83d\udee0\ufe0f PYI008 unrecognized-platform-name Unrecognized platform <code>{platform}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI009 pass-statement-stub-body Empty body should contain <code>...</code>, not <code>pass</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI010 non-empty-stub-body Function body must contain only <code>...</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI011 typed-argument-default-in-stub Only simple default values allowed for typed arguments \u2714\ufe0f \ud83d\udee0\ufe0f PYI012 pass-in-class-body Class body must not contain <code>pass</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI013 ellipsis-in-non-empty-class-body Non-empty class body must not contain <code>...</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI014 argument-default-in-stub Only simple default values allowed for arguments \u2714\ufe0f \ud83d\udee0\ufe0f PYI015 assignment-default-in-stub Only simple default values allowed for assignments \u2714\ufe0f \ud83d\udee0\ufe0f PYI016 duplicate-union-member Duplicate union member <code>{}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI017 complex-assignment-in-stub Stubs should not contain assignments to attributes or multiple targets \u2714\ufe0f \ud83d\udee0\ufe0f PYI018 unused-private-type-var Private {type_var_like_kind} <code>{type_var_like_name}</code> is never used \u2714\ufe0f \ud83d\udee0\ufe0f PYI019 custom-type-var-return-type Methods like <code>{method_name}</code> should return <code>Self</code> instead of a custom <code>TypeVar</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI020 quoted-annotation-in-stub Quoted annotations should not be included in stubs \u2714\ufe0f \ud83d\udee0\ufe0f PYI021 docstring-in-stub Docstrings should not be included in stubs \u2714\ufe0f \ud83d\udee0\ufe0f PYI024 collections-named-tuple Use <code>typing.NamedTuple</code> instead of <code>collections.namedtuple</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI025 unaliased-collections-abc-set-import Use <code>from collections.abc import Set as AbstractSet</code> to avoid confusion with the <code>set</code> builtin \u2714\ufe0f \ud83d\udee0\ufe0f PYI026 type-alias-without-annotation Use <code>{module}.TypeAlias</code> for type alias, e.g., <code>{name}: TypeAlias = {value}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI029 str-or-repr-defined-in-stub Defining <code>{name}</code> in a stub is almost always redundant \u2714\ufe0f \ud83d\udee0\ufe0f PYI030 unnecessary-literal-union Multiple literal members in a union. Use a single literal, e.g. <code>Literal[{}]</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI032 any-eq-ne-annotation Prefer <code>object</code> to <code>Any</code> for the second parameter to <code>{method_name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI033 type-comment-in-stub Don't use type comments in stub file \u2714\ufe0f \ud83d\udee0\ufe0f PYI034 non-self-return-type <code>__new__</code> methods usually return <code>self</code> at runtime \u2714\ufe0f \ud83d\udee0\ufe0f PYI035 unassigned-special-variable-in-stub <code>{name}</code> in a stub file must have a value, as it has the same semantics as <code>{name}</code> at runtime \u2714\ufe0f \ud83d\udee0\ufe0f PYI036 bad-exit-annotation Star-args in <code>{method_name}</code> should be annotated with <code>object</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI041 redundant-numeric-union Use <code>{supertype}</code> instead of <code>{subtype} | {supertype}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI042 snake-case-type-alias Type alias <code>{name}</code> should be CamelCase \u2714\ufe0f \ud83d\udee0\ufe0f PYI043 t-suffixed-type-alias Private type alias <code>{name}</code> should not be suffixed with <code>T</code> (the <code>T</code> suffix implies that an object is a <code>TypeVar</code>) \u2714\ufe0f \ud83d\udee0\ufe0f PYI044 future-annotations-in-stub <code>from __future__ import annotations</code> has no effect in stub files, since type checkers automatically treat stubs as having those semantics \u2714\ufe0f \ud83d\udee0\ufe0f PYI045 iter-method-return-iterable <code>__aiter__</code> methods should return an <code>AsyncIterator</code>, not an <code>AsyncIterable</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI046 unused-private-protocol Private protocol <code>{name}</code> is never used \u2714\ufe0f \ud83d\udee0\ufe0f PYI047 unused-private-type-alias Private TypeAlias <code>{name}</code> is never used \u2714\ufe0f \ud83d\udee0\ufe0f PYI048 stub-body-multiple-statements Function body must contain exactly one statement \u2714\ufe0f \ud83d\udee0\ufe0f PYI049 unused-private-typed-dict Private TypedDict <code>{name}</code> is never used \u2714\ufe0f \ud83d\udee0\ufe0f PYI050 no-return-argument-annotation-in-stub Prefer <code>{module}.Never</code> over <code>NoReturn</code> for argument annotations \u2714\ufe0f \ud83d\udee0\ufe0f PYI051 redundant-literal-union <code>Literal[{literal}]</code> is redundant in a union with <code>{builtin_type}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI052 unannotated-assignment-in-stub Need type annotation for <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI053 string-or-bytes-too-long String and bytes literals longer than 50 characters are not permitted \u2714\ufe0f \ud83d\udee0\ufe0f PYI054 numeric-literal-too-long Numeric literals with a string representation longer than ten characters are not permitted \u2714\ufe0f \ud83d\udee0\ufe0f PYI055 unnecessary-type-union Multiple <code>type</code> members in a union. Combine them into one, e.g., <code>type[{union_str}]</code>. \u2714\ufe0f \ud83d\udee0\ufe0f PYI056 unsupported-method-call-on-all Calling <code>.{name}()</code> on <code>__all__</code> may not be supported by all type checkers (use <code>+=</code> instead) \u2714\ufe0f \ud83d\udee0\ufe0f PYI057 byte-string-usage Do not use <code>{origin}.ByteString</code>, which has unclear semantics and is deprecated \u2714\ufe0f \ud83d\udee0\ufe0f PYI058 generator-return-from-iter-method Use <code>{return_type}</code> as the return value for simple <code>{method}</code> methods \u2714\ufe0f \ud83d\udee0\ufe0f PYI059 generic-not-last-base-class <code>Generic[]</code> should always be the last base class \ud83e\uddea \ud83d\udee0\ufe0f PYI061 redundant-none-literal <code>Literal[None, ...]</code> can be replaced with <code>Literal[...] | None</code> \ud83e\uddea \ud83d\udee0\ufe0f PYI062 duplicate-literal-member Duplicate literal member <code>{}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI063 pep484-style-positional-only-parameter Use PEP 570 syntax for positional-only parameters \u2714\ufe0f \ud83d\udee0\ufe0f PYI064 redundant-final-literal <code>Final[Literal[{literal}]]</code> can be replaced with a bare <code>Final</code> \u2714\ufe0f \ud83d\udee0\ufe0f PYI066 bad-version-info-order Put branches for newer Python versions first when branching on <code>sys.version_info</code> comparisons \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-pytest-style-pt","title":"flake8-pytest-style (PT)","text":"<p>For more, see flake8-pytest-style on PyPI.</p> <p>For related settings, see flake8-pytest-style.</p> Code Name Message PT001 pytest-fixture-incorrect-parentheses-style Use <code>@pytest.fixture{expected}</code> over <code>@pytest.fixture{actual}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT002 pytest-fixture-positional-args Configuration for fixture <code>{function}</code> specified via positional args, use kwargs \u2714\ufe0f \ud83d\udee0\ufe0f PT003 pytest-extraneous-scope-function <code>scope='function'</code> is implied in <code>@pytest.fixture()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT004 pytest-missing-fixture-name-underscore Fixture <code>{function}</code> does not return anything, add leading underscore \u274c \ud83d\udee0\ufe0f PT005 pytest-incorrect-fixture-name-underscore Fixture <code>{function}</code> returns a value, remove leading underscore \u274c \ud83d\udee0\ufe0f PT006 pytest-parametrize-names-wrong-type Wrong type passed to first argument of <code>@pytest.mark.parametrize</code>; expected {expected_string} \u2714\ufe0f \ud83d\udee0\ufe0f PT007 pytest-parametrize-values-wrong-type Wrong values type in <code>@pytest.mark.parametrize</code> expected <code>{values}</code> of <code>{row}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT008 pytest-patch-with-lambda Use <code>return_value=</code> instead of patching with <code>lambda</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT009 pytest-unittest-assertion Use a regular <code>assert</code> instead of unittest-style <code>{assertion}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT010 pytest-raises-without-exception set the expected exception in <code>pytest.raises()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT011 pytest-raises-too-broad <code>pytest.raises({exception})</code> is too broad, set the <code>match</code> parameter or use a more specific exception \u2714\ufe0f \ud83d\udee0\ufe0f PT012 pytest-raises-with-multiple-statements <code>pytest.raises()</code> block should contain a single simple statement \u2714\ufe0f \ud83d\udee0\ufe0f PT013 pytest-incorrect-pytest-import Incorrect import of <code>pytest</code>; use <code>import pytest</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f PT014 pytest-duplicate-parametrize-test-cases Duplicate of test case at index {index} in <code>@pytest_mark.parametrize</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT015 pytest-assert-always-false Assertion always fails, replace with <code>pytest.fail()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT016 pytest-fail-without-message No message passed to <code>pytest.fail()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT017 pytest-assert-in-except Found assertion on exception <code>{name}</code> in <code>except</code> block, use <code>pytest.raises()</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f PT018 pytest-composite-assertion Assertion should be broken down into multiple parts \u2714\ufe0f \ud83d\udee0\ufe0f PT019 pytest-fixture-param-without-value Fixture <code>{name}</code> without value is injected as parameter, use <code>@pytest.mark.usefixtures</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f PT020 pytest-deprecated-yield-fixture <code>@pytest.yield_fixture</code> is deprecated, use <code>@pytest.fixture</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT021 pytest-fixture-finalizer-callback Use <code>yield</code> instead of <code>request.addfinalizer</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT022 pytest-useless-yield-fixture No teardown in fixture <code>{name}</code>, use <code>return</code> instead of <code>yield</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT023 pytest-incorrect-mark-parentheses-style Use <code>@pytest.mark.{mark_name}{expected_parens}</code> over <code>@pytest.mark.{mark_name}{actual_parens}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PT024 pytest-unnecessary-asyncio-mark-on-fixture <code>pytest.mark.asyncio</code> is unnecessary for fixtures \u2714\ufe0f \ud83d\udee0\ufe0f PT025 pytest-erroneous-use-fixtures-on-fixture <code>pytest.mark.usefixtures</code> has no effect on fixtures \u2714\ufe0f \ud83d\udee0\ufe0f PT026 pytest-use-fixtures-without-parameters Useless <code>pytest.mark.usefixtures</code> without parameters \u2714\ufe0f \ud83d\udee0\ufe0f PT027 pytest-unittest-raises-assertion Use <code>pytest.raises</code> instead of unittest-style <code>{assertion}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-quotes-q","title":"flake8-quotes (Q)","text":"<p>For more, see flake8-quotes on PyPI.</p> <p>For related settings, see flake8-quotes.</p> Code Name Message Q000 bad-quotes-inline-string Single quotes found but double quotes preferred \u2714\ufe0f \ud83d\udee0\ufe0f Q001 bad-quotes-multiline-string Single quote multiline found but double quotes preferred \u2714\ufe0f \ud83d\udee0\ufe0f Q002 bad-quotes-docstring Single quote docstring found but double quotes preferred \u2714\ufe0f \ud83d\udee0\ufe0f Q003 avoidable-escaped-quote Change outer quotes to avoid escaping inner quotes \u2714\ufe0f \ud83d\udee0\ufe0f Q004 unnecessary-escaped-quote Unnecessary escape on inner quote character \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-raise-rse","title":"flake8-raise (RSE)","text":"<p>For more, see flake8-raise on PyPI.</p> Code Name Message RSE102 unnecessary-paren-on-raise-exception Unnecessary parentheses on raised exception \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-return-ret","title":"flake8-return (RET)","text":"<p>For more, see flake8-return on PyPI.</p> Code Name Message RET501 unnecessary-return-none Do not explicitly <code>return None</code> in function if it is the only possible return value \u2714\ufe0f \ud83d\udee0\ufe0f RET502 implicit-return-value Do not implicitly <code>return None</code> in function able to return non-<code>None</code> value \u2714\ufe0f \ud83d\udee0\ufe0f RET503 implicit-return Missing explicit <code>return</code> at the end of function able to return non-<code>None</code> value \u2714\ufe0f \ud83d\udee0\ufe0f RET504 unnecessary-assign Unnecessary assignment to <code>{name}</code> before <code>return</code> statement \u2714\ufe0f \ud83d\udee0\ufe0f RET505 superfluous-else-return Unnecessary <code>{branch}</code> after <code>return</code> statement \u2714\ufe0f \ud83d\udee0\ufe0f RET506 superfluous-else-raise Unnecessary <code>{branch}</code> after <code>raise</code> statement \u2714\ufe0f \ud83d\udee0\ufe0f RET507 superfluous-else-continue Unnecessary <code>{branch}</code> after <code>continue</code> statement \u2714\ufe0f \ud83d\udee0\ufe0f RET508 superfluous-else-break Unnecessary <code>{branch}</code> after <code>break</code> statement \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-self-slf","title":"flake8-self (SLF)","text":"<p>For more, see flake8-self on PyPI.</p> <p>For related settings, see flake8-self.</p> Code Name Message SLF001 private-member-access Private member accessed: <code>{access}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-slots-slot","title":"flake8-slots (SLOT)","text":"<p>For more, see flake8-slots on PyPI.</p> Code Name Message SLOT000 no-slots-in-str-subclass Subclasses of <code>str</code> should define <code>__slots__</code> \u2714\ufe0f \ud83d\udee0\ufe0f SLOT001 no-slots-in-tuple-subclass Subclasses of <code>tuple</code> should define <code>__slots__</code> \u2714\ufe0f \ud83d\udee0\ufe0f SLOT002 no-slots-in-namedtuple-subclass Subclasses of {namedtuple_kind} should define <code>__slots__</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-simplify-sim","title":"flake8-simplify (SIM)","text":"<p>For more, see flake8-simplify on PyPI.</p> Code Name Message SIM101 duplicate-isinstance-call Multiple <code>isinstance</code> calls for <code>{name}</code>, merge into a single call \u2714\ufe0f \ud83d\udee0\ufe0f SIM102 collapsible-if Use a single <code>if</code> statement instead of nested <code>if</code> statements \u2714\ufe0f \ud83d\udee0\ufe0f SIM103 needless-bool Return the condition <code>{condition}</code> directly \u2714\ufe0f \ud83d\udee0\ufe0f SIM105 suppressible-exception Use <code>contextlib.suppress({exception})</code> instead of <code>try</code>-<code>except</code>-<code>pass</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM107 return-in-try-except-finally Don't use <code>return</code> in <code>try</code>-<code>except</code> and <code>finally</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM108 if-else-block-instead-of-if-exp Use ternary operator <code>{contents}</code> instead of <code>if</code>-<code>else</code>-block \u2714\ufe0f \ud83d\udee0\ufe0f SIM109 compare-with-tuple Use <code>{replacement}</code> instead of multiple equality comparisons \u2714\ufe0f \ud83d\udee0\ufe0f SIM110 reimplemented-builtin Use <code>{replacement}</code> instead of <code>for</code> loop \u2714\ufe0f \ud83d\udee0\ufe0f SIM112 uncapitalized-environment-variables Use capitalized environment variable <code>{expected}</code> instead of <code>{actual}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM113 enumerate-for-loop Use <code>enumerate()</code> for index variable <code>{index}</code> in <code>for</code> loop \u2714\ufe0f \ud83d\udee0\ufe0f SIM114 if-with-same-arms Combine <code>if</code> branches using logical <code>or</code> operator \u2714\ufe0f \ud83d\udee0\ufe0f SIM115 open-file-with-context-handler Use a context manager for opening files \u2714\ufe0f \ud83d\udee0\ufe0f SIM116 if-else-block-instead-of-dict-lookup Use a dictionary instead of consecutive <code>if</code> statements \u2714\ufe0f \ud83d\udee0\ufe0f SIM117 multiple-with-statements Use a single <code>with</code> statement with multiple contexts instead of nested <code>with</code> statements \u2714\ufe0f \ud83d\udee0\ufe0f SIM118 in-dict-keys Use <code>key {operator} dict</code> instead of <code>key {operator} dict.keys()</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM201 negate-equal-op Use <code>{left} != {right}</code> instead of <code>not {left} == {right}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM202 negate-not-equal-op Use <code>{left} == {right}</code> instead of <code>not {left} != {right}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM208 double-negation Use <code>{expr}</code> instead of <code>not (not {expr})</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM210 if-expr-with-true-false Remove unnecessary <code>True if ... else False</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM211 if-expr-with-false-true Use <code>not ...</code> instead of <code>False if ... else True</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM212 if-expr-with-twisted-arms Use <code>{expr_else} if {expr_else} else {expr_body}</code> instead of <code>{expr_body} if not {expr_else} else {expr_else}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM220 expr-and-not-expr Use <code>False</code> instead of <code>{name} and not {name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM221 expr-or-not-expr Use <code>True</code> instead of <code>{name} or not {name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM222 expr-or-true Use <code>{expr}</code> instead of <code>{replaced}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM223 expr-and-false Use <code>{expr}</code> instead of <code>{replaced}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM300 yoda-conditions Yoda condition detected \u2714\ufe0f \ud83d\udee0\ufe0f SIM401 if-else-block-instead-of-dict-get Use <code>{contents}</code> instead of an <code>if</code> block \u2714\ufe0f \ud83d\udee0\ufe0f SIM905 split-static-string Consider using a list literal instead of <code>str.split</code> \ud83e\uddea \ud83d\udee0\ufe0f SIM910 dict-get-with-none-default Use <code>{expected}</code> instead of <code>{actual}</code> \u2714\ufe0f \ud83d\udee0\ufe0f SIM911 zip-dict-keys-and-values Use <code>{expected}</code> instead of <code>{actual}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-tidy-imports-tid","title":"flake8-tidy-imports (TID)","text":"<p>For more, see flake8-tidy-imports on PyPI.</p> <p>For related settings, see flake8-tidy-imports.</p> Code Name Message TID251 banned-api <code>{name}</code> is banned: {message} \u2714\ufe0f \ud83d\udee0\ufe0f TID252 relative-imports Prefer absolute imports over relative imports from parent modules \u2714\ufe0f \ud83d\udee0\ufe0f TID253 banned-module-level-imports <code>{name}</code> is banned at the module level \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-type-checking-tc","title":"flake8-type-checking (TC)","text":"<p>For more, see flake8-type-checking on PyPI.</p> <p>For related settings, see flake8-type-checking.</p> Code Name Message TC001 typing-only-first-party-import Move application import <code>{}</code> into a type-checking block \u2714\ufe0f \ud83d\udee0\ufe0f TC002 typing-only-third-party-import Move third-party import <code>{}</code> into a type-checking block \u2714\ufe0f \ud83d\udee0\ufe0f TC003 typing-only-standard-library-import Move standard library import <code>{}</code> into a type-checking block \u2714\ufe0f \ud83d\udee0\ufe0f TC004 runtime-import-in-type-checking-block Move import <code>{qualified_name}</code> out of type-checking block. Import is used for more than type hinting. \u2714\ufe0f \ud83d\udee0\ufe0f TC005 empty-type-checking-block Found empty type-checking block \u2714\ufe0f \ud83d\udee0\ufe0f TC010 runtime-string-union Invalid string member in <code>X | Y</code>-style union type \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-gettext-int","title":"flake8-gettext (INT)","text":"<p>For more, see flake8-gettext on PyPI.</p> <p>For related settings, see flake8-gettext.</p> Code Name Message INT001 f-string-in-get-text-func-call f-string is resolved before function call; consider <code>_(\"string %s\") % arg</code> \u2714\ufe0f \ud83d\udee0\ufe0f INT002 format-in-get-text-func-call <code>format</code> method argument is resolved before function call; consider <code>_(\"string %s\") % arg</code> \u2714\ufe0f \ud83d\udee0\ufe0f INT003 printf-in-get-text-func-call printf-style format is resolved before function call; consider <code>_(\"string %s\") % arg</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-unused-arguments-arg","title":"flake8-unused-arguments (ARG)","text":"<p>For more, see flake8-unused-arguments on PyPI.</p> <p>For related settings, see flake8-unused-arguments.</p> Code Name Message ARG001 unused-function-argument Unused function argument: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ARG002 unused-method-argument Unused method argument: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ARG003 unused-class-method-argument Unused class method argument: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ARG004 unused-static-method-argument Unused static method argument: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f ARG005 unused-lambda-argument Unused lambda argument: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-use-pathlib-pth","title":"flake8-use-pathlib (PTH)","text":"<p>For more, see flake8-use-pathlib on PyPI.</p> Code Name Message PTH100 os-path-abspath <code>os.path.abspath()</code> should be replaced by <code>Path.resolve()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH101 os-chmod <code>os.chmod()</code> should be replaced by <code>Path.chmod()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH102 os-mkdir <code>os.mkdir()</code> should be replaced by <code>Path.mkdir()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH103 os-makedirs <code>os.makedirs()</code> should be replaced by <code>Path.mkdir(parents=True)</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH104 os-rename <code>os.rename()</code> should be replaced by <code>Path.rename()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH105 os-replace <code>os.replace()</code> should be replaced by <code>Path.replace()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH106 os-rmdir <code>os.rmdir()</code> should be replaced by <code>Path.rmdir()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH107 os-remove <code>os.remove()</code> should be replaced by <code>Path.unlink()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH108 os-unlink <code>os.unlink()</code> should be replaced by <code>Path.unlink()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH109 os-getcwd <code>os.getcwd()</code> should be replaced by <code>Path.cwd()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH110 os-path-exists <code>os.path.exists()</code> should be replaced by <code>Path.exists()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH111 os-path-expanduser <code>os.path.expanduser()</code> should be replaced by <code>Path.expanduser()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH112 os-path-isdir <code>os.path.isdir()</code> should be replaced by <code>Path.is_dir()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH113 os-path-isfile <code>os.path.isfile()</code> should be replaced by <code>Path.is_file()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH114 os-path-islink <code>os.path.islink()</code> should be replaced by <code>Path.is_symlink()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH115 os-readlink <code>os.readlink()</code> should be replaced by <code>Path.readlink()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH116 os-stat <code>os.stat()</code> should be replaced by <code>Path.stat()</code>, <code>Path.owner()</code>, or <code>Path.group()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH117 os-path-isabs <code>os.path.isabs()</code> should be replaced by <code>Path.is_absolute()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH118 os-path-join <code>os.{module}.join()</code> should be replaced by <code>Path</code> with <code>/</code> operator \u2714\ufe0f \ud83d\udee0\ufe0f PTH119 os-path-basename <code>os.path.basename()</code> should be replaced by <code>Path.name</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH120 os-path-dirname <code>os.path.dirname()</code> should be replaced by <code>Path.parent</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH121 os-path-samefile <code>os.path.samefile()</code> should be replaced by <code>Path.samefile()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH122 os-path-splitext <code>os.path.splitext()</code> should be replaced by <code>Path.suffix</code>, <code>Path.stem</code>, and <code>Path.parent</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH123 builtin-open <code>open()</code> should be replaced by <code>Path.open()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH124 py-path <code>py.path</code> is in maintenance mode, use <code>pathlib</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f PTH201 path-constructor-current-directory Do not pass the current directory explicitly to <code>Path</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH202 os-path-getsize <code>os.path.getsize</code> should be replaced by <code>Path.stat().st_size</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH203 os-path-getatime <code>os.path.getatime</code> should be replaced by <code>Path.stat().st_atime</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH204 os-path-getmtime <code>os.path.getmtime</code> should be replaced by <code>Path.stat().st_mtime</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH205 os-path-getctime <code>os.path.getctime</code> should be replaced by <code>Path.stat().st_ctime</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH206 os-sep-split Replace <code>.split(os.sep)</code> with <code>Path.parts</code> \u2714\ufe0f \ud83d\udee0\ufe0f PTH207 glob Replace <code>{function}</code> with <code>Path.glob</code> or <code>Path.rglob</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-todos-td","title":"flake8-todos (TD)","text":"<p>For more, see flake8-todos on GitHub.</p> Code Name Message TD001 invalid-todo-tag Invalid TODO tag: <code>{tag}</code> \u2714\ufe0f \ud83d\udee0\ufe0f TD002 missing-todo-author Missing author in TODO; try: <code># TODO(&lt;author_name&gt;): ...</code> or <code># TODO @&lt;author_name&gt;: ...</code> \u2714\ufe0f \ud83d\udee0\ufe0f TD003 missing-todo-link Missing issue link on the line following this TODO \u2714\ufe0f \ud83d\udee0\ufe0f TD004 missing-todo-colon Missing colon in TODO \u2714\ufe0f \ud83d\udee0\ufe0f TD005 missing-todo-description Missing issue description after <code>TODO</code> \u2714\ufe0f \ud83d\udee0\ufe0f TD006 invalid-todo-capitalization Invalid TODO capitalization: <code>{tag}</code> should be <code>TODO</code> \u2714\ufe0f \ud83d\udee0\ufe0f TD007 missing-space-after-todo-colon Missing space after colon in TODO \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flake8-fixme-fix","title":"flake8-fixme (FIX)","text":"<p>For more, see flake8-fixme on GitHub.</p> Code Name Message FIX001 line-contains-fixme Line contains FIXME, consider resolving the issue \u2714\ufe0f \ud83d\udee0\ufe0f FIX002 line-contains-todo Line contains TODO, consider resolving the issue \u2714\ufe0f \ud83d\udee0\ufe0f FIX003 line-contains-xxx Line contains XXX, consider resolving the issue \u2714\ufe0f \ud83d\udee0\ufe0f FIX004 line-contains-hack Line contains HACK, consider resolving the issue \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#eradicate-era","title":"eradicate (ERA)","text":"<p>For more, see eradicate on PyPI.</p> Code Name Message ERA001 commented-out-code Found commented-out code \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#pandas-vet-pd","title":"pandas-vet (PD)","text":"<p>For more, see pandas-vet on PyPI.</p> Code Name Message PD002 pandas-use-of-inplace-argument <code>inplace=True</code> should be avoided; it has inconsistent behavior \u2714\ufe0f \ud83d\udee0\ufe0f PD003 pandas-use-of-dot-is-null <code>.isna</code> is preferred to <code>.isnull</code>; functionality is equivalent \u2714\ufe0f \ud83d\udee0\ufe0f PD004 pandas-use-of-dot-not-null <code>.notna</code> is preferred to <code>.notnull</code>; functionality is equivalent \u2714\ufe0f \ud83d\udee0\ufe0f PD007 pandas-use-of-dot-ix <code>.ix</code> is deprecated; use more explicit <code>.loc</code> or <code>.iloc</code> \u2714\ufe0f \ud83d\udee0\ufe0f PD008 pandas-use-of-dot-at Use <code>.loc</code> instead of <code>.at</code>. If speed is important, use NumPy. \u2714\ufe0f \ud83d\udee0\ufe0f PD009 pandas-use-of-dot-iat Use <code>.iloc</code> instead of <code>.iat</code>. If speed is important, use NumPy. \u2714\ufe0f \ud83d\udee0\ufe0f PD010 pandas-use-of-dot-pivot-or-unstack <code>.pivot_table</code> is preferred to <code>.pivot</code> or <code>.unstack</code>; provides same functionality \u2714\ufe0f \ud83d\udee0\ufe0f PD011 pandas-use-of-dot-values Use <code>.to_numpy()</code> instead of <code>.values</code> \u2714\ufe0f \ud83d\udee0\ufe0f PD012 pandas-use-of-dot-read-table Use <code>.read_csv</code> instead of <code>.read_table</code> to read CSV files \u2714\ufe0f \ud83d\udee0\ufe0f PD013 pandas-use-of-dot-stack <code>.melt</code> is preferred to <code>.stack</code>; provides same functionality \u2714\ufe0f \ud83d\udee0\ufe0f PD015 pandas-use-of-pd-merge Use <code>.merge</code> method instead of <code>pd.merge</code> function. They have equivalent functionality. \u2714\ufe0f \ud83d\udee0\ufe0f PD101 pandas-nunique-constant-series-check Using <code>series.nunique()</code> for checking that a series is constant is inefficient \u2714\ufe0f \ud83d\udee0\ufe0f PD901 pandas-df-variable-name Avoid using the generic variable name <code>df</code> for DataFrames \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#pygrep-hooks-pgh","title":"pygrep-hooks (PGH)","text":"<p>For more, see pygrep-hooks on GitHub.</p> Code Name Message PGH001 eval No builtin <code>eval()</code> allowed \u274c \ud83d\udee0\ufe0f PGH002 deprecated-log-warn <code>warn</code> is deprecated in favor of <code>warning</code> \u274c \ud83d\udee0\ufe0f PGH003 blanket-type-ignore Use specific rule codes when ignoring type issues \u2714\ufe0f \ud83d\udee0\ufe0f PGH004 blanket-noqa Use specific rule codes when using <code>noqa</code> \u2714\ufe0f \ud83d\udee0\ufe0f PGH005 invalid-mock-access Mock method should be called: <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#pylint-pl","title":"Pylint (PL)","text":"<p>For more, see Pylint on PyPI.</p>"},{"location":"rules/#convention-c","title":"Convention (C)","text":"Code Name Message PLC0105 type-name-incorrect-variance <code>{kind}</code> name \"{param_name}\" does not reflect its {variance}; consider renaming it to \"{replacement_name}\" \u2714\ufe0f \ud83d\udee0\ufe0f PLC0131 type-bivariance <code>{kind}</code> cannot be both covariant and contravariant \u2714\ufe0f \ud83d\udee0\ufe0f PLC0132 type-param-name-mismatch <code>{kind}</code> name <code>{param_name}</code> does not match assigned variable name <code>{var_name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLC0205 single-string-slots Class <code>__slots__</code> should be a non-string iterable \u2714\ufe0f \ud83d\udee0\ufe0f PLC0206 dict-index-missing-items Extracting value from dictionary without calling <code>.items()</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLC0208 iteration-over-set Use a sequence type instead of a <code>set</code> when iterating over values \u2714\ufe0f \ud83d\udee0\ufe0f PLC0414 useless-import-alias Import alias does not rename original package \u2714\ufe0f \ud83d\udee0\ufe0f PLC0415 import-outside-top-level <code>import</code> should be at the top-level of a file \ud83e\uddea \ud83d\udee0\ufe0f PLC1901 compare-to-empty-string <code>{existing}</code> can be simplified to <code>{replacement}</code> as an empty string is falsey \ud83e\uddea \ud83d\udee0\ufe0f PLC2401 non-ascii-name {kind} name <code>{name}</code> contains a non-ASCII character \u2714\ufe0f \ud83d\udee0\ufe0f PLC2403 non-ascii-import-name Module alias <code>{name}</code> contains a non-ASCII character \u2714\ufe0f \ud83d\udee0\ufe0f PLC2701 import-private-name Private name import <code>{name}</code> from external module <code>{module}</code> \ud83e\uddea \ud83d\udee0\ufe0f PLC2801 unnecessary-dunder-call Unnecessary dunder call to <code>{method}</code>. {replacement}. \ud83e\uddea \ud83d\udee0\ufe0f PLC3002 unnecessary-direct-lambda-call Lambda expression called directly. Execute the expression inline instead. \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#error-e_1","title":"Error (E)","text":"Code Name Message PLE0100 yield-in-init <code>__init__</code> method is a generator \u2714\ufe0f \ud83d\udee0\ufe0f PLE0101 return-in-init Explicit return in <code>__init__</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0115 nonlocal-and-global Name <code>{name}</code> is both <code>nonlocal</code> and <code>global</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0116 continue-in-finally <code>continue</code> not supported inside <code>finally</code> clause \u2714\ufe0f \ud83d\udee0\ufe0f PLE0117 nonlocal-without-binding Nonlocal name <code>{name}</code> found without binding \u2714\ufe0f \ud83d\udee0\ufe0f PLE0118 load-before-global-declaration Name <code>{name}</code> is used prior to global declaration on {row} \u2714\ufe0f \ud83d\udee0\ufe0f PLE0237 non-slot-assignment Attribute <code>{name}</code> is not defined in class's <code>__slots__</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0241 duplicate-bases Duplicate base <code>{base}</code> for class <code>{class}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0302 unexpected-special-method-signature The special method <code>{}</code> expects {}, {} {} given \u2714\ufe0f \ud83d\udee0\ufe0f PLE0303 invalid-length-return-type <code>__len__</code> does not return a non-negative integer \u2714\ufe0f \ud83d\udee0\ufe0f PLE0304 invalid-bool-return-type <code>__bool__</code> does not return <code>bool</code> \ud83e\uddea \ud83d\udee0\ufe0f PLE0305 invalid-index-return-type <code>__index__</code> does not return an integer \u2714\ufe0f \ud83d\udee0\ufe0f PLE0307 invalid-str-return-type <code>__str__</code> does not return <code>str</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0308 invalid-bytes-return-type <code>__bytes__</code> does not return <code>bytes</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0309 invalid-hash-return-type <code>__hash__</code> does not return an integer \u2714\ufe0f \ud83d\udee0\ufe0f PLE0604 invalid-all-object Invalid object in <code>__all__</code>, must contain only strings \u2714\ufe0f \ud83d\udee0\ufe0f PLE0605 invalid-all-format Invalid format for <code>__all__</code>, must be <code>tuple</code> or <code>list</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0643 potential-index-error Expression is likely to raise <code>IndexError</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE0704 misplaced-bare-raise Bare <code>raise</code> statement is not inside an exception handler \u2714\ufe0f \ud83d\udee0\ufe0f PLE1132 repeated-keyword-argument Repeated keyword argument: <code>{duplicate_keyword}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE1141 dict-iter-missing-items Unpacking a dictionary in iteration without calling <code>.items()</code> \ud83e\uddea \ud83d\udee0\ufe0f PLE1142 await-outside-async <code>await</code> should be used within an async function \u2714\ufe0f \ud83d\udee0\ufe0f PLE1205 logging-too-many-args Too many arguments for <code>logging</code> format string \u2714\ufe0f \ud83d\udee0\ufe0f PLE1206 logging-too-few-args Not enough arguments for <code>logging</code> format string \u2714\ufe0f \ud83d\udee0\ufe0f PLE1300 bad-string-format-character Unsupported format character '{format_char}' \u2714\ufe0f \ud83d\udee0\ufe0f PLE1307 bad-string-format-type Format type does not match argument type \u2714\ufe0f \ud83d\udee0\ufe0f PLE1310 bad-str-strip-call String <code>{strip}</code> call contains duplicate characters (did you mean <code>{removal}</code>?) \u2714\ufe0f \ud83d\udee0\ufe0f PLE1507 invalid-envvar-value Invalid type for initial <code>os.getenv</code> argument; expected <code>str</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLE1519 singledispatch-method <code>@singledispatch</code> decorator should not be used on methods \u2714\ufe0f \ud83d\udee0\ufe0f PLE1520 singledispatchmethod-function <code>@singledispatchmethod</code> decorator should not be used on non-method functions \u2714\ufe0f \ud83d\udee0\ufe0f PLE1700 yield-from-in-async-function <code>yield from</code> statement in async function; use <code>async for</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f PLE2502 bidirectional-unicode Contains control characters that can permit obfuscated code \u2714\ufe0f \ud83d\udee0\ufe0f PLE2510 invalid-character-backspace Invalid unescaped character backspace, use \"\\b\" instead \u2714\ufe0f \ud83d\udee0\ufe0f PLE2512 invalid-character-sub Invalid unescaped character SUB, use \"\\x1A\" instead \u2714\ufe0f \ud83d\udee0\ufe0f PLE2513 invalid-character-esc Invalid unescaped character ESC, use \"\\x1B\" instead \u2714\ufe0f \ud83d\udee0\ufe0f PLE2514 invalid-character-nul Invalid unescaped character NUL, use \"\\0\" instead \u2714\ufe0f \ud83d\udee0\ufe0f PLE2515 invalid-character-zero-width-space Invalid unescaped character zero-width-space, use \"\\u200B\" instead \u2714\ufe0f \ud83d\udee0\ufe0f PLE4703 modified-iterating-set Iterated set <code>{name}</code> is modified within the <code>for</code> loop \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#refactor-r","title":"Refactor (R)","text":"Code Name Message PLR0124 comparison-with-itself Name compared with itself, consider replacing <code>{actual}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLR0133 comparison-of-constant Two constants compared in a comparison, consider replacing <code>{left_constant} {op} {right_constant}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLR0202 no-classmethod-decorator Class method defined without decorator \ud83e\uddea \ud83d\udee0\ufe0f PLR0203 no-staticmethod-decorator Static method defined without decorator \ud83e\uddea \ud83d\udee0\ufe0f PLR0206 property-with-parameters Cannot have defined parameters for properties \u2714\ufe0f \ud83d\udee0\ufe0f PLR0402 manual-from-import Use <code>from {module} import {name}</code> in lieu of alias \u2714\ufe0f \ud83d\udee0\ufe0f PLR0904 too-many-public-methods Too many public methods ({methods} &gt; {max_methods}) \ud83e\uddea \ud83d\udee0\ufe0f PLR0911 too-many-return-statements Too many return statements ({returns} &gt; {max_returns}) \u2714\ufe0f \ud83d\udee0\ufe0f PLR0912 too-many-branches Too many branches ({branches} &gt; {max_branches}) \u2714\ufe0f \ud83d\udee0\ufe0f PLR0913 too-many-arguments Too many arguments in function definition ({c_args} &gt; {max_args}) \u2714\ufe0f \ud83d\udee0\ufe0f PLR0914 too-many-locals Too many local variables ({current_amount}/{max_amount}) \ud83e\uddea \ud83d\udee0\ufe0f PLR0915 too-many-statements Too many statements ({statements} &gt; {max_statements}) \u2714\ufe0f \ud83d\udee0\ufe0f PLR0916 too-many-boolean-expressions Too many Boolean expressions ({expressions} &gt; {max_expressions}) \ud83e\uddea \ud83d\udee0\ufe0f PLR0917 too-many-positional-arguments Too many positional arguments ({c_pos}/{max_pos}) \ud83e\uddea \ud83d\udee0\ufe0f PLR1701 repeated-isinstance-calls Merge <code>isinstance</code> calls: <code>{expression}</code> \u274c \ud83d\udee0\ufe0f PLR1702 too-many-nested-blocks Too many nested blocks ({nested_blocks} &gt; {max_nested_blocks}) \ud83e\uddea \ud83d\udee0\ufe0f PLR1704 redefined-argument-from-local Redefining argument with the local name <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLR1706 and-or-ternary Consider using if-else expression \u274c \ud83d\udee0\ufe0f PLR1711 useless-return Useless <code>return</code> statement at end of function \u2714\ufe0f \ud83d\udee0\ufe0f PLR1714 repeated-equality-comparison Consider merging multiple comparisons: <code>{expression}</code>. Use a <code>set</code> if the elements are hashable. \u2714\ufe0f \ud83d\udee0\ufe0f PLR1716 boolean-chained-comparison Contains chained boolean comparison that can be simplified \ud83e\uddea \ud83d\udee0\ufe0f PLR1722 sys-exit-alias Use <code>sys.exit()</code> instead of <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLR1730 if-stmt-min-max Replace <code>if</code> statement with <code>{replacement}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLR1733 unnecessary-dict-index-lookup Unnecessary lookup of dictionary value by key \ud83e\uddea \ud83d\udee0\ufe0f PLR1736 unnecessary-list-index-lookup List index lookup in <code>enumerate()</code> loop \u2714\ufe0f \ud83d\udee0\ufe0f PLR2004 magic-value-comparison Magic value used in comparison, consider replacing <code>{value}</code> with a constant variable \u2714\ufe0f \ud83d\udee0\ufe0f PLR2044 empty-comment Line with empty comment \u2714\ufe0f \ud83d\udee0\ufe0f PLR5501 collapsible-else-if Use <code>elif</code> instead of <code>else</code> then <code>if</code>, to reduce indentation \u2714\ufe0f \ud83d\udee0\ufe0f PLR6104 non-augmented-assignment Use <code>{operator}</code> to perform an augmented assignment directly \ud83e\uddea \ud83d\udee0\ufe0f PLR6201 literal-membership Use a set literal when testing for membership \ud83e\uddea \ud83d\udee0\ufe0f PLR6301 no-self-use Method <code>{method_name}</code> could be a function, class method, or static method \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#warning-w_1","title":"Warning (W)","text":"Code Name Message PLW0108 unnecessary-lambda Lambda may be unnecessary; consider inlining inner function \ud83e\uddea \ud83d\udee0\ufe0f PLW0120 useless-else-on-loop <code>else</code> clause on loop without a <code>break</code> statement; remove the <code>else</code> and dedent its contents \u2714\ufe0f \ud83d\udee0\ufe0f PLW0127 self-assigning-variable Self-assignment of variable <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLW0128 redeclared-assigned-name Redeclared variable <code>{name}</code> in assignment \u2714\ufe0f \ud83d\udee0\ufe0f PLW0129 assert-on-string-literal Asserting on an empty string literal will never pass \u2714\ufe0f \ud83d\udee0\ufe0f PLW0131 named-expr-without-context Named expression used without context \u2714\ufe0f \ud83d\udee0\ufe0f PLW0133 useless-exception-statement Missing <code>raise</code> statement on exception \u2714\ufe0f \ud83d\udee0\ufe0f PLW0177 nan-comparison Comparing against a NaN value; use <code>math.isnan</code> instead \ud83e\uddea \ud83d\udee0\ufe0f PLW0211 bad-staticmethod-argument First argument of a static method should not be named <code>{argument_name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLW0245 super-without-brackets <code>super</code> call is missing parentheses \u2714\ufe0f \ud83d\udee0\ufe0f PLW0406 import-self Module <code>{name}</code> imports itself \u2714\ufe0f \ud83d\udee0\ufe0f PLW0602 global-variable-not-assigned Using global for <code>{name}</code> but no assignment is done \u2714\ufe0f \ud83d\udee0\ufe0f PLW0603 global-statement Using the global statement to update <code>{name}</code> is discouraged \u2714\ufe0f \ud83d\udee0\ufe0f PLW0604 global-at-module-level <code>global</code> at module level is redundant \u2714\ufe0f \ud83d\udee0\ufe0f PLW0642 self-or-cls-assignment Reassigned <code>{}</code> variable in {method_type} method \u2714\ufe0f \ud83d\udee0\ufe0f PLW0711 binary-op-exception Exception to catch is the result of a binary <code>and</code> operation \u2714\ufe0f \ud83d\udee0\ufe0f PLW1501 bad-open-mode <code>{mode}</code> is not a valid mode for <code>open</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLW1507 shallow-copy-environ Shallow copy of <code>os.environ</code> via <code>copy.copy(os.environ)</code> \ud83e\uddea \ud83d\udee0\ufe0f PLW1508 invalid-envvar-default Invalid type for environment variable default; expected <code>str</code> or <code>None</code> \u2714\ufe0f \ud83d\udee0\ufe0f PLW1509 subprocess-popen-preexec-fn <code>preexec_fn</code> argument is unsafe when using threads \u2714\ufe0f \ud83d\udee0\ufe0f PLW1510 subprocess-run-without-check <code>subprocess.run</code> without explicit <code>check</code> argument \u2714\ufe0f \ud83d\udee0\ufe0f PLW1514 unspecified-encoding <code>{function_name}</code> in text mode without explicit <code>encoding</code> argument \ud83e\uddea \ud83d\udee0\ufe0f PLW1641 eq-without-hash Object does not implement <code>__hash__</code> method \ud83e\uddea \ud83d\udee0\ufe0f PLW2101 useless-with-lock Threading lock directly created in <code>with</code> statement has no effect \u2714\ufe0f \ud83d\udee0\ufe0f PLW2901 redefined-loop-name Outer {outer_kind} variable <code>{name}</code> overwritten by inner {inner_kind} target \u2714\ufe0f \ud83d\udee0\ufe0f PLW3201 bad-dunder-method-name Dunder method <code>{name}</code> has no special meaning in Python 3 \ud83e\uddea \ud83d\udee0\ufe0f PLW3301 nested-min-max Nested <code>{func}</code> calls can be flattened \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#tryceratops-try","title":"tryceratops (TRY)","text":"<p>For more, see tryceratops on PyPI.</p> Code Name Message TRY002 raise-vanilla-class Create your own exception \u2714\ufe0f \ud83d\udee0\ufe0f TRY003 raise-vanilla-args Avoid specifying long messages outside the exception class \u2714\ufe0f \ud83d\udee0\ufe0f TRY004 type-check-without-type-error Prefer <code>TypeError</code> exception for invalid type \u2714\ufe0f \ud83d\udee0\ufe0f TRY200 reraise-no-cause Use <code>raise from</code> to specify exception cause \u274c \ud83d\udee0\ufe0f TRY201 verbose-raise Use <code>raise</code> without specifying exception name \u2714\ufe0f \ud83d\udee0\ufe0f TRY203 useless-try-except Remove exception handler; error is immediately re-raised \u2714\ufe0f \ud83d\udee0\ufe0f TRY300 try-consider-else Consider moving this statement to an <code>else</code> block \u2714\ufe0f \ud83d\udee0\ufe0f TRY301 raise-within-try Abstract <code>raise</code> to an inner function \u2714\ufe0f \ud83d\udee0\ufe0f TRY400 error-instead-of-exception Use <code>logging.exception</code> instead of <code>logging.error</code> \u2714\ufe0f \ud83d\udee0\ufe0f TRY401 verbose-log-message Redundant exception object included in <code>logging.exception</code> call \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#flynt-fly","title":"flynt (FLY)","text":"<p>For more, see flynt on PyPI.</p> Code Name Message FLY002 static-join-to-f-string Consider <code>{expression}</code> instead of string join \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#numpy-specific-rules-npy","title":"NumPy-specific rules (NPY)","text":"Code Name Message NPY001 numpy-deprecated-type-alias Type alias <code>np.{type_name}</code> is deprecated, replace with builtin type \u2714\ufe0f \ud83d\udee0\ufe0f NPY002 numpy-legacy-random Replace legacy <code>np.random.{method_name}</code> call with <code>np.random.Generator</code> \u2714\ufe0f \ud83d\udee0\ufe0f NPY003 numpy-deprecated-function <code>np.{existing}</code> is deprecated; use <code>np.{replacement}</code> instead \u2714\ufe0f \ud83d\udee0\ufe0f NPY201 numpy2-deprecation <code>np.{existing}</code> will be removed in NumPy 2.0. {migration_guide} \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#fastapi-fast","title":"FastAPI (FAST)","text":"<p>For more, see FastAPI on PyPI.</p> Code Name Message FAST001 fast-api-redundant-response-model FastAPI route with redundant <code>response_model</code> argument \u2714\ufe0f \ud83d\udee0\ufe0f FAST002 fast-api-non-annotated-dependency FastAPI dependency without <code>Annotated</code> \u2714\ufe0f \ud83d\udee0\ufe0f FAST003 fast-api-unused-path-parameter Parameter <code>{arg_name}</code> appears in route path, but not in <code>{function_name}</code> signature \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#airflow-air","title":"Airflow (AIR)","text":"<p>For more, see Airflow on PyPI.</p> Code Name Message AIR001 airflow-variable-name-task-id-mismatch Task variable name should match the <code>task_id</code>: \"{task_id}\" \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#perflint-perf","title":"Perflint (PERF)","text":"<p>For more, see Perflint on PyPI.</p> Code Name Message PERF101 unnecessary-list-cast Do not cast an iterable to <code>list</code> before iterating over it \u2714\ufe0f \ud83d\udee0\ufe0f PERF102 incorrect-dict-iterator When using only the {subset} of a dict use the <code>{subset}()</code> method \u2714\ufe0f \ud83d\udee0\ufe0f PERF203 try-except-in-loop <code>try</code>-<code>except</code> within a loop incurs performance overhead \u2714\ufe0f \ud83d\udee0\ufe0f PERF401 manual-list-comprehension Use {message_str} to create a transformed list \u2714\ufe0f \ud83d\udee0\ufe0f PERF402 manual-list-copy Use <code>list</code> or <code>list.copy</code> to create a copy of a list \u2714\ufe0f \ud83d\udee0\ufe0f PERF403 manual-dict-comprehension Use a dictionary comprehension instead of a for-loop \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"rules/#refurb-furb","title":"refurb (FURB)","text":"<p>For more, see refurb on PyPI.</p> Code Name Message FURB101 read-whole-file <code>open</code> and <code>read</code> should be replaced by <code>Path({filename}).{suggestion}</code> \ud83e\uddea \ud83d\udee0\ufe0f FURB103 write-whole-file <code>open</code> and <code>write</code> should be replaced by <code>Path({filename}).{suggestion}</code> \ud83e\uddea \ud83d\udee0\ufe0f FURB105 print-empty-string Unnecessary empty string passed to <code>print</code> \u2714\ufe0f \ud83d\udee0\ufe0f FURB110 if-exp-instead-of-or-operator Replace ternary <code>if</code> expression with <code>or</code> operator \ud83e\uddea \ud83d\udee0\ufe0f FURB113 repeated-append Use <code>{suggestion}</code> instead of repeatedly calling <code>{name}.append()</code> \ud83e\uddea \ud83d\udee0\ufe0f FURB116 f-string-number-format Replace <code>{function_name}</code> call with <code>{display}</code> \ud83e\uddea \ud83d\udee0\ufe0f FURB118 reimplemented-operator Use <code>operator.{operator}</code> instead of defining a function \ud83e\uddea \ud83d\udee0\ufe0f FURB129 readlines-in-for Instead of calling <code>readlines()</code>, iterate over file object directly \u2714\ufe0f \ud83d\udee0\ufe0f FURB131 delete-full-slice Prefer <code>clear</code> over deleting a full slice \ud83e\uddea \ud83d\udee0\ufe0f FURB132 check-and-remove-from-set Use <code>{suggestion}</code> instead of check and <code>remove</code> \ud83e\uddea \ud83d\udee0\ufe0f FURB136 if-expr-min-max Replace <code>if</code> expression with <code>{min_max}</code> call \u2714\ufe0f \ud83d\udee0\ufe0f FURB140 reimplemented-starmap Use <code>itertools.starmap</code> instead of the generator \ud83e\uddea \ud83d\udee0\ufe0f FURB142 for-loop-set-mutations Use of <code>set.{}()</code> in a for loop \ud83e\uddea \ud83d\udee0\ufe0f FURB145 slice-copy Prefer <code>copy</code> method over slicing \ud83e\uddea \ud83d\udee0\ufe0f FURB148 unnecessary-enumerate <code>enumerate</code> value is unused, use <code>for x in range(len(y))</code> instead \ud83e\uddea \ud83d\udee0\ufe0f FURB152 math-constant Replace <code>{literal}</code> with <code>math.{constant}</code> \ud83e\uddea \ud83d\udee0\ufe0f FURB154 repeated-global Use of repeated consecutive <code>{}</code> \ud83e\uddea \ud83d\udee0\ufe0f FURB156 hardcoded-string-charset Use of hardcoded string charset \ud83e\uddea \ud83d\udee0\ufe0f FURB157 verbose-decimal-constructor Verbose expression in <code>Decimal</code> constructor \ud83e\uddea \ud83d\udee0\ufe0f FURB161 bit-count Use of <code>bin({existing}).count('1')</code> \u2714\ufe0f \ud83d\udee0\ufe0f FURB163 redundant-log-base Prefer <code>math.{log_function}({arg})</code> over <code>math.log</code> with a redundant base \u2714\ufe0f \ud83d\udee0\ufe0f FURB164 unnecessary-from-float Verbose method <code>{method_name}</code> in <code>{constructor}</code> construction \ud83e\uddea \ud83d\udee0\ufe0f FURB166 int-on-sliced-str Use of <code>int</code> with explicit <code>base={base}</code> after removing prefix \ud83e\uddea \ud83d\udee0\ufe0f FURB167 regex-flag-alias Use of regular expression alias <code>re.{}</code> \u2714\ufe0f \ud83d\udee0\ufe0f FURB168 isinstance-type-none Prefer <code>is</code> operator over <code>isinstance</code> to check if an object is <code>None</code> \u2714\ufe0f \ud83d\udee0\ufe0f FURB169 type-none-comparison Compare the identities of <code>{object}</code> and <code>None</code> instead of their respective types \u2714\ufe0f \ud83d\udee0\ufe0f FURB171 single-item-membership-test Membership test against single-item container \ud83e\uddea \ud83d\udee0\ufe0f FURB177 implicit-cwd Prefer <code>Path.cwd()</code> over <code>Path().resolve()</code> for current-directory lookups \u2714\ufe0f \ud83d\udee0\ufe0f FURB180 meta-class-abc-meta Use of <code>metaclass=abc.ABCMeta</code> to define abstract base class \ud83e\uddea \ud83d\udee0\ufe0f FURB181 hashlib-digest-hex Use of hashlib's <code>.digest().hex()</code> \u2714\ufe0f \ud83d\udee0\ufe0f FURB187 list-reverse-copy Use of assignment of <code>reversed</code> on list <code>{name}</code> \u2714\ufe0f \ud83d\udee0\ufe0f FURB188 slice-to-remove-prefix-or-suffix Prefer <code>removeprefix</code> over conditionally replacing with slice. \ud83e\uddea \ud83d\udee0\ufe0f FURB189 subclass-builtin Subclassing <code>{subclass}</code> can be error prone, use <code>collections.{replacement}</code> instead \ud83e\uddea \ud83d\udee0\ufe0f FURB192 sorted-min-max Prefer <code>min</code> over <code>sorted()</code> to compute the minimum value in a sequence \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#pydoclint-doc","title":"pydoclint (DOC)","text":"<p>For more, see pydoclint on PyPI.</p> Code Name Message DOC201 docstring-missing-returns <code>return</code> is not documented in docstring \ud83e\uddea \ud83d\udee0\ufe0f DOC202 docstring-extraneous-returns Docstring should not have a returns section because the function doesn't return anything \ud83e\uddea \ud83d\udee0\ufe0f DOC402 docstring-missing-yields <code>yield</code> is not documented in docstring \ud83e\uddea \ud83d\udee0\ufe0f DOC403 docstring-extraneous-yields Docstring has a \"Yields\" section but the function doesn't yield anything \ud83e\uddea \ud83d\udee0\ufe0f DOC501 docstring-missing-exception Raised exception <code>{id}</code> missing from docstring \ud83e\uddea \ud83d\udee0\ufe0f DOC502 docstring-extraneous-exception Raised exception is not explicitly raised: <code>{id}</code> \ud83e\uddea \ud83d\udee0\ufe0f"},{"location":"rules/#ruff-specific-rules-ruf","title":"Ruff-specific rules (RUF)","text":"Code Name Message RUF001 ambiguous-unicode-character-string String contains ambiguous {}. Did you mean {}? \u2714\ufe0f \ud83d\udee0\ufe0f RUF002 ambiguous-unicode-character-docstring Docstring contains ambiguous {}. Did you mean {}? \u2714\ufe0f \ud83d\udee0\ufe0f RUF003 ambiguous-unicode-character-comment Comment contains ambiguous {}. Did you mean {}? \u2714\ufe0f \ud83d\udee0\ufe0f RUF005 collection-literal-concatenation Consider <code>{expression}</code> instead of concatenation \u2714\ufe0f \ud83d\udee0\ufe0f RUF006 asyncio-dangling-task Store a reference to the return value of <code>{expr}.{method}</code> \u2714\ufe0f \ud83d\udee0\ufe0f RUF007 zip-instead-of-pairwise Prefer <code>itertools.pairwise()</code> over <code>zip()</code> when iterating over successive pairs \u2714\ufe0f \ud83d\udee0\ufe0f RUF008 mutable-dataclass-default Do not use mutable default values for dataclass attributes \u2714\ufe0f \ud83d\udee0\ufe0f RUF009 function-call-in-dataclass-default-argument Do not perform function call <code>{name}</code> in dataclass defaults \u2714\ufe0f \ud83d\udee0\ufe0f RUF010 explicit-f-string-type-conversion Use explicit conversion flag \u2714\ufe0f \ud83d\udee0\ufe0f RUF011 ruff-static-key-dict-comprehension Dictionary comprehension uses static key \u274c \ud83d\udee0\ufe0f RUF012 mutable-class-default Mutable class attributes should be annotated with <code>typing.ClassVar</code> \u2714\ufe0f \ud83d\udee0\ufe0f RUF013 implicit-optional PEP 484 prohibits implicit <code>Optional</code> \u2714\ufe0f \ud83d\udee0\ufe0f RUF015 unnecessary-iterable-allocation-for-first-element Prefer <code>next({iterable})</code> over single element slice \u2714\ufe0f \ud83d\udee0\ufe0f RUF016 invalid-index-type Slice in indexed access to type <code>{value_type}</code> uses type <code>{index_type}</code> instead of an integer \u2714\ufe0f \ud83d\udee0\ufe0f RUF017 quadratic-list-summation Avoid quadratic list summation \u2714\ufe0f \ud83d\udee0\ufe0f RUF018 assignment-in-assert Avoid assignment expressions in <code>assert</code> statements \u2714\ufe0f \ud83d\udee0\ufe0f RUF019 unnecessary-key-check Unnecessary key check before dictionary access \u2714\ufe0f \ud83d\udee0\ufe0f RUF020 never-union <code>{never_like} | T</code> is equivalent to <code>T</code> \u2714\ufe0f \ud83d\udee0\ufe0f RUF021 parenthesize-chained-operators Parenthesize <code>a and b</code> expressions when chaining <code>and</code> and <code>or</code> together, to make the precedence clear \u2714\ufe0f \ud83d\udee0\ufe0f RUF022 unsorted-dunder-all <code>__all__</code> is not sorted \u2714\ufe0f \ud83d\udee0\ufe0f RUF023 unsorted-dunder-slots <code>{}.__slots__</code> is not sorted \u2714\ufe0f \ud83d\udee0\ufe0f RUF024 mutable-fromkeys-value Do not pass mutable objects as values to <code>dict.fromkeys</code> \u2714\ufe0f \ud83d\udee0\ufe0f RUF026 default-factory-kwarg <code>default_factory</code> is a positional-only argument to <code>defaultdict</code> \u2714\ufe0f \ud83d\udee0\ufe0f RUF027 missing-f-string-syntax Possible f-string without an <code>f</code> prefix \ud83e\uddea \ud83d\udee0\ufe0f RUF028 invalid-formatter-suppression-comment This suppression comment is invalid because {} \ud83e\uddea \ud83d\udee0\ufe0f RUF029 unused-async Function <code>{name}</code> is declared <code>async</code>, but doesn't <code>await</code> or use <code>async</code> features. \ud83e\uddea \ud83d\udee0\ufe0f RUF030 assert-with-print-message <code>print()</code> call in <code>assert</code> statement is likely unintentional \u2714\ufe0f \ud83d\udee0\ufe0f RUF031 incorrectly-parenthesized-tuple-in-subscript Use parentheses for tuples in subscripts \ud83e\uddea \ud83d\udee0\ufe0f RUF032 decimal-from-float-literal <code>Decimal()</code> called with float literal argument \ud83e\uddea \ud83d\udee0\ufe0f RUF033 post-init-default <code>__post_init__</code> method with argument defaults \ud83e\uddea \ud83d\udee0\ufe0f RUF034 useless-if-else Useless <code>if</code>-<code>else</code> condition \ud83e\uddea \ud83d\udee0\ufe0f RUF035 unsafe-markup-use Unsafe use of <code>{name}</code> detected \ud83e\uddea \ud83d\udee0\ufe0f RUF036 none-not-at-end-of-union <code>None</code> not at the end of the type annotation. \ud83e\uddea \ud83d\udee0\ufe0f RUF038 redundant-bool-literal <code>Literal[True, False, ...]</code> can be replaced with <code>Literal[...] | bool</code> \ud83e\uddea \ud83d\udee0\ufe0f RUF039 unraw-re-pattern First argument to {call} is not raw string \ud83e\uddea \ud83d\udee0\ufe0f RUF048 map-int-version-parsing <code>__version__</code> may contain non-integral-like elements \ud83e\uddea \ud83d\udee0\ufe0f RUF100 unused-noqa Unused <code>noqa</code> directive \u2714\ufe0f \ud83d\udee0\ufe0f RUF101 redirected-noqa <code>{original}</code> is a redirect to <code>{target}</code> \u2714\ufe0f \ud83d\udee0\ufe0f RUF200 invalid-pyproject-toml Failed to parse pyproject.toml: {message} \u2714\ufe0f \ud83d\udee0\ufe0f"},{"location":"settings/","title":"Settings","text":""},{"location":"settings/#top-level","title":"Top-level","text":""},{"location":"settings/#builtins","title":"<code>builtins</code>","text":"<p>A list of builtins to treat as defined references, in addition to the system builtins.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nbuiltins = [\"_\"]\n</code></pre> <pre><code>builtins = [\"_\"]\n</code></pre>"},{"location":"settings/#cache-dir","title":"<code>cache-dir</code>","text":"<p>A path to the cache directory.</p> <p>By default, Ruff stores cache results in a <code>.ruff_cache</code> directory in the current project root.</p> <p>However, Ruff will also respect the <code>RUFF_CACHE_DIR</code> environment variable, which takes precedence over that default.</p> <p>This setting will override even the <code>RUFF_CACHE_DIR</code> environment variable, if set.</p> <p>Default value: <code>\".ruff_cache\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\ncache-dir = \"~/.cache/ruff\"\n</code></pre> <pre><code>cache-dir = \"~/.cache/ruff\"\n</code></pre>"},{"location":"settings/#exclude","title":"<code>exclude</code>","text":"<p>A list of file patterns to exclude from formatting and linting.</p> <p>Exclusions are based on globs, and can be either:</p> <ul> <li>Single-path patterns, like <code>.mypy_cache</code> (to exclude any directory   named <code>.mypy_cache</code> in the tree), <code>foo.py</code> (to exclude any file named   <code>foo.py</code>), or <code>foo_*.py</code> (to exclude any file matching <code>foo_*.py</code> ).</li> <li>Relative patterns, like <code>directory/foo.py</code> (to exclude that specific   file) or <code>directory/*.py</code> (to exclude any Python files in   <code>directory</code>). Note that these paths are relative to the project root   (e.g., the directory containing your <code>pyproject.toml</code>).</li> </ul> <p>For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Note that you'll typically want to use <code>extend-exclude</code> to modify the excluded paths.</p> <p>Default value: <code>[\".bzr\", \".direnv\", \".eggs\", \".git\", \".git-rewrite\", \".hg\", \".mypy_cache\", \".nox\", \".pants.d\", \".pytype\", \".ruff_cache\", \".svn\", \".tox\", \".venv\", \"__pypackages__\", \"_build\", \"buck-out\", \"dist\", \"node_modules\", \"venv\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nexclude = [\".venv\"]\n</code></pre> <pre><code>exclude = [\".venv\"]\n</code></pre>"},{"location":"settings/#extend","title":"<code>extend</code>","text":"<p>A path to a local <code>pyproject.toml</code> file to merge into this configuration. User home directory and environment variables will be expanded.</p> <p>To resolve the current <code>pyproject.toml</code> file, Ruff will first resolve this base configuration file, then merge in any properties defined in the current configuration file.</p> <p>Default value: <code>null</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Extend the `pyproject.toml` file in the parent directory.\nextend = \"../pyproject.toml\"\n# But use a different line length.\nline-length = 100\n</code></pre> <pre><code># Extend the `pyproject.toml` file in the parent directory.\nextend = \"../pyproject.toml\"\n# But use a different line length.\nline-length = 100\n</code></pre>"},{"location":"settings/#extend-exclude","title":"<code>extend-exclude</code>","text":"<p>A list of file patterns to omit from formatting and linting, in addition to those specified by <code>exclude</code>.</p> <p>Exclusions are based on globs, and can be either:</p> <ul> <li>Single-path patterns, like <code>.mypy_cache</code> (to exclude any directory   named <code>.mypy_cache</code> in the tree), <code>foo.py</code> (to exclude any file named   <code>foo.py</code>), or <code>foo_*.py</code> (to exclude any file matching <code>foo_*.py</code> ).</li> <li>Relative patterns, like <code>directory/foo.py</code> (to exclude that specific   file) or <code>directory/*.py</code> (to exclude any Python files in   <code>directory</code>). Note that these paths are relative to the project root   (e.g., the directory containing your <code>pyproject.toml</code>).</li> </ul> <p>For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# In addition to the standard set of exclusions, omit all tests, plus a specific file.\nextend-exclude = [\"tests\", \"src/bad.py\"]\n</code></pre> <pre><code># In addition to the standard set of exclusions, omit all tests, plus a specific file.\nextend-exclude = [\"tests\", \"src/bad.py\"]\n</code></pre>"},{"location":"settings/#extend-include","title":"<code>extend-include</code>","text":"<p>A list of file patterns to include when linting, in addition to those specified by <code>include</code>.</p> <p>Inclusion are based on globs, and should be single-path patterns, like <code>*.pyw</code>, to include any file with the <code>.pyw</code> extension.</p> <p>For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# In addition to the standard set of inclusions, include `.pyw` files.\nextend-include = [\"*.pyw\"]\n</code></pre> <pre><code># In addition to the standard set of inclusions, include `.pyw` files.\nextend-include = [\"*.pyw\"]\n</code></pre>"},{"location":"settings/#fix","title":"<code>fix</code>","text":"<p>Enable fix behavior by-default when running <code>ruff</code> (overridden by the <code>--fix</code> and <code>--no-fix</code> command-line flags). Only includes automatic fixes unless <code>--unsafe-fixes</code> is provided.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nfix = true\n</code></pre> <pre><code>fix = true\n</code></pre>"},{"location":"settings/#fix-only","title":"<code>fix-only</code>","text":"<p>Like <code>fix</code>, but disables reporting on leftover violation. Implies <code>fix</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nfix-only = true\n</code></pre> <pre><code>fix-only = true\n</code></pre>"},{"location":"settings/#force-exclude","title":"<code>force-exclude</code>","text":"<p>Whether to enforce <code>exclude</code> and <code>extend-exclude</code> patterns, even for paths that are passed to Ruff explicitly. Typically, Ruff will lint any paths passed in directly, even if they would typically be excluded. Setting <code>force-exclude = true</code> will cause Ruff to respect these exclusions unequivocally.</p> <p>This is useful for <code>pre-commit</code>, which explicitly passes all changed files to the <code>ruff-pre-commit</code> plugin, regardless of whether they're marked as excluded by Ruff's own settings.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nforce-exclude = true\n</code></pre> <pre><code>force-exclude = true\n</code></pre>"},{"location":"settings/#include","title":"<code>include</code>","text":"<p>A list of file patterns to include when linting.</p> <p>Inclusion are based on globs, and should be single-path patterns, like <code>*.pyw</code>, to include any file with the <code>.pyw</code> extension. <code>pyproject.toml</code> is included here not for configuration but because we lint whether e.g. the <code>[project]</code> matches the schema.</p> <p>Notebook files (<code>.ipynb</code> extension) are included by default on Ruff 0.6.0+.</p> <p>For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[\"*.py\", \"*.pyi\", \"*.ipynb\", \"**/pyproject.toml\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\ninclude = [\"*.py\"]\n</code></pre> <pre><code>include = [\"*.py\"]\n</code></pre>"},{"location":"settings/#indent-width","title":"<code>indent-width</code>","text":"<p>The number of spaces per indentation level (tab).</p> <p>Used by the formatter and when enforcing long-line violations (like <code>E501</code>) to determine the visual width of a tab.</p> <p>This option changes the number of spaces the formatter inserts when using soft-tabs (<code>indent-style = space</code>).</p> <p>PEP 8 recommends using 4 spaces per indentation level.</p> <p>Default value: <code>4</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nindent-width = 2\n</code></pre> <pre><code>indent-width = 2\n</code></pre>"},{"location":"settings/#line-length","title":"<code>line-length</code>","text":"<p>The line length to use when enforcing long-lines violations (like <code>E501</code>) and at which <code>isort</code> and the formatter prefers to wrap lines.</p> <p>The length is determined by the number of characters per line, except for lines containing East Asian characters or emojis. For these lines, the unicode width of each character is added up to determine the length.</p> <p>The value must be greater than <code>0</code> and less than or equal to <code>320</code>.</p> <p>Note: While the formatter will attempt to format lines such that they remain within the <code>line-length</code>, it isn't a hard upper bound, and formatted lines may exceed the <code>line-length</code>.</p> <p>See <code>pycodestyle.max-line-length</code> to configure different lengths for <code>E501</code> and the formatter.</p> <p>Default value: <code>88</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Allow lines to be as long as 120.\nline-length = 120\n</code></pre> <pre><code># Allow lines to be as long as 120.\nline-length = 120\n</code></pre>"},{"location":"settings/#namespace-packages","title":"<code>namespace-packages</code>","text":"<p>Mark the specified directories as namespace packages. For the purpose of module resolution, Ruff will treat those directories and all their subdirectories as if they contained an <code>__init__.py</code> file.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nnamespace-packages = [\"airflow/providers\"]\n</code></pre> <pre><code>namespace-packages = [\"airflow/providers\"]\n</code></pre>"},{"location":"settings/#output-format","title":"<code>output-format</code>","text":"<p>The style in which violation messages should be formatted: <code>\"full\"</code> (default) (shows source), <code>\"concise\"</code>, <code>\"grouped\"</code> (group messages by file), <code>\"json\"</code> (machine-readable), <code>\"junit\"</code> (machine-readable XML), <code>\"github\"</code> (GitHub Actions annotations), <code>\"gitlab\"</code> (GitLab CI code quality report), <code>\"pylint\"</code> (Pylint text format) or <code>\"azure\"</code> (Azure Pipeline logging commands).</p> <p>Default value: <code>\"full\"</code></p> <p>Type: <code>\"full\" | \"concise\" | \"grouped\" | \"json\" | \"junit\" | \"github\" | \"gitlab\" | \"pylint\" | \"azure\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Group violations by containing file.\noutput-format = \"grouped\"\n</code></pre> <pre><code># Group violations by containing file.\noutput-format = \"grouped\"\n</code></pre>"},{"location":"settings/#preview","title":"<code>preview</code>","text":"<p>Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules, fixes, and formatting.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Enable preview features.\npreview = true\n</code></pre> <pre><code># Enable preview features.\npreview = true\n</code></pre>"},{"location":"settings/#required-version","title":"<code>required-version</code>","text":"<p>Enforce a requirement on the version of Ruff, to enforce at runtime. If the version of Ruff does not meet the requirement, Ruff will exit with an error.</p> <p>Useful for unifying results across many environments, e.g., with a <code>pyproject.toml</code> file.</p> <p>Accepts a PEP 440 specifier, like <code>==0.3.1</code> or <code>&gt;=0.3.1</code>.</p> <p>Default value: <code>null</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nrequired-version = \"&gt;=0.0.193\"\n</code></pre> <pre><code>required-version = \"&gt;=0.0.193\"\n</code></pre>"},{"location":"settings/#respect-gitignore","title":"<code>respect-gitignore</code>","text":"<p>Whether to automatically exclude files that are ignored by <code>.ignore</code>, <code>.gitignore</code>, <code>.git/info/exclude</code>, and global <code>gitignore</code> files. Enabled by default.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nrespect-gitignore = false\n</code></pre> <pre><code>respect-gitignore = false\n</code></pre>"},{"location":"settings/#show-fixes","title":"<code>show-fixes</code>","text":"<p>Whether to show an enumeration of all fixed lint violations (overridden by the <code>--show-fixes</code> command-line flag).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Enumerate all fixed violations.\nshow-fixes = true\n</code></pre> <pre><code># Enumerate all fixed violations.\nshow-fixes = true\n</code></pre>"},{"location":"settings/#src","title":"<code>src</code>","text":"<p>The directories to consider when resolving first- vs. third-party imports.</p> <p>When omitted, the <code>src</code> directory will typically default to including both:</p> <ol> <li>The directory containing the nearest <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file (the \"project root\").</li> <li>The <code>\"src\"</code> subdirectory of the project root.</li> </ol> <p>These defaults ensure that Ruff supports both flat layouts and <code>src</code> layouts out-of-the-box. (If a configuration file is explicitly provided (e.g., via the <code>--config</code> command-line flag), the current working directory will be considered the project root.)</p> <p>As an example, consider an alternative project structure, like:</p> <pre><code>my_project\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 lib\n    \u2514\u2500\u2500 my_package\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 foo.py\n        \u2514\u2500\u2500 bar.py\n</code></pre> <p>In this case, the <code>./lib</code> directory should be included in the <code>src</code> option (e.g., <code>src = [\"lib\"]</code>), such that when resolving imports, <code>my_package.foo</code> is considered first-party.</p> <p>This field supports globs. For example, if you have a series of Python packages in a <code>python_modules</code> directory, <code>src = [\"python_modules/*\"]</code> would expand to incorporate all packages in that directory. User home directory and environment variables will also be expanded.</p> <p>Default value: <code>[\".\", \"src\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Allow imports relative to the \"src\" and \"test\" directories.\nsrc = [\"src\", \"test\"]\n</code></pre> <pre><code># Allow imports relative to the \"src\" and \"test\" directories.\nsrc = [\"src\", \"test\"]\n</code></pre>"},{"location":"settings/#target-version","title":"<code>target-version</code>","text":"<p>The minimum Python version to target, e.g., when considering automatic code upgrades, like rewriting type annotations. Ruff will not propose changes using features that are not available in the given version.</p> <p>For example, to represent supporting Python &gt;=3.10 or ==3.10 specify <code>target-version = \"py310\"</code>.</p> <p>If you're already using a <code>pyproject.toml</code> file, we recommend <code>project.requires-python</code> instead, as it's based on Python packaging standards, and will be respected by other tools. For example, Ruff treats the following as identical to <code>target-version = \"py38\"</code>:</p> <pre><code>[project]\nrequires-python = \"&gt;=3.8\"\n</code></pre> <p>If both are specified, <code>target-version</code> takes precedence over <code>requires-python</code>.</p> <p>Note that a stub file can sometimes make use of a typing feature before it is available at runtime, as long as the stub does not make use of new syntax. For example, a type checker will understand <code>int | str</code> in a stub as being a <code>Union</code> type annotation, even if the type checker is run using Python 3.9, despite the fact that the <code>|</code> operator can only be used to create union types at runtime on Python 3.10+. As such, Ruff will often recommend newer features in a stub file than it would for an equivalent runtime file with the same target version.</p> <p>Default value: <code>\"py39\"</code></p> <p>Type: <code>\"py37\" | \"py38\" | \"py39\" | \"py310\" | \"py311\" | \"py312\" | \"py313\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Always generate Python 3.7-compatible code.\ntarget-version = \"py37\"\n</code></pre> <pre><code># Always generate Python 3.7-compatible code.\ntarget-version = \"py37\"\n</code></pre>"},{"location":"settings/#unsafe-fixes","title":"<code>unsafe-fixes</code>","text":"<p>Enable application of unsafe fixes. If excluded, a hint will be displayed when unsafe fixes are available. If set to false, the hint will be hidden.</p> <p>Default value: <code>null</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\nunsafe-fixes = true\n</code></pre> <pre><code>unsafe-fixes = true\n</code></pre>"},{"location":"settings/#analyze","title":"<code>analyze</code>","text":"<p>Configures Ruff's <code>analyze</code> command.</p>"},{"location":"settings/#analyze_detect-string-imports","title":"<code>detect-string-imports</code>","text":"<p>Whether to detect imports from string literals. When enabled, Ruff will search for string literals that \"look like\" import paths, and include them in the import map, if they resolve to valid Python modules.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.analyze]\ndetect-string-imports = true\n</code></pre> <pre><code>[analyze]\ndetect-string-imports = true\n</code></pre>"},{"location":"settings/#analyze_direction","title":"<code>direction</code>","text":"<p>Whether to generate a map from file to files that it depends on (dependencies) or files that depend on it (dependents).</p> <p>Default value: <code>\"dependencies\"</code></p> <p>Type: <code>\"dependents\" | \"dependencies\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.analyze]\ndirection = \"dependencies\"\n</code></pre> <pre><code>[analyze]\ndirection = \"dependencies\"\n</code></pre>"},{"location":"settings/#analyze_exclude","title":"<code>exclude</code>","text":"<p>A list of file patterns to exclude from analysis in addition to the files excluded globally (see <code>exclude</code>, and <code>extend-exclude</code>).</p> <p>Exclusions are based on globs, and can be either:</p> <ul> <li>Single-path patterns, like <code>.mypy_cache</code> (to exclude any directory   named <code>.mypy_cache</code> in the tree), <code>foo.py</code> (to exclude any file named   <code>foo.py</code>), or <code>foo_*.py</code> (to exclude any file matching <code>foo_*.py</code> ).</li> <li>Relative patterns, like <code>directory/foo.py</code> (to exclude that specific   file) or <code>directory/*.py</code> (to exclude any Python files in   <code>directory</code>). Note that these paths are relative to the project root   (e.g., the directory containing your <code>pyproject.toml</code>).</li> </ul> <p>For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.analyze]\nexclude = [\"generated\"]\n</code></pre> <pre><code>[analyze]\nexclude = [\"generated\"]\n</code></pre>"},{"location":"settings/#analyze_include-dependencies","title":"<code>include-dependencies</code>","text":"<p>A map from file path to the list of file paths or globs that should be considered dependencies of that file, regardless of whether relevant imports are detected.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, list[str]]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.analyze]\ninclude-dependencies = {\n\"foo/bar.py\": [\"foo/baz/*.py\"],\n}\n</code></pre> <pre><code>[analyze]\ninclude-dependencies = {\n\"foo/bar.py\": [\"foo/baz/*.py\"],\n}\n</code></pre>"},{"location":"settings/#analyze_preview","title":"<code>preview</code>","text":"<p>Whether to enable preview mode. When preview mode is enabled, Ruff will expose unstable commands.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.analyze]\n# Enable preview features.\npreview = true\n</code></pre> <pre><code>[analyze]\n# Enable preview features.\npreview = true\n</code></pre>"},{"location":"settings/#format","title":"<code>format</code>","text":"<p>Configures the way Ruff formats your code.</p>"},{"location":"settings/#format_docstring-code-format","title":"<code>docstring-code-format</code>","text":"<p>Whether to format code snippets in docstrings.</p> <p>When this is enabled, Python code examples within docstrings are automatically reformatted.</p> <p>For example, when this is enabled, the following code:</p> <pre><code>def f(x):\n\"\"\"\n    Something about `f`. And an example in doctest format:\n    &gt;&gt;&gt; f(  x  )\n    Markdown is also supported:\n    ```py\n    f(  x  )\n    ```\n    As are reStructuredText literal blocks::\n        f(  x  )\n    And reStructuredText code blocks:\n    .. code-block:: python\n        f(  x  )\n    \"\"\"\npass\n</code></pre> <p>... will be reformatted (assuming the rest of the options are set to their defaults) as:</p> <pre><code>def f(x):\n\"\"\"\n    Something about `f`. And an example in doctest format:\n    &gt;&gt;&gt; f(x)\n    Markdown is also supported:\n    ```py\n    f(x)\n    ```\n    As are reStructuredText literal blocks::\n        f(x)\n    And reStructuredText code blocks:\n    .. code-block:: python\n        f(x)\n    \"\"\"\npass\n</code></pre> <p>If a code snippet in a docstring contains invalid Python code or if the formatter would otherwise write invalid Python code, then the code example is ignored by the formatter and kept as-is.</p> <p>Currently, doctest, Markdown, reStructuredText literal blocks, and reStructuredText code blocks are all supported and automatically recognized. In the case of unlabeled fenced code blocks in Markdown and reStructuredText literal blocks, the contents are assumed to be Python and reformatted. As with any other format, if the contents aren't valid Python, then the block is left untouched automatically.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\n# Enable reformatting of code snippets in docstrings.\ndocstring-code-format = true\n</code></pre> <pre><code>[format]\n# Enable reformatting of code snippets in docstrings.\ndocstring-code-format = true\n</code></pre>"},{"location":"settings/#format_docstring-code-line-length","title":"<code>docstring-code-line-length</code>","text":"<p>Set the line length used when formatting code snippets in docstrings.</p> <p>This only has an effect when the <code>docstring-code-format</code> setting is enabled.</p> <p>The default value for this setting is <code>\"dynamic\"</code>, which has the effect of ensuring that any reformatted code examples in docstrings adhere to the global line length configuration that is used for the surrounding Python code. The point of this setting is that it takes the indentation of the docstring into account when reformatting code examples.</p> <p>Alternatively, this can be set to a fixed integer, which will result in the same line length limit being applied to all reformatted code examples in docstrings. When set to a fixed integer, the indent of the docstring is not taken into account. That is, this may result in lines in the reformatted code example that exceed the globally configured line length limit.</p> <p>For example, when this is set to <code>20</code> and <code>docstring-code-format</code> is enabled, then this code:</p> <pre><code>def f(x):\n'''\n    Something about `f`. And an example:\n    .. code-block:: python\n        foo, bar, quux = this_is_a_long_line(lion, hippo, lemur, bear)\n    '''\npass\n</code></pre> <p>... will be reformatted (assuming the rest of the options are set to their defaults) as:</p> <pre><code>def f(x):\n\"\"\"\n    Something about `f`. And an example:\n    .. code-block:: python\n        (\n            foo,\n            bar,\n            quux,\n        ) = this_is_a_long_line(\n            lion,\n            hippo,\n            lemur,\n            bear,\n        )\n    \"\"\"\npass\n</code></pre> <p>Default value: <code>\"dynamic\"</code></p> <p>Type: <code>int | \"dynamic\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\n# Format all docstring code snippets with a line length of 60.\ndocstring-code-line-length = 60\n</code></pre> <pre><code>[format]\n# Format all docstring code snippets with a line length of 60.\ndocstring-code-line-length = 60\n</code></pre>"},{"location":"settings/#format_exclude","title":"<code>exclude</code>","text":"<p>A list of file patterns to exclude from formatting in addition to the files excluded globally (see <code>exclude</code>, and <code>extend-exclude</code>).</p> <p>Exclusions are based on globs, and can be either:</p> <ul> <li>Single-path patterns, like <code>.mypy_cache</code> (to exclude any directory   named <code>.mypy_cache</code> in the tree), <code>foo.py</code> (to exclude any file named   <code>foo.py</code>), or <code>foo_*.py</code> (to exclude any file matching <code>foo_*.py</code> ).</li> <li>Relative patterns, like <code>directory/foo.py</code> (to exclude that specific   file) or <code>directory/*.py</code> (to exclude any Python files in   <code>directory</code>). Note that these paths are relative to the project root   (e.g., the directory containing your <code>pyproject.toml</code>).</li> </ul> <p>For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\nexclude = [\"generated\"]\n</code></pre> <pre><code>[format]\nexclude = [\"generated\"]\n</code></pre>"},{"location":"settings/#format_indent-style","title":"<code>indent-style</code>","text":"<p>Whether to use spaces or tabs for indentation.</p> <p><code>indent-style = \"space\"</code> (default):</p> <pre><code>def f():\nprint(\"Hello\") #  Spaces indent the `print` statement.\n</code></pre> <p><code>indent-style = \"tab\"</code>:</p> <pre><code>def f():\nprint(\"Hello\") #  A tab `\\t` indents the `print` statement.\n</code></pre> <p>PEP 8 recommends using spaces for indentation. We care about accessibility; if you do not need tabs for accessibility, we do not recommend you use them.</p> <p>See <code>indent-width</code> to configure the number of spaces per indentation and the tab width.</p> <p>Default value: <code>\"space\"</code></p> <p>Type: <code>\"space\" | \"tab\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\n# Use tabs instead of 4 space indentation.\nindent-style = \"tab\"\n</code></pre> <pre><code>[format]\n# Use tabs instead of 4 space indentation.\nindent-style = \"tab\"\n</code></pre>"},{"location":"settings/#format_line-ending","title":"<code>line-ending</code>","text":"<p>The character Ruff uses at the end of a line.</p> <ul> <li><code>auto</code>: The newline style is detected automatically on a file per file basis. Files with mixed line endings will be converted to the first detected line ending. Defaults to <code>\\n</code> for files that contain no line endings.</li> <li><code>lf</code>: Line endings will be converted to <code>\\n</code>. The default line ending on Unix.</li> <li><code>cr-lf</code>: Line endings will be converted to <code>\\r\\n</code>. The default line ending on Windows.</li> <li><code>native</code>: Line endings will be converted to <code>\\n</code> on Unix and <code>\\r\\n</code> on Windows.</li> </ul> <p>Default value: <code>\"auto\"</code></p> <p>Type: <code>\"auto\" | \"lf\" | \"cr-lf\" | \"native\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\n# Use `\\n` line endings for all files\nline-ending = \"lf\"\n</code></pre> <pre><code>[format]\n# Use `\\n` line endings for all files\nline-ending = \"lf\"\n</code></pre>"},{"location":"settings/#format_preview","title":"<code>preview</code>","text":"<p>Whether to enable the unstable preview style formatting.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\n# Enable preview style formatting.\npreview = true\n</code></pre> <pre><code>[format]\n# Enable preview style formatting.\npreview = true\n</code></pre>"},{"location":"settings/#format_quote-style","title":"<code>quote-style</code>","text":"<p>Configures the preferred quote character for strings. The recommended options are</p> <ul> <li><code>double</code> (default): Use double quotes <code>\"</code></li> <li><code>single</code>: Use single quotes <code>'</code></li> </ul> <p>In compliance with PEP 8 and PEP 257, Ruff prefers double quotes for triple quoted strings and docstrings even when using <code>quote-style = \"single\"</code>.</p> <p>Ruff deviates from using the configured quotes if doing so prevents the need for escaping quote characters inside the string:</p> <pre><code>a = \"a string without any quotes\"\nb = \"It's monday morning\"\n</code></pre> <p>Ruff will change the quotes of the string assigned to <code>a</code> to single quotes when using <code>quote-style = \"single\"</code>. However, Ruff uses double quotes for the string assigned to <code>b</code> because using single quotes would require escaping the <code>'</code>, which leads to the less readable code: <code>'It\\'s monday morning'</code>.</p> <p>In addition, Ruff supports the quote style <code>preserve</code> for projects that already use a mixture of single and double quotes and can't migrate to the <code>double</code> or <code>single</code> style. The quote style <code>preserve</code> leaves the quotes of all strings unchanged.</p> <p>Default value: <code>\"double\"</code></p> <p>Type: <code>\"double\" | \"single\" | \"preserve\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\n# Prefer single quotes over double quotes.\nquote-style = \"single\"\n</code></pre> <pre><code>[format]\n# Prefer single quotes over double quotes.\nquote-style = \"single\"\n</code></pre>"},{"location":"settings/#format_skip-magic-trailing-comma","title":"<code>skip-magic-trailing-comma</code>","text":"<p>Ruff uses existing trailing commas as an indication that short lines should be left separate. If this option is set to <code>true</code>, the magic trailing comma is ignored.</p> <p>For example, Ruff leaves the arguments separate even though collapsing the arguments to a single line doesn't exceed the line length if <code>skip-magic-trailing-comma = false</code>:</p> <pre><code># The arguments remain on separate lines because of the trailing comma after `b`\ndef test(\na,\nb,\n): pass\n</code></pre> <p>Setting <code>skip-magic-trailing-comma = true</code> changes the formatting to:</p> <pre><code># The arguments remain on separate lines because of the trailing comma after `b`\ndef test(a, b):\npass\n</code></pre> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.format]\nskip-magic-trailing-comma = true\n</code></pre> <pre><code>[format]\nskip-magic-trailing-comma = true\n</code></pre>"},{"location":"settings/#lint","title":"<code>lint</code>","text":"<p>Configures how Ruff checks your code.</p> <p>Options specified in the <code>lint</code> section take precedence over the deprecated top-level settings.</p>"},{"location":"settings/#lint_allowed-confusables","title":"<code>allowed-confusables</code>","text":"<p>A list of allowed \"confusable\" Unicode characters to ignore when enforcing <code>RUF001</code>, <code>RUF002</code>, and <code>RUF003</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Allow minus-sign (U+2212), greek-small-letter-rho (U+03C1), and the asterisk-operator (U+2217),\n# which could be confused for \"-\", \"p\", and \"*\", respectively.\nallowed-confusables = [\"\u2212\", \"\u03c1\", \"\u2217\"]\n</code></pre> <pre><code>[lint]\n# Allow minus-sign (U+2212), greek-small-letter-rho (U+03C1), and the asterisk-operator (U+2217),\n# which could be confused for \"-\", \"p\", and \"*\", respectively.\nallowed-confusables = [\"\u2212\", \"\u03c1\", \"\u2217\"]\n</code></pre>"},{"location":"settings/#lint_dummy-variable-rgx","title":"<code>dummy-variable-rgx</code>","text":"<p>A regular expression used to identify \"dummy\" variables, or those which should be ignored when enforcing (e.g.) unused-variable rules. The default expression matches <code>_</code>, <code>__</code>, and <code>_var</code>, but not <code>_var_</code>.</p> <p>Default value: <code>\"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Only ignore variables named \"_\".\ndummy-variable-rgx = \"^_$\"\n</code></pre> <pre><code>[lint]\n# Only ignore variables named \"_\".\ndummy-variable-rgx = \"^_$\"\n</code></pre>"},{"location":"settings/#lint_exclude","title":"<code>exclude</code>","text":"<p>A list of file patterns to exclude from linting in addition to the files excluded globally (see <code>exclude</code>, and <code>extend-exclude</code>).</p> <p>Exclusions are based on globs, and can be either:</p> <ul> <li>Single-path patterns, like <code>.mypy_cache</code> (to exclude any directory   named <code>.mypy_cache</code> in the tree), <code>foo.py</code> (to exclude any file named   <code>foo.py</code>), or <code>foo_*.py</code> (to exclude any file matching <code>foo_*.py</code> ).</li> <li>Relative patterns, like <code>directory/foo.py</code> (to exclude that specific   file) or <code>directory/*.py</code> (to exclude any Python files in   <code>directory</code>). Note that these paths are relative to the project root   (e.g., the directory containing your <code>pyproject.toml</code>).</li> </ul> <p>For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nexclude = [\"generated\"]\n</code></pre> <pre><code>[lint]\nexclude = [\"generated\"]\n</code></pre>"},{"location":"settings/#lint_explicit-preview-rules","title":"<code>explicit-preview-rules</code>","text":"<p>Whether to require exact codes to select preview rules. When enabled, preview rules will not be selected by prefixes \u2014 the full code of each preview rule will be required to enable the rule.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Require explicit selection of preview rules.\nexplicit-preview-rules = true\n</code></pre> <pre><code>[lint]\n# Require explicit selection of preview rules.\nexplicit-preview-rules = true\n</code></pre>"},{"location":"settings/#lint_extend-fixable","title":"<code>extend-fixable</code>","text":"<p>A list of rule codes or prefixes to consider fixable, in addition to those specified by <code>fixable</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.\nextend-fixable = [\"B\"]\n</code></pre> <pre><code>[lint]\n# Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.\nextend-fixable = [\"B\"]\n</code></pre>"},{"location":"settings/#lint_extend-ignore","title":"<code>extend-ignore</code>","text":"<p>Deprecated</p> <p>This option has been deprecated. The <code>extend-ignore</code> option is now interchangeable with <code>ignore</code>. Please update your configuration to use the <code>ignore</code> option instead.</p> <p>A list of rule codes or prefixes to ignore, in addition to those specified by <code>ignore</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Skip unused variable rules (`F841`).\nextend-ignore = [\"F841\"]\n</code></pre> <pre><code>[lint]\n# Skip unused variable rules (`F841`).\nextend-ignore = [\"F841\"]\n</code></pre>"},{"location":"settings/#lint_extend-per-file-ignores","title":"<code>extend-per-file-ignores</code>","text":"<p>A list of mappings from file pattern to rule codes or prefixes to exclude, in addition to any rules excluded by <code>per-file-ignores</code>.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, list[RuleSelector]]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.extend-per-file-ignores]\n# Also ignore `E402` in all `__init__.py` files.\n\"__init__.py\" = [\"E402\"]\n</code></pre> <pre><code>[lint.extend-per-file-ignores]\n# Also ignore `E402` in all `__init__.py` files.\n\"__init__.py\" = [\"E402\"]\n</code></pre>"},{"location":"settings/#lint_extend-safe-fixes","title":"<code>extend-safe-fixes</code>","text":"<p>A list of rule codes or prefixes for which unsafe fixes should be considered safe.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Allow applying all unsafe fixes in the `E` rules and `F401` without the `--unsafe-fixes` flag\nextend-safe-fixes = [\"E\", \"F401\"]\n</code></pre> <pre><code>[lint]\n# Allow applying all unsafe fixes in the `E` rules and `F401` without the `--unsafe-fixes` flag\nextend-safe-fixes = [\"E\", \"F401\"]\n</code></pre>"},{"location":"settings/#lint_extend-select","title":"<code>extend-select</code>","text":"<p>A list of rule codes or prefixes to enable, in addition to those specified by <code>select</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# On top of the default `select` (`E4`, E7`, `E9`, and `F`), enable flake8-bugbear (`B`) and flake8-quotes (`Q`).\nextend-select = [\"B\", \"Q\"]\n</code></pre> <pre><code>[lint]\n# On top of the default `select` (`E4`, E7`, `E9`, and `F`), enable flake8-bugbear (`B`) and flake8-quotes (`Q`).\nextend-select = [\"B\", \"Q\"]\n</code></pre>"},{"location":"settings/#lint_extend-unsafe-fixes","title":"<code>extend-unsafe-fixes</code>","text":"<p>A list of rule codes or prefixes for which safe fixes should be considered unsafe.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Require the `--unsafe-fixes` flag when fixing the `E` rules and `F401`\nextend-unsafe-fixes = [\"E\", \"F401\"]\n</code></pre> <pre><code>[lint]\n# Require the `--unsafe-fixes` flag when fixing the `E` rules and `F401`\nextend-unsafe-fixes = [\"E\", \"F401\"]\n</code></pre>"},{"location":"settings/#lint_external","title":"<code>external</code>","text":"<p>A list of rule codes or prefixes that are unsupported by Ruff, but should be preserved when (e.g.) validating <code># noqa</code> directives. Useful for retaining <code># noqa</code> directives that cover plugins not yet implemented by Ruff.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Avoiding flagging (and removing) any codes starting with `V` from any\n# `# noqa` directives, despite Ruff's lack of support for `vulture`.\nexternal = [\"V\"]\n</code></pre> <pre><code>[lint]\n# Avoiding flagging (and removing) any codes starting with `V` from any\n# `# noqa` directives, despite Ruff's lack of support for `vulture`.\nexternal = [\"V\"]\n</code></pre>"},{"location":"settings/#lint_fixable","title":"<code>fixable</code>","text":"<p>A list of rule codes or prefixes to consider fixable. By default, all rules are considered fixable.</p> <p>Default value: <code>[\"ALL\"]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Only allow fix behavior for `E` and `F` rules.\nfixable = [\"E\", \"F\"]\n</code></pre> <pre><code>[lint]\n# Only allow fix behavior for `E` and `F` rules.\nfixable = [\"E\", \"F\"]\n</code></pre>"},{"location":"settings/#lint_ignore","title":"<code>ignore</code>","text":"<p>A list of rule codes or prefixes to ignore. Prefixes can specify exact rules (like <code>F841</code>), entire categories (like <code>F</code>), or anything in between.</p> <p>When breaking ties between enabled and disabled rules (via <code>select</code> and <code>ignore</code>, respectively), more specific prefixes override less specific prefixes.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Skip unused variable rules (`F841`).\nignore = [\"F841\"]\n</code></pre> <pre><code>[lint]\n# Skip unused variable rules (`F841`).\nignore = [\"F841\"]\n</code></pre>"},{"location":"settings/#lint_ignore-init-module-imports","title":"<code>ignore-init-module-imports</code>","text":"<p>Deprecated</p> <p>This option has been deprecated in 0.4.4. <code>ignore-init-module-imports</code> will be removed in a future version because F401 now recommends appropriate fixes for unused imports in <code>__init__.py</code> (currently in preview mode). See documentation for more information and please update your configuration.</p> <p>Avoid automatically removing unused imports in <code>__init__.py</code> files. Such imports will still be flagged, but with a dedicated message suggesting that the import is either added to the module's <code>__all__</code> symbol, or re-exported with a redundant alias (e.g., <code>import os as os</code>).</p> <p>This option is enabled by default, but you can opt-in to removal of imports via an unsafe fix.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nignore-init-module-imports = false\n</code></pre> <pre><code>[lint]\nignore-init-module-imports = false\n</code></pre>"},{"location":"settings/#lint_logger-objects","title":"<code>logger-objects</code>","text":"<p>A list of objects that should be treated equivalently to a <code>logging.Logger</code> object.</p> <p>This is useful for ensuring proper diagnostics (e.g., to identify <code>logging</code> deprecations and other best-practices) for projects that re-export a <code>logging.Logger</code> object from a common module.</p> <p>For example, if you have a module <code>logging_setup.py</code> with the following contents: <pre><code>import logging\nlogger = logging.getLogger(__name__)\n</code></pre></p> <p>Adding <code>\"logging_setup.logger\"</code> to <code>logger-objects</code> will ensure that <code>logging_setup.logger</code> is treated as a <code>logging.Logger</code> object when imported from other modules (e.g., <code>from logging_setup import logger</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\nlogger-objects = [\"logging_setup.logger\"]\n</code></pre> <pre><code>[lint]\nlogger-objects = [\"logging_setup.logger\"]\n</code></pre>"},{"location":"settings/#lint_per-file-ignores","title":"<code>per-file-ignores</code>","text":"<p>A list of mappings from file pattern to rule codes or prefixes to exclude, when considering any matching files. An initial '!' negates the file pattern.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, list[RuleSelector]]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.per-file-ignores]\n# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.\n\"__init__.py\" = [\"E402\"]\n\"path/to/file.py\" = [\"E402\"]\n# Ignore `D` rules everywhere except for the `src/` directory.\n\"!src/**.py\" = [\"D\"]\n</code></pre> <pre><code>[lint.per-file-ignores]\n# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.\n\"__init__.py\" = [\"E402\"]\n\"path/to/file.py\" = [\"E402\"]\n# Ignore `D` rules everywhere except for the `src/` directory.\n\"!src/**.py\" = [\"D\"]\n</code></pre>"},{"location":"settings/#lint_preview","title":"<code>preview</code>","text":"<p>Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules and fixes.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Enable preview features.\npreview = true\n</code></pre> <pre><code>[lint]\n# Enable preview features.\npreview = true\n</code></pre>"},{"location":"settings/#lint_select","title":"<code>select</code>","text":"<p>A list of rule codes or prefixes to enable. Prefixes can specify exact rules (like <code>F841</code>), entire categories (like <code>F</code>), or anything in between.</p> <p>When breaking ties between enabled and disabled rules (via <code>select</code> and <code>ignore</code>, respectively), more specific prefixes override less specific prefixes.</p> <p>Default value: <code>[\"E4\", \"E7\", \"E9\", \"F\"]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# On top of the defaults (`E4`, E7`, `E9`, and `F`), enable flake8-bugbear (`B`) and flake8-quotes (`Q`).\nselect = [\"E4\", \"E7\", \"E9\", \"F\", \"B\", \"Q\"]\n</code></pre> <pre><code>[lint]\n# On top of the defaults (`E4`, E7`, `E9`, and `F`), enable flake8-bugbear (`B`) and flake8-quotes (`Q`).\nselect = [\"E4\", \"E7\", \"E9\", \"F\", \"B\", \"Q\"]\n</code></pre>"},{"location":"settings/#lint_task-tags","title":"<code>task-tags</code>","text":"<p>A list of task tags to recognize (e.g., \"TODO\", \"FIXME\", \"XXX\").</p> <p>Comments starting with these tags will be ignored by commented-out code detection (<code>ERA</code>), and skipped by line-length rules (<code>E501</code>) if <code>ignore-overlong-task-comments</code> is set to <code>true</code>.</p> <p>Default value: <code>[\"TODO\", \"FIXME\", \"XXX\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\ntask-tags = [\"HACK\"]\n</code></pre> <pre><code>[lint]\ntask-tags = [\"HACK\"]\n</code></pre>"},{"location":"settings/#lint_typing-modules","title":"<code>typing-modules</code>","text":"<p>A list of modules whose exports should be treated equivalently to members of the <code>typing</code> module.</p> <p>This is useful for ensuring proper type annotation inference for projects that re-export <code>typing</code> and <code>typing_extensions</code> members from a compatibility module. If omitted, any members imported from modules apart from <code>typing</code> and <code>typing_extensions</code> will be treated as ordinary Python objects.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\ntyping-modules = [\"airflow.typing_compat\"]\n</code></pre> <pre><code>[lint]\ntyping-modules = [\"airflow.typing_compat\"]\n</code></pre>"},{"location":"settings/#lint_unfixable","title":"<code>unfixable</code>","text":"<p>A list of rule codes or prefixes to consider non-fixable.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[RuleSelector]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint]\n# Disable fix for unused imports (`F401`).\nunfixable = [\"F401\"]\n</code></pre> <pre><code>[lint]\n# Disable fix for unused imports (`F401`).\nunfixable = [\"F401\"]\n</code></pre>"},{"location":"settings/#lintflake8-annotations","title":"<code>lint.flake8-annotations</code>","text":""},{"location":"settings/#lint_flake8-annotations_allow-star-arg-any","title":"<code>allow-star-arg-any</code>","text":"<p>Whether to suppress <code>ANN401</code> for dynamically typed <code>*args</code> and <code>**kwargs</code> arguments.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-annotations]\nallow-star-arg-any = true\n</code></pre> <pre><code>[lint.flake8-annotations]\nallow-star-arg-any = true\n</code></pre>"},{"location":"settings/#lint_flake8-annotations_ignore-fully-untyped","title":"<code>ignore-fully-untyped</code>","text":"<p>Whether to suppress <code>ANN*</code> rules for any declaration that hasn't been typed at all. This makes it easier to gradually add types to a codebase.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-annotations]\nignore-fully-untyped = true\n</code></pre> <pre><code>[lint.flake8-annotations]\nignore-fully-untyped = true\n</code></pre>"},{"location":"settings/#lint_flake8-annotations_mypy-init-return","title":"<code>mypy-init-return</code>","text":"<p>Whether to allow the omission of a return type hint for <code>__init__</code> if at least one argument is annotated.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-annotations]\nmypy-init-return = true\n</code></pre> <pre><code>[lint.flake8-annotations]\nmypy-init-return = true\n</code></pre>"},{"location":"settings/#lint_flake8-annotations_suppress-dummy-args","title":"<code>suppress-dummy-args</code>","text":"<p>Whether to suppress <code>ANN000</code>-level violations for arguments matching the \"dummy\" variable regex (like <code>_</code>).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-annotations]\nsuppress-dummy-args = true\n</code></pre> <pre><code>[lint.flake8-annotations]\nsuppress-dummy-args = true\n</code></pre>"},{"location":"settings/#lint_flake8-annotations_suppress-none-returning","title":"<code>suppress-none-returning</code>","text":"<p>Whether to suppress <code>ANN200</code>-level violations for functions that meet either of the following criteria:</p> <ul> <li>Contain no <code>return</code> statement.</li> <li>Explicit <code>return</code> statement(s) all return <code>None</code> (explicitly or   implicitly).</li> </ul> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-annotations]\nsuppress-none-returning = true\n</code></pre> <pre><code>[lint.flake8-annotations]\nsuppress-none-returning = true\n</code></pre>"},{"location":"settings/#lintflake8-bandit","title":"<code>lint.flake8-bandit</code>","text":""},{"location":"settings/#lint_flake8-bandit_check-typed-exception","title":"<code>check-typed-exception</code>","text":"<p>Whether to disallow <code>try</code>-<code>except</code>-<code>pass</code> (<code>S110</code>) for specific exception types. By default, <code>try</code>-<code>except</code>-<code>pass</code> is only disallowed for <code>Exception</code> and <code>BaseException</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-bandit]\ncheck-typed-exception = true\n</code></pre> <pre><code>[lint.flake8-bandit]\ncheck-typed-exception = true\n</code></pre>"},{"location":"settings/#lint_flake8-bandit_hardcoded-tmp-directory","title":"<code>hardcoded-tmp-directory</code>","text":"<p>A list of directories to consider temporary (see <code>S108</code>).</p> <p>Default value: <code>[\"/tmp\", \"/var/tmp\", \"/dev/shm\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-bandit]\nhardcoded-tmp-directory = [\"/foo/bar\"]\n</code></pre> <pre><code>[lint.flake8-bandit]\nhardcoded-tmp-directory = [\"/foo/bar\"]\n</code></pre>"},{"location":"settings/#lint_flake8-bandit_hardcoded-tmp-directory-extend","title":"<code>hardcoded-tmp-directory-extend</code>","text":"<p>A list of directories to consider temporary, in addition to those specified by <code>hardcoded-tmp-directory</code> (see <code>S108</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-bandit]\nhardcoded-tmp-directory-extend = [\"/foo/bar\"]\n</code></pre> <pre><code>[lint.flake8-bandit]\nhardcoded-tmp-directory-extend = [\"/foo/bar\"]\n</code></pre>"},{"location":"settings/#lintflake8-boolean-trap","title":"<code>lint.flake8-boolean-trap</code>","text":""},{"location":"settings/#lint_flake8-boolean-trap_extend-allowed-calls","title":"<code>extend-allowed-calls</code>","text":"<p>Additional callable functions with which to allow boolean traps.</p> <p>Expects to receive a list of fully-qualified names (e.g., <code>pydantic.Field</code>, rather than <code>Field</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-boolean-trap]\nextend-allowed-calls = [\"pydantic.Field\", \"django.db.models.Value\"]\n</code></pre> <pre><code>[lint.flake8-boolean-trap]\nextend-allowed-calls = [\"pydantic.Field\", \"django.db.models.Value\"]\n</code></pre>"},{"location":"settings/#lintflake8-bugbear","title":"<code>lint.flake8-bugbear</code>","text":""},{"location":"settings/#lint_flake8-bugbear_extend-immutable-calls","title":"<code>extend-immutable-calls</code>","text":"<p>Additional callable functions to consider \"immutable\" when evaluating, e.g., the <code>function-call-in-default-argument</code> rule (<code>B008</code>) or <code>function-call-in-dataclass-defaults</code> rule (<code>RUF009</code>).</p> <p>Expects to receive a list of fully-qualified names (e.g., <code>fastapi.Query</code>, rather than <code>Query</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-bugbear]\n# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.\nextend-immutable-calls = [\"fastapi.Depends\", \"fastapi.Query\"]\n</code></pre> <pre><code>[lint.flake8-bugbear]\n# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.\nextend-immutable-calls = [\"fastapi.Depends\", \"fastapi.Query\"]\n</code></pre>"},{"location":"settings/#lintflake8-builtins","title":"<code>lint.flake8-builtins</code>","text":""},{"location":"settings/#lint_flake8-builtins_builtins-allowed-modules","title":"<code>builtins-allowed-modules</code>","text":"<p>List of builtin module names to allow.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-builtins]\nbuiltins-allowed-modules = [\"id\"]\n</code></pre> <pre><code>[lint.flake8-builtins]\nbuiltins-allowed-modules = [\"id\"]\n</code></pre>"},{"location":"settings/#lint_flake8-builtins_builtins-ignorelist","title":"<code>builtins-ignorelist</code>","text":"<p>Ignore list of builtins.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-builtins]\nbuiltins-ignorelist = [\"id\"]\n</code></pre> <pre><code>[lint.flake8-builtins]\nbuiltins-ignorelist = [\"id\"]\n</code></pre>"},{"location":"settings/#lintflake8-comprehensions","title":"<code>lint.flake8-comprehensions</code>","text":""},{"location":"settings/#lint_flake8-comprehensions_allow-dict-calls-with-keyword-arguments","title":"<code>allow-dict-calls-with-keyword-arguments</code>","text":"<p>Allow <code>dict</code> calls that make use of keyword arguments (e.g., <code>dict(a=1, b=2)</code>).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-comprehensions]\nallow-dict-calls-with-keyword-arguments = true\n</code></pre> <pre><code>[lint.flake8-comprehensions]\nallow-dict-calls-with-keyword-arguments = true\n</code></pre>"},{"location":"settings/#lintflake8-copyright","title":"<code>lint.flake8-copyright</code>","text":""},{"location":"settings/#lint_flake8-copyright_author","title":"<code>author</code>","text":"<p>Author to enforce within the copyright notice. If provided, the author must be present immediately following the copyright notice.</p> <p>Default value: <code>null</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-copyright]\nauthor = \"Ruff\"\n</code></pre> <pre><code>[lint.flake8-copyright]\nauthor = \"Ruff\"\n</code></pre>"},{"location":"settings/#lint_flake8-copyright_min-file-size","title":"<code>min-file-size</code>","text":"<p>A minimum file size (in bytes) required for a copyright notice to be enforced. By default, all files are validated.</p> <p>Default value: <code>0</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-copyright]\n# Avoid enforcing a header on files smaller than 1024 bytes.\nmin-file-size = 1024\n</code></pre> <pre><code>[lint.flake8-copyright]\n# Avoid enforcing a header on files smaller than 1024 bytes.\nmin-file-size = 1024\n</code></pre>"},{"location":"settings/#lint_flake8-copyright_notice-rgx","title":"<code>notice-rgx</code>","text":"<p>The regular expression used to match the copyright notice, compiled with the <code>regex</code> crate. Defaults to <code>(?i)Copyright\\s+((?:\\(C\\)|\u00a9)\\s+)?\\d{4}((-|,\\s)\\d{4})*</code>, which matches the following:</p> <ul> <li><code>Copyright 2023</code></li> <li><code>Copyright (C) 2023</code></li> <li><code>Copyright 2021-2023</code></li> <li><code>Copyright (C) 2021-2023</code></li> <li><code>Copyright (C) 2021, 2023</code></li> </ul> <p>Default value: <code>\"(?i)Copyright\\s+((?:\\(C\\)|\u00a9)\\s+)?\\d{4}((-|,\\s)\\d{4})*\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-copyright]\nnotice-rgx = \"(?i)Copyright \\\\(C\\\\) \\\\d{4}\"\n</code></pre> <pre><code>[lint.flake8-copyright]\nnotice-rgx = \"(?i)Copyright \\\\(C\\\\) \\\\d{4}\"\n</code></pre>"},{"location":"settings/#lintflake8-errmsg","title":"<code>lint.flake8-errmsg</code>","text":""},{"location":"settings/#lint_flake8-errmsg_max-string-length","title":"<code>max-string-length</code>","text":"<p>Maximum string length for string literals in exception messages.</p> <p>Default value: <code>0</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-errmsg]\nmax-string-length = 20\n</code></pre> <pre><code>[lint.flake8-errmsg]\nmax-string-length = 20\n</code></pre>"},{"location":"settings/#lintflake8-gettext","title":"<code>lint.flake8-gettext</code>","text":""},{"location":"settings/#lint_flake8-gettext_extend-function-names","title":"<code>extend-function-names</code>","text":"<p>Additional function names to consider as internationalization calls, in addition to those included in <code>function-names</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-gettext]\nextend-function-names = [\"ugettetxt\"]\n</code></pre> <pre><code>[lint.flake8-gettext]\nextend-function-names = [\"ugettetxt\"]\n</code></pre>"},{"location":"settings/#lint_flake8-gettext_function-names","title":"<code>function-names</code>","text":"<p>The function names to consider as internationalization calls.</p> <p>Default value: <code>[\"_\", \"gettext\", \"ngettext\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-gettext]\nfunction-names = [\"_\", \"gettext\", \"ngettext\", \"ugettetxt\"]\n</code></pre> <pre><code>[lint.flake8-gettext]\nfunction-names = [\"_\", \"gettext\", \"ngettext\", \"ugettetxt\"]\n</code></pre>"},{"location":"settings/#lintflake8-implicit-str-concat","title":"<code>lint.flake8-implicit-str-concat</code>","text":""},{"location":"settings/#lint_flake8-implicit-str-concat_allow-multiline","title":"<code>allow-multiline</code>","text":"<p>Whether to allow implicit string concatenations for multiline strings. By default, implicit concatenations of multiline strings are allowed (but continuation lines, delimited with a backslash, are prohibited).</p> <p>Setting <code>allow-multiline = false</code> will automatically disable the <code>explicit-string-concatenation</code> (<code>ISC003</code>) rule. Otherwise, both implicit and explicit multiline string concatenations would be seen as violations, making it impossible to write a linter-compliant multiline string.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-implicit-str-concat]\nallow-multiline = false\n</code></pre> <pre><code>[lint.flake8-implicit-str-concat]\nallow-multiline = false\n</code></pre>"},{"location":"settings/#lintflake8-import-conventions","title":"<code>lint.flake8-import-conventions</code>","text":""},{"location":"settings/#lint_flake8-import-conventions_aliases","title":"<code>aliases</code>","text":"<p>The conventional aliases for imports. These aliases can be extended by the <code>extend-aliases</code> option.</p> <p>Default value: <code>{\"altair\": \"alt\", \"matplotlib\": \"mpl\", \"matplotlib.pyplot\": \"plt\", \"numpy\": \"np\", \"pandas\": \"pd\", \"seaborn\": \"sns\", \"tensorflow\": \"tf\", \"tkinter\":  \"tk\", \"holoviews\": \"hv\", \"panel\": \"pn\", \"plotly.express\": \"px\", \"polars\": \"pl\", \"pyarrow\": \"pa\", \"xml.etree.ElementTree\": \"ET\"}</code></p> <p>Type: <code>dict[str, str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-import-conventions.aliases]\n# Declare the default aliases.\naltair = \"alt\"\n\"matplotlib.pyplot\" = \"plt\"\nnumpy = \"np\"\npandas = \"pd\"\nseaborn = \"sns\"\nscipy = \"sp\"\n</code></pre> <pre><code>[lint.flake8-import-conventions.aliases]\n# Declare the default aliases.\naltair = \"alt\"\n\"matplotlib.pyplot\" = \"plt\"\nnumpy = \"np\"\npandas = \"pd\"\nseaborn = \"sns\"\nscipy = \"sp\"\n</code></pre>"},{"location":"settings/#lint_flake8-import-conventions_banned-aliases","title":"<code>banned-aliases</code>","text":"<p>A mapping from module to its banned import aliases.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, list[str]]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-import-conventions.banned-aliases]\n# Declare the banned aliases.\n\"tensorflow.keras.backend\" = [\"K\"]\n</code></pre> <pre><code>[lint.flake8-import-conventions.banned-aliases]\n# Declare the banned aliases.\n\"tensorflow.keras.backend\" = [\"K\"]\n</code></pre>"},{"location":"settings/#lint_flake8-import-conventions_banned-from","title":"<code>banned-from</code>","text":"<p>A list of modules that should not be imported from using the <code>from ... import ...</code> syntax.</p> <p>For example, given <code>banned-from = [\"pandas\"]</code>, <code>from pandas import DataFrame</code> would be disallowed, while <code>import pandas</code> would be allowed.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-import-conventions]\n# Declare the banned `from` imports.\nbanned-from = [\"typing\"]\n</code></pre> <pre><code>[lint.flake8-import-conventions]\n# Declare the banned `from` imports.\nbanned-from = [\"typing\"]\n</code></pre>"},{"location":"settings/#lint_flake8-import-conventions_extend-aliases","title":"<code>extend-aliases</code>","text":"<p>A mapping from module to conventional import alias. These aliases will be added to the <code>aliases</code> mapping.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-import-conventions.extend-aliases]\n# Declare a custom alias for the `dask` module.\n\"dask.dataframe\" = \"dd\"\n</code></pre> <pre><code>[lint.flake8-import-conventions.extend-aliases]\n# Declare a custom alias for the `dask` module.\n\"dask.dataframe\" = \"dd\"\n</code></pre>"},{"location":"settings/#lintflake8-pytest-style","title":"<code>lint.flake8-pytest-style</code>","text":""},{"location":"settings/#lint_flake8-pytest-style_fixture-parentheses","title":"<code>fixture-parentheses</code>","text":"<p>Boolean flag specifying whether <code>@pytest.fixture()</code> without parameters should have parentheses. If the option is set to <code>false</code> (the default), <code>@pytest.fixture</code> is valid and <code>@pytest.fixture()</code> is invalid. If set to <code>true</code>, <code>@pytest.fixture()</code> is valid and <code>@pytest.fixture</code> is invalid.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-pytest-style]\nfixture-parentheses = true\n</code></pre> <pre><code>[lint.flake8-pytest-style]\nfixture-parentheses = true\n</code></pre>"},{"location":"settings/#lint_flake8-pytest-style_mark-parentheses","title":"<code>mark-parentheses</code>","text":"<p>Boolean flag specifying whether <code>@pytest.mark.foo()</code> without parameters should have parentheses. If the option is set to <code>false</code> (the default), <code>@pytest.mark.foo</code> is valid and <code>@pytest.mark.foo()</code> is invalid. If set to <code>true</code>, <code>@pytest.mark.foo()</code> is valid and <code>@pytest.mark.foo</code> is invalid.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-pytest-style]\nmark-parentheses = true\n</code></pre> <pre><code>[lint.flake8-pytest-style]\nmark-parentheses = true\n</code></pre>"},{"location":"settings/#lint_flake8-pytest-style_parametrize-names-type","title":"<code>parametrize-names-type</code>","text":"<p>Expected type for multiple argument names in <code>@pytest.mark.parametrize</code>. The following values are supported:</p> <ul> <li><code>csv</code> \u2014 a comma-separated list, e.g.   <code>@pytest.mark.parametrize(\"name1,name2\", ...)</code></li> <li><code>tuple</code> (default) \u2014 e.g.   <code>@pytest.mark.parametrize((\"name1\", \"name2\"), ...)</code></li> <li><code>list</code> \u2014 e.g. <code>@pytest.mark.parametrize([\"name1\", \"name2\"], ...)</code></li> </ul> <p>Default value: <code>tuple</code></p> <p>Type: <code>\"csv\" | \"tuple\" | \"list\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-pytest-style]\nparametrize-names-type = \"list\"\n</code></pre> <pre><code>[lint.flake8-pytest-style]\nparametrize-names-type = \"list\"\n</code></pre>"},{"location":"settings/#lint_flake8-pytest-style_parametrize-values-row-type","title":"<code>parametrize-values-row-type</code>","text":"<p>Expected type for each row of values in <code>@pytest.mark.parametrize</code> in case of multiple parameters. The following values are supported:</p> <ul> <li><code>tuple</code> (default) \u2014 e.g.   <code>@pytest.mark.parametrize((\"name1\", \"name2\"), [(1, 2), (3, 4)])</code></li> <li><code>list</code> \u2014 e.g.   <code>@pytest.mark.parametrize((\"name1\", \"name2\"), [[1, 2], [3, 4]])</code></li> </ul> <p>Default value: <code>tuple</code></p> <p>Type: <code>\"tuple\" | \"list\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-pytest-style]\nparametrize-values-row-type = \"list\"\n</code></pre> <pre><code>[lint.flake8-pytest-style]\nparametrize-values-row-type = \"list\"\n</code></pre>"},{"location":"settings/#lint_flake8-pytest-style_parametrize-values-type","title":"<code>parametrize-values-type</code>","text":"<p>Expected type for the list of values rows in <code>@pytest.mark.parametrize</code>. The following values are supported:</p> <ul> <li><code>tuple</code> \u2014 e.g. <code>@pytest.mark.parametrize(\"name\", (1, 2, 3))</code></li> <li><code>list</code> (default) \u2014 e.g. <code>@pytest.mark.parametrize(\"name\", [1, 2, 3])</code></li> </ul> <p>Default value: <code>list</code></p> <p>Type: <code>\"tuple\" | \"list\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-pytest-style]\nparametrize-values-type = \"tuple\"\n</code></pre> <pre><code>[lint.flake8-pytest-style]\nparametrize-values-type = \"tuple\"\n</code></pre>"},{"location":"settings/#lint_flake8-pytest-style_raises-extend-require-match-for","title":"<code>raises-extend-require-match-for</code>","text":"<p>List of additional exception names that require a match= parameter in a <code>pytest.raises()</code> call. This extends the default list of exceptions that require a match= parameter. This option is useful if you want to extend the default list of exceptions that require a match= parameter without having to specify the entire list. Note that this option does not remove any exceptions from the default list.</p> <p>Supports glob patterns. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-pytest-style]\nraises-extend-require-match-for = [\"requests.RequestException\"]\n</code></pre> <pre><code>[lint.flake8-pytest-style]\nraises-extend-require-match-for = [\"requests.RequestException\"]\n</code></pre>"},{"location":"settings/#lint_flake8-pytest-style_raises-require-match-for","title":"<code>raises-require-match-for</code>","text":"<p>List of exception names that require a match= parameter in a <code>pytest.raises()</code> call.</p> <p>Supports glob patterns. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[\"BaseException\", \"Exception\", \"ValueError\", \"OSError\", \"IOError\", \"EnvironmentError\", \"socket.error\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-pytest-style]\nraises-require-match-for = [\"requests.RequestException\"]\n</code></pre> <pre><code>[lint.flake8-pytest-style]\nraises-require-match-for = [\"requests.RequestException\"]\n</code></pre>"},{"location":"settings/#lintflake8-quotes","title":"<code>lint.flake8-quotes</code>","text":""},{"location":"settings/#lint_flake8-quotes_avoid-escape","title":"<code>avoid-escape</code>","text":"<p>Whether to avoid using single quotes if a string contains single quotes, or vice-versa with double quotes, as per PEP 8. This minimizes the need to escape quotation marks within strings.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-quotes]\n# Don't bother trying to avoid escapes.\navoid-escape = false\n</code></pre> <pre><code>[lint.flake8-quotes]\n# Don't bother trying to avoid escapes.\navoid-escape = false\n</code></pre>"},{"location":"settings/#lint_flake8-quotes_docstring-quotes","title":"<code>docstring-quotes</code>","text":"<p>Quote style to prefer for docstrings (either \"single\" or \"double\").</p> <p>When using the formatter, only \"double\" is compatible, as the formatter enforces double quotes for docstrings strings.</p> <p>Default value: <code>\"double\"</code></p> <p>Type: <code>\"single\" | \"double\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-quotes]\ndocstring-quotes = \"single\"\n</code></pre> <pre><code>[lint.flake8-quotes]\ndocstring-quotes = \"single\"\n</code></pre>"},{"location":"settings/#lint_flake8-quotes_inline-quotes","title":"<code>inline-quotes</code>","text":"<p>Quote style to prefer for inline strings (either \"single\" or \"double\").</p> <p>When using the formatter, ensure that <code>format.quote-style</code> is set to the same preferred quote style.</p> <p>Default value: <code>\"double\"</code></p> <p>Type: <code>\"single\" | \"double\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-quotes]\ninline-quotes = \"single\"\n</code></pre> <pre><code>[lint.flake8-quotes]\ninline-quotes = \"single\"\n</code></pre>"},{"location":"settings/#lint_flake8-quotes_multiline-quotes","title":"<code>multiline-quotes</code>","text":"<p>Quote style to prefer for multiline strings (either \"single\" or \"double\").</p> <p>When using the formatter, only \"double\" is compatible, as the formatter enforces double quotes for multiline strings.</p> <p>Default value: <code>\"double\"</code></p> <p>Type: <code>\"single\" | \"double\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-quotes]\nmultiline-quotes = \"single\"\n</code></pre> <pre><code>[lint.flake8-quotes]\nmultiline-quotes = \"single\"\n</code></pre>"},{"location":"settings/#lintflake8-self","title":"<code>lint.flake8-self</code>","text":""},{"location":"settings/#lint_flake8-self_extend-ignore-names","title":"<code>extend-ignore-names</code>","text":"<p>Additional names to ignore when considering <code>flake8-self</code> violations, in addition to those included in <code>ignore-names</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-self]\nextend-ignore-names = [\"_base_manager\", \"_default_manager\",  \"_meta\"]\n</code></pre> <pre><code>[lint.flake8-self]\nextend-ignore-names = [\"_base_manager\", \"_default_manager\",  \"_meta\"]\n</code></pre>"},{"location":"settings/#lint_flake8-self_ignore-names","title":"<code>ignore-names</code>","text":"<p>A list of names to ignore when considering <code>flake8-self</code> violations.</p> <p>Default value: <code>[\"_make\", \"_asdict\", \"_replace\", \"_fields\", \"_field_defaults\", \"_name_\", \"_value_\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-self]\nignore-names = [\"_new\"]\n</code></pre> <pre><code>[lint.flake8-self]\nignore-names = [\"_new\"]\n</code></pre>"},{"location":"settings/#lintflake8-tidy-imports","title":"<code>lint.flake8-tidy-imports</code>","text":""},{"location":"settings/#lint_flake8-tidy-imports_ban-relative-imports","title":"<code>ban-relative-imports</code>","text":"<p>Whether to ban all relative imports (<code>\"all\"</code>), or only those imports that extend into the parent module or beyond (<code>\"parents\"</code>).</p> <p>Default value: <code>\"parents\"</code></p> <p>Type: <code>\"parents\" | \"all\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-tidy-imports]\n# Disallow all relative imports.\nban-relative-imports = \"all\"\n</code></pre> <pre><code>[lint.flake8-tidy-imports]\n# Disallow all relative imports.\nban-relative-imports = \"all\"\n</code></pre>"},{"location":"settings/#lint_flake8-tidy-imports_banned-api","title":"<code>banned-api</code>","text":"<p>Specific modules or module members that may not be imported or accessed. Note that this rule is only meant to flag accidental uses, and can be circumvented via <code>eval</code> or <code>importlib</code>.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, { \"msg\": str }]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-tidy-imports.banned-api]\n\"cgi\".msg = \"The cgi module is deprecated, see https://peps.python.org/pep-0594/#cgi.\"\n\"typing.TypedDict\".msg = \"Use typing_extensions.TypedDict instead.\"\n</code></pre> <pre><code>[lint.flake8-tidy-imports.banned-api]\n\"cgi\".msg = \"The cgi module is deprecated, see https://peps.python.org/pep-0594/#cgi.\"\n\"typing.TypedDict\".msg = \"Use typing_extensions.TypedDict instead.\"\n</code></pre>"},{"location":"settings/#lint_flake8-tidy-imports_banned-module-level-imports","title":"<code>banned-module-level-imports</code>","text":"<p>List of specific modules that may not be imported at module level, and should instead be imported lazily (e.g., within a function definition, or an <code>if TYPE_CHECKING:</code> block, or some other nested context).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-tidy-imports]\n# Ban certain modules from being imported at module level, instead requiring\n# that they're imported lazily (e.g., within a function definition).\nbanned-module-level-imports = [\"torch\", \"tensorflow\"]\n</code></pre> <pre><code>[lint.flake8-tidy-imports]\n# Ban certain modules from being imported at module level, instead requiring\n# that they're imported lazily (e.g., within a function definition).\nbanned-module-level-imports = [\"torch\", \"tensorflow\"]\n</code></pre>"},{"location":"settings/#lintflake8-type-checking","title":"<code>lint.flake8-type-checking</code>","text":""},{"location":"settings/#lint_flake8-type-checking_exempt-modules","title":"<code>exempt-modules</code>","text":"<p>Exempt certain modules from needing to be moved into type-checking blocks.</p> <p>Default value: <code>[\"typing\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-type-checking]\nexempt-modules = [\"typing\", \"typing_extensions\"]\n</code></pre> <pre><code>[lint.flake8-type-checking]\nexempt-modules = [\"typing\", \"typing_extensions\"]\n</code></pre>"},{"location":"settings/#lint_flake8-type-checking_quote-annotations","title":"<code>quote-annotations</code>","text":"<p>Whether to add quotes around type annotations, if doing so would allow the corresponding import to be moved into a type-checking block.</p> <p>For example, in the following, Python requires that <code>Sequence</code> be available at runtime, despite the fact that it's only used in a type annotation:</p> <pre><code>from collections.abc import Sequence\ndef func(value: Sequence[int]) -&gt; None:\n...\n</code></pre> <p>In other words, moving <code>from collections.abc import Sequence</code> into an <code>if TYPE_CHECKING:</code> block above would cause a runtime error, as the type would no longer be available at runtime.</p> <p>By default, Ruff will respect such runtime semantics and avoid moving the import to prevent such runtime errors.</p> <p>Setting <code>quote-annotations</code> to <code>true</code> will instruct Ruff to add quotes around the annotation (e.g., <code>\"Sequence[int]\"</code>), which in turn enables Ruff to move the import into an <code>if TYPE_CHECKING:</code> block, like so:</p> <pre><code>from typing import TYPE_CHECKING\nif TYPE_CHECKING:\nfrom collections.abc import Sequence\ndef func(value: \"Sequence[int]\") -&gt; None:\n...\n</code></pre> <p>Note that this setting has no effect when <code>from __future__ import annotations</code> is present, as <code>__future__</code> annotations are always treated equivalently to quoted annotations.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-type-checking]\n# Add quotes around type annotations, if doing so would allow\n# an import to be moved into a type-checking block.\nquote-annotations = true\n</code></pre> <pre><code>[lint.flake8-type-checking]\n# Add quotes around type annotations, if doing so would allow\n# an import to be moved into a type-checking block.\nquote-annotations = true\n</code></pre>"},{"location":"settings/#lint_flake8-type-checking_runtime-evaluated-base-classes","title":"<code>runtime-evaluated-base-classes</code>","text":"<p>Exempt classes that list any of the enumerated classes as a base class from needing to be moved into type-checking blocks.</p> <p>Common examples include Pydantic's <code>pydantic.BaseModel</code> and SQLAlchemy's <code>sqlalchemy.orm.DeclarativeBase</code>, but can also support user-defined classes that inherit from those base classes. For example, if you define a common <code>DeclarativeBase</code> subclass that's used throughout your project (e.g., <code>class Base(DeclarativeBase) ...</code> in <code>base.py</code>), you can add it to this list (<code>runtime-evaluated-base-classes = [\"base.Base\"]</code>) to exempt models from being moved into type-checking blocks.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-type-checking]\nruntime-evaluated-base-classes = [\"pydantic.BaseModel\", \"sqlalchemy.orm.DeclarativeBase\"]\n</code></pre> <pre><code>[lint.flake8-type-checking]\nruntime-evaluated-base-classes = [\"pydantic.BaseModel\", \"sqlalchemy.orm.DeclarativeBase\"]\n</code></pre>"},{"location":"settings/#lint_flake8-type-checking_runtime-evaluated-decorators","title":"<code>runtime-evaluated-decorators</code>","text":"<p>Exempt classes and functions decorated with any of the enumerated decorators from being moved into type-checking blocks.</p> <p>Common examples include Pydantic's <code>@pydantic.validate_call</code> decorator (for functions) and attrs' <code>@attrs.define</code> decorator (for classes).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-type-checking]\nruntime-evaluated-decorators = [\"pydantic.validate_call\", \"attrs.define\"]\n</code></pre> <pre><code>[lint.flake8-type-checking]\nruntime-evaluated-decorators = [\"pydantic.validate_call\", \"attrs.define\"]\n</code></pre>"},{"location":"settings/#lint_flake8-type-checking_strict","title":"<code>strict</code>","text":"<p>Enforce <code>TC001</code>, <code>TC002</code>, and <code>TC003</code> rules even when valid runtime imports are present for the same module.</p> <p>See flake8-type-checking's strict option.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-type-checking]\nstrict = true\n</code></pre> <pre><code>[lint.flake8-type-checking]\nstrict = true\n</code></pre>"},{"location":"settings/#lintflake8-unused-arguments","title":"<code>lint.flake8-unused-arguments</code>","text":""},{"location":"settings/#lint_flake8-unused-arguments_ignore-variadic-names","title":"<code>ignore-variadic-names</code>","text":"<p>Whether to allow unused variadic arguments, like <code>*args</code> and <code>**kwargs</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.flake8-unused-arguments]\nignore-variadic-names = true\n</code></pre> <pre><code>[lint.flake8-unused-arguments]\nignore-variadic-names = true\n</code></pre>"},{"location":"settings/#lintisort","title":"<code>lint.isort</code>","text":""},{"location":"settings/#lint_isort_case-sensitive","title":"<code>case-sensitive</code>","text":"<p>Sort imports taking into account case sensitivity.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\ncase-sensitive = true\n</code></pre> <pre><code>[lint.isort]\ncase-sensitive = true\n</code></pre>"},{"location":"settings/#lint_isort_classes","title":"<code>classes</code>","text":"<p>An override list of tokens to always recognize as a Class for <code>order-by-type</code> regardless of casing.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nclasses = [\"SVC\"]\n</code></pre> <pre><code>[lint.isort]\nclasses = [\"SVC\"]\n</code></pre>"},{"location":"settings/#lint_isort_combine-as-imports","title":"<code>combine-as-imports</code>","text":"<p>Combines as imports on the same line. See isort's <code>combine-as-imports</code> option.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\ncombine-as-imports = true\n</code></pre> <pre><code>[lint.isort]\ncombine-as-imports = true\n</code></pre>"},{"location":"settings/#lint_isort_constants","title":"<code>constants</code>","text":"<p>An override list of tokens to always recognize as a CONSTANT for <code>order-by-type</code> regardless of casing.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nconstants = [\"constant\"]\n</code></pre> <pre><code>[lint.isort]\nconstants = [\"constant\"]\n</code></pre>"},{"location":"settings/#lint_isort_default-section","title":"<code>default-section</code>","text":"<p>Define a default section for any imports that don't fit into the specified <code>section-order</code>.</p> <p>Default value: <code>\"third-party\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\ndefault-section = \"first-party\"\n</code></pre> <pre><code>[lint.isort]\ndefault-section = \"first-party\"\n</code></pre>"},{"location":"settings/#lint_isort_detect-same-package","title":"<code>detect-same-package</code>","text":"<p>Whether to automatically mark imports from within the same package as first-party. For example, when <code>detect-same-package = true</code>, then when analyzing files within the <code>foo</code> package, any imports from within the <code>foo</code> package will be considered first-party.</p> <p>This heuristic is often unnecessary when <code>src</code> is configured to detect all first-party sources; however, if <code>src</code> is not configured, this heuristic can be useful to detect first-party imports from within (but not across) first-party packages.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\ndetect-same-package = false\n</code></pre> <pre><code>[lint.isort]\ndetect-same-package = false\n</code></pre>"},{"location":"settings/#lint_isort_extra-standard-library","title":"<code>extra-standard-library</code>","text":"<p>A list of modules to consider standard-library, in addition to those known to Ruff in advance.</p> <p>Supports glob patterns. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nextra-standard-library = [\"path\"]\n</code></pre> <pre><code>[lint.isort]\nextra-standard-library = [\"path\"]\n</code></pre>"},{"location":"settings/#lint_isort_force-single-line","title":"<code>force-single-line</code>","text":"<p>Forces all from imports to appear on their own line.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nforce-single-line = true\n</code></pre> <pre><code>[lint.isort]\nforce-single-line = true\n</code></pre>"},{"location":"settings/#lint_isort_force-sort-within-sections","title":"<code>force-sort-within-sections</code>","text":"<p>Don't sort straight-style imports (like <code>import sys</code>) before from-style imports (like <code>from itertools import groupby</code>). Instead, sort the imports by module, independent of import style.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nforce-sort-within-sections = true\n</code></pre> <pre><code>[lint.isort]\nforce-sort-within-sections = true\n</code></pre>"},{"location":"settings/#lint_isort_force-to-top","title":"<code>force-to-top</code>","text":"<p>Force specific imports to the top of their appropriate section.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nforce-to-top = [\"src\"]\n</code></pre> <pre><code>[lint.isort]\nforce-to-top = [\"src\"]\n</code></pre>"},{"location":"settings/#lint_isort_force-wrap-aliases","title":"<code>force-wrap-aliases</code>","text":"<p>Force <code>import from</code> statements with multiple members and at least one alias (e.g., <code>import A as B</code>) to wrap such that every line contains exactly one member. For example, this formatting would be retained, rather than condensing to a single line:</p> <pre><code>from .utils import (\ntest_directory as test_directory,\ntest_id as test_id\n)\n</code></pre> <p>Note that this setting is only effective when combined with <code>combine-as-imports = true</code>. When <code>combine-as-imports</code> isn't enabled, every aliased <code>import from</code> will be given its own line, in which case, wrapping is not necessary.</p> <p>When using the formatter, ensure that <code>format.skip-magic-trailing-comma</code> is set to <code>false</code> (default) when enabling <code>force-wrap-aliases</code> to avoid that the formatter collapses members if they all fit on a single line.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nforce-wrap-aliases = true\ncombine-as-imports = true\n</code></pre> <pre><code>[lint.isort]\nforce-wrap-aliases = true\ncombine-as-imports = true\n</code></pre>"},{"location":"settings/#lint_isort_forced-separate","title":"<code>forced-separate</code>","text":"<p>A list of modules to separate into auxiliary block(s) of imports, in the order specified.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nforced-separate = [\"tests\"]\n</code></pre> <pre><code>[lint.isort]\nforced-separate = [\"tests\"]\n</code></pre>"},{"location":"settings/#lint_isort_from-first","title":"<code>from-first</code>","text":"<p>Whether to place <code>import from</code> imports before straight imports when sorting.</p> <p>For example, by default, imports will be sorted such that straight imports appear before <code>import from</code> imports, as in: <pre><code>import os\nimport sys\nfrom typing import List\n</code></pre></p> <p>Setting <code>from-first = true</code> will instead sort such that <code>import from</code> imports appear before straight imports, as in: <pre><code>from typing import List\nimport os\nimport sys\n</code></pre></p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nfrom-first = true\n</code></pre> <pre><code>[lint.isort]\nfrom-first = true\n</code></pre>"},{"location":"settings/#lint_isort_known-first-party","title":"<code>known-first-party</code>","text":"<p>A list of modules to consider first-party, regardless of whether they can be identified as such via introspection of the local filesystem.</p> <p>Supports glob patterns. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nknown-first-party = [\"src\"]\n</code></pre> <pre><code>[lint.isort]\nknown-first-party = [\"src\"]\n</code></pre>"},{"location":"settings/#lint_isort_known-local-folder","title":"<code>known-local-folder</code>","text":"<p>A list of modules to consider being a local folder. Generally, this is reserved for relative imports (<code>from . import module</code>).</p> <p>Supports glob patterns. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nknown-local-folder = [\"src\"]\n</code></pre> <pre><code>[lint.isort]\nknown-local-folder = [\"src\"]\n</code></pre>"},{"location":"settings/#lint_isort_known-third-party","title":"<code>known-third-party</code>","text":"<p>A list of modules to consider third-party, regardless of whether they can be identified as such via introspection of the local filesystem.</p> <p>Supports glob patterns. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nknown-third-party = [\"src\"]\n</code></pre> <pre><code>[lint.isort]\nknown-third-party = [\"src\"]\n</code></pre>"},{"location":"settings/#lint_isort_length-sort","title":"<code>length-sort</code>","text":"<p>Sort imports by their string length, such that shorter imports appear before longer imports. For example, by default, imports will be sorted alphabetically, as in: <pre><code>import collections\nimport os\n</code></pre></p> <p>Setting <code>length-sort = true</code> will instead sort such that shorter imports appear before longer imports, as in: <pre><code>import os\nimport collections\n</code></pre></p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nlength-sort = true\n</code></pre> <pre><code>[lint.isort]\nlength-sort = true\n</code></pre>"},{"location":"settings/#lint_isort_length-sort-straight","title":"<code>length-sort-straight</code>","text":"<p>Sort straight imports by their string length. Similar to <code>length-sort</code>, but applies only to straight imports and doesn't affect <code>from</code> imports.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nlength-sort-straight = true\n</code></pre> <pre><code>[lint.isort]\nlength-sort-straight = true\n</code></pre>"},{"location":"settings/#lint_isort_lines-after-imports","title":"<code>lines-after-imports</code>","text":"<p>The number of blank lines to place after imports. Use <code>-1</code> for automatic determination.</p> <p>Ruff uses at most one blank line after imports in typing stub files (files with <code>.pyi</code> extension) in accordance to the typing style recommendations (source).</p> <p>When using the formatter, only the values <code>-1</code>, <code>1</code>, and <code>2</code> are compatible because it enforces at least one empty and at most two empty lines after imports.</p> <p>Default value: <code>-1</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\n# Use a single line after each import block.\nlines-after-imports = 1\n</code></pre> <pre><code>[lint.isort]\n# Use a single line after each import block.\nlines-after-imports = 1\n</code></pre>"},{"location":"settings/#lint_isort_lines-between-types","title":"<code>lines-between-types</code>","text":"<p>The number of lines to place between \"direct\" and <code>import from</code> imports.</p> <p>When using the formatter, only the values <code>0</code> and <code>1</code> are compatible because it preserves up to one empty line after imports in nested blocks.</p> <p>Default value: <code>0</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\n# Use a single line between direct and from import.\nlines-between-types = 1\n</code></pre> <pre><code>[lint.isort]\n# Use a single line between direct and from import.\nlines-between-types = 1\n</code></pre>"},{"location":"settings/#lint_isort_no-lines-before","title":"<code>no-lines-before</code>","text":"<p>A list of sections that should not be delineated from the previous section via empty lines.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[\"future\" | \"standard-library\" | \"third-party\" | \"first-party\" | \"local-folder\" | str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nno-lines-before = [\"future\", \"standard-library\"]\n</code></pre> <pre><code>[lint.isort]\nno-lines-before = [\"future\", \"standard-library\"]\n</code></pre>"},{"location":"settings/#lint_isort_no-sections","title":"<code>no-sections</code>","text":"<p>Put all imports into the same section bucket.</p> <p>For example, rather than separating standard library and third-party imports, as in: <pre><code>import os\nimport sys\nimport numpy\nimport pandas\n</code></pre></p> <p>Setting <code>no-sections = true</code> will instead group all imports into a single section: <pre><code>import numpy\nimport os\nimport pandas\nimport sys\n</code></pre></p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nno-sections = true\n</code></pre> <pre><code>[lint.isort]\nno-sections = true\n</code></pre>"},{"location":"settings/#lint_isort_order-by-type","title":"<code>order-by-type</code>","text":"<p>Order imports by type, which is determined by case, in addition to alphabetically.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\norder-by-type = true\n</code></pre> <pre><code>[lint.isort]\norder-by-type = true\n</code></pre>"},{"location":"settings/#lint_isort_relative-imports-order","title":"<code>relative-imports-order</code>","text":"<p>Whether to place \"closer\" imports (fewer <code>.</code> characters, most local) before \"further\" imports (more <code>.</code> characters, least local), or vice versa.</p> <p>The default (\"furthest-to-closest\") is equivalent to isort's <code>reverse-relative</code> default (<code>reverse-relative = false</code>); setting this to \"closest-to-furthest\" is equivalent to isort's <code>reverse-relative = true</code>.</p> <p>Default value: <code>\"furthest-to-closest\"</code></p> <p>Type: <code>\"furthest-to-closest\" | \"closest-to-furthest\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nrelative-imports-order = \"closest-to-furthest\"\n</code></pre> <pre><code>[lint.isort]\nrelative-imports-order = \"closest-to-furthest\"\n</code></pre>"},{"location":"settings/#lint_isort_required-imports","title":"<code>required-imports</code>","text":"<p>Add the specified import line to all files.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nrequired-imports = [\"from __future__ import annotations\"]\n</code></pre> <pre><code>[lint.isort]\nrequired-imports = [\"from __future__ import annotations\"]\n</code></pre>"},{"location":"settings/#lint_isort_section-order","title":"<code>section-order</code>","text":"<p>Override in which order the sections should be output. Can be used to move custom sections.</p> <p>Default value: <code>[\"future\", \"standard-library\", \"third-party\", \"first-party\", \"local-folder\"]</code></p> <p>Type: <code>list[\"future\" | \"standard-library\" | \"third-party\" | \"first-party\" | \"local-folder\" | str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nsection-order = [\"future\", \"standard-library\", \"first-party\", \"local-folder\", \"third-party\"]\n</code></pre> <pre><code>[lint.isort]\nsection-order = [\"future\", \"standard-library\", \"first-party\", \"local-folder\", \"third-party\"]\n</code></pre>"},{"location":"settings/#lint_isort_sections","title":"<code>sections</code>","text":"<p>A list of mappings from section names to modules.</p> <p>By default, imports are categorized according to their type (e.g., <code>future</code>, <code>third-party</code>, and so on). This setting allows you to group modules into custom sections, to augment or override the built-in sections.</p> <p>For example, to group all testing utilities, you could create a <code>testing</code> section: <pre><code>testing = [\"pytest\", \"hypothesis\"]\n</code></pre></p> <p>The values in the list are treated as glob patterns. For example, to match all packages in the LangChain ecosystem (<code>langchain-core</code>, <code>langchain-openai</code>, etc.): <pre><code>langchain = [\"langchain-*\"]\n</code></pre></p> <p>Custom sections should typically be inserted into the <code>section-order</code> list to ensure that they're displayed as a standalone group and in the intended order, as in: <pre><code>section-order = [\n\"future\",\n\"standard-library\",\n\"third-party\",\n\"first-party\",\n\"local-folder\",\n\"testing\"\n]\n</code></pre></p> <p>If a custom section is omitted from <code>section-order</code>, imports in that section will be assigned to the <code>default-section</code> (which defaults to <code>third-party</code>).</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, list[str]]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort.sections]\n# Group all Django imports into a separate section.\n\"django\" = [\"django\"]\n</code></pre> <pre><code>[lint.isort.sections]\n# Group all Django imports into a separate section.\n\"django\" = [\"django\"]\n</code></pre>"},{"location":"settings/#lint_isort_single-line-exclusions","title":"<code>single-line-exclusions</code>","text":"<p>One or more modules to exclude from the single line rule.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nsingle-line-exclusions = [\"os\", \"json\"]\n</code></pre> <pre><code>[lint.isort]\nsingle-line-exclusions = [\"os\", \"json\"]\n</code></pre>"},{"location":"settings/#lint_isort_split-on-trailing-comma","title":"<code>split-on-trailing-comma</code>","text":"<p>If a comma is placed after the last member in a multi-line import, then the imports will never be folded into one line.</p> <p>See isort's <code>split-on-trailing-comma</code> option.</p> <p>When using the formatter, ensure that <code>format.skip-magic-trailing-comma</code> is set to <code>false</code> (default) when enabling <code>split-on-trailing-comma</code> to avoid that the formatter removes the trailing commas.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nsplit-on-trailing-comma = false\n</code></pre> <pre><code>[lint.isort]\nsplit-on-trailing-comma = false\n</code></pre>"},{"location":"settings/#lint_isort_variables","title":"<code>variables</code>","text":"<p>An override list of tokens to always recognize as a var for <code>order-by-type</code> regardless of casing.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.isort]\nvariables = [\"VAR\"]\n</code></pre> <pre><code>[lint.isort]\nvariables = [\"VAR\"]\n</code></pre>"},{"location":"settings/#lintmccabe","title":"<code>lint.mccabe</code>","text":""},{"location":"settings/#lint_mccabe_max-complexity","title":"<code>max-complexity</code>","text":"<p>The maximum McCabe complexity to allow before triggering <code>C901</code> errors.</p> <p>Default value: <code>10</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.mccabe]\n# Flag errors (`C901`) whenever the complexity level exceeds 5.\nmax-complexity = 5\n</code></pre> <pre><code>[lint.mccabe]\n# Flag errors (`C901`) whenever the complexity level exceeds 5.\nmax-complexity = 5\n</code></pre>"},{"location":"settings/#lintpep8-naming","title":"<code>lint.pep8-naming</code>","text":""},{"location":"settings/#lint_pep8-naming_classmethod-decorators","title":"<code>classmethod-decorators</code>","text":"<p>A list of decorators that, when applied to a method, indicate that the method should be treated as a class method (in addition to the builtin <code>@classmethod</code>).</p> <p>For example, Ruff will expect that any method decorated by a decorator in this list takes a <code>cls</code> argument as its first argument.</p> <p>Expects to receive a list of fully-qualified names (e.g., <code>pydantic.validator</code>, rather than <code>validator</code>) or alternatively a plain name which is then matched against the last segment in case the decorator itself consists of a dotted name.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pep8-naming]\nclassmethod-decorators = [\n# Allow Pydantic's `@validator` decorator to trigger class method treatment.\n\"pydantic.validator\",\n# Allow SQLAlchemy's dynamic decorators, like `@field.expression`, to trigger class method treatment.\n\"declared_attr\",\n\"expression\",\n\"comparator\",\n]\n</code></pre> <pre><code>[lint.pep8-naming]\nclassmethod-decorators = [\n# Allow Pydantic's `@validator` decorator to trigger class method treatment.\n\"pydantic.validator\",\n# Allow SQLAlchemy's dynamic decorators, like `@field.expression`, to trigger class method treatment.\n\"declared_attr\",\n\"expression\",\n\"comparator\",\n]\n</code></pre>"},{"location":"settings/#lint_pep8-naming_extend-ignore-names","title":"<code>extend-ignore-names</code>","text":"<p>Additional names (or patterns) to ignore when considering <code>pep8-naming</code> violations, in addition to those included in <code>ignore-names</code>.</p> <p>Supports glob patterns. For example, to ignore all names starting with <code>test_</code> or ending with <code>_test</code>, you could use <code>ignore-names = [\"test_*\", \"*_test\"]</code>. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pep8-naming]\nextend-ignore-names = [\"callMethod\"]\n</code></pre> <pre><code>[lint.pep8-naming]\nextend-ignore-names = [\"callMethod\"]\n</code></pre>"},{"location":"settings/#lint_pep8-naming_ignore-names","title":"<code>ignore-names</code>","text":"<p>A list of names (or patterns) to ignore when considering <code>pep8-naming</code> violations.</p> <p>Supports glob patterns. For example, to ignore all names starting with <code>test_</code> or ending with <code>_test</code>, you could use <code>ignore-names = [\"test_*\", \"*_test\"]</code>. For more information on the glob syntax, refer to the <code>globset</code> documentation.</p> <p>Default value: <code>[\"setUp\", \"tearDown\", \"setUpClass\", \"tearDownClass\", \"setUpModule\", \"tearDownModule\", \"asyncSetUp\", \"asyncTearDown\", \"setUpTestData\", \"failureException\", \"longMessage\", \"maxDiff\"]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pep8-naming]\nignore-names = [\"callMethod\"]\n</code></pre> <pre><code>[lint.pep8-naming]\nignore-names = [\"callMethod\"]\n</code></pre>"},{"location":"settings/#lint_pep8-naming_staticmethod-decorators","title":"<code>staticmethod-decorators</code>","text":"<p>A list of decorators that, when applied to a method, indicate that the method should be treated as a static method (in addition to the builtin <code>@staticmethod</code>).</p> <p>For example, Ruff will expect that any method decorated by a decorator in this list has no <code>self</code> or <code>cls</code> argument.</p> <p>Expects to receive a list of fully-qualified names (e.g., <code>belay.Device.teardown</code>, rather than <code>teardown</code>) or alternatively a plain name which is then matched against the last segment in case the decorator itself consists of a dotted name.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pep8-naming]\n# Allow Belay's `@Device.teardown` decorator to trigger static method treatment.\nstaticmethod-decorators = [\"belay.Device.teardown\"]\n</code></pre> <pre><code>[lint.pep8-naming]\n# Allow Belay's `@Device.teardown` decorator to trigger static method treatment.\nstaticmethod-decorators = [\"belay.Device.teardown\"]\n</code></pre>"},{"location":"settings/#lintpycodestyle","title":"<code>lint.pycodestyle</code>","text":""},{"location":"settings/#lint_pycodestyle_ignore-overlong-task-comments","title":"<code>ignore-overlong-task-comments</code>","text":"<p>Whether line-length violations (<code>E501</code>) should be triggered for comments starting with <code>task-tags</code> (by default: \"TODO\", \"FIXME\", and \"XXX\").</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pycodestyle]\nignore-overlong-task-comments = true\n</code></pre> <pre><code>[lint.pycodestyle]\nignore-overlong-task-comments = true\n</code></pre>"},{"location":"settings/#lint_pycodestyle_max-doc-length","title":"<code>max-doc-length</code>","text":"<p>The maximum line length to allow for <code>doc-line-too-long</code> violations within documentation (<code>W505</code>), including standalone comments. By default, this is set to <code>null</code> which disables reporting violations.</p> <p>The length is determined by the number of characters per line, except for lines containing Asian characters or emojis. For these lines, the unicode width of each character is added up to determine the length.</p> <p>See the <code>doc-line-too-long</code> rule for more information.</p> <p>Default value: <code>null</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pycodestyle]\nmax-doc-length = 88\n</code></pre> <pre><code>[lint.pycodestyle]\nmax-doc-length = 88\n</code></pre>"},{"location":"settings/#lint_pycodestyle_max-line-length","title":"<code>max-line-length</code>","text":"<p>The maximum line length to allow for <code>line-too-long</code> violations. By default, this is set to the value of the <code>line-length</code> option.</p> <p>Use this option when you want to detect extra-long lines that the formatter can't automatically split by setting <code>pycodestyle.line-length</code> to a value larger than <code>line-length</code>.</p> <pre><code># The formatter wraps lines at a length of 88.\nline-length = 88\n[pycodestyle]\n# E501 reports lines that exceed the length of 100.\nmax-line-length = 100\n</code></pre> <p>The length is determined by the number of characters per line, except for lines containing East Asian characters or emojis. For these lines, the unicode width of each character is added up to determine the length.</p> <p>See the <code>line-too-long</code> rule for more information.</p> <p>Default value: <code>null</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pycodestyle]\nmax-line-length = 100\n</code></pre> <pre><code>[lint.pycodestyle]\nmax-line-length = 100\n</code></pre>"},{"location":"settings/#lintpydocstyle","title":"<code>lint.pydocstyle</code>","text":""},{"location":"settings/#lint_pydocstyle_convention","title":"<code>convention</code>","text":"<p>Whether to use Google-style, NumPy-style conventions, or the PEP 257 defaults when analyzing docstring sections.</p> <p>Enabling a convention will disable all rules that are not included in the specified convention. As such, the intended workflow is to enable a convention and then selectively enable or disable any additional rules on top of it.</p> <p>For example, to use Google-style conventions but avoid requiring documentation for every function parameter:</p> <pre><code>[tool.ruff.lint]\n# Enable all `pydocstyle` rules, limiting to those that adhere to the\n# Google convention via `convention = \"google\"`, below.\nselect = [\"D\"]\n# On top of the Google convention, disable `D417`, which requires\n# documentation for every function parameter.\nignore = [\"D417\"]\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>To enable an additional rule that's excluded from the convention, select the desired rule via its fully qualified rule code (e.g., <code>D400</code> instead of <code>D4</code> or <code>D40</code>):</p> <pre><code>[tool.ruff.lint]\n# Enable D400 on top of the Google convention.\nextend-select = [\"D400\"]\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>Default value: <code>null</code></p> <p>Type: <code>\"google\" | \"numpy\" | \"pep257\"</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pydocstyle]\n# Use Google-style docstrings.\nconvention = \"google\"\n</code></pre> <pre><code>[lint.pydocstyle]\n# Use Google-style docstrings.\nconvention = \"google\"\n</code></pre>"},{"location":"settings/#lint_pydocstyle_ignore-decorators","title":"<code>ignore-decorators</code>","text":"<p>Ignore docstrings for functions or methods decorated with the specified fully-qualified decorators.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pydocstyle]\nignore-decorators = [\"typing.overload\"]\n</code></pre> <pre><code>[lint.pydocstyle]\nignore-decorators = [\"typing.overload\"]\n</code></pre>"},{"location":"settings/#lint_pydocstyle_property-decorators","title":"<code>property-decorators</code>","text":"<p>A list of decorators that, when applied to a method, indicate that the method should be treated as a property (in addition to the builtin <code>@property</code> and standard-library <code>@functools.cached_property</code>).</p> <p>For example, Ruff will expect that any method decorated by a decorator in this list can use a non-imperative summary line.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pydocstyle]\nproperty-decorators = [\"gi.repository.GObject.Property\"]\n</code></pre> <pre><code>[lint.pydocstyle]\nproperty-decorators = [\"gi.repository.GObject.Property\"]\n</code></pre>"},{"location":"settings/#lintpyflakes","title":"<code>lint.pyflakes</code>","text":""},{"location":"settings/#lint_pyflakes_allowed-unused-imports","title":"<code>allowed-unused-imports</code>","text":"<p>A list of modules to ignore when considering unused imports.</p> <p>Used to prevent violations for specific modules that are known to have side effects on import (e.g., <code>hvplot.pandas</code>).</p> <p>Modules in this list are expected to be fully-qualified names (e.g., <code>hvplot.pandas</code>). Any submodule of a given module will also be ignored (e.g., given <code>hvplot</code>, <code>hvplot.pandas</code> will also be ignored).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pyflakes]\nallowed-unused-imports = [\"hvplot.pandas\"]\n</code></pre> <pre><code>[lint.pyflakes]\nallowed-unused-imports = [\"hvplot.pandas\"]\n</code></pre>"},{"location":"settings/#lint_pyflakes_extend-generics","title":"<code>extend-generics</code>","text":"<p>Additional functions or classes to consider generic, such that any subscripts should be treated as type annotation (e.g., <code>ForeignKey</code> in <code>django.db.models.ForeignKey[\"User\"]</code>.</p> <p>Expects to receive a list of fully-qualified names (e.g., <code>django.db.models.ForeignKey</code>, rather than <code>ForeignKey</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pyflakes]\nextend-generics = [\"django.db.models.ForeignKey\"]\n</code></pre> <pre><code>[lint.pyflakes]\nextend-generics = [\"django.db.models.ForeignKey\"]\n</code></pre>"},{"location":"settings/#lintpylint","title":"<code>lint.pylint</code>","text":""},{"location":"settings/#lint_pylint_allow-dunder-method-names","title":"<code>allow-dunder-method-names</code>","text":"<p>Dunder methods name to allow, in addition to the default set from the Python standard library (see <code>PLW3201</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nallow-dunder-method-names = [\"__tablename__\", \"__table_args__\"]\n</code></pre> <pre><code>[lint.pylint]\nallow-dunder-method-names = [\"__tablename__\", \"__table_args__\"]\n</code></pre>"},{"location":"settings/#lint_pylint_allow-magic-value-types","title":"<code>allow-magic-value-types</code>","text":"<p>Constant types to ignore when used as \"magic values\" (see <code>PLR2004</code>).</p> <p>Default value: <code>[\"str\", \"bytes\"]</code></p> <p>Type: <code>list[\"str\" | \"bytes\" | \"complex\" | \"float\" | \"int\"]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nallow-magic-value-types = [\"int\"]\n</code></pre> <pre><code>[lint.pylint]\nallow-magic-value-types = [\"int\"]\n</code></pre>"},{"location":"settings/#lint_pylint_max-args","title":"<code>max-args</code>","text":"<p>Maximum number of arguments allowed for a function or method definition (see <code>PLR0913</code>).</p> <p>Default value: <code>5</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-args = 10\n</code></pre> <pre><code>[lint.pylint]\nmax-args = 10\n</code></pre>"},{"location":"settings/#lint_pylint_max-bool-expr","title":"<code>max-bool-expr</code>","text":"<p>Maximum number of Boolean expressions allowed within a single <code>if</code> statement (see <code>PLR0916</code>).</p> <p>Default value: <code>5</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-bool-expr = 10\n</code></pre> <pre><code>[lint.pylint]\nmax-bool-expr = 10\n</code></pre>"},{"location":"settings/#lint_pylint_max-branches","title":"<code>max-branches</code>","text":"<p>Maximum number of branches allowed for a function or method body (see <code>PLR0912</code>).</p> <p>Default value: <code>12</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-branches = 15\n</code></pre> <pre><code>[lint.pylint]\nmax-branches = 15\n</code></pre>"},{"location":"settings/#lint_pylint_max-locals","title":"<code>max-locals</code>","text":"<p>Maximum number of local variables allowed for a function or method body (see <code>PLR0914</code>).</p> <p>Default value: <code>15</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-locals = 20\n</code></pre> <pre><code>[lint.pylint]\nmax-locals = 20\n</code></pre>"},{"location":"settings/#lint_pylint_max-nested-blocks","title":"<code>max-nested-blocks</code>","text":"<p>Maximum number of nested blocks allowed within a function or method body (see <code>PLR1702</code>).</p> <p>Default value: <code>5</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-nested-blocks = 10\n</code></pre> <pre><code>[lint.pylint]\nmax-nested-blocks = 10\n</code></pre>"},{"location":"settings/#lint_pylint_max-positional-args","title":"<code>max-positional-args</code>","text":"<p>Maximum number of positional arguments allowed for a function or method definition (see <code>PLR0917</code>).</p> <p>If not specified, defaults to the value of <code>max-args</code>.</p> <p>Default value: <code>5</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-positional-args = 3\n</code></pre> <pre><code>[lint.pylint]\nmax-positional-args = 3\n</code></pre>"},{"location":"settings/#lint_pylint_max-public-methods","title":"<code>max-public-methods</code>","text":"<p>Maximum number of public methods allowed for a class (see <code>PLR0904</code>).</p> <p>Default value: <code>20</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-public-methods = 30\n</code></pre> <pre><code>[lint.pylint]\nmax-public-methods = 30\n</code></pre>"},{"location":"settings/#lint_pylint_max-returns","title":"<code>max-returns</code>","text":"<p>Maximum number of return statements allowed for a function or method body (see <code>PLR0911</code>)</p> <p>Default value: <code>6</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-returns = 10\n</code></pre> <pre><code>[lint.pylint]\nmax-returns = 10\n</code></pre>"},{"location":"settings/#lint_pylint_max-statements","title":"<code>max-statements</code>","text":"<p>Maximum number of statements allowed for a function or method body (see <code>PLR0915</code>).</p> <p>Default value: <code>50</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pylint]\nmax-statements = 75\n</code></pre> <pre><code>[lint.pylint]\nmax-statements = 75\n</code></pre>"},{"location":"settings/#lintpyupgrade","title":"<code>lint.pyupgrade</code>","text":""},{"location":"settings/#lint_pyupgrade_keep-runtime-typing","title":"<code>keep-runtime-typing</code>","text":"<p>Whether to avoid PEP 585 (<code>List[int]</code> -&gt; <code>list[int]</code>) and PEP 604 (<code>Union[str, int]</code> -&gt; <code>str | int</code>) rewrites even if a file imports <code>from __future__ import annotations</code>.</p> <p>This setting is only applicable when the target Python version is below 3.9 and 3.10 respectively, and is most commonly used when working with libraries like Pydantic and FastAPI, which rely on the ability to parse type annotations at runtime. The use of <code>from __future__ import annotations</code> causes Python to treat the type annotations as strings, which typically allows for the use of language features that appear in later Python versions but are not yet supported by the current version (e.g., <code>str | int</code>). However, libraries that rely on runtime type annotations will break if the annotations are incompatible with the current Python version.</p> <p>For example, while the following is valid Python 3.8 code due to the presence of <code>from __future__ import annotations</code>, the use of <code>str | int</code> prior to Python 3.10 will cause Pydantic to raise a <code>TypeError</code> at runtime:</p> <pre><code>from __future__ import annotations\nimport pydantic\nclass Foo(pydantic.BaseModel):\nbar: str | int\n</code></pre> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.pyupgrade]\n# Preserve types, even if a file imports `from __future__ import annotations`.\nkeep-runtime-typing = true\n</code></pre> <pre><code>[lint.pyupgrade]\n# Preserve types, even if a file imports `from __future__ import annotations`.\nkeep-runtime-typing = true\n</code></pre>"},{"location":"settings/#lintruff","title":"<code>lint.ruff</code>","text":""},{"location":"settings/#lint_ruff_extend-markup-names","title":"<code>extend-markup-names</code>","text":"<p>A list of additional callable names that behave like [<code>markupsafe.Markup</code>].</p> <p>Expects to receive a list of fully-qualified names (e.g., <code>webhelpers.html.literal</code>, rather than <code>literal</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.ruff]\nextend-markup-names = [\"webhelpers.html.literal\", \"my_package.Markup\"]\n</code></pre> <pre><code>[lint.ruff]\nextend-markup-names = [\"webhelpers.html.literal\", \"my_package.Markup\"]\n</code></pre>"},{"location":"settings/#lint_ruff_parenthesize-tuple-in-subscript","title":"<code>parenthesize-tuple-in-subscript</code>","text":"<p>Whether to prefer accessing items keyed by tuples with parentheses around the tuple (see <code>RUF031</code>).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff.lint.ruff]\n# Make it a violation to use a tuple in a subscript without parentheses.\nparenthesize-tuple-in-subscript = true\n</code></pre> <pre><code>[lint.ruff]\n# Make it a violation to use a tuple in a subscript without parentheses.\nparenthesize-tuple-in-subscript = true\n</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This tutorial will walk you through the process of integrating Ruff's linter and formatter into your project. For a more detailed overview, see Configuring Ruff.</p>"},{"location":"tutorial/#getting-started","title":"Getting Started","text":"<p>To start, we'll install Ruff through PyPI (or with your preferred package manager):</p> <pre><code>$ pip install ruff\n</code></pre> <p>Let's then assume that our project structure looks like:</p> <pre><code>numbers\n  \u251c\u2500\u2500 __init__.py\n  \u2514\u2500\u2500 numbers.py\n</code></pre> <p>...where <code>numbers.py</code> contains the following code:</p> <pre><code>from typing import Iterable\nimport os\ndef sum_even_numbers(numbers: Iterable[int]) -&gt; int:\n\"\"\"Given an iterable of integers, return the sum of all even numbers in the iterable.\"\"\"\nreturn sum(\nnum for num in numbers\nif num % 2 == 0\n)\n</code></pre> <p>We can run the Ruff linter over our project via <code>ruff check</code>:</p> <pre><code>$ ruff check\nnumbers/numbers.py:3:8: F401 [*] `os` imported but unused\nFound 1 error.\n[*] 1 fixable with the `--fix` option.\n</code></pre> <p>Ruff identified an unused import, which is a common error in Python code. Ruff considers this a \"fixable\" error, so we can resolve the issue automatically by running <code>ruff check --fix</code>:</p> <pre><code>$ ruff check --fix\nFound 1 error (1 fixed, 0 remaining).\n</code></pre> <p>Running <code>git diff</code> shows the following:</p> <pre><code>--- a/numbers/numbers.py\n+++ b/numbers/numbers.py\n@@ -1,7 +1,5 @@\nfrom typing import Iterable\n\n-import os\n-\ndef sum_even_numbers(numbers: Iterable[int]) -&gt; int:\n    \"\"\"Given an iterable of integers, return the sum of all even numbers in the iterable.\"\"\"\n    return sum(\n        num for num in numbers\n        if num % 2 == 0\n    )\n</code></pre> <p>Note Ruff runs in the current directory by default, but you can pass specific paths to check:</p> <pre><code>$ ruff check numbers/numbers.py\n</code></pre> <p>Now that our project is passing <code>ruff check</code>, we can run the Ruff formatter via <code>ruff format</code>:</p> <pre><code>$ ruff format\n1 file reformatted\n</code></pre> <p>Running <code>git diff</code> shows that the <code>sum</code> call was reformatted to fit within the default 88-character line length limit:</p> <pre><code>--- a/numbers.py\n+++ b/numbers.py\n@@ -3,7 +3,4 @@ from typing import Iterable\ndef sum_even_numbers(numbers: Iterable[int]) -&gt; int:\n     \"\"\"Given an iterable of integers, return the sum of all even numbers in the iterable.\"\"\"\n-    return sum(\n-        num for num in numbers\n-        if num % 2 == 0\n-    )\n+    return sum(num for num in numbers if num % 2 == 0)\n</code></pre> <p>Thus far, we've been using Ruff's default configuration. Let's take a look at how we can customize Ruff's behavior.</p>"},{"location":"tutorial/#configuration","title":"Configuration","text":"<p>To determine the appropriate settings for each Python file, Ruff looks for the first <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file in the file's directory or any parent directory.</p> <p>To configure Ruff, let's create a configuration file in our project's root directory:</p> pyproject.tomlruff.toml <pre><code>[tool.ruff]\n# Set the maximum line length to 79.\nline-length = 79\n[tool.ruff.lint]\n# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that\n# overlap with the use of a formatter, like Black, but we can override this behavior by\n# explicitly adding the rule.\nextend-select = [\"E501\"]\n</code></pre> <pre><code># Set the maximum line length to 79.\nline-length = 79\n[lint]\n# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that\n# overlap with the use of a formatter, like Black, but we can override this behavior by\n# explicitly adding the rule.\nextend-select = [\"E501\"]\n</code></pre> <p>Running Ruff again, we see that it now enforces a maximum line width, with a limit of 79:</p> <pre><code>$ ruff check\nnumbers/numbers.py:5:80: E501 Line too long (90 &gt; 79)\nFound 1 error.\n</code></pre> <p>For a full enumeration of the supported settings, see Settings. For our project specifically, we'll want to make note of the minimum supported Python version:</p> pyproject.tomlruff.toml <pre><code>[project]\n# Support Python 3.10+.\nrequires-python = \"&gt;=3.10\"\n[tool.ruff]\n# Set the maximum line length to 79.\nline-length = 79\n[tool.ruff.lint]\n# Add the `line-too-long` rule to the enforced rule set.\nextend-select = [\"E501\"]\n</code></pre> <pre><code># Support Python 3.10+.\ntarget-version = \"py310\"\n# Set the maximum line length to 79.\nline-length = 79\n[lint]\n# Add the `line-too-long` rule to the enforced rule set.\nextend-select = [\"E501\"]\n</code></pre>"},{"location":"tutorial/#rule-selection","title":"Rule Selection","text":"<p>Ruff supports over 800 lint rules split across over 50 built-in plugins, but determining the right set of rules will depend on your project's needs: some rules may be too strict, some are framework-specific, and so on.</p> <p>By default, Ruff enables Flake8's <code>F</code> rules, along with a subset of the <code>E</code> rules, omitting any stylistic rules that overlap with the use of a formatter, like <code>ruff format</code> or Black.</p> <p>If you're introducing a linter for the first time, the default rule set is a great place to start: it's narrow and focused while catching a wide variety of common errors (like unused imports) with zero configuration.</p> <p>If you're migrating to Ruff from another linter, you can enable rules that are equivalent to those enforced in your previous configuration. For example, if we want to enforce the pyupgrade rules, we can set our configuration file to the following:</p> pyproject.tomlruff.toml <pre><code>[project]\nrequires-python = \"&gt;=3.10\"\n[tool.ruff.lint]\nextend-select = [\n\"UP\",  # pyupgrade\n]\n</code></pre> <pre><code>target-version = \"py310\"\n[lint]\nextend-select = [\n\"UP\",  # pyupgrade\n]\n</code></pre> <p>If we run Ruff again, we'll see that it now enforces the pyupgrade rules. In particular, Ruff flags the use of the deprecated <code>typing.Iterable</code> instead of <code>collections.abc.Iterable</code>:</p> <pre><code>$ ruff check\nnumbers/numbers.py:1:1: UP035 [*] Import from `collections.abc` instead: `Iterable`\nFound 1 error.\n[*] 1 fixable with the `--fix` option.\n</code></pre> <p>Over time, we may choose to enforce additional rules. For example, we may want to enforce that all functions have docstrings:</p> pyproject.tomlruff.toml <pre><code>[project]\nrequires-python = \"&gt;=3.10\"\n[tool.ruff.lint]\nextend-select = [\n\"UP\",  # pyupgrade\n\"D\",   # pydocstyle\n]\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <pre><code>target-version = \"py310\"\n[lint]\nextend-select = [\n\"UP\",  # pyupgrade\n\"D\",   # pydocstyle\n]\n[lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>If we run Ruff again, we'll see that it now enforces the pydocstyle rules:</p> <pre><code>$ ruff check\nnumbers/__init__.py:1:1: D104 Missing docstring in public package\nnumbers/numbers.py:1:1: UP035 [*] Import from `collections.abc` instead: `Iterable`\nnumbers/numbers.py:1:1: D100 Missing docstring in public module\nFound 3 errors.\n[*] 1 fixable with the `--fix` option.\n</code></pre>"},{"location":"tutorial/#ignoring-errors","title":"Ignoring Errors","text":"<p>Any lint rule can be ignored by adding a <code># noqa</code> comment to the line in question. For example, let's ignore the <code>UP035</code> rule for the <code>Iterable</code> import:</p> <pre><code>from typing import Iterable  # noqa: UP035\ndef sum_even_numbers(numbers: Iterable[int]) -&gt; int:\n\"\"\"Given an iterable of integers, return the sum of all even numbers in the iterable.\"\"\"\nreturn sum(num for num in numbers if num % 2 == 0)\n</code></pre> <p>Running <code>ruff check</code> again, we'll see that it no longer flags the <code>Iterable</code> import:</p> <pre><code>$ ruff check\nnumbers/__init__.py:1:1: D104 Missing docstring in public package\nnumbers/numbers.py:1:1: D100 Missing docstring in public module\nFound 3 errors.\n</code></pre> <p>If we want to ignore a rule for an entire file, we can add the line <code># ruff: noqa: {code}</code> anywhere in the file, preferably towards the top, like so:</p> <pre><code># ruff: noqa: UP035\nfrom typing import Iterable\ndef sum_even_numbers(numbers: Iterable[int]) -&gt; int:\n\"\"\"Given an iterable of integers, return the sum of all even numbers in the iterable.\"\"\"\nreturn sum(num for num in numbers if num % 2 == 0)\n</code></pre> <p>For more in-depth instructions on ignoring errors, please see Error suppression.</p>"},{"location":"tutorial/#adding-rules","title":"Adding Rules","text":"<p>When enabling a new rule on an existing codebase, you may want to ignore all existing violations of that rule and instead focus on enforcing it going forward.</p> <p>Ruff enables this workflow via the <code>--add-noqa</code> flag, which will add a <code># noqa</code> directive to each line based on its existing violations. We can combine <code>--add-noqa</code> with the <code>--select</code> command-line flag to add <code># noqa</code> directives to all existing <code>UP035</code> violations:</p> <pre><code>$ ruff check --select UP035 --add-noqa .\nAdded 1 noqa directive.\n</code></pre> <p>Running <code>git diff</code> shows the following:</p> <pre><code>diff --git a/tutorial/src/main.py b/tutorial/src/main.py\nindex b9291c5ca..b9f15b8c1 100644\n--- a/numbers/numbers.py\n+++ b/numbers/numbers.py\n@@ -1,4 +1,4 @@\n-from typing import Iterable\n+from typing import Iterable  # noqa: UP035\ndef sum_even_numbers(numbers: Iterable[int]) -&gt; int:\n</code></pre>"},{"location":"tutorial/#integrations","title":"Integrations","text":"<p>This tutorial has focused on Ruff's command-line interface, but Ruff can also be used as a pre-commit hook via <code>ruff-pre-commit</code>:</p> <pre><code>- repo: https://github.com/astral-sh/ruff-pre-commit\n# Ruff version.\nrev: v0.1.4\nhooks:\n# Run the linter.\n- id: ruff\n# Run the formatter.\n- id: ruff-format\n</code></pre> <p>Ruff can also be integrated into your editor of choice. Refer to the Editors section for more information.</p> <p>For other integrations, see the Integrations section.</p>"},{"location":"versioning/","title":"Versioning","text":"<p>Ruff uses a custom versioning scheme that uses the minor version number for breaking changes and the patch version number for bug fixes. Ruff does not yet have a stable API; once Ruff's API is stable, the major version number and semantic versioning will be used.</p>"},{"location":"versioning/#version-changes","title":"Version changes","text":"<p>Minor version increases will occur when:</p> <ul> <li>A deprecated option or feature is removed</li> <li>Configuration changes in a backwards incompatible way<ul> <li>This may occur in minor version changes until <code>1.0.0</code>, however, it should generally be avoided.</li> </ul> </li> <li>Support for a new file type is promoted to stable</li> <li>Support for an end-of-life Python version is dropped</li> <li>Linter:<ul> <li>A rule is promoted to stable</li> <li>The behavior of a stable rule is changed<ul> <li>The scope of a stable rule is significantly increased</li> <li>The intent of the rule changes</li> <li>Does not include bug fixes that follow the original intent of the rule</li> </ul> </li> <li>Stable rules are added to the default set</li> <li>Stable rules are removed from the default set</li> <li>A safe fix for a rule is promoted to stable</li> </ul> </li> <li>Formatter:<ul> <li>The stable style changed</li> </ul> </li> <li>Language server:<ul> <li>An existing capability is removed</li> <li>A deprecated server setting is removed</li> </ul> </li> </ul> <p>Patch version increases will occur when:</p> <ul> <li>Bugs are fixed, including behavior changes that fix bugs</li> <li>A new configuration option is added in a backwards compatible way (no formatting changes or new lint errors)</li> <li>Support for a new Python version is added</li> <li>Support for a new file type is added in preview</li> <li>An option or feature is deprecated</li> <li>Linter:<ul> <li>An unsafe fix for a rule is added</li> <li>A safe fix for a rule is added in preview</li> <li>The scope of a rule is increased in preview</li> <li>A fix\u2019s applicability is demoted</li> <li>A rule is added in preview</li> <li>The behavior of a preview rule is changed</li> </ul> </li> <li>Formatter:<ul> <li>The stable style changed to prevent invalid syntax, changes to the program's semantics, or removal of comments</li> <li>The preview style changed</li> </ul> </li> <li>Language server:<ul> <li>Support for a new capability is added</li> <li>A new server setting is added</li> <li>A server setting is deprecated</li> </ul> </li> </ul>"},{"location":"versioning/#preview-mode","title":"Preview mode","text":"<p>A preview mode is available to enable new, unstable rules and features, e.g., support for a new file type.</p> <p>The preview mode is intended to help us collect community feedback and gain confidence that changes are a net-benefit.</p> <p>The preview mode is not intended to gate access to work that is incomplete or features that we are likely to remove. However, we reserve the right to make changes to any behavior gated by the mode including the removal of preview features or rules.</p>"},{"location":"versioning/#rule-stabilization","title":"Rule stabilization","text":"<p>When modifying or adding rules, we use the following guidelines:</p> <ul> <li>New rules should always be added in preview mode</li> <li>New rules will remain in preview mode for at least one minor release before being promoted to stable<ul> <li>If added in a patch release i.e. <code>0.6.1</code> then a rule will not be eligible for stability until <code>0.8.0</code></li> </ul> </li> <li>Stable rule behaviors are not changed significantly in patch versions</li> <li>Promotion of rules to stable may be delayed in order to \u201cbatch\u201d them into a single minor release</li> <li>Not all rules in preview need to be promoted in a given minor release</li> </ul>"},{"location":"versioning/#fix-stabilization","title":"Fix stabilization","text":"<p>Fixes have three applicability levels:</p> <ul> <li>Display: Never applied, just displayed.</li> <li>Unsafe: Can be applied with explicit opt-in.</li> <li>Safe: Can be applied automatically.</li> </ul> <p>Fixes for rules may be introduced at a lower applicability, then promoted to a higher applicability. Reducing the applicability of a fix is not a breaking change. The applicability of a given fix may change when the preview mode is enabled.</p>"},{"location":"versioning/#visual-studio-code-extension","title":"Visual Studio Code Extension","text":"<p>Visual Studio Code doesn't support pre-release tags for extensions. Consequently, Ruff uses the following scheme to distinguish between stable and preview releases:</p> <p>Stable releases use even numbers in minor version component: <code>2024.30.0</code>, <code>2024.32.0</code>, <code>2024.34.0</code>, \u2026 Preview releases use odd numbers in minor version component: <code>2024.31.0</code>, <code>2024.33.0</code>, <code>2024.35.0</code>, \u2026</p>"},{"location":"editors/","title":"Editor Integrations","text":"<p>Ruff can be integrated with various editors and IDEs to provide a seamless development experience. This section provides instructions on how to set up Ruff with your editor and configure it to your liking.</p>"},{"location":"editors/#language-server-protocol","title":"Language Server Protocol","text":"<p>The editor integration is mainly powered by the Ruff Language Server which implements the Language Server Protocol. The server is written in Rust and is available as part of the <code>ruff</code> CLI via <code>ruff server</code>. It is a single, common backend built directly into Ruff, and a direct replacement for <code>ruff-lsp</code>, our previous language server. You can read more about <code>ruff server</code> in the <code>v0.4.5</code> blog post.</p> <p>The server supports surfacing Ruff diagnostics, providing Code Actions to fix them, and formatting the code using Ruff's built-in formatter. Currently, the server is intended to be used alongside another Python Language Server in order to support features like navigation and autocompletion.</p> <p>The Ruff Language Server was available first in Ruff v0.4.5 in beta and stabilized in Ruff v0.5.3.</p> <p>Note</p> <p>This is the documentation for Ruff's built-in language server written in Rust (<code>ruff server</code>). If you are looking for the documentation for the <code>ruff-lsp</code> language server, please refer to the README of the <code>ruff-lsp</code> repository.</p>"},{"location":"editors/features/","title":"Features","text":"<p>This section provides a detailed overview of the features provided by the Ruff Language Server.</p>"},{"location":"editors/features/#diagnostic-highlighting","title":"Diagnostic Highlighting","text":"<p>Provide diagnostics for your Python code in real-time.</p> <p></p>"},{"location":"editors/features/#dynamic-configuration","title":"Dynamic Configuration","text":"<p>The server dynamically refreshes the diagnostics when a configuration file is changed in the workspace, whether it's a <code>pyproject.toml</code>, <code>ruff.toml</code>, or <code>.ruff.toml</code> file.</p> <p>The server relies on the file watching capabilities of the editor to detect changes to these files. If an editor does not support file watching, the server will not be able to detect changes to the configuration file and thus will not refresh the diagnostics.</p> <p></p>"},{"location":"editors/features/#formatting","title":"Formatting","text":"<p>Provide code formatting for your Python code. The server can format an entire document or a specific range of lines.</p> <p>The VS Code extension provides the <code>Ruff: Format Document</code> command to format an entire document. In VS Code, the range formatting can be triggered by selecting a range of lines, right-clicking, and selecting <code>Format Selection</code> from the context menu.</p> <p></p>"},{"location":"editors/features/#code-actions","title":"Code Actions","text":"<p>Code actions are context-sensitive suggestions that can help you fix issues in your code. They are usually triggered by a shortcut or by clicking a light bulb icon in the editor. The Ruff Language Server provides the following code actions:</p> <ul> <li>Apply a quick fix for a diagnostic that has a fix available (e.g., removing an unused import).</li> <li>Ignore a diagnostic with a <code># noqa</code> comment.</li> <li>Apply all quick fixes available in the document.</li> <li>Organize imports in the document.</li> </ul> <p></p> <p>You can even run these actions on-save. For example, to fix all issues and organize imports on save in VS Code, add the following to your <code>settings.json</code>:</p> <pre><code>{\n\"[python]\": {\n\"editor.codeActionsOnSave\": {\n\"source.fixAll.ruff\": \"explicit\",\n\"source.organizeImports.ruff\": \"explicit\"\n}\n}\n}\n</code></pre>"},{"location":"editors/features/#fix-safety","title":"Fix Safety","text":"<p>Ruff's automatic fixes are labeled as \"safe\" and \"unsafe\". By default, the \"Fix all\" action will not apply unsafe fixes. However, unsafe fixes can be applied manually with the \"Quick fix\" action. Application of unsafe fixes when using \"Fix all\" can be enabled by setting <code>unsafe-fixes = true</code> in your Ruff configuration file.</p> <p>See the Ruff fix documentation for more details on how fix safety works.</p>"},{"location":"editors/features/#hover","title":"Hover","text":"<p>The server can provide the rule documentation when focusing over a NoQA code in the comment. Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.</p> <p></p>"},{"location":"editors/features/#jupyter-notebook","title":"Jupyter Notebook","text":"<p>Similar to Ruff's CLI, the Ruff Language Server fully supports Jupyter Notebook files with all the capabilities available to Python files.</p> <p>Note</p> <p>Unlike <code>ruff-lsp</code> and similar to the Ruff's CLI, the native language server requires user to explicitly include the Jupyter Notebook files in the set of files to lint and format. Refer to the Jupyter Notebook discovery section on how to do this.</p> <p></p> <p></p>"},{"location":"editors/migration/","title":"Migrating from <code>ruff-lsp</code>","text":"<p>While <code>ruff server</code> supports the same feature set as <code>ruff-lsp</code>, migrating to <code>ruff server</code> may require changes to your Ruff or language server configuration.</p> <p>Note</p> <p>The VS Code extension settings include documentation to indicate which settings are supported by <code>ruff server</code>. As such, this migration guide is primarily targeted at editors that lack explicit documentation for <code>ruff server</code> settings, such as Helix or Neovim.</p>"},{"location":"editors/migration/#unsupported-settings","title":"Unsupported Settings","text":"<p>Several <code>ruff-lsp</code> settings are not supported by <code>ruff server</code>. These are, as follows:</p> <ul> <li><code>format.args</code></li> <li><code>ignoreStandardLibrary</code></li> <li><code>interpreter</code></li> <li><code>lint.args</code></li> <li><code>lint.run</code></li> <li><code>path</code></li> </ul> <p>Note</p> <p>Some of these settings, like <code>interpreter</code> and <code>path</code>, are still accepted by the VS Code extension. <code>path</code>, in particular, can be used to specify a dedicated binary to use when initializing <code>ruff server</code>. But the language server itself will no longer accept such settings.</p>"},{"location":"editors/migration/#new-settings","title":"New Settings","text":"<p><code>ruff server</code> introduces several new settings that <code>ruff-lsp</code> does not have. These are, as follows:</p> <ul> <li><code>configuration</code></li> <li><code>configurationPreference</code></li> <li><code>exclude</code></li> <li><code>format.preview</code></li> <li><code>lineLength</code></li> <li><code>lint.select</code></li> <li><code>lint.extendSelect</code></li> <li><code>lint.ignore</code></li> <li><code>lint.preview</code></li> </ul> <p>Several of these new settings are replacements for the now-unsupported <code>format.args</code> and <code>lint.args</code>. For example, if you've been passing <code>--select=&lt;RULES&gt;</code> to <code>lint.args</code>, you can migrate to the new server by using <code>lint.select</code> with a value of <code>[\"&lt;RULES&gt;\"]</code>.</p>"},{"location":"editors/migration/#examples","title":"Examples","text":"<p>Let's say you have these settings in VS Code:</p> <pre><code>{\n\"ruff.lint.args\": \"--select=E,F --line-length 80 --config ~/.config/custom_ruff_config.toml\"\n}\n</code></pre> <p>After enabling the native server, you can migrate your settings like so:</p> <pre><code>{\n\"ruff.configuration\": \"~/.config/custom_ruff_config.toml\",\n\"ruff.lineLength\": 80,\n\"ruff.lint.select\": [\"E\", \"F\"]\n}\n</code></pre> <p>Similarly, let's say you have these settings in Helix:</p> <pre><code>[language-server.ruff.config.lint]\nargs = \"--select=E,F --line-length 80 --config ~/.config/custom_ruff_config.toml\"\n</code></pre> <p>These can be migrated like so:</p> <pre><code>[language-server.ruff.config]\nconfiguration = \"~/.config/custom_ruff_config.toml\"\nlineLength = 80\n[language-server.ruff.config.lint]\nselect = [\"E\", \"F\"]\n</code></pre>"},{"location":"editors/settings/","title":"Settings","text":"<p>The Ruff Language Server provides a set of configuration options to customize its behavior along with the ability to use an existing <code>pyproject.toml</code> or <code>ruff.toml</code> file to configure the linter and formatter. This is done by providing these settings while initializing the server. VS Code provides a UI to configure these settings, while other editors may require manual configuration. The setup section provides instructions on where to place these settings as per the editor.</p>"},{"location":"editors/settings/#top-level","title":"Top-level","text":""},{"location":"editors/settings/#configuration","title":"<code>configuration</code>","text":"<p>Path to a <code>ruff.toml</code> or <code>pyproject.toml</code> file to use for configuration.</p> <p>By default, Ruff will discover configuration for each project from the filesystem, mirroring the behavior of the Ruff CLI.</p> <p>Default value: <code>null</code></p> <p>Type: <code>string</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.configuration\": \"~/path/to/ruff.toml\"\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nconfiguration = \"~/path/to/ruff.toml\"\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#configurationpreference","title":"<code>configurationPreference</code>","text":"<p>The strategy to use when resolving settings across VS Code and the filesystem. By default, editor configuration is prioritized over <code>ruff.toml</code> and <code>pyproject.toml</code> files.</p> <ul> <li><code>\"editorFirst\"</code>: Editor settings take priority over configuration files present in the workspace.</li> <li><code>\"filesystemFirst\"</code>: Configuration files present in the workspace takes priority over editor     settings.</li> <li><code>\"editorOnly\"</code>: Ignore configuration files entirely i.e., only use editor settings.</li> </ul> <p>Default value: <code>\"editorFirst\"</code></p> <p>Type: <code>\"editorFirst\" | \"filesystemFirst\" | \"editorOnly\"</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.configurationPreference\": \"filesystemFirst\"\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nconfigurationPreference = \"filesystemFirst\"\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#exclude","title":"<code>exclude</code>","text":"<p>A list of file patterns to exclude from linting and formatting. See the documentation for more details.</p> <p>Default value: <code>null</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.exclude\": [\"**/tests/**\"]\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nexclude = [\"**/tests/**\"]\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#linelength","title":"<code>lineLength</code>","text":"<p>The line length to use for the linter and formatter.</p> <p>Default value: <code>null</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.lineLength\": 100\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlineLength = 100\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#fixall","title":"<code>fixAll</code>","text":"<p>Whether to register the server as capable of handling <code>source.fixAll</code> code actions.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.fixAll\": false\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nfixAll = false\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#organizeimports","title":"<code>organizeImports</code>","text":"<p>Whether to register the server as capable of handling <code>source.organizeImports</code> code actions.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.organizeImports\": false\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\norganizeImports = false\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#showsyntaxerrors","title":"<code>showSyntaxErrors</code>","text":"<p>New in Ruff v0.5.0</p> <p>Whether to show syntax error diagnostics.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.showSyntaxErrors\": false\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nshowSyntaxErrors = false\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#loglevel","title":"<code>logLevel</code>","text":"<p>The log level to use for the server.</p> <p>Default value: <code>\"info\"</code></p> <p>Type: <code>\"trace\" | \"debug\" | \"info\" | \"warn\" | \"error\"</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.logLevel\": \"debug\"\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlogLevel = \"debug\"\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#logfile","title":"<code>logFile</code>","text":"<p>Path to the log file to use for the server.</p> <p>If not set, logs will be written to stderr.</p> <p>Default value: <code>null</code></p> <p>Type: <code>string</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.logFile\": \"~/path/to/ruff.log\"\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlogFile = \"~/path/to/ruff.log\"\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#codeaction","title":"<code>codeAction</code>","text":"<p>Enable or disable code actions provided by the server.</p>"},{"location":"editors/settings/#disablerulecommentenable","title":"<code>disableRuleComment.enable</code>","text":"<p>Whether to display Quick Fix actions to disable rules via <code>noqa</code> suppression comments.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.codeAction.disableRuleComment.enable\": false\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\ncodeAction = {\ndisableRuleComment = {\nenable = false\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#fixviolationenable","title":"<code>fixViolation.enable</code>","text":"<p>Whether to display Quick Fix actions to autofix violations.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.codeAction.fixViolation.enable\": false\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\ncodeAction = {\nfixViolation = {\nenable = false\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#lint","title":"<code>lint</code>","text":"<p>Settings specific to the Ruff linter.</p>"},{"location":"editors/settings/#lint_enable","title":"<code>enable</code>","text":"<p>Whether to enable linting. Set to <code>false</code> to use Ruff exclusively as a formatter.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.lint.enable\": false\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlint = {\nenable = false\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#lint_preview","title":"<code>preview</code>","text":"<p>Whether to enable Ruff's preview mode when linting.</p> <p>Default value: <code>null</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.lint.preview\": true\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlint = {\npreview = true\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#select","title":"<code>select</code>","text":"<p>Rules to enable by default. See the documentation.</p> <p>Default value: <code>null</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.lint.select\": [\"E\", \"F\"]\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlint = {\nselect = {\"E\", \"F\"}\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#extendselect","title":"<code>extendSelect</code>","text":"<p>Rules to enable in addition to those in <code>lint.select</code>.</p> <p>Default value: <code>null</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.lint.extendSelect\": [\"W\"]\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlint = {\nextendSelect = {\"W\"}\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#ignore","title":"<code>ignore</code>","text":"<p>Rules to disable by default. See the documentation.</p> <p>Default value: <code>null</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.lint.ignore\": [\"E4\", \"E7\"]\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlint = {\nignore = {\"E4\", \"E7\"}\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#extendignore","title":"<code>extendIgnore</code>","text":"<p>Rules to disable in addition to those in <code>lint.ignore</code>.</p> <p>Default value: <code>null</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.lint.extendIgnore\": [\"W1\"]\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nlint = {\nextendIgnore = {\"W1\"}\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#format","title":"<code>format</code>","text":"<p>Settings specific to the Ruff formatter.</p>"},{"location":"editors/settings/#format_preview","title":"<code>preview</code>","text":"<p>Whether to enable Ruff's preview mode when formatting.</p> <p>Default value: <code>null</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> VS CodeNeovim <pre><code>{\n\"ruff.format.preview\": true\n}\n</code></pre> <pre><code>require('lspconfig').ruff.setup {\ninit_options = {\nsettings = {\nformat = {\npreview = true\n}\n}\n}\n}\n</code></pre>"},{"location":"editors/settings/#vs-code-specific","title":"VS Code specific","text":"<p>Additionally, the Ruff extension provides the following settings specific to VS Code. These settings are not used by the language server and are only relevant to the extension.</p>"},{"location":"editors/settings/#enable","title":"<code>enable</code>","text":"<p>Whether to enable the Ruff extension. Modifying this setting requires restarting VS Code to take effect.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.enable\": false\n}\n</code></pre>"},{"location":"editors/settings/#formatargs","title":"<code>format.args</code>","text":"<p>This setting is not used by the native language server.</p> <p>Additional arguments to pass to the Ruff formatter.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.format.args\": [\"--line-length\", \"100\"]\n}\n</code></pre>"},{"location":"editors/settings/#ignorestandardlibrary","title":"<code>ignoreStandardLibrary</code>","text":"<p>This setting is not used by the native language server.</p> <p>Whether to ignore files that are inferred to be part of the Python standard library.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.ignoreStandardLibrary\": false\n}\n</code></pre>"},{"location":"editors/settings/#importstrategy","title":"<code>importStrategy</code>","text":"<p>Strategy for loading the <code>ruff</code> executable.</p> <ul> <li><code>fromEnvironment</code> finds Ruff in the environment, falling back to the bundled version</li> <li><code>useBundled</code> uses the version bundled with the extension</li> </ul> <p>Default value: <code>\"fromEnvironment\"</code></p> <p>Type: <code>\"fromEnvironment\" | \"useBundled\"</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.importStrategy\": \"useBundled\"\n}\n</code></pre>"},{"location":"editors/settings/#interpreter","title":"<code>interpreter</code>","text":"<p>A list of paths to Python interpreters. Even though this is a list, only the first interpreter is used.</p> <p>This setting depends on the <code>ruff.nativeServer</code> setting:</p> <ul> <li>If using the native server, the interpreter is used to find the <code>ruff</code> executable when     <code>ruff.importStrategy</code> is set to <code>fromEnvironment</code>.</li> <li>Otherwise, the interpreter is used to run the <code>ruff-lsp</code> server.</li> </ul> <p>Default value: <code>[]</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.interpreter\": [\"/home/user/.local/bin/python\"]\n}\n</code></pre>"},{"location":"editors/settings/#lintargs","title":"<code>lint.args</code>","text":"<p>This setting is not used by the native language server.</p> <p>Additional arguments to pass to the Ruff linter.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.lint.args\": [\"--config\", \"/path/to/pyproject.toml\"]\n}\n</code></pre>"},{"location":"editors/settings/#lintrun","title":"<code>lint.run</code>","text":"<p>This setting is not used by the native language server.</p> <p>Run Ruff on every keystroke (<code>onType</code>) or on save (<code>onSave</code>).</p> <p>Default value: <code>\"onType\"</code></p> <p>Type: <code>\"onType\" | \"onSave\"</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.lint.run\": \"onSave\"\n}\n</code></pre>"},{"location":"editors/settings/#nativeserver","title":"<code>nativeServer</code>","text":"<p>Whether to use the native language server, <code>ruff-lsp</code> or automatically decide between the two based on the Ruff version and extension settings.</p> <ul> <li><code>\"on\"</code>: Use the native language server. A warning will be displayed if deprecated settings are     detected.</li> <li><code>\"off\"</code>: Use <code>ruff-lsp</code>. A warning will be displayed if     settings specific to the native server are detected.</li> <li><code>\"auto\"</code>: Automatically select between the native language server and     <code>ruff-lsp</code> based on the following conditions:<ol> <li>If the Ruff version is &gt;= <code>0.5.3</code>, use the native language server unless any deprecated     settings are detected. In that case, show a warning and use     <code>ruff-lsp</code> instead.</li> <li>If the Ruff version is \\&lt; <code>0.5.3</code>, use <code>ruff-lsp</code>. A     warning will be displayed if settings specific to the native server are detected.</li> </ol> </li> <li><code>true</code>: Same as <code>on</code></li> <li><code>false</code>: Same as <code>off</code></li> </ul> <p>Default value: <code>\"auto\"</code></p> <p>Type: <code>\"on\" | \"off\" | \"auto\" | true | false</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.nativeServer\": \"on\"\n}\n</code></pre>"},{"location":"editors/settings/#path","title":"<code>path</code>","text":"<p>A list of path to <code>ruff</code> executables.</p> <p>The first executable in the list which is exists is used. This setting takes precedence over the <code>ruff.importStrategy</code> setting.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>string[]</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.path\": [\"/home/user/.local/bin/ruff\"]\n}\n</code></pre>"},{"location":"editors/settings/#shownotifications","title":"<code>showNotifications</code>","text":"<p>Setting to control when a notification is shown.</p> <p>Default value: <code>\"off\"</code></p> <p>Type: <code>\"off\" | \"onError\" | \"onWarning\" | \"always\"</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.showNotifications\": \"onWarning\"\n}\n</code></pre>"},{"location":"editors/settings/#traceserver","title":"<code>trace.server</code>","text":"<p>The trace level for the language server. Refer to the LSP specification for more information.</p> <p>Default value: <code>\"off\"</code></p> <p>Type: <code>\"off\" | \"messages\" | \"verbose\"</code></p> <p>Example usage:</p> <pre><code>{\n\"ruff.trace.server\": \"messages\"\n}\n</code></pre>"},{"location":"editors/setup/","title":"Setup","text":"<p>We have specific setup instructions depending on your editor of choice. If you don't see your editor on this list and would like a setup guide, please open an issue.</p> <p>If you're transferring your configuration from <code>ruff-lsp</code>, regardless of editor, there are several settings which have changed or are no longer available. See the migration guide for more.</p> <p>Note</p> <p>The setup instructions provided below are on a best-effort basis. If you encounter any issues while setting up the Ruff in an editor, please open an issue for assistance and help in improving this documentation.</p> <p>Tip</p> <p>Regardless of the editor, it is recommended to disable the older language server (<code>ruff-lsp</code>) to prevent any conflicts.</p>"},{"location":"editors/setup/#vs-code","title":"VS Code","text":"<p>Install the Ruff extension from the VS Code Marketplace. It is recommended to have the Ruff extension version <code>2024.32.0</code> or later to get the best experience with the Ruff Language Server.</p> <p>For more documentation on the Ruff extension, refer to the README of the extension repository.</p>"},{"location":"editors/setup/#neovim","title":"Neovim","text":"<p>The <code>nvim-lspconfig</code> plugin can be used to configure the Ruff Language Server in Neovim. To set it up, install <code>nvim-lspconfig</code> plugin, set it up as per the configuration documentation, and add the following to your <code>init.lua</code>:</p> <pre><code>require('lspconfig').ruff.setup({\ninit_options = {\nsettings = {\n-- Ruff language server settings go here\n}\n}\n})\n</code></pre> <p>Note</p> <p>If the installed version of <code>nvim-lspconfig</code> includes the changes from neovim/nvim-lspconfig@<code>70d1c2c</code>, you will need to use Ruff version <code>0.5.3</code> or later.</p> <p>If you're using Ruff alongside another language server (like Pyright), you may want to defer to that language server for certain capabilities, like <code>textDocument/hover</code>:</p> <pre><code>vim.api.nvim_create_autocmd(\"LspAttach\", {\ngroup = vim.api.nvim_create_augroup('lsp_attach_disable_ruff_hover', { clear = true }),\ncallback = function(args)\nlocal client = vim.lsp.get_client_by_id(args.data.client_id)\nif client == nil then\nreturn\nend\nif client.name == 'ruff' then\n-- Disable hover in favor of Pyright\nclient.server_capabilities.hoverProvider = false\nend\nend,\ndesc = 'LSP: Disable hover capability from Ruff',\n})\n</code></pre> <p>If you'd like to use Ruff exclusively for linting, formatting, and organizing imports, you can disable those capabilities for Pyright:</p> <pre><code>require('lspconfig').pyright.setup {\nsettings = {\npyright = {\n-- Using Ruff's import organizer\ndisableOrganizeImports = true,\n},\npython = {\nanalysis = {\n-- Ignore all files for analysis to exclusively use Ruff for linting\nignore = { '*' },\n},\n},\n},\n}\n</code></pre> <p>By default, Ruff will not show any logs. To enable logging in Neovim, you'll need to set the <code>trace</code> setting to either <code>messages</code> or <code>verbose</code>, and use the <code>logLevel</code> setting to change the log level:</p> <pre><code>require('lspconfig').ruff.setup {\ntrace = 'messages',\ninit_options = {\nsettings = {\nlogLevel = 'debug',\n}\n}\n}\n</code></pre> <p>By default, this will write logs to stderr which will be available in Neovim's LSP client log file (<code>:lua vim.print(vim.lsp.get_log_path())</code>). It's also possible to divert these logs to a separate file with the <code>logFile</code> setting.</p>"},{"location":"editors/setup/#vim","title":"Vim","text":"<p>The <code>vim-lsp</code> plugin can be used to configure the Ruff Language Server in Vim. To set it up, install <code>vim-lsp</code> plugin and register the server using the following in your <code>.vimrc</code>:</p> <pre><code>if executable('ruff')\nau User lsp_setup call lsp#register_server({\n        \\ 'name': 'ruff',\n        \\ 'cmd': {server_info-&gt;['ruff', 'server']},\n        \\ 'allowlist': ['python'],\n        \\ 'workspace_config': {},\n        \\ })\nendif\n</code></pre> <p>See the <code>vim-lsp</code> documentation for more details on how to configure the language server.</p> <p>If you're using Ruff alongside another LSP (like Pyright), you may want to defer to that LSP for certain capabilities, like <code>textDocument/hover</code> by adding the following to the function <code>s:on_lsp_buffer_enabled()</code>:</p> <pre><code>function! s:on_lsp_buffer_enabled() abort\n    \" add your keybindings here (see https://github.com/prabirshrestha/vim-lsp?tab=readme-ov-file#registering-servers)\nlet l:capabilities = lsp#get_server_capabilities('ruff')\nif !empty(l:capabilities)\nlet l:capabilities.hoverProvider = v:false\n    endif\nendfunction\n</code></pre> <p>Ruff is also available as part of the coc-pyright extension for coc.nvim.</p> With the ALE plugin for Vim or Neovim. <pre><code>\" Linters\nlet g:ale_linters = { \"python\": [\"ruff\"] }\n\" Fixers\nlet g:ale_fixers = { \"python\": [\"ruff\", \"ruff_format\"] }\n</code></pre>  For the fixers, `ruff` will run `ruff check --fix` (to fix all auto-fixable problems) whereas `ruff_format` will run `ruff format`.   Ruff can also be integrated via efm language server in just a few lines.   Following is an example config for efm to use Ruff for linting and formatting Python files:  <pre><code>tools:\npython-ruff:\nlint-command: \"ruff check --stdin-filename ${INPUT} --output-format concise --quiet -\"\nlint-stdin: true\nlint-formats:\n- \"%f:%l:%c: %m\"\nformat-command: \"ruff format --stdin-filename ${INPUT} --quiet -\"\nformat-stdin: true\n</code></pre> With the <code>conform.nvim</code> plugin for Neovim. <pre><code>require(\"conform\").setup({\nformatters_by_ft = {\npython = {\n-- To fix auto-fixable lint errors.\n\"ruff_fix\",\n-- To run the Ruff formatter.\n\"ruff_format\",\n-- To organize the imports.\n\"ruff_organize_imports\",\n},\n},\n})\n</code></pre> With the <code>nvim-lint</code> plugin for Neovim. <pre><code>require(\"lint\").linters_by_ft = {\npython = { \"ruff\" },\n}\n</code></pre>"},{"location":"editors/setup/#helix","title":"Helix","text":"<p>Open the language configuration file for Helix and add the language server as follows:</p> <pre><code>[language-server.ruff]\ncommand = \"ruff\"\nargs = [\"server\"]\n</code></pre> <p>Then, you'll register the language server as the one to use with Python. If you don't already have a language server registered to use with Python, add this to <code>languages.toml</code>:</p> <pre><code>[[language]]\nname = \"python\"\nlanguage-servers = [\"ruff\"]\n</code></pre> <p>Otherwise, if you already have <code>language-servers</code> defined, you can simply add <code>\"ruff\"</code> to the list. For example, if you already have <code>pylsp</code> as a language server, you can modify the language entry as follows:</p> <pre><code>[[language]]\nname = \"python\"\nlanguage-servers = [\"ruff\", \"pylsp\"]\n</code></pre> <p>Note</p> <p>Support for multiple language servers for a language is only available in Helix version <code>23.10</code> and later.</p> <p>If you want to, as an example, turn on auto-formatting, add <code>auto-format = true</code>:</p> <pre><code>[[language]]\nname = \"python\"\nlanguage-servers = [\"ruff\", \"pylsp\"]\nauto-format = true\n</code></pre> <p>See the Helix documentation for more settings you can use here.</p> <p>You can pass settings into <code>ruff server</code> using <code>[language-server.ruff.config.settings]</code>. For example:</p> <pre><code>[language-server.ruff.config.settings]\nlineLength = 80\n[language-server.ruff.config.settings.lint]\nselect = [\"E4\", \"E7\"]\npreview = false\n[language-server.ruff.config.settings.format]\npreview = true\n</code></pre> <p>By default, Ruff does not log anything to Helix. To enable logging, set the <code>RUFF_TRACE</code> environment variable to either <code>messages</code> or <code>verbose</code>, and use the <code>logLevel</code> setting to change the log level:</p> <pre><code>[language-server.ruff]\ncommand = \"ruff\"\nargs = [\"server\"]\nenvironment = { \"RUFF_TRACE\" = \"messages\" }\n[language-server.ruff.config.settings]\nlogLevel = \"debug\"\n</code></pre> <p>You can also divert Ruff's logs to a separate file with the <code>logFile</code> setting.</p> <p>Note</p> <p>Setting <code>RUFF_TRACE=verbose</code> does not enable Helix's verbose mode by itself. You'll need to run Helix with <code>-v</code> for verbose logging.</p>"},{"location":"editors/setup/#kate","title":"Kate","text":"<ol> <li>Activate the LSP Client plugin.</li> <li>Setup LSP Client as desired.</li> <li>Finally, add this to <code>Settings</code> -&gt; <code>Configure Kate</code> -&gt; <code>LSP Client</code> -&gt; <code>User Server Settings</code>:</li> </ol> <pre><code>{\n\"servers\": {\n\"python\": {\n\"command\": [\"ruff\", \"server\"],\n\"url\": \"https://github.com/astral-sh/ruff\",\n\"highlightingModeRegex\": \"^Python$\",\n\"settings\": {}\n}\n}\n}\n</code></pre> <p>See LSP Client documentation for more details on how to configure the server from there.</p> <p>Important</p> <p>Kate's LSP Client plugin does not support multiple servers for the same language. As a workaround, you can use the <code>python-lsp-server</code> along with the <code>python-lsp-ruff</code> plugin to use Ruff alongside another language server. Note that this setup won't use the server settings because the <code>python-lsp-ruff</code> plugin uses the <code>ruff</code> executable and not the language server.</p>"},{"location":"editors/setup/#sublime-text","title":"Sublime Text","text":"<p>To use Ruff with Sublime Text, install Sublime Text's LSP and LSP-ruff package.</p>"},{"location":"editors/setup/#pycharm","title":"PyCharm","text":""},{"location":"editors/setup/#via-external-tool","title":"Via External Tool","text":"<p>Ruff can be installed as an External Tool in PyCharm. Open the Preferences pane, then navigate to \"Tools\", then \"External Tools\". From there, add a new tool with the following configuration:</p> <p></p> <p>Ruff should then appear as a runnable action:</p> <p></p>"},{"location":"editors/setup/#via-third-party-plugin","title":"Via third-party plugin","text":"<p>Ruff is also available as the Ruff plugin on the IntelliJ Marketplace (maintained by @koxudaxi).</p>"},{"location":"editors/setup/#emacs","title":"Emacs","text":"<p>Ruff can be utilized as a language server via <code>Eglot</code>, which is in Emacs's core. To enable Ruff with automatic formatting on save, use the following configuration:</p> <pre><code>(add-hook 'python-mode-hook 'eglot-ensure)\n(with-eval-after-load 'eglot\n(add-to-list 'eglot-server-programs\n'(python-mode . (\"ruff\" \"server\")))\n(add-hook 'after-save-hook 'eglot-format))\n</code></pre> <p>Ruff is available as <code>flymake-ruff</code> on MELPA:</p> <pre><code>(require 'flymake-ruff)\n(add-hook 'python-mode-hook #'flymake-ruff-load)\n</code></pre> <p>Ruff is also available as <code>emacs-ruff-format</code>:</p> <pre><code>(require 'ruff-format)\n(add-hook 'python-mode-hook 'ruff-format-on-save-mode)\n</code></pre> <p>Alternatively, it can be used via the Apheleia formatter library, by setting this configuration:</p> <pre><code>;; Replace default (black) to use ruff for sorting import and formatting.\n(setf (alist-get 'python-mode apheleia-mode-alist)\n'(ruff-isort ruff))\n(setf (alist-get 'python-ts-mode apheleia-mode-alist)\n'(ruff-isort ruff))\n</code></pre>"},{"location":"editors/setup/#textmate","title":"TextMate","text":"<p>Ruff is also available via the <code>textmate2-ruff-linter</code> bundle for TextMate.</p>"},{"location":"editors/setup/#zed","title":"Zed","text":"<p>Ruff is available as an extension for the Zed editor. To install it:</p> <ol> <li>Open the command palette with <code>Cmd+Shift+P</code></li> <li>Search for \"zed: extensions\"</li> <li>Search for \"ruff\" in the extensions list and click \"Install\"</li> </ol> <p>To configure Zed to use the Ruff language server for Python files, add the following to your <code>settings.json</code> file:</p> <pre><code>{\n\"languages\": {\n\"Python\": {\n\"language_servers\": [\"ruff\"]\n// Or, if there are other language servers you want to use with Python\n// \"language_servers\": [\"pyright\", \"ruff\"]\n}\n}\n}\n</code></pre> <p>To configure the language server, you can provide the server settings under the <code>lsp.ruff.initialization_options.settings</code> key:</p> <pre><code>{\n\"lsp\": {\n\"ruff\": {\n\"initialization_options\": {\n\"settings\": {\n// Ruff server settings goes here\n\"lineLength\": 80,\n\"lint\": {\n\"extendSelect\": [\"I\"],\n}\n}\n}\n}\n}\n}\n</code></pre> <p>Note</p> <p>Support for multiple formatters for a given language is only available in Zed version <code>0.146.0</code> and later.</p> <p>You can configure Ruff to format Python code on-save by registering the Ruff formatter and enabling the <code>format_on_save</code> setting:</p> Zed 0.146.0+ <pre><code>{\n\"languages\": {\n\"Python\": {\n\"language_servers\": [\"ruff\"],\n\"format_on_save\": \"on\",\n\"formatter\": [\n{\n\"language_server\": {\n\"name\": \"ruff\"\n}\n}\n]\n}\n}\n}\n</code></pre> <p>You can configure Ruff to fix lint violations and/or organize imports on-save by enabling the <code>source.fixAll.ruff</code> and <code>source.organizeImports.ruff</code> code actions respectively:</p> Zed 0.146.0+ <pre><code>{\n\"languages\": {\n\"Python\": {\n\"language_servers\": [\"ruff\"],\n\"format_on_save\": \"on\",\n\"formatter\": [\n{\n\"code_actions\": {\n// Fix all auto-fixable lint violations\n\"source.fixAll.ruff\": true,\n// Organize imports\n\"source.organizeImports.ruff\": true\n}\n}\n]\n}\n}\n}\n</code></pre> <p>Taken together, you can configure Ruff to format, fix, and organize imports on-save via the following <code>settings.json</code>:</p> <p>Note</p> <p>For this configuration, it is important to use the correct order of the code action and formatter language server settings. The code actions should be defined before the formatter to ensure that the formatter takes care of any remaining style issues after the code actions have been applied.</p> Zed 0.146.0+ <pre><code>{\n\"languages\": {\n\"Python\": {\n\"language_servers\": [\"ruff\"],\n\"format_on_save\": \"on\",\n\"formatter\": [\n{\n\"code_actions\": {\n\"source.organizeImports.ruff\": true,\n\"source.fixAll.ruff\": true\n}\n},\n{\n\"language_server\": {\n\"name\": \"ruff\"\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"formatter/black/","title":"Known Deviations from Black","text":"<p>This document enumerates the known, intentional differences in code style between Black and Ruff's formatter.</p> <p>For a list of unintentional deviations, see issue tracker.</p>"},{"location":"formatter/black/#trailing-end-of-line-comments","title":"Trailing end-of-line comments","text":"<p>Black's priority is to fit an entire statement on a line, even if it contains end-of-line comments. In such cases, Black collapses the statement, and moves the comment to the end of the collapsed statement:</p> <pre><code># Input\nwhile (\ncond1  # almost always true\nand cond2  # almost never true\n):\nprint(\"Do something\")\n# Black\nwhile cond1 and cond2:  # almost always true  # almost never true\nprint(\"Do something\")\n</code></pre> <p>Ruff, like Prettier, expands any statement that contains trailing end-of-line comments. For example, Ruff would avoid collapsing the <code>while</code> test in the snippet above. This ensures that the comments remain close to their original position and retain their original intent, at the cost of retaining additional vertical space.</p> <p>This deviation only impacts unformatted code, in that Ruff's output should not deviate for code that has already been formatted by Black.</p>"},{"location":"formatter/black/#pragma-comments-are-ignored-when-computing-line-width","title":"Pragma comments are ignored when computing line width","text":"<p>Pragma comments (<code># type</code>, <code># noqa</code>, <code># pyright</code>, <code># pylint</code>, etc.) are ignored when computing the width of a line. This prevents Ruff from moving pragma comments around, thereby modifying their meaning and behavior:</p> <p>See Ruff's pragma comment handling proposal for details.</p> <p>This is similar to Pyink but a deviation from Black. Black avoids splitting any lines that contain a <code># type</code> comment (#997), but otherwise avoids special-casing pragma comments.</p> <p>As Ruff expands trailing end-of-line comments, Ruff will also avoid moving pragma comments in cases like the following, where moving the <code># noqa</code> to the end of the line causes it to suppress errors on both <code>first()</code> and <code>second()</code>:</p> <pre><code># Input\n[\nfirst(),  # noqa\nsecond()\n]\n# Black\n[first(), second()]  # noqa\n# Ruff\n[\nfirst(),  # noqa\nsecond(),\n]\n</code></pre>"},{"location":"formatter/black/#line-width-vs-line-length","title":"Line width vs. line length","text":"<p>Ruff uses the Unicode width of a line to determine if a line fits. Black uses Unicode width for strings, and character width for all other tokens. Ruff also uses Unicode width for identifiers and comments.</p>"},{"location":"formatter/black/#parenthesizing-long-nested-expressions","title":"Parenthesizing long nested-expressions","text":"<p>Black 24 and newer parenthesizes long conditional expressions and type annotations in function parameters:</p> <pre><code># Black\n[\n\"____________________________\",\n\"foo\",\n\"bar\",\n(\n\"baz\"\nif some_really_looooooooong_variable\nelse \"some other looooooooooooooong value\"\n),\n]\ndef foo(\ni: int,\nx: (\nLoooooooooooooooooooooooong\n| Looooooooooooooooong\n| Looooooooooooooooooooong\n| Looooooong\n),\n*,\ns: str,\n) -&gt; None:\npass\n# Ruff\n[\n\"____________________________\",\n\"foo\",\n\"bar\",\n\"baz\"\nif some_really_looooooooong_variable\nelse \"some other looooooooooooooong value\",\n]\ndef foo(\ni: int,\nx: Loooooooooooooooooooooooong\n| Looooooooooooooooong\n| Looooooooooooooooooooong\n| Looooooong,\n*,\ns: str,\n) -&gt; None:\npass\n</code></pre> <p>We agree that Ruff's formatting (that matches Black's 23) is hard to read and needs improvement. But we aren't convinced that parenthesizing long nested expressions is the best solution, especially when considering expression formatting holistically. That's why we want to defer the decision until we've explored alternative nested expression formatting styles. See psf/Black#4123 for an in-depth explanation of our concerns and an outline of possible alternatives.</p>"},{"location":"formatter/black/#call-expressions-with-a-single-multiline-string-argument","title":"Call expressions with a single multiline string argument","text":"<p>Unlike Black, Ruff preserves the indentation of a single multiline-string argument in a call expression:</p> <pre><code># Input\ncall(\n\"\"\"\"\n  A multiline\n  string\n  \"\"\"\n)\ndedent(\"\"\"\"\n    A multiline\n    string\n\"\"\")\n# Black\ncall(\n\"\"\"\"\n  A multiline\n  string\n  \"\"\"\n)\ndedent(\n\"\"\"\"\n  A multiline\n  string\n\"\"\"\n)\n# Ruff\ncall(\n\"\"\"\"\n  A multiline\n  string\n  \"\"\"\n)\ndedent(\"\"\"\"\n    A multiline\n    string\n\"\"\")\n</code></pre> <p>Black intended to ship a similar style change as part of the 2024 style that always removes the indent. It turned out that this change was too disruptive to justify the cases where it improved formatting. Ruff introduced the new heuristic of preserving the indent. We believe it's a good compromise that improves formatting but minimizes disruption for users.</p>"},{"location":"formatter/black/#blank-lines-at-the-start-of-a-block","title":"Blank lines at the start of a block","text":"<p>Black 24 and newer allows blank lines at the start of a block, where Ruff always removes them:</p> <pre><code># Black\nif x:\na = 123\n# Ruff\nif x:\na = 123\n</code></pre> <p>Currently, we are concerned that allowing blank lines at the start of a block leads to unintentional blank lines when refactoring or moving code. However, we will consider adopting Black's formatting at a later point with an improved heuristic. The style change is tracked in #9745.</p>"},{"location":"formatter/black/#hex-codes-and-unicode-sequences","title":"Hex codes and Unicode sequences","text":"<p>Ruff normalizes hex codes and Unicode sequences in strings (#9280). Black intended to ship this change as part of the 2024 style but accidentally didn't.</p> <pre><code># Black\na = \"\\x1B\"\nb = \"\\u200B\"\nc = \"\\U0001F977\"\nd = \"\\N{CYRILLIC small LETTER BYELORUSSIAN-UKRAINIAN I}\"\n# Ruff\na = \"\\x1b\"\nb = \"\\u200b\"\nc = \"\\U0001f977\"\nd = \"\\N{CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I}\"\n</code></pre>"},{"location":"formatter/black/#module-docstrings","title":"Module docstrings","text":"<p>Ruff formats module docstrings similar to class or function docstrings, whereas Black does not.</p> <pre><code># Input\n\"\"\"Module docstring\n\"\"\"\n# Black\n\"\"\"Module docstring\n\"\"\"\n# Ruff\n\"\"\"Module docstring\"\"\"\n</code></pre>"},{"location":"formatter/black/#walruses-in-slice-expressions","title":"Walruses in slice expressions","text":"<p>Black avoids inserting space around <code>:=</code> operators within slices. For example, the following adheres to Black stable style:</p> <pre><code># Input\nx[y:=1]\n# Black\nx[y:=1]\n</code></pre> <p>Ruff will instead add space around the <code>:=</code> operator:</p> <pre><code># Input\nx[y:=1]\n# Ruff\nx[y := 1]\n</code></pre> <p>This will likely be incorporated into Black's preview style (#3823).</p>"},{"location":"formatter/black/#global-and-nonlocal-names-are-broken-across-multiple-lines-by-continuations","title":"<code>global</code> and <code>nonlocal</code> names are broken across multiple lines by continuations","text":"<p>If a <code>global</code> or <code>nonlocal</code> statement includes multiple names, and exceeds the configured line width, Ruff will break them across multiple lines using continuations:</p> <pre><code># Input\nglobal analyze_featuremap_layer, analyze_featuremapcompression_layer, analyze_latencies_post, analyze_motions_layer, analyze_size_model\n# Ruff\nglobal \\\n    analyze_featuremap_layer, \\\n    analyze_featuremapcompression_layer, \\\n    analyze_latencies_post, \\\n    analyze_motions_layer, \\\n    analyze_size_model\n</code></pre>"},{"location":"formatter/black/#newlines-are-inserted-after-all-class-docstrings","title":"Newlines are inserted after all class docstrings","text":"<p>Black typically enforces a single newline after a class docstring. However, it does not apply such formatting if the docstring is single-quoted rather than triple-quoted, while Ruff enforces a single newline in both cases:</p> <pre><code># Input\nclass IntFromGeom(GEOSFuncFactory):\n\"Argument is a geometry, return type is an integer.\"\nargtypes = [GEOM_PTR]\nrestype = c_int\nerrcheck = staticmethod(check_minus_one)\n# Black\nclass IntFromGeom(GEOSFuncFactory):\n\"Argument is a geometry, return type is an integer.\"\nargtypes = [GEOM_PTR]\nrestype = c_int\nerrcheck = staticmethod(check_minus_one)\n# Ruff\nclass IntFromGeom(GEOSFuncFactory):\n\"Argument is a geometry, return type is an integer.\"\nargtypes = [GEOM_PTR]\nrestype = c_int\nerrcheck = staticmethod(check_minus_one)\n</code></pre>"},{"location":"formatter/black/#trailing-own-line-comments-on-imports-are-not-moved-to-the-next-line","title":"Trailing own-line comments on imports are not moved to the next line","text":"<p>Black enforces a single empty line between an import and a trailing own-line comment. Ruff leaves such comments in-place:</p> <pre><code># Input\nimport os\n# comment\nimport sys\n# Black\nimport os\n# comment\nimport sys\n# Ruff\nimport os\n# comment\nimport sys\n</code></pre>"},{"location":"formatter/black/#parentheses-around-awaited-collections-are-not-preserved","title":"Parentheses around awaited collections are not preserved","text":"<p>Black preserves parentheses around awaited collections:</p> <pre><code>await ([1, 2, 3])\n</code></pre> <p>Ruff will instead remove them:</p> <pre><code>await [1, 2, 3]\n</code></pre> <p>This is more consistent to the formatting of other awaited expressions: Ruff and Black both remove parentheses around, e.g., <code>await (1)</code>, only retaining them when syntactically required, as in, e.g., <code>await (x := 1)</code>.</p>"},{"location":"formatter/black/#implicit-string-concatenations-in-attribute-accesses","title":"Implicit string concatenations in attribute accesses","text":"<p>Given the following unformatted code:</p> <pre><code>print(\"aaaaaaaaaaaaaaaa\" \"aaaaaaaaaaaaaaaa\".format(bbbbbbbbbbbbbbbbbb + bbbbbbbbbbbbbbbbbb))\n</code></pre> <p>Internally, Black's logic will first expand the outermost <code>print</code> call:</p> <pre><code>print(\n\"aaaaaaaaaaaaaaaa\" \"aaaaaaaaaaaaaaaa\".format(bbbbbbbbbbbbbbbbbb + bbbbbbbbbbbbbbbbbb)\n)\n</code></pre> <p>Since the argument is still too long, Black will then split on the operator with the highest split precedence. In this case, Black splits on the implicit string concatenation, to produce the following Black-formatted code:</p> <pre><code>print(\n\"aaaaaaaaaaaaaaaa\"\n\"aaaaaaaaaaaaaaaa\".format(bbbbbbbbbbbbbbbbbb + bbbbbbbbbbbbbbbbbb)\n)\n</code></pre> <p>Ruff gives implicit concatenations a \"lower\" priority when breaking lines. As a result, Ruff would instead format the above as:</p> <pre><code>print(\n\"aaaaaaaaaaaaaaaa\" \"aaaaaaaaaaaaaaaa\".format(\nbbbbbbbbbbbbbbbbbb + bbbbbbbbbbbbbbbbbb\n)\n)\n</code></pre> <p>In general, Black splits implicit string concatenations over multiple lines more often than Ruff, even if those concatenations can fit on a single line. Ruff instead avoids splitting such concatenations unless doing so is necessary to fit within the configured line width.</p>"},{"location":"formatter/black/#own-line-comments-on-expressions-dont-cause-the-expression-to-expand","title":"Own-line comments on expressions don't cause the expression to expand","text":"<p>Given an expression like:</p> <pre><code>(\n# A comment in the middle\nsome_example_var and some_example_var not in some_example_var\n)\n</code></pre> <p>Black associates the comment with <code>some_example_var</code>, thus splitting it over two lines:</p> <pre><code>(\n# A comment in the middle\nsome_example_var\nand some_example_var not in some_example_var\n)\n</code></pre> <p>Ruff will instead associate the comment with the entire boolean expression, thus preserving the initial formatting:</p> <pre><code>(\n# A comment in the middle\nsome_example_var and some_example_var not in some_example_var\n)\n</code></pre>"},{"location":"formatter/black/#tuples-are-parenthesized-when-expanded","title":"Tuples are parenthesized when expanded","text":"<p>Ruff tends towards parenthesizing tuples (with a few exceptions), while Black tends to remove tuple parentheses more often.</p> <p>In particular, Ruff will always insert parentheses around tuples that expand over multiple lines:</p> <pre><code># Input\n(a, b), (c, d,)\n# Black\n(a, b), (\nc,\nd,\n)\n# Ruff\n(\n(a, b),\n(\nc,\nd,\n),\n)\n</code></pre> <p>There's one exception here. In <code>for</code> loops, both Ruff and Black will avoid inserting unnecessary parentheses:</p> <pre><code># Input\nfor a, [b, d,] in c:\npass\n# Black\nfor a, [\nb,\nd,\n] in c:\npass\n# Ruff\nfor a, [\nb,\nd,\n] in c:\npass\n</code></pre>"},{"location":"formatter/black/#single-element-tuples-are-always-parenthesized","title":"Single-element tuples are always parenthesized","text":"<p>Ruff always inserts parentheses around single-element tuples, while Black will omit them in some cases:</p> <pre><code># Input\n(a, b),\n# Black\n(a, b),\n# Ruff\n((a, b),)\n</code></pre> <p>Adding parentheses around single-element tuples adds visual distinction and helps avoid \"accidental\" tuples created by extraneous trailing commas (see, e.g., #17181).</p>"},{"location":"formatter/black/#trailing-commas-are-inserted-when-expanding-a-function-definition-with-a-single-argument","title":"Trailing commas are inserted when expanding a function definition with a single argument","text":"<p>When a function definition with a single argument is expanded over multiple lines, Black will add a trailing comma in some cases, depending on whether the argument includes a type annotation and/or a default value.</p> <p>For example, Black will add a trailing comma to the first and second function definitions below, but not the third:</p> <pre><code>def func(\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n) -&gt; None:\n...\ndef func(\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=1,\n) -&gt; None:\n...\ndef func(\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: Argument(\n\"network_messages.pickle\",\nhelp=\"The path of the pickle file that will contain the network messages\",\n) = 1\n) -&gt; None:\n...\n</code></pre> <p>Ruff will instead insert a trailing comma in all such cases for consistency.</p>"},{"location":"formatter/black/#parentheses-around-call-chain-assignment-values-are-not-preserved","title":"Parentheses around call-chain assignment values are not preserved","text":"<p>Given:</p> <pre><code>def update_emission_strength():\n(\nget_rgbw_emission_node_tree(self)\n.nodes[\"Emission\"]\n.inputs[\"Strength\"]\n.default_value\n) = (self.emission_strength * 2)\n</code></pre> <p>Black will preserve the parentheses in <code>(self.emission_strength * 2)</code>, whereas Ruff will remove them.</p> <p>Both Black and Ruff remove such parentheses in simpler assignments, like:</p> <pre><code># Input\ndef update_emission_strength():\nvalue = (self.emission_strength * 2)\n# Black\ndef update_emission_strength():\nvalue = self.emission_strength * 2\n# Ruff\ndef update_emission_strength():\nvalue = self.emission_strength * 2\n</code></pre>"},{"location":"formatter/black/#call-chain-calls-break-differently-in-some-cases","title":"Call chain calls break differently in some cases","text":"<p>Black occasionally breaks call chains differently than Ruff; in particular, Black occasionally expands the arguments for the last call in the chain, as in:</p> <pre><code># Input\ndf.drop(\ncolumns=[\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"]\n).drop_duplicates().rename(\ncolumns={\n\"a\": \"a\",\n}\n).to_csv(path / \"aaaaaa.csv\", index=False)\n# Black\ndf.drop(\ncolumns=[\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"]\n).drop_duplicates().rename(\ncolumns={\n\"a\": \"a\",\n}\n).to_csv(\npath / \"aaaaaa.csv\", index=False\n)\n# Ruff\ndf.drop(\ncolumns=[\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"]\n).drop_duplicates().rename(\ncolumns={\n\"a\": \"a\",\n}\n).to_csv(path / \"aaaaaa.csv\", index=False)\n</code></pre> <p>Ruff will only expand the arguments if doing so is necessary to fit within the configured line width.</p> <p>Note that Black does not apply this last-call argument breaking universally. For example, both Black and Ruff will format the following identically:</p> <pre><code># Input\ndf.drop(\ncolumns=[\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"]\n).drop_duplicates(a).rename(\ncolumns={\n\"a\": \"a\",\n}\n).to_csv(\npath / \"aaaaaa.csv\", index=False\n).other(a)\n# Black\ndf.drop(columns=[\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"]).drop_duplicates(a).rename(\ncolumns={\n\"a\": \"a\",\n}\n).to_csv(path / \"aaaaaa.csv\", index=False).other(a)\n# Ruff\ndf.drop(columns=[\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"]).drop_duplicates(a).rename(\ncolumns={\n\"a\": \"a\",\n}\n).to_csv(path / \"aaaaaa.csv\", index=False).other(a)\n</code></pre> <p>Similarly, in some cases, Ruff will collapse composite binary expressions more aggressively than Black, if doing so allows the expression to fit within the configured line width:</p> <pre><code># Black\nassert AAAAAAAAAAAAAAAAAAAAAA.bbbbbb.fooo(\naaaaaaaaaaaa=aaaaaaaaaaaa\n).ccccc() == (len(aaaaaaaaaa) + 1) * fooooooooooo * (\nfoooooo + 1\n) * foooooo * len(\nlist(foo(bar(4, foo), foo))\n)\n# Ruff\nassert AAAAAAAAAAAAAAAAAAAAAA.bbbbbb.fooo(\naaaaaaaaaaaa=aaaaaaaaaaaa\n).ccccc() == (len(aaaaaaaaaa) + 1) * fooooooooooo * (\nfoooooo + 1\n) * foooooo * len(list(foo(bar(4, foo), foo)))\n</code></pre>"},{"location":"formatter/black/#the-last-context-manager-in-a-with-statement-may-be-collapsed-onto-a-single-line","title":"The last context manager in a <code>with</code> statement may be collapsed onto a single line","text":"<p>When using a <code>with</code> statement with multiple unparenthesized context managers, Ruff may collapse the last context manager onto a single line, if doing so allows the <code>with</code> statement to fit within the configured line width.</p> <p>Black, meanwhile, tends to break the last context manager slightly differently, as in the following example:</p> <pre><code># Black\nwith tempfile.TemporaryDirectory() as d1:\nsymlink_path = Path(d1).joinpath(\"testsymlink\")\nwith tempfile.TemporaryDirectory(dir=d1) as d2, tempfile.TemporaryDirectory(\ndir=d1\n) as d4, tempfile.TemporaryDirectory(dir=d2) as d3, tempfile.NamedTemporaryFile(\ndir=d4\n) as source_file, tempfile.NamedTemporaryFile(\ndir=d3\n) as lock_file:\npass\n# Ruff\nwith tempfile.TemporaryDirectory() as d1:\nsymlink_path = Path(d1).joinpath(\"testsymlink\")\nwith tempfile.TemporaryDirectory(dir=d1) as d2, tempfile.TemporaryDirectory(\ndir=d1\n) as d4, tempfile.TemporaryDirectory(dir=d2) as d3, tempfile.NamedTemporaryFile(\ndir=d4\n) as source_file, tempfile.NamedTemporaryFile(dir=d3) as lock_file:\npass\n</code></pre> <p>When targeting Python 3.9 or newer, parentheses will be inserted around the context managers to allow for clearer breaks across multiple lines, as in:</p> <pre><code>with tempfile.TemporaryDirectory() as d1:\nsymlink_path = Path(d1).joinpath(\"testsymlink\")\nwith (\ntempfile.TemporaryDirectory(dir=d1) as d2,\ntempfile.TemporaryDirectory(dir=d1) as d4,\ntempfile.TemporaryDirectory(dir=d2) as d3,\ntempfile.NamedTemporaryFile(dir=d4) as source_file,\ntempfile.NamedTemporaryFile(dir=d3) as lock_file,\n):\npass\n</code></pre>"},{"location":"rules/abstract-base-class-without-abstract-method/","title":"abstract-base-class-without-abstract-method (B024)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B024"]},{"location":"rules/abstract-base-class-without-abstract-method/#what-it-does","title":"What it does","text":"<p>Checks for abstract classes without abstract methods or properties. Annotated but unassigned class variables are regarded as abstract.</p>","tags":["B024"]},{"location":"rules/abstract-base-class-without-abstract-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Abstract base classes are used to define interfaces. If an abstract base class has no abstract methods or properties, you may have forgotten to add an abstract method or property to the class, or omitted an <code>@abstractmethod</code> decorator.</p> <p>If the class is not meant to be used as an interface, consider removing the <code>ABC</code> base class from the class definition.</p>","tags":["B024"]},{"location":"rules/abstract-base-class-without-abstract-method/#example","title":"Example","text":"<pre><code>from abc import ABC\nfrom typing import ClassVar\nclass Foo(ABC):\nclass_var: ClassVar[str] = \"assigned\"\ndef method(self):\nbar()\n</code></pre> <p>Use instead:</p> <pre><code>from abc import ABC, abstractmethod\nfrom typing import ClassVar\nclass Foo(ABC):\nclass_var: ClassVar[str]  # unassigned\n@abstractmethod\ndef method(self):\nbar()\n</code></pre>","tags":["B024"]},{"location":"rules/abstract-base-class-without-abstract-method/#references","title":"References","text":"<ul> <li>Python documentation: <code>abc</code></li> <li>Python documentation: <code>typing.ClassVar</code></li> </ul>","tags":["B024"]},{"location":"rules/airflow-variable-name-task-id-mismatch/","title":"airflow-variable-name-task-id-mismatch (AIR001)","text":"<p>Derived from the Airflow linter.</p>","tags":["AIR001"]},{"location":"rules/airflow-variable-name-task-id-mismatch/#what-it-does","title":"What it does","text":"<p>Checks that the task variable name matches the <code>task_id</code> value for Airflow Operators.</p>","tags":["AIR001"]},{"location":"rules/airflow-variable-name-task-id-mismatch/#why-is-this-bad","title":"Why is this bad?","text":"<p>When initializing an Airflow Operator, for consistency, the variable name should match the <code>task_id</code> value. This makes it easier to follow the flow of the DAG.</p>","tags":["AIR001"]},{"location":"rules/airflow-variable-name-task-id-mismatch/#example","title":"Example","text":"<pre><code>from airflow.operators import PythonOperator\nincorrect_name = PythonOperator(task_id=\"my_task\")\n</code></pre> <p>Use instead:</p> <pre><code>from airflow.operators import PythonOperator\nmy_task = PythonOperator(task_id=\"my_task\")\n</code></pre>","tags":["AIR001"]},{"location":"rules/ambiguous-class-name/","title":"ambiguous-class-name (E742)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E742"]},{"location":"rules/ambiguous-class-name/#what-it-does","title":"What it does","text":"<p>Checks for the use of the characters 'l', 'O', or 'I' as class names.</p>","tags":["E742"]},{"location":"rules/ambiguous-class-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use 'l', use 'L' instead.</p>","tags":["E742"]},{"location":"rules/ambiguous-class-name/#example","title":"Example","text":"<pre><code>class I(object): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Integer(object): ...\n</code></pre>","tags":["E742"]},{"location":"rules/ambiguous-function-name/","title":"ambiguous-function-name (E743)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E743"]},{"location":"rules/ambiguous-function-name/#what-it-does","title":"What it does","text":"<p>Checks for the use of the characters 'l', 'O', or 'I' as function names.</p>","tags":["E743"]},{"location":"rules/ambiguous-function-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use 'l', use 'L' instead.</p>","tags":["E743"]},{"location":"rules/ambiguous-function-name/#example","title":"Example","text":"<pre><code>def l(x): ...\n</code></pre> <p>Use instead:</p> <pre><code>def long_name(x): ...\n</code></pre>","tags":["E743"]},{"location":"rules/ambiguous-unicode-character-comment/","title":"ambiguous-unicode-character-comment (RUF003)","text":"","tags":["RUF003"]},{"location":"rules/ambiguous-unicode-character-comment/#what-it-does","title":"What it does","text":"<p>Checks for ambiguous Unicode characters in comments.</p>","tags":["RUF003"]},{"location":"rules/ambiguous-unicode-character-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some Unicode characters are visually similar to ASCII characters, but have different code points. For example, <code>GREEK CAPITAL LETTER ALPHA</code> (<code>U+0391</code>) is visually similar, but not identical, to the ASCII character <code>A</code>.</p> <p>The use of ambiguous Unicode characters can confuse readers, cause subtle bugs, and even make malicious code look harmless.</p> <p>In preview, this rule will also flag Unicode characters that are confusable with other, non-preferred Unicode characters. For example, the spec recommends <code>GREEK CAPITAL LETTER OMEGA</code> over <code>OHM SIGN</code>.</p> <p>You can omit characters from being flagged as ambiguous via the <code>lint.allowed-confusables</code> setting.</p>","tags":["RUF003"]},{"location":"rules/ambiguous-unicode-character-comment/#example","title":"Example","text":"<pre><code>foo()  # n\u043eqa  # \"\u043e\" is Cyrillic (`U+043E`)\n</code></pre> <p>Use instead:</p> <pre><code>foo()  # noqa  # \"o\" is Latin (`U+006F`)\n</code></pre>","tags":["RUF003"]},{"location":"rules/ambiguous-unicode-character-comment/#options","title":"Options","text":"<ul> <li><code>lint.allowed-confusables</code></li> </ul>","tags":["RUF003"]},{"location":"rules/ambiguous-unicode-character-docstring/","title":"ambiguous-unicode-character-docstring (RUF002)","text":"","tags":["RUF002"]},{"location":"rules/ambiguous-unicode-character-docstring/#what-it-does","title":"What it does","text":"<p>Checks for ambiguous Unicode characters in docstrings.</p>","tags":["RUF002"]},{"location":"rules/ambiguous-unicode-character-docstring/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some Unicode characters are visually similar to ASCII characters, but have different code points. For example, <code>GREEK CAPITAL LETTER ALPHA</code> (<code>U+0391</code>) is visually similar, but not identical, to the ASCII character <code>A</code>.</p> <p>The use of ambiguous Unicode characters can confuse readers, cause subtle bugs, and even make malicious code look harmless.</p> <p>In preview, this rule will also flag Unicode characters that are confusable with other, non-preferred Unicode characters. For example, the spec recommends <code>GREEK CAPITAL LETTER OMEGA</code> over <code>OHM SIGN</code>.</p> <p>You can omit characters from being flagged as ambiguous via the <code>lint.allowed-confusables</code> setting.</p>","tags":["RUF002"]},{"location":"rules/ambiguous-unicode-character-docstring/#example","title":"Example","text":"<pre><code>\"\"\"A lovely docstring (with a `U+FF09` parenthesis\uff09.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>\"\"\"A lovely docstring (with no strange parentheses).\"\"\"\n</code></pre>","tags":["RUF002"]},{"location":"rules/ambiguous-unicode-character-docstring/#options","title":"Options","text":"<ul> <li><code>lint.allowed-confusables</code></li> </ul>","tags":["RUF002"]},{"location":"rules/ambiguous-unicode-character-string/","title":"ambiguous-unicode-character-string (RUF001)","text":"","tags":["RUF001"]},{"location":"rules/ambiguous-unicode-character-string/#what-it-does","title":"What it does","text":"<p>Checks for ambiguous Unicode characters in strings.</p>","tags":["RUF001"]},{"location":"rules/ambiguous-unicode-character-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some Unicode characters are visually similar to ASCII characters, but have different code points. For example, <code>GREEK CAPITAL LETTER ALPHA</code> (<code>U+0391</code>) is visually similar, but not identical, to the ASCII character <code>A</code>.</p> <p>The use of ambiguous Unicode characters can confuse readers, cause subtle bugs, and even make malicious code look harmless.</p> <p>In preview, this rule will also flag Unicode characters that are confusable with other, non-preferred Unicode characters. For example, the spec recommends <code>GREEK CAPITAL LETTER OMEGA</code> over <code>OHM SIGN</code>.</p> <p>You can omit characters from being flagged as ambiguous via the <code>lint.allowed-confusables</code> setting.</p>","tags":["RUF001"]},{"location":"rules/ambiguous-unicode-character-string/#example","title":"Example","text":"<pre><code>print(\"\u0397ello, world!\")  # \"\u0397\" is the Greek eta (`U+0397`).\n</code></pre> <p>Use instead:</p> <pre><code>print(\"Hello, world!\")  # \"H\" is the Latin capital H (`U+0048`).\n</code></pre>","tags":["RUF001"]},{"location":"rules/ambiguous-unicode-character-string/#options","title":"Options","text":"<ul> <li><code>lint.allowed-confusables</code></li> </ul>","tags":["RUF001"]},{"location":"rules/ambiguous-variable-name/","title":"ambiguous-variable-name (E741)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E741"]},{"location":"rules/ambiguous-variable-name/#what-it-does","title":"What it does","text":"<p>Checks for the use of the characters 'l', 'O', or 'I' as variable names.</p> <p>Note: This rule is automatically disabled for all stub files (files with <code>.pyi</code> extensions). The rule has little relevance for authors of stubs: a well-written stub should aim to faithfully represent the interface of the equivalent .py file as it exists at runtime, including any ambiguously named variables in the runtime module.</p>","tags":["E741"]},{"location":"rules/ambiguous-variable-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use 'l', use 'L' instead.</p>","tags":["E741"]},{"location":"rules/ambiguous-variable-name/#example","title":"Example","text":"<pre><code>l = 0\nO = 123\nI = 42\n</code></pre> <p>Use instead:</p> <pre><code>L = 0\no = 123\ni = 42\n</code></pre>","tags":["E741"]},{"location":"rules/and-or-ternary/","title":"and-or-ternary (PLR1706)","text":"<p>Derived from the Pylint linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["PLR1706"]},{"location":"rules/and-or-ternary/#removal","title":"Removal","text":"<p>This rule was removed from Ruff because it was common for it to introduce behavioral changes. See #9007 for more information.</p>","tags":["PLR1706"]},{"location":"rules/and-or-ternary/#what-it-does","title":"What it does","text":"<p>Checks for uses of the known pre-Python 2.5 ternary syntax.</p>","tags":["PLR1706"]},{"location":"rules/and-or-ternary/#why-is-this-bad","title":"Why is this bad?","text":"<p>Prior to the introduction of the if-expression (ternary) operator in Python 2.5, the only way to express a conditional expression was to use the <code>and</code> and <code>or</code> operators.</p> <p>The if-expression construct is clearer and more explicit, and should be preferred over the use of <code>and</code> and <code>or</code> for ternary expressions.</p>","tags":["PLR1706"]},{"location":"rules/and-or-ternary/#example","title":"Example","text":"<pre><code>x, y = 1, 2\nmaximum = x &gt;= y and x or y\n</code></pre> <p>Use instead:</p> <pre><code>x, y = 1, 2\nmaximum = x if x &gt;= y else y\n</code></pre>","tags":["PLR1706"]},{"location":"rules/any-eq-ne-annotation/","title":"any-eq-ne-annotation (PYI032)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI032"]},{"location":"rules/any-eq-ne-annotation/#what-it-does","title":"What it does","text":"<p>Checks for <code>__eq__</code> and <code>__ne__</code> implementations that use <code>typing.Any</code> as the type annotation for their second parameter.</p>","tags":["PYI032"]},{"location":"rules/any-eq-ne-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>The Python documentation recommends the use of <code>object</code> to \"indicate that a value could be any type in a typesafe manner\". <code>Any</code>, on the other hand, should be seen as an \"escape hatch when you need to mix dynamically and statically typed code\". Since using <code>Any</code> allows you to write highly unsafe code, you should generally only use <code>Any</code> when the semantics of your code would otherwise be inexpressible to the type checker.</p> <p>The expectation in Python is that a comparison of two arbitrary objects using <code>==</code> or <code>!=</code> should never raise an exception. This contract can be fully expressed in the type system and does not involve requesting unsound behaviour from a type checker. As such, <code>object</code> is a more appropriate annotation than <code>Any</code> for the second parameter of the methods implementing these comparison operators -- <code>__eq__</code> and <code>__ne__</code>.</p>","tags":["PYI032"]},{"location":"rules/any-eq-ne-annotation/#example","title":"Example","text":"<pre><code>class Foo:\ndef __eq__(self, obj: typing.Any) -&gt; bool: ...\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __eq__(self, obj: object) -&gt; bool: ...\n</code></pre>","tags":["PYI032"]},{"location":"rules/any-eq-ne-annotation/#references","title":"References","text":"<ul> <li>Python documentation: The <code>Any</code> type</li> <li>Mypy documentation: Any vs. object</li> </ul>","tags":["PYI032"]},{"location":"rules/any-type/","title":"any-type (ANN401)","text":"<p>Derived from the flake8-annotations linter.</p>","tags":["ANN401"]},{"location":"rules/any-type/#what-it-does","title":"What it does","text":"<p>Checks that function arguments are annotated with a more specific type than <code>Any</code>.</p>","tags":["ANN401"]},{"location":"rules/any-type/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>Any</code> is a special type indicating an unconstrained type. When an expression is annotated with type <code>Any</code>, type checkers will allow all operations on it.</p> <p>It's better to be explicit about the type of an expression, and to use <code>Any</code> as an \"escape hatch\" only when it is really needed.</p>","tags":["ANN401"]},{"location":"rules/any-type/#example","title":"Example","text":"<pre><code>def foo(x: Any): ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(x: int): ...\n</code></pre>","tags":["ANN401"]},{"location":"rules/any-type/#known-problems","title":"Known problems","text":"<p>Type aliases are unsupported and can lead to false positives. For example, the following will trigger this rule inadvertently:</p> <pre><code>from typing import Any\nMyAny = Any\ndef foo(x: MyAny): ...\n</code></pre>","tags":["ANN401"]},{"location":"rules/any-type/#references","title":"References","text":"<ul> <li>Typing spec: <code>Any</code></li> <li>Python documentation: <code>typing.Any</code></li> <li>Mypy documentation: The Any type</li> </ul>","tags":["ANN401"]},{"location":"rules/argument-default-in-stub/","title":"argument-default-in-stub (PYI014)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI014"]},{"location":"rules/argument-default-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for untyped function arguments in stubs with default values that are not \"simple\" /// (i.e., <code>int</code>, <code>float</code>, <code>complex</code>, <code>bytes</code>, <code>str</code>, <code>bool</code>, <code>None</code>, <code>...</code>, or simple container literals).</p>","tags":["PYI014"]},{"location":"rules/argument-default-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub (<code>.pyi</code>) files exist to define type hints, and are not evaluated at runtime. As such, function arguments in stub files should not have default values, as they are ignored by type checkers.</p> <p>However, the use of default values may be useful for IDEs and other consumers of stub files, and so \"simple\" values may be worth including and are permitted by this rule.</p> <p>Instead of including and reproducing a complex value, use <code>...</code> to indicate that the assignment has a default value, but that the value is non-simple or varies according to the current platform or Python version.</p>","tags":["PYI014"]},{"location":"rules/argument-default-in-stub/#example","title":"Example","text":"<pre><code>def foo(arg=[]) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(arg=...) -&gt; None: ...\n</code></pre>","tags":["PYI014"]},{"location":"rules/argument-default-in-stub/#references","title":"References","text":"<ul> <li><code>flake8-pyi</code></li> </ul>","tags":["PYI014"]},{"location":"rules/assert-false/","title":"assert-false (B011)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is always available.</p>","tags":["B011"]},{"location":"rules/assert-false/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>assert False</code>.</p>","tags":["B011"]},{"location":"rules/assert-false/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python removes <code>assert</code> statements when running in optimized mode (<code>python -O</code>), making <code>assert False</code> an unreliable means of raising an <code>AssertionError</code>.</p> <p>Instead, raise an <code>AssertionError</code> directly.</p>","tags":["B011"]},{"location":"rules/assert-false/#example","title":"Example","text":"<pre><code>assert False\n</code></pre> <p>Use instead:</p> <pre><code>raise AssertionError\n</code></pre>","tags":["B011"]},{"location":"rules/assert-false/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as changing an <code>assert</code> to a <code>raise</code> will change the behavior of your program when running in optimized mode (<code>python -O</code>).</p>","tags":["B011"]},{"location":"rules/assert-false/#references","title":"References","text":"<ul> <li>Python documentation: <code>assert</code></li> </ul>","tags":["B011"]},{"location":"rules/assert-on-string-literal/","title":"assert-on-string-literal (PLW0129)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0129"]},{"location":"rules/assert-on-string-literal/#what-it-does","title":"What it does","text":"<p>Checks for <code>assert</code> statements that use a string literal as the first argument.</p>","tags":["PLW0129"]},{"location":"rules/assert-on-string-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p>An <code>assert</code> on a non-empty string literal will always pass, while an <code>assert</code> on an empty string literal will always fail.</p>","tags":["PLW0129"]},{"location":"rules/assert-on-string-literal/#example","title":"Example","text":"<pre><code>assert \"always true\"\n</code></pre>","tags":["PLW0129"]},{"location":"rules/assert-raises-exception/","title":"assert-raises-exception (B017)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B017"]},{"location":"rules/assert-raises-exception/#what-it-does","title":"What it does","text":"<p>Checks for <code>assertRaises</code> and <code>pytest.raises</code> context managers that catch <code>Exception</code> or <code>BaseException</code>.</p>","tags":["B017"]},{"location":"rules/assert-raises-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>These forms catch every <code>Exception</code>, which can lead to tests passing even if, e.g., the code under consideration raises a <code>SyntaxError</code> or <code>IndentationError</code>.</p> <p>Either assert for a more specific exception (builtin or custom), or use <code>assertRaisesRegex</code> or <code>pytest.raises(..., match=&lt;REGEX&gt;)</code> respectively.</p>","tags":["B017"]},{"location":"rules/assert-raises-exception/#example","title":"Example","text":"<pre><code>self.assertRaises(Exception, foo)\n</code></pre> <p>Use instead:</p> <pre><code>self.assertRaises(SomeSpecificException, foo)\n</code></pre>","tags":["B017"]},{"location":"rules/assert-tuple/","title":"assert-tuple (F631)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F631"]},{"location":"rules/assert-tuple/#what-it-does","title":"What it does","text":"<p>Checks for <code>assert</code> statements that use non-empty tuples as test conditions.</p>","tags":["F631"]},{"location":"rules/assert-tuple/#why-is-this-bad","title":"Why is this bad?","text":"<p>Non-empty tuples are always <code>True</code>, so an <code>assert</code> statement with a non-empty tuple as its test condition will always pass. This is likely a mistake.</p>","tags":["F631"]},{"location":"rules/assert-tuple/#example","title":"Example","text":"<pre><code>assert (some_condition,)\n</code></pre> <p>Use instead:</p> <pre><code>assert some_condition\n</code></pre>","tags":["F631"]},{"location":"rules/assert-tuple/#references","title":"References","text":"<ul> <li>Python documentation: The <code>assert</code> statement</li> </ul>","tags":["F631"]},{"location":"rules/assert-with-print-message/","title":"assert-with-print-message (RUF030)","text":"<p>Fix is always available.</p>","tags":["RUF030"]},{"location":"rules/assert-with-print-message/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>assert expression, print(message)</code>.</p>","tags":["RUF030"]},{"location":"rules/assert-with-print-message/#why-is-this-bad","title":"Why is this bad?","text":"<p>If an <code>assert x, y</code> assertion fails, the Python interpreter raises an <code>AssertionError</code>, and the evaluated value of <code>y</code> is used as the contents of that assertion error. The <code>print</code> function always returns <code>None</code>, however, so the evaluated value of a call to <code>print</code> will always be <code>None</code>.</p> <p>Using a <code>print</code> call in this context will therefore output the message to <code>stdout</code>, before raising an empty <code>AssertionError(None)</code>. Instead, remove the <code>print</code> and pass the message directly as the second expression, allowing <code>stderr</code> to capture the message in a well-formatted context.</p>","tags":["RUF030"]},{"location":"rules/assert-with-print-message/#example","title":"Example","text":"<pre><code>assert False, print(\"This is a message\")\n</code></pre> <p>Use instead:</p> <pre><code>assert False, \"This is a message\"\n</code></pre>","tags":["RUF030"]},{"location":"rules/assert-with-print-message/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as changing the second expression will result in a different <code>AssertionError</code> message being raised, as well as a change in <code>stdout</code> output.</p>","tags":["RUF030"]},{"location":"rules/assert-with-print-message/#references","title":"References","text":"<ul> <li>Python documentation: <code>assert</code></li> </ul>","tags":["RUF030"]},{"location":"rules/assert/","title":"assert (S101)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S101"]},{"location":"rules/assert/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>assert</code> keyword.</p>","tags":["S101"]},{"location":"rules/assert/#why-is-this-bad","title":"Why is this bad?","text":"<p>Assertions are removed when Python is run with optimization requested (i.e., when the <code>-O</code> flag is present), which is a common practice in production environments. As such, assertions should not be used for runtime validation of user input or to enforce  interface constraints.</p> <p>Consider raising a meaningful error instead of using <code>assert</code>.</p>","tags":["S101"]},{"location":"rules/assert/#example","title":"Example","text":"<pre><code>assert x &gt; 0, \"Expected positive value.\"\n</code></pre> <p>Use instead:</p> <pre><code>if not x &gt; 0:\nraise ValueError(\"Expected positive value.\")\n# or even better:\nif x &lt;= 0:\nraise ValueError(\"Expected positive value.\")\n</code></pre>","tags":["S101"]},{"location":"rules/assignment-default-in-stub/","title":"assignment-default-in-stub (PYI015)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI015"]},{"location":"rules/assignment-default-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for assignments in stubs with default values that are not \"simple\" (i.e., <code>int</code>, <code>float</code>, <code>complex</code>, <code>bytes</code>, <code>str</code>, <code>bool</code>, <code>None</code>, <code>...</code>, or simple container literals).</p>","tags":["PYI015"]},{"location":"rules/assignment-default-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub (<code>.pyi</code>) files exist to define type hints, and are not evaluated at runtime. As such, assignments in stub files should not include values, as they are ignored by type checkers.</p> <p>However, the use of such values may be useful for IDEs and other consumers of stub files, and so \"simple\" values may be worth including and are permitted by this rule.</p> <p>Instead of including and reproducing a complex value, use <code>...</code> to indicate that the assignment has a default value, but that the value is non-simple or varies according to the current platform or Python version.</p>","tags":["PYI015"]},{"location":"rules/assignment-default-in-stub/#example","title":"Example","text":"<pre><code>foo: str = \"...\"\n</code></pre> <p>Use instead:</p> <pre><code>foo: str = ...\n</code></pre>","tags":["PYI015"]},{"location":"rules/assignment-default-in-stub/#references","title":"References","text":"<ul> <li><code>flake8-pyi</code></li> </ul>","tags":["PYI015"]},{"location":"rules/assignment-in-assert/","title":"assignment-in-assert (RUF018)","text":"","tags":["RUF018"]},{"location":"rules/assignment-in-assert/#what-it-does","title":"What it does","text":"<p>Checks for named assignment expressions (e.g., <code>x := 0</code>) in <code>assert</code> statements.</p>","tags":["RUF018"]},{"location":"rules/assignment-in-assert/#why-is-this-bad","title":"Why is this bad?","text":"<p>Named assignment expressions (also known as \"walrus operators\") are used to assign a value to a variable as part of a larger expression.</p> <p>Named assignments are syntactically valid in <code>assert</code> statements. However, when the Python interpreter is run under the <code>-O</code> flag, <code>assert</code> statements are not executed. In this case, the named assignment will also be ignored, which may result in unexpected behavior (e.g., undefined variable accesses).</p>","tags":["RUF018"]},{"location":"rules/assignment-in-assert/#examples","title":"Examples","text":"<pre><code>assert (x := 0) == 0\n</code></pre> <p>Use instead:</p> <pre><code>x = 0\nassert x == 0\n</code></pre>","tags":["RUF018"]},{"location":"rules/assignment-in-assert/#references","title":"References","text":"<ul> <li>Python documentation: <code>-O</code></li> </ul>","tags":["RUF018"]},{"location":"rules/assignment-to-os-environ/","title":"assignment-to-os-environ (B003)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B003"]},{"location":"rules/assignment-to-os-environ/#what-it-does","title":"What it does","text":"<p>Checks for assignments to <code>os.environ</code>.</p>","tags":["B003"]},{"location":"rules/assignment-to-os-environ/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, <code>os.environ</code> is a mapping that represents the environment of the current process.</p> <p>However, reassigning to <code>os.environ</code> does not clear the environment. Instead, it merely updates the <code>os.environ</code> for the current process. This can lead to unexpected behavior, especially when running the program in a subprocess.</p> <p>Instead, use <code>os.environ.clear()</code> to clear the environment, or use the <code>env</code> argument of <code>subprocess.Popen</code> to pass a custom environment to a subprocess.</p>","tags":["B003"]},{"location":"rules/assignment-to-os-environ/#example","title":"Example","text":"<pre><code>import os\nos.environ = {\"foo\": \"bar\"}\n</code></pre> <p>Use instead:</p> <pre><code>import os\nos.environ.clear()\nos.environ[\"foo\"] = \"bar\"\n</code></pre>","tags":["B003"]},{"location":"rules/assignment-to-os-environ/#references","title":"References","text":"<ul> <li>Python documentation: <code>os.environ</code></li> <li>Python documentation: <code>subprocess.Popen</code></li> </ul>","tags":["B003"]},{"location":"rules/async-busy-wait/","title":"async-busy-wait (ASYNC110)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC110"]},{"location":"rules/async-busy-wait/#what-it-does","title":"What it does","text":"<p>Checks for the use of an async sleep function in a <code>while</code> loop.</p>","tags":["ASYNC110"]},{"location":"rules/async-busy-wait/#why-is-this-bad","title":"Why is this bad?","text":"<p>Instead of sleeping in a <code>while</code> loop, and waiting for a condition to become true, it's preferable to <code>await</code> on an <code>Event</code> object such as: <code>asyncio.Event</code>, <code>trio.Event</code>, or <code>anyio.Event</code>.</p>","tags":["ASYNC110"]},{"location":"rules/async-busy-wait/#example","title":"Example","text":"<pre><code>DONE = False\nasync def func():\nwhile not DONE:\nawait asyncio.sleep(1)\n</code></pre> <p>Use instead:</p> <pre><code>DONE = asyncio.Event()\nasync def func():\nawait DONE.wait()\n</code></pre>","tags":["ASYNC110"]},{"location":"rules/async-busy-wait/#references","title":"References","text":"<ul> <li><code>asyncio</code> events</li> <li><code>anyio</code> events</li> <li><code>trio</code> events</li> </ul>","tags":["ASYNC110"]},{"location":"rules/async-function-with-timeout/","title":"async-function-with-timeout (ASYNC109)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC109"]},{"location":"rules/async-function-with-timeout/#what-it-does","title":"What it does","text":"<p>Checks for <code>async</code> function definitions with <code>timeout</code> parameters.</p>","tags":["ASYNC109"]},{"location":"rules/async-function-with-timeout/#why-is-this-bad","title":"Why is this bad?","text":"<p>Rather than implementing asynchronous timeout behavior manually, prefer built-in timeout functionality, such as <code>asyncio.timeout</code>, <code>trio.fail_after</code>, or <code>anyio.move_on_after</code>, among others.</p> <p>This rule is highly opinionated to enforce a design pattern called \"structured concurrency\" that allows for <code>async</code> functions to be oblivious to timeouts, instead letting callers to handle the logic with a context manager.</p>","tags":["ASYNC109"]},{"location":"rules/async-function-with-timeout/#details","title":"Details","text":"<p>This rule attempts to detect which async framework your code is using by analysing the imports in the file it's checking. If it sees an <code>anyio</code> import in your code, it will assume <code>anyio</code> is your framework of choice; if it sees a <code>trio</code> import, it will assume <code>trio</code>; if it sees neither, it will assume <code>asyncio</code>. <code>asyncio.timeout</code> was added in Python 3.11, so if <code>asyncio</code> is detected as the framework being used, this rule will be ignored when your configured <code>target-version</code> is set to less than Python 3.11.</p> <p>For functions that wrap <code>asyncio.timeout</code>, <code>trio.fail_after</code> or <code>anyio.move_on_after</code>, false positives from this rule can be avoided by using a different parameter name.</p>","tags":["ASYNC109"]},{"location":"rules/async-function-with-timeout/#example","title":"Example","text":"<pre><code>async def long_running_task(timeout): ...\nasync def main():\nawait long_running_task(timeout=2)\n</code></pre> <p>Use instead:</p> <pre><code>async def long_running_task(): ...\nasync def main():\nasync with asyncio.timeout(2):\nawait long_running_task()\n</code></pre>","tags":["ASYNC109"]},{"location":"rules/async-function-with-timeout/#references","title":"References","text":"<ul> <li><code>asyncio</code> timeouts</li> <li><code>anyio</code> timeouts</li> <li><code>trio</code> timeouts</li> </ul>","tags":["ASYNC109"]},{"location":"rules/async-zero-sleep/","title":"async-zero-sleep (ASYNC115)","text":"<p>Derived from the flake8-async linter.</p> <p>Fix is always available.</p>","tags":["ASYNC115"]},{"location":"rules/async-zero-sleep/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>trio.sleep(0)</code> or <code>anyio.sleep(0)</code>.</p>","tags":["ASYNC115"]},{"location":"rules/async-zero-sleep/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>trio.sleep(0)</code> is equivalent to calling <code>trio.lowlevel.checkpoint()</code>. However, the latter better conveys the intent of the code.</p>","tags":["ASYNC115"]},{"location":"rules/async-zero-sleep/#example","title":"Example","text":"<pre><code>import trio\nasync def func():\nawait trio.sleep(0)\n</code></pre> <p>Use instead:</p> <pre><code>import trio\nasync def func():\nawait trio.lowlevel.checkpoint()\n</code></pre>","tags":["ASYNC115"]},{"location":"rules/asyncio-dangling-task/","title":"asyncio-dangling-task (RUF006)","text":"","tags":["RUF006"]},{"location":"rules/asyncio-dangling-task/#what-it-does","title":"What it does","text":"<p>Checks for <code>asyncio.create_task</code> and <code>asyncio.ensure_future</code> calls that do not store a reference to the returned result.</p>","tags":["RUF006"]},{"location":"rules/asyncio-dangling-task/#why-is-this-bad","title":"Why is this bad?","text":"<p>Per the <code>asyncio</code> documentation, the event loop only retains a weak reference to tasks. If the task returned by <code>asyncio.create_task</code> and <code>asyncio.ensure_future</code> is not stored in a variable, or a collection, or otherwise referenced, it may be garbage collected at any time. This can lead to unexpected and inconsistent behavior, as your tasks may or may not run to completion.</p>","tags":["RUF006"]},{"location":"rules/asyncio-dangling-task/#example","title":"Example","text":"<pre><code>import asyncio\nfor i in range(10):\n# This creates a weak reference to the task, which may be garbage\n# collected at any time.\nasyncio.create_task(some_coro(param=i))\n</code></pre> <p>Use instead:</p> <pre><code>import asyncio\nbackground_tasks = set()\nfor i in range(10):\ntask = asyncio.create_task(some_coro(param=i))\n# Add task to the set. This creates a strong reference.\nbackground_tasks.add(task)\n# To prevent keeping references to finished tasks forever,\n# make each task remove its own reference from the set after\n# completion:\ntask.add_done_callback(background_tasks.discard)\n</code></pre>","tags":["RUF006"]},{"location":"rules/asyncio-dangling-task/#references","title":"References","text":"<ul> <li>The Heisenbug lurking in your async code</li> <li>The Python Standard Library</li> </ul>","tags":["RUF006"]},{"location":"rules/avoidable-escaped-quote/","title":"avoidable-escaped-quote (Q003)","text":"<p>Derived from the flake8-quotes linter.</p> <p>Fix is always available.</p>","tags":["Q003"]},{"location":"rules/avoidable-escaped-quote/#what-it-does","title":"What it does","text":"<p>Checks for strings that include escaped quotes, and suggests changing the quote style to avoid the need to escape them.</p>","tags":["Q003"]},{"location":"rules/avoidable-escaped-quote/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's preferable to avoid escaped quotes in strings. By changing the outer quote style, you can avoid escaping inner quotes.</p>","tags":["Q003"]},{"location":"rules/avoidable-escaped-quote/#example","title":"Example","text":"<pre><code>foo = 'bar\\'s'\n</code></pre> <p>Use instead:</p> <pre><code>foo = \"bar's\"\n</code></pre>","tags":["Q003"]},{"location":"rules/avoidable-escaped-quote/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter automatically removes unnecessary escapes, making the rule redundant.</p>","tags":["Q003"]},{"location":"rules/await-outside-async/","title":"await-outside-async (PLE1142)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1142"]},{"location":"rules/await-outside-async/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>await</code> outside <code>async</code> functions.</p>","tags":["PLE1142"]},{"location":"rules/await-outside-async/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>await</code> outside an <code>async</code> function is a syntax error.</p>","tags":["PLE1142"]},{"location":"rules/await-outside-async/#example","title":"Example","text":"<pre><code>import asyncio\ndef foo():\nawait asyncio.sleep(1)\n</code></pre> <p>Use instead:</p> <pre><code>import asyncio\nasync def foo():\nawait asyncio.sleep(1)\n</code></pre>","tags":["PLE1142"]},{"location":"rules/await-outside-async/#notebook-behavior","title":"Notebook behavior","text":"<p>As an exception, <code>await</code> is allowed at the top level of a Jupyter notebook (see: autoawait).</p>","tags":["PLE1142"]},{"location":"rules/await-outside-async/#references","title":"References","text":"<ul> <li>Python documentation: Await expression</li> <li>PEP 492: Await Expression</li> </ul>","tags":["PLE1142"]},{"location":"rules/bad-dunder-method-name/","title":"bad-dunder-method-name (PLW3201)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLW3201"]},{"location":"rules/bad-dunder-method-name/#what-it-does","title":"What it does","text":"<p>Checks for dunder methods that have no special meaning in Python 3.</p>","tags":["PLW3201"]},{"location":"rules/bad-dunder-method-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>Misspelled or no longer supported dunder name methods may cause your code to not function as expected.</p> <p>Since dunder methods are associated with customizing the behavior of a class in Python, introducing a dunder method such as <code>__foo__</code> that diverges from standard Python dunder methods could potentially confuse someone reading the code.</p> <p>This rule will detect all methods starting and ending with at least one underscore (e.g., <code>_str_</code>), but ignores known dunder methods (like <code>__init__</code>), as well as methods that are marked with <code>@override</code>.</p> <p>Additional dunder methods names can be allowed via the <code>lint.pylint.allow-dunder-method-names</code> setting.</p>","tags":["PLW3201"]},{"location":"rules/bad-dunder-method-name/#example","title":"Example","text":"<pre><code>class Foo:\ndef __init_(self): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __init__(self): ...\n</code></pre>","tags":["PLW3201"]},{"location":"rules/bad-dunder-method-name/#options","title":"Options","text":"<ul> <li><code>lint.pylint.allow-dunder-method-names</code></li> </ul>","tags":["PLW3201"]},{"location":"rules/bad-exit-annotation/","title":"bad-exit-annotation (PYI036)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI036"]},{"location":"rules/bad-exit-annotation/#what-it-does","title":"What it does","text":"<p>Checks for incorrect function signatures on <code>__exit__</code> and <code>__aexit__</code> methods.</p>","tags":["PYI036"]},{"location":"rules/bad-exit-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>Improperly annotated <code>__exit__</code> and <code>__aexit__</code> methods can cause unexpected behavior when interacting with type checkers.</p>","tags":["PYI036"]},{"location":"rules/bad-exit-annotation/#example","title":"Example","text":"<pre><code>from types import TracebackType\nclass Foo:\ndef __exit__(\nself, typ: BaseException, exc: BaseException, tb: TracebackType\n) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>from types import TracebackType\nclass Foo:\ndef __exit__(\nself,\ntyp: type[BaseException] | None,\nexc: BaseException | None,\ntb: TracebackType | None,\n) -&gt; None: ...\n</code></pre>","tags":["PYI036"]},{"location":"rules/bad-file-permissions/","title":"bad-file-permissions (S103)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S103"]},{"location":"rules/bad-file-permissions/#what-it-does","title":"What it does","text":"<p>Checks for files with overly permissive permissions.</p>","tags":["S103"]},{"location":"rules/bad-file-permissions/#why-is-this-bad","title":"Why is this bad?","text":"<p>Overly permissive file permissions may allow unintended access and arbitrary code execution.</p>","tags":["S103"]},{"location":"rules/bad-file-permissions/#example","title":"Example","text":"<pre><code>import os\nos.chmod(\"/etc/secrets.txt\", 0o666)  # rw-rw-rw-\n</code></pre> <p>Use instead:</p> <pre><code>import os\nos.chmod(\"/etc/secrets.txt\", 0o600)  # rw-------\n</code></pre>","tags":["S103"]},{"location":"rules/bad-file-permissions/#references","title":"References","text":"<ul> <li>Python documentation: <code>os.chmod</code></li> <li>Python documentation: <code>stat</code></li> <li>Common Weakness Enumeration: CWE-732</li> </ul>","tags":["S103"]},{"location":"rules/bad-open-mode/","title":"bad-open-mode (PLW1501)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW1501"]},{"location":"rules/bad-open-mode/#what-it-does","title":"What it does","text":"<p>Check for an invalid <code>mode</code> argument in <code>open</code> calls.</p>","tags":["PLW1501"]},{"location":"rules/bad-open-mode/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>open</code> function accepts a <code>mode</code> argument that specifies how the file should be opened (e.g., read-only, write-only, append-only, etc.).</p> <p>Python supports a variety of open modes: <code>r</code>, <code>w</code>, <code>a</code>, and <code>x</code>, to control reading, writing, appending, and creating, respectively, along with <code>b</code> (binary mode), <code>+</code> (read and write), and <code>U</code> (universal newlines), the latter of which is only valid alongside <code>r</code>. This rule detects both invalid combinations of modes and invalid characters in the mode string itself.</p>","tags":["PLW1501"]},{"location":"rules/bad-open-mode/#example","title":"Example","text":"<pre><code>with open(\"file\", \"rwx\") as f:\nreturn f.read()\n</code></pre> <p>Use instead:</p> <pre><code>with open(\"file\", \"r\") as f:\nreturn f.read()\n</code></pre>","tags":["PLW1501"]},{"location":"rules/bad-open-mode/#references","title":"References","text":"<ul> <li>Python documentation: <code>open</code></li> </ul>","tags":["PLW1501"]},{"location":"rules/bad-quotes-docstring/","title":"bad-quotes-docstring (Q002)","text":"<p>Derived from the flake8-quotes linter.</p> <p>Fix is sometimes available.</p>","tags":["Q002"]},{"location":"rules/bad-quotes-docstring/#what-it-does","title":"What it does","text":"<p>Checks for docstrings that use single quotes or double quotes, depending on the value of the <code>lint.flake8-quotes.docstring-quotes</code> setting.</p>","tags":["Q002"]},{"location":"rules/bad-quotes-docstring/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use either single or double quotes for docstring strings, but be consistent.</p>","tags":["Q002"]},{"location":"rules/bad-quotes-docstring/#example","title":"Example","text":"<pre><code>'''\nbar\n'''\n</code></pre> <p>Assuming <code>docstring-quotes</code> is set to <code>double</code>, use instead:</p> <pre><code>\"\"\"\nbar\n\"\"\"\n</code></pre>","tags":["Q002"]},{"location":"rules/bad-quotes-docstring/#options","title":"Options","text":"<ul> <li><code>lint.flake8-quotes.docstring-quotes</code></li> </ul>","tags":["Q002"]},{"location":"rules/bad-quotes-docstring/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces double quotes for docstrings, making the rule redundant.</p>","tags":["Q002"]},{"location":"rules/bad-quotes-inline-string/","title":"bad-quotes-inline-string (Q000)","text":"<p>Derived from the flake8-quotes linter.</p> <p>Fix is sometimes available.</p>","tags":["Q000"]},{"location":"rules/bad-quotes-inline-string/#what-it-does","title":"What it does","text":"<p>Checks for inline strings that use single quotes or double quotes, depending on the value of the <code>lint.flake8-quotes.inline-quotes</code> option.</p>","tags":["Q000"]},{"location":"rules/bad-quotes-inline-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use either single or double quotes for inline strings, but be consistent.</p>","tags":["Q000"]},{"location":"rules/bad-quotes-inline-string/#example","title":"Example","text":"<pre><code>foo = 'bar'\n</code></pre> <p>Assuming <code>inline-quotes</code> is set to <code>double</code>, use instead:</p> <pre><code>foo = \"bar\"\n</code></pre>","tags":["Q000"]},{"location":"rules/bad-quotes-inline-string/#options","title":"Options","text":"<ul> <li><code>lint.flake8-quotes.inline-quotes</code></li> </ul>","tags":["Q000"]},{"location":"rules/bad-quotes-inline-string/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent quotes for inline strings, making the rule redundant.</p>","tags":["Q000"]},{"location":"rules/bad-quotes-multiline-string/","title":"bad-quotes-multiline-string (Q001)","text":"<p>Derived from the flake8-quotes linter.</p> <p>Fix is always available.</p>","tags":["Q001"]},{"location":"rules/bad-quotes-multiline-string/#what-it-does","title":"What it does","text":"<p>Checks for multiline strings that use single quotes or double quotes, depending on the value of the <code>lint.flake8-quotes.multiline-quotes</code> setting.</p>","tags":["Q001"]},{"location":"rules/bad-quotes-multiline-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use either single or double quotes for multiline strings, but be consistent.</p>","tags":["Q001"]},{"location":"rules/bad-quotes-multiline-string/#example","title":"Example","text":"<pre><code>foo = '''\nbar\n'''\n</code></pre> <p>Assuming <code>multiline-quotes</code> is set to <code>double</code>, use instead:</p> <pre><code>foo = \"\"\"\nbar\n\"\"\"\n</code></pre>","tags":["Q001"]},{"location":"rules/bad-quotes-multiline-string/#options","title":"Options","text":"<ul> <li><code>lint.flake8-quotes.multiline-quotes</code></li> </ul>","tags":["Q001"]},{"location":"rules/bad-quotes-multiline-string/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces double quotes for multiline strings, making the rule redundant.</p>","tags":["Q001"]},{"location":"rules/bad-staticmethod-argument/","title":"bad-staticmethod-argument (PLW0211)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0211"]},{"location":"rules/bad-staticmethod-argument/#what-it-does","title":"What it does","text":"<p>Checks for static methods that use <code>self</code> or <code>cls</code> as their first argument.</p>","tags":["PLW0211"]},{"location":"rules/bad-staticmethod-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the use of <code>self</code> and <code>cls</code> as the first arguments for instance methods and class methods, respectively. Naming the first argument of a static method as <code>self</code> or <code>cls</code> can be misleading, as static methods do not receive an instance or class reference as their first argument.</p>","tags":["PLW0211"]},{"location":"rules/bad-staticmethod-argument/#example","title":"Example","text":"<pre><code>class Wolf:\n@staticmethod\ndef eat(self):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class Wolf:\n@staticmethod\ndef eat(sheep):\npass\n</code></pre>","tags":["PLW0211"]},{"location":"rules/bad-str-strip-call/","title":"bad-str-strip-call (PLE1310)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1310"]},{"location":"rules/bad-str-strip-call/#what-it-does","title":"What it does","text":"<p>Checks duplicate characters in <code>str.strip</code> calls.</p>","tags":["PLE1310"]},{"location":"rules/bad-str-strip-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>All characters in <code>str.strip</code> calls are removed from both the leading and trailing ends of the string. Including duplicate characters in the call is redundant and often indicative of a mistake.</p> <p>In Python 3.9 and later, you can use <code>str.removeprefix</code> and <code>str.removesuffix</code> to remove an exact prefix or suffix from a string, respectively, which should be preferred when possible.</p>","tags":["PLE1310"]},{"location":"rules/bad-str-strip-call/#example","title":"Example","text":"<pre><code># Evaluates to \"foo\".\n\"bar foo baz\".strip(\"bar baz \")\n</code></pre> <p>Use instead:</p> <pre><code># Evaluates to \"foo\".\n\"bar foo baz\".strip(\"abrz \")  # \"foo\"\n</code></pre> <p>Or:</p> <pre><code># Evaluates to \"foo\".\n\"bar foo baz\".removeprefix(\"bar \").removesuffix(\" baz\")\n</code></pre>","tags":["PLE1310"]},{"location":"rules/bad-str-strip-call/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["PLE1310"]},{"location":"rules/bad-str-strip-call/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.strip</code></li> </ul>","tags":["PLE1310"]},{"location":"rules/bad-string-format-character/","title":"bad-string-format-character (PLE1300)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1300"]},{"location":"rules/bad-string-format-character/#what-it-does","title":"What it does","text":"<p>Checks for unsupported format types in format strings.</p>","tags":["PLE1300"]},{"location":"rules/bad-string-format-character/#why-is-this-bad","title":"Why is this bad?","text":"<p>An invalid format string character will result in an error at runtime.</p>","tags":["PLE1300"]},{"location":"rules/bad-string-format-character/#example","title":"Example","text":"<pre><code># `z` is not a valid format type.\nprint(\"%z\" % \"1\")\nprint(\"{:z}\".format(\"1\"))\n</code></pre>","tags":["PLE1300"]},{"location":"rules/bad-string-format-type/","title":"bad-string-format-type (PLE1307)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1307"]},{"location":"rules/bad-string-format-type/#what-it-does","title":"What it does","text":"<p>Checks for mismatched argument types in \"old-style\" format strings.</p>","tags":["PLE1307"]},{"location":"rules/bad-string-format-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The format string is not checked at compile time, so it is easy to introduce bugs by mistyping the format string.</p>","tags":["PLE1307"]},{"location":"rules/bad-string-format-type/#example","title":"Example","text":"<pre><code>print(\"%d\" % \"1\")\n</code></pre> <p>Use instead:</p> <pre><code>print(\"%d\" % 1)\n</code></pre>","tags":["PLE1307"]},{"location":"rules/bad-version-info-comparison/","title":"bad-version-info-comparison (PYI006)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI006"]},{"location":"rules/bad-version-info-comparison/#what-it-does","title":"What it does","text":"<p>Checks for uses of comparators other than <code>&lt;</code> and <code>&gt;=</code> for <code>sys.version_info</code> checks in <code>.pyi</code> files. All other comparators, such as <code>&gt;</code>, <code>&lt;=</code>, and <code>==</code>, are banned.</p>","tags":["PYI006"]},{"location":"rules/bad-version-info-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparing <code>sys.version_info</code> with <code>==</code> or <code>&lt;=</code> has unexpected behavior and can lead to bugs.</p> <p>For example, <code>sys.version_info &gt; (3, 8, 1)</code> will resolve to <code>True</code> if your Python version is 3.8.1; meanwhile, <code>sys.version_info &lt;= (3, 8)</code> will not resolve to <code>True</code> if your Python version is 3.8.10:</p> <pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print(sys.version_info)\nsys.version_info(major=3, minor=8, micro=10, releaselevel='final', serial=0)\n&gt;&gt;&gt; print(sys.version_info &gt; (3, 8))\nTrue\n&gt;&gt;&gt; print(sys.version_info == (3, 8))\nFalse\n&gt;&gt;&gt; print(sys.version_info &lt;= (3, 8))\nFalse\n&gt;&gt;&gt; print(sys.version_info in (3, 8))\nFalse\n</code></pre> <p>In preview, this rule will also flag non-stub files.</p>","tags":["PYI006"]},{"location":"rules/bad-version-info-comparison/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info &gt; (3, 8): ...\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info &gt;= (3, 9): ...\n</code></pre>","tags":["PYI006"]},{"location":"rules/bad-version-info-order/","title":"bad-version-info-order (PYI066)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI066"]},{"location":"rules/bad-version-info-order/#what-it-does","title":"What it does","text":"<p>Checks for code that branches on <code>sys.version_info</code> comparisons where branches corresponding to older Python versions come before branches corresponding to newer Python versions.</p>","tags":["PYI066"]},{"location":"rules/bad-version-info-order/#why-is-this-bad","title":"Why is this bad?","text":"<p>As a convention, branches that correspond to newer Python versions should come first. This makes it easier to understand the desired behavior, which typically corresponds to the latest Python versions.</p> <p>This rule enforces the convention by checking for <code>if</code> tests that compare <code>sys.version_info</code> with <code>&lt;</code> rather than <code>&gt;=</code>.</p> <p>By default, this rule only applies to stub files. In preview, it will also flag this anti-pattern in non-stub files.</p>","tags":["PYI066"]},{"location":"rules/bad-version-info-order/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info &lt; (3, 10):\ndef read_data(x, *, preserve_order=True): ...\nelse:\ndef read_data(x): ...\n</code></pre> <p>Use instead:</p> <pre><code>if sys.version_info &gt;= (3, 10):\ndef read_data(x): ...\nelse:\ndef read_data(x, *, preserve_order=True): ...\n</code></pre>","tags":["PYI066"]},{"location":"rules/banned-api/","title":"banned-api (TID251)","text":"<p>Derived from the flake8-tidy-imports linter.</p>","tags":["TID251"]},{"location":"rules/banned-api/#what-it-does","title":"What it does","text":"<p>Checks for banned imports.</p>","tags":["TID251"]},{"location":"rules/banned-api/#why-is-this-bad","title":"Why is this bad?","text":"<p>Projects may want to ensure that specific modules or module members are not imported or accessed.</p> <p>Security or other company policies may be a reason to impose restrictions on importing external Python libraries. In some cases, projects may adopt conventions around the use of certain modules or module members that are not enforceable by the language itself.</p> <p>This rule enforces certain import conventions project-wide automatically.</p>","tags":["TID251"]},{"location":"rules/banned-api/#options","title":"Options","text":"<ul> <li><code>lint.flake8-tidy-imports.banned-api</code></li> </ul>","tags":["TID251"]},{"location":"rules/banned-import-alias/","title":"banned-import-alias (ICN002)","text":"<p>Derived from the flake8-import-conventions linter.</p>","tags":["ICN002"]},{"location":"rules/banned-import-alias/#what-it-does","title":"What it does","text":"<p>Checks for imports that use non-standard naming conventions, like <code>import tensorflow.keras.backend as K</code>.</p>","tags":["ICN002"]},{"location":"rules/banned-import-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Avoid using a non-standard naming convention for imports, and, in particular, choosing import aliases that violate PEP 8.</p> <p>For example, aliasing via <code>import tensorflow.keras.backend as K</code> violates the guidance of PEP 8, and is thus avoided in some projects.</p>","tags":["ICN002"]},{"location":"rules/banned-import-alias/#example","title":"Example","text":"<pre><code>import tensorflow.keras.backend as K\n</code></pre> <p>Use instead:</p> <pre><code>import tensorflow as tf\ntf.keras.backend\n</code></pre>","tags":["ICN002"]},{"location":"rules/banned-import-alias/#options","title":"Options","text":"<ul> <li><code>lint.flake8-import-conventions.banned-aliases</code></li> </ul>","tags":["ICN002"]},{"location":"rules/banned-import-from/","title":"banned-import-from (ICN003)","text":"<p>Derived from the flake8-import-conventions linter.</p>","tags":["ICN003"]},{"location":"rules/banned-import-from/#what-it-does","title":"What it does","text":"<p>Checks for member imports that should instead be accessed by importing the module.</p>","tags":["ICN003"]},{"location":"rules/banned-import-from/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use a common convention for imports to make your code more readable and idiomatic.</p> <p>For example, it's common to import <code>pandas</code> as <code>pd</code>, and then access members like <code>Series</code> via <code>pd.Series</code>, rather than importing <code>Series</code> directly.</p>","tags":["ICN003"]},{"location":"rules/banned-import-from/#example","title":"Example","text":"<pre><code>from pandas import Series\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\npd.Series\n</code></pre>","tags":["ICN003"]},{"location":"rules/banned-import-from/#options","title":"Options","text":"<ul> <li><code>lint.flake8-import-conventions.banned-from</code></li> </ul>","tags":["ICN003"]},{"location":"rules/banned-module-level-imports/","title":"banned-module-level-imports (TID253)","text":"<p>Derived from the flake8-tidy-imports linter.</p>","tags":["TID253"]},{"location":"rules/banned-module-level-imports/#what-it-does","title":"What it does","text":"<p>Checks for module-level imports that should instead be imported lazily (e.g., within a function definition, or an <code>if TYPE_CHECKING:</code> block, or some other nested context).</p>","tags":["TID253"]},{"location":"rules/banned-module-level-imports/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some modules are expensive to import. For example, importing <code>torch</code> or <code>tensorflow</code> can introduce a noticeable delay in the startup time of a Python program.</p> <p>In such cases, you may want to enforce that the module is imported lazily as needed, rather than at the top of the file. This could involve inlining the import into the function that uses it, rather than importing it unconditionally, to ensure that the module is only imported when necessary.</p>","tags":["TID253"]},{"location":"rules/banned-module-level-imports/#example","title":"Example","text":"<pre><code>import tensorflow as tf\ndef show_version():\nprint(tf.__version__)\n</code></pre> <p>Use instead:</p> <pre><code>def show_version():\nimport tensorflow as tf\nprint(tf.__version__)\n</code></pre>","tags":["TID253"]},{"location":"rules/banned-module-level-imports/#options","title":"Options","text":"<ul> <li><code>lint.flake8-tidy-imports.banned-module-level-imports</code></li> </ul>","tags":["TID253"]},{"location":"rules/bare-except/","title":"bare-except (E722)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E722"]},{"location":"rules/bare-except/#what-it-does","title":"What it does","text":"<p>Checks for bare <code>except</code> catches in <code>try</code>-<code>except</code> statements.</p>","tags":["E722"]},{"location":"rules/bare-except/#why-is-this-bad","title":"Why is this bad?","text":"<p>A bare <code>except</code> catches <code>BaseException</code> which includes <code>KeyboardInterrupt</code>, <code>SystemExit</code>, <code>Exception</code>, and others. Catching <code>BaseException</code> can make it hard to interrupt the program (e.g., with Ctrl-C) and can disguise other problems.</p>","tags":["E722"]},{"location":"rules/bare-except/#example","title":"Example","text":"<pre><code>try:\nraise KeyboardInterrupt(\"You probably don't mean to break CTRL-C.\")\nexcept:\nprint(\"But a bare `except` will ignore keyboard interrupts.\")\n</code></pre> <p>Use instead:</p> <pre><code>try:\ndo_something_that_might_break()\nexcept MoreSpecificException as e:\nhandle_error(e)\n</code></pre> <p>If you actually need to catch an unknown error, use <code>Exception</code> which will catch regular program errors but not important system exceptions.</p> <pre><code>def run_a_function(some_other_fn):\ntry:\nsome_other_fn()\nexcept Exception as e:\nprint(f\"How exceptional! {e}\")\n</code></pre>","tags":["E722"]},{"location":"rules/bare-except/#references","title":"References","text":"<ul> <li>Python documentation: Exception hierarchy</li> <li>Google Python Style Guide: \"Exceptions\"</li> </ul>","tags":["E722"]},{"location":"rules/bidirectional-unicode/","title":"bidirectional-unicode (PLE2502)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE2502"]},{"location":"rules/bidirectional-unicode/#what-it-does","title":"What it does","text":"<p>Checks for bidirectional unicode characters.</p>","tags":["PLE2502"]},{"location":"rules/bidirectional-unicode/#why-is-this-bad","title":"Why is this bad?","text":"<p>The interaction between bidirectional unicode characters and the surrounding code can be surprising to those that are unfamiliar with right-to-left writing systems.</p> <p>In some cases, bidirectional unicode characters can also be used to obfuscate code and introduce or mask security vulnerabilities.</p>","tags":["PLE2502"]},{"location":"rules/bidirectional-unicode/#example","title":"Example","text":"<pre><code>s = \"\u05d0\" * 100  #  \"\u05d0\" is assigned\nprint(s)  # prints a 100-character string\n</code></pre>","tags":["PLE2502"]},{"location":"rules/bidirectional-unicode/#references","title":"References","text":"<ul> <li>PEP 672: Bidirectional Text</li> </ul>","tags":["PLE2502"]},{"location":"rules/binary-op-exception/","title":"binary-op-exception (PLW0711)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0711"]},{"location":"rules/binary-op-exception/#what-it-does","title":"What it does","text":"<p>Checks for <code>except</code> clauses that attempt to catch multiple exceptions with a binary operation (<code>and</code> or <code>or</code>).</p>","tags":["PLW0711"]},{"location":"rules/binary-op-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>A binary operation will not catch multiple exceptions. Instead, the binary operation will be evaluated first, and the result of that operation will be caught (for an <code>or</code> operation, this is typically the first exception in the list). This is almost never the desired behavior.</p>","tags":["PLW0711"]},{"location":"rules/binary-op-exception/#example","title":"Example","text":"<pre><code>try:\npass\nexcept A or B:\npass\n</code></pre> <p>Use instead:</p> <pre><code>try:\npass\nexcept (A, B):\npass\n</code></pre>","tags":["PLW0711"]},{"location":"rules/bit-count/","title":"bit-count (FURB161)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p>","tags":["FURB161"]},{"location":"rules/bit-count/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>bin(...).count(\"1\")</code> to perform a population count.</p>","tags":["FURB161"]},{"location":"rules/bit-count/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 3.10, a <code>bit_count()</code> method was added to the <code>int</code> class, which is more concise and efficient than converting to a binary representation via <code>bin(...)</code>.</p>","tags":["FURB161"]},{"location":"rules/bit-count/#example","title":"Example","text":"<pre><code>x = bin(123).count(\"1\")\ny = bin(0b1111011).count(\"1\")\n</code></pre> <p>Use instead:</p> <pre><code>x = (123).bit_count()\ny = 0b1111011.bit_count()\n</code></pre>","tags":["FURB161"]},{"location":"rules/bit-count/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["FURB161"]},{"location":"rules/bit-count/#references","title":"References","text":"<ul> <li>Python documentation:<code>int.bit_count</code></li> </ul>","tags":["FURB161"]},{"location":"rules/blank-line-after-decorator/","title":"blank-line-after-decorator (E304)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E304"]},{"location":"rules/blank-line-after-decorator/#what-it-does","title":"What it does","text":"<p>Checks for extraneous blank line(s) after function decorators.</p>","tags":["E304"]},{"location":"rules/blank-line-after-decorator/#why-is-this-bad","title":"Why is this bad?","text":"<p>There should be no blank lines between a decorator and the object it is decorating.</p>","tags":["E304"]},{"location":"rules/blank-line-after-decorator/#example","title":"Example","text":"<pre><code>class User(object):\n@property\ndef name(self):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class User(object):\n@property\ndef name(self):\npass\n</code></pre>","tags":["E304"]},{"location":"rules/blank-line-after-decorator/#references","title":"References","text":"<ul> <li>PEP 8: Blank Lines</li> <li>Flake 8 rule</li> </ul>","tags":["E304"]},{"location":"rules/blank-line-after-last-section/","title":"blank-line-after-last-section (D413)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D413"]},{"location":"rules/blank-line-after-last-section/#what-it-does","title":"What it does","text":"<p>Checks for missing blank lines after the last section of a multiline docstring.</p>","tags":["D413"]},{"location":"rules/blank-line-after-last-section/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline docstrings.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, the rule is disabled when using the <code>google</code>, <code>numpy</code>, and <code>pep257</code> conventions.</p>","tags":["D413"]},{"location":"rules/blank-line-after-last-section/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D413"]},{"location":"rules/blank-line-after-last-section/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D413"]},{"location":"rules/blank-line-after-last-section/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> </ul>","tags":["D413"]},{"location":"rules/blank-line-after-summary/","title":"blank-line-after-summary (D205)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is sometimes available.</p>","tags":["D205"]},{"location":"rules/blank-line-after-summary/#what-it-does","title":"What it does","text":"<p>Checks for docstring summary lines that are not separated from the docstring description by one blank line.</p>","tags":["D205"]},{"location":"rules/blank-line-after-summary/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that multi-line docstrings consist of \"a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description.\"</p>","tags":["D205"]},{"location":"rules/blank-line-after-summary/#example","title":"Example","text":"<pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the\n    result using the bubble sort algorithm.\n    \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the\n    result using the bubble sort algorithm.\n    \"\"\"\n</code></pre>","tags":["D205"]},{"location":"rules/blank-line-after-summary/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D205"]},{"location":"rules/blank-line-before-class/","title":"blank-line-before-class (D211)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D211"]},{"location":"rules/blank-line-before-class/#what-it-does","title":"What it does","text":"<p>Checks for docstrings on class definitions that are preceded by a blank line.</p>","tags":["D211"]},{"location":"rules/blank-line-before-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>Avoid introducing any blank lines between a class definition and its docstring, for consistency.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>google</code>, <code>numpy</code>, and <code>pep257</code> conventions.</p> <p>For an alternative, see D203.</p>","tags":["D211"]},{"location":"rules/blank-line-before-class/#example","title":"Example","text":"<pre><code>class PhotoMetadata:\n\"\"\"Metadata about a photo.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>class PhotoMetadata:\n\"\"\"Metadata about a photo.\"\"\"\n</code></pre>","tags":["D211"]},{"location":"rules/blank-line-before-class/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D211"]},{"location":"rules/blank-line-between-methods/","title":"blank-line-between-methods (E301)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E301"]},{"location":"rules/blank-line-between-methods/#what-it-does","title":"What it does","text":"<p>Checks for missing blank lines between methods of a class.</p>","tags":["E301"]},{"location":"rules/blank-line-between-methods/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends exactly one blank line between methods of a class.</p>","tags":["E301"]},{"location":"rules/blank-line-between-methods/#example","title":"Example","text":"<pre><code>class MyClass(object):\ndef func1():\npass\ndef func2():\npass\n</code></pre> <p>Use instead:</p> <pre><code>class MyClass(object):\ndef func1():\npass\ndef func2():\npass\n</code></pre>","tags":["E301"]},{"location":"rules/blank-line-between-methods/#typing-stub-files-pyi","title":"Typing stub files (<code>.pyi</code>)","text":"<p>The typing style guide recommends to not use blank lines between methods except to group them. That's why this rule is not enabled in typing stub files.</p>","tags":["E301"]},{"location":"rules/blank-line-between-methods/#references","title":"References","text":"<ul> <li>PEP 8: Blank Lines</li> <li>Flake 8 rule</li> <li>Typing Style Guide</li> </ul>","tags":["E301"]},{"location":"rules/blank-line-with-whitespace/","title":"blank-line-with-whitespace (W293)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["W293"]},{"location":"rules/blank-line-with-whitespace/#what-it-does","title":"What it does","text":"<p>Checks for superfluous whitespace in blank lines.</p>","tags":["W293"]},{"location":"rules/blank-line-with-whitespace/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, \"avoid trailing whitespace anywhere. Because it\u2019s usually invisible, it can be confusing\"</p>","tags":["W293"]},{"location":"rules/blank-line-with-whitespace/#example","title":"Example","text":"<pre><code>class Foo(object):\\n    \\n    bang = 12\n</code></pre> <p>Use instead:</p> <pre><code>class Foo(object):\\n\\n    bang = 12\n</code></pre>","tags":["W293"]},{"location":"rules/blank-lines-after-function-or-class/","title":"blank-lines-after-function-or-class (E305)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E305"]},{"location":"rules/blank-lines-after-function-or-class/#what-it-does","title":"What it does","text":"<p>Checks for missing blank lines after the end of function or class.</p>","tags":["E305"]},{"location":"rules/blank-lines-after-function-or-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends using blank lines as follows:</p> <ul> <li>Two blank lines are expected between functions and classes</li> <li>One blank line is expected between methods of a class.</li> </ul>","tags":["E305"]},{"location":"rules/blank-lines-after-function-or-class/#example","title":"Example","text":"<pre><code>class User(object):\npass\nuser = User()\n</code></pre> <p>Use instead:</p> <pre><code>class User(object):\npass\nuser = User()\n</code></pre>","tags":["E305"]},{"location":"rules/blank-lines-after-function-or-class/#typing-stub-files-pyi","title":"Typing stub files (<code>.pyi</code>)","text":"<p>The typing style guide recommends to not use blank lines between statements except to group them. That's why this rule is not enabled in typing stub files.</p>","tags":["E305"]},{"location":"rules/blank-lines-after-function-or-class/#references","title":"References","text":"<ul> <li>PEP 8: Blank Lines</li> <li>Flake 8 rule</li> <li>Typing Style Guide</li> </ul>","tags":["E305"]},{"location":"rules/blank-lines-before-nested-definition/","title":"blank-lines-before-nested-definition (E306)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E306"]},{"location":"rules/blank-lines-before-nested-definition/#what-it-does","title":"What it does","text":"<p>Checks for 1 blank line between nested function or class definitions.</p>","tags":["E306"]},{"location":"rules/blank-lines-before-nested-definition/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends using blank lines as follows:</p> <ul> <li>Two blank lines are expected between functions and classes</li> <li>One blank line is expected between methods of a class.</li> </ul>","tags":["E306"]},{"location":"rules/blank-lines-before-nested-definition/#example","title":"Example","text":"<pre><code>def outer():\ndef inner():\npass\ndef inner2():\npass\n</code></pre> <p>Use instead:</p> <pre><code>def outer():\ndef inner():\npass\ndef inner2():\npass\n</code></pre>","tags":["E306"]},{"location":"rules/blank-lines-before-nested-definition/#typing-stub-files-pyi","title":"Typing stub files (<code>.pyi</code>)","text":"<p>The typing style guide recommends to not use blank lines between classes and functions except to group them. That's why this rule is not enabled in typing stub files.</p>","tags":["E306"]},{"location":"rules/blank-lines-before-nested-definition/#references","title":"References","text":"<ul> <li>PEP 8: Blank Lines</li> <li>Flake 8 rule</li> <li>Typing Style Guide</li> </ul>","tags":["E306"]},{"location":"rules/blank-lines-between-header-and-content/","title":"blank-lines-between-header-and-content (D412)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D412"]},{"location":"rules/blank-lines-between-header-and-content/#what-it-does","title":"What it does","text":"<p>Checks for docstring sections that contain blank lines between a section header and a section body.</p>","tags":["D412"]},{"location":"rules/blank-lines-between-header-and-content/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline docstrings.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body. There should be no blank lines between a section header and a section body.</p>","tags":["D412"]},{"location":"rules/blank-lines-between-header-and-content/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D412"]},{"location":"rules/blank-lines-between-header-and-content/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D412"]},{"location":"rules/blank-lines-top-level/","title":"blank-lines-top-level (E302)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E302"]},{"location":"rules/blank-lines-top-level/#what-it-does","title":"What it does","text":"<p>Checks for missing blank lines between top level functions and classes.</p>","tags":["E302"]},{"location":"rules/blank-lines-top-level/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends exactly two blank lines between top level functions and classes.</p> <p>The rule respects the <code>lint.isort.lines-after-imports</code> setting when determining the required number of blank lines between top-level <code>import</code> statements and function or class definitions for compatibility with isort.</p>","tags":["E302"]},{"location":"rules/blank-lines-top-level/#example","title":"Example","text":"<pre><code>def func1():\npass\ndef func2():\npass\n</code></pre> <p>Use instead:</p> <pre><code>def func1():\npass\ndef func2():\npass\n</code></pre>","tags":["E302"]},{"location":"rules/blank-lines-top-level/#typing-stub-files-pyi","title":"Typing stub files (<code>.pyi</code>)","text":"<p>The typing style guide recommends to not use blank lines between classes and functions except to group them. That's why this rule is not enabled in typing stub files.</p>","tags":["E302"]},{"location":"rules/blank-lines-top-level/#options","title":"Options","text":"<ul> <li><code>lint.isort.lines-after-imports</code></li> </ul>","tags":["E302"]},{"location":"rules/blank-lines-top-level/#references","title":"References","text":"<ul> <li>PEP 8: Blank Lines</li> <li>Flake 8 rule</li> <li>Typing Style Guide</li> </ul>","tags":["E302"]},{"location":"rules/blanket-noqa/","title":"blanket-noqa (PGH004)","text":"<p>Derived from the pygrep-hooks linter.</p> <p>Fix is sometimes available.</p>","tags":["PGH004"]},{"location":"rules/blanket-noqa/#what-it-does","title":"What it does","text":"<p>Check for <code>noqa</code> annotations that suppress all diagnostics, as opposed to targeting specific diagnostics.</p>","tags":["PGH004"]},{"location":"rules/blanket-noqa/#why-is-this-bad","title":"Why is this bad?","text":"<p>Suppressing all diagnostics can hide issues in the code.</p> <p>Blanket <code>noqa</code> annotations are also more difficult to interpret and maintain, as the annotation does not clarify which diagnostics are intended to be suppressed.</p> <p>In preview, this rule also checks for blanket file-level annotations (e.g., <code># ruff: noqa</code>, as opposed to <code># ruff: noqa: F401</code>).</p>","tags":["PGH004"]},{"location":"rules/blanket-noqa/#example","title":"Example","text":"<pre><code>from .base import *  # noqa\n</code></pre> <p>Use instead:</p> <pre><code>from .base import *  # noqa: F403\n</code></pre>","tags":["PGH004"]},{"location":"rules/blanket-noqa/#fix-safety","title":"Fix safety","text":"<p>This rule will attempt to fix blanket <code>noqa</code> annotations that appear to be unintentional. For example, given <code># noqa F401</code>, the rule will suggest inserting a colon, as in <code># noqa: F401</code>.</p> <p>While modifying <code>noqa</code> comments is generally safe, doing so may introduce additional diagnostics.</p>","tags":["PGH004"]},{"location":"rules/blanket-noqa/#references","title":"References","text":"<ul> <li>Ruff documentation</li> </ul>","tags":["PGH004"]},{"location":"rules/blanket-type-ignore/","title":"Blanket type ignore","text":"<p>description: Check for <code>type: ignore</code> annotations that suppress all type warnings, as tags: - PGH003</p>"},{"location":"rules/blanket-type-ignore/#blanket-type-ignore-pgh003","title":"blanket-type-ignore (PGH003)","text":"<p>Derived from the pygrep-hooks linter.</p>"},{"location":"rules/blanket-type-ignore/#what-it-does","title":"What it does","text":"<p>Check for <code>type: ignore</code> annotations that suppress all type warnings, as opposed to targeting specific type warnings.</p>"},{"location":"rules/blanket-type-ignore/#why-is-this-bad","title":"Why is this bad?","text":"<p>Suppressing all warnings can hide issues in the code.</p> <p>Blanket <code>type: ignore</code> annotations are also more difficult to interpret and maintain, as the annotation does not clarify which warnings are intended to be suppressed.</p>"},{"location":"rules/blanket-type-ignore/#example","title":"Example","text":"<pre><code>from foo import secrets  # type: ignore\n</code></pre> <p>Use instead:</p> <pre><code>from foo import secrets  # type: ignore[attr-defined]\n</code></pre>"},{"location":"rules/blanket-type-ignore/#references","title":"References","text":"<p>Mypy supports a built-in setting to enforce that all <code>type: ignore</code> annotations include an error code, akin to enabling this rule:</p> <pre><code>[tool.mypy]\nenable_error_code = [\"ignore-without-code\"]\n</code></pre>"},{"location":"rules/blind-except/","title":"blind-except (BLE001)","text":"<p>Derived from the flake8-blind-except linter.</p>","tags":["BLE001"]},{"location":"rules/blind-except/#what-it-does","title":"What it does","text":"<p>Checks for <code>except</code> clauses that catch all exceptions.  This includes bare <code>except</code>, <code>except BaseException</code> and <code>except Exception</code>.</p>","tags":["BLE001"]},{"location":"rules/blind-except/#why-is-this-bad","title":"Why is this bad?","text":"<p>Overly broad <code>except</code> clauses can lead to unexpected behavior, such as catching <code>KeyboardInterrupt</code> or <code>SystemExit</code> exceptions that prevent the user from exiting the program.</p> <p>Instead of catching all exceptions, catch only those that are expected to be raised in the <code>try</code> block.</p>","tags":["BLE001"]},{"location":"rules/blind-except/#example","title":"Example","text":"<pre><code>try:\nfoo()\nexcept BaseException:\n...\n</code></pre> <p>Use instead:</p> <pre><code>try:\nfoo()\nexcept FileNotFoundError:\n...\n</code></pre> <p>Exceptions that are re-raised will not be flagged, as they're expected to be caught elsewhere:</p> <pre><code>try:\nfoo()\nexcept BaseException:\nraise\n</code></pre> <p>Exceptions that are logged via <code>logging.exception()</code> or <code>logging.error()</code> with <code>exc_info</code> enabled will not be flagged, as this is a common pattern for propagating exception traces:</p> <pre><code>try:\nfoo()\nexcept BaseException:\nlogging.exception(\"Something went wrong\")\n</code></pre>","tags":["BLE001"]},{"location":"rules/blind-except/#references","title":"References","text":"<ul> <li>Python documentation: The <code>try</code> statement</li> <li>Python documentation: Exception hierarchy</li> <li>PEP 8: Programming Recommendations on bare <code>except</code></li> </ul>","tags":["BLE001"]},{"location":"rules/blocking-http-call-in-async-function/","title":"blocking-http-call-in-async-function (ASYNC210)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC210"]},{"location":"rules/blocking-http-call-in-async-function/#what-it-does","title":"What it does","text":"<p>Checks that async functions do not contain blocking HTTP calls.</p>","tags":["ASYNC210"]},{"location":"rules/blocking-http-call-in-async-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Blocking an async function via a blocking HTTP call will block the entire event loop, preventing it from executing other tasks while waiting for the HTTP response, negating the benefits of asynchronous programming.</p> <p>Instead of making a blocking HTTP call, use an asynchronous HTTP client library such as <code>aiohttp</code> or <code>httpx</code>.</p>","tags":["ASYNC210"]},{"location":"rules/blocking-http-call-in-async-function/#example","title":"Example","text":"<pre><code>async def fetch():\nurllib.request.urlopen(\"https://example.com/foo/bar\").read()\n</code></pre> <p>Use instead:</p> <pre><code>async def fetch():\nasync with aiohttp.ClientSession() as session:\nasync with session.get(\"https://example.com/foo/bar\") as resp:\n...\n</code></pre>","tags":["ASYNC210"]},{"location":"rules/blocking-open-call-in-async-function/","title":"blocking-open-call-in-async-function (ASYNC230)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC230"]},{"location":"rules/blocking-open-call-in-async-function/#what-it-does","title":"What it does","text":"<p>Checks that async functions do not open files with blocking methods like <code>open</code>.</p>","tags":["ASYNC230"]},{"location":"rules/blocking-open-call-in-async-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Blocking an async function via a blocking call will block the entire event loop, preventing it from executing other tasks while waiting for the call to complete, negating the benefits of asynchronous programming.</p> <p>Instead of making a blocking call, use an equivalent asynchronous library or function.</p>","tags":["ASYNC230"]},{"location":"rules/blocking-open-call-in-async-function/#example","title":"Example","text":"<pre><code>async def foo():\nwith open(\"bar.txt\") as f:\ncontents = f.read()\n</code></pre> <p>Use instead:</p> <pre><code>import anyio\nasync def foo():\nasync with await anyio.open_file(\"bar.txt\") as f:\ncontents = await f.read()\n</code></pre>","tags":["ASYNC230"]},{"location":"rules/blocking-sleep-in-async-function/","title":"blocking-sleep-in-async-function (ASYNC251)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC251"]},{"location":"rules/blocking-sleep-in-async-function/#what-it-does","title":"What it does","text":"<p>Checks that async functions do not call <code>time.sleep</code>.</p>","tags":["ASYNC251"]},{"location":"rules/blocking-sleep-in-async-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Blocking an async function via a <code>time.sleep</code> call will block the entire event loop, preventing it from executing other tasks while waiting for the <code>time.sleep</code>, negating the benefits of asynchronous programming.</p> <p>Instead of <code>time.sleep</code>, use <code>asyncio.sleep</code>.</p>","tags":["ASYNC251"]},{"location":"rules/blocking-sleep-in-async-function/#example","title":"Example","text":"<pre><code>async def fetch():\ntime.sleep(1)\n</code></pre> <p>Use instead:</p> <pre><code>async def fetch():\nawait asyncio.sleep(1)\n</code></pre>","tags":["ASYNC251"]},{"location":"rules/boolean-chained-comparison/","title":"boolean-chained-comparison (PLR1716)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR1716"]},{"location":"rules/boolean-chained-comparison/#what-it-does","title":"What it does","text":"<p>Check for chained boolean operations that can be simplified.</p>","tags":["PLR1716"]},{"location":"rules/boolean-chained-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>Refactoring the code will improve readability for these cases.</p>","tags":["PLR1716"]},{"location":"rules/boolean-chained-comparison/#example","title":"Example","text":"<pre><code>a = int(input())\nb = int(input())\nc = int(input())\nif a &lt; b and b &lt; c:\npass\n</code></pre> <p>Use instead:</p> <pre><code>a = int(input())\nb = int(input())\nc = int(input())\nif a &lt; b &lt; c:\npass\n</code></pre>","tags":["PLR1716"]},{"location":"rules/boolean-default-value-positional-argument/","title":"boolean-default-value-positional-argument (FBT002)","text":"<p>Derived from the flake8-boolean-trap linter.</p>","tags":["FBT002"]},{"location":"rules/boolean-default-value-positional-argument/#what-it-does","title":"What it does","text":"<p>Checks for the use of boolean positional arguments in function definitions, as determined by the presence of a boolean default value.</p>","tags":["FBT002"]},{"location":"rules/boolean-default-value-positional-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Calling a function with boolean positional arguments is confusing as the meaning of the boolean value is not clear to the caller and to future readers of the code.</p> <p>The use of a boolean will also limit the function to only two possible behaviors, which makes the function difficult to extend in the future.</p> <p>Instead, consider refactoring into separate implementations for the <code>True</code> and <code>False</code> cases, using an <code>Enum</code>, or making the argument a keyword-only argument, to force callers to be explicit when providing the argument.</p>","tags":["FBT002"]},{"location":"rules/boolean-default-value-positional-argument/#example","title":"Example","text":"<pre><code>from math import ceil, floor\ndef round_number(number, up=True):\nreturn ceil(number) if up else floor(number)\nround_number(1.5, True)  # What does `True` mean?\nround_number(1.5, False)  # What does `False` mean?\n</code></pre> <p>Instead, refactor into separate implementations:</p> <pre><code>from math import ceil, floor\ndef round_up(number):\nreturn ceil(number)\ndef round_down(number):\nreturn floor(number)\nround_up(1.5)\nround_down(1.5)\n</code></pre> <p>Or, refactor to use an <code>Enum</code>:</p> <pre><code>from enum import Enum\nclass RoundingMethod(Enum):\nUP = 1\nDOWN = 2\ndef round_number(value, method):\nreturn ceil(number) if method is RoundingMethod.UP else floor(number)\nround_number(1.5, RoundingMethod.UP)\nround_number(1.5, RoundingMethod.DOWN)\n</code></pre> <p>Or, make the argument a keyword-only argument:</p> <pre><code>from math import ceil, floor\ndef round_number(number, *, up=True):\nreturn ceil(number) if up else floor(number)\nround_number(1.5, up=True)\nround_number(1.5, up=False)\n</code></pre>","tags":["FBT002"]},{"location":"rules/boolean-default-value-positional-argument/#references","title":"References","text":"<ul> <li>Python documentation: Calls</li> <li>How to Avoid \u201cThe Boolean Trap\u201d by Adam Johnson</li> </ul>","tags":["FBT002"]},{"location":"rules/boolean-positional-value-in-call/","title":"boolean-positional-value-in-call (FBT003)","text":"<p>Derived from the flake8-boolean-trap linter.</p>","tags":["FBT003"]},{"location":"rules/boolean-positional-value-in-call/#what-it-does","title":"What it does","text":"<p>Checks for boolean positional arguments in function calls.</p> <p>Some functions are whitelisted by default. To extend the list of allowed calls configure the <code>lint.flake8-boolean-trap.extend-allowed-calls</code> option.</p>","tags":["FBT003"]},{"location":"rules/boolean-positional-value-in-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>Calling a function with boolean positional arguments is confusing as the meaning of the boolean value is not clear to the caller, and to future readers of the code.</p>","tags":["FBT003"]},{"location":"rules/boolean-positional-value-in-call/#example","title":"Example","text":"<pre><code>def func(flag: bool) -&gt; None: ...\nfunc(True)\n</code></pre> <p>Use instead:</p> <pre><code>def func(flag: bool) -&gt; None: ...\nfunc(flag=True)\n</code></pre>","tags":["FBT003"]},{"location":"rules/boolean-positional-value-in-call/#options","title":"Options","text":"<ul> <li><code>lint.flake8-boolean-trap.extend-allowed-calls</code></li> </ul>","tags":["FBT003"]},{"location":"rules/boolean-positional-value-in-call/#references","title":"References","text":"<ul> <li>Python documentation: Calls</li> <li>How to Avoid \u201cThe Boolean Trap\u201d by Adam Johnson</li> </ul>","tags":["FBT003"]},{"location":"rules/boolean-type-hint-positional-argument/","title":"boolean-type-hint-positional-argument (FBT001)","text":"<p>Derived from the flake8-boolean-trap linter.</p>","tags":["FBT001"]},{"location":"rules/boolean-type-hint-positional-argument/#what-it-does","title":"What it does","text":"<p>Checks for the use of boolean positional arguments in function definitions, as determined by the presence of a <code>bool</code> type hint.</p>","tags":["FBT001"]},{"location":"rules/boolean-type-hint-positional-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Calling a function with boolean positional arguments is confusing as the meaning of the boolean value is not clear to the caller and to future readers of the code.</p> <p>The use of a boolean will also limit the function to only two possible behaviors, which makes the function difficult to extend in the future.</p> <p>Instead, consider refactoring into separate implementations for the <code>True</code> and <code>False</code> cases, using an <code>Enum</code>, or making the argument a keyword-only argument, to force callers to be explicit when providing the argument.</p> <p>Dunder methods that define operators are exempt from this rule, as are setters and <code>@override</code> definitions.</p> <p>In preview, this rule will also flag annotations that include boolean variants, like <code>bool | int</code>.</p>","tags":["FBT001"]},{"location":"rules/boolean-type-hint-positional-argument/#example","title":"Example","text":"<pre><code>from math import ceil, floor\ndef round_number(number: float, up: bool) -&gt; int:\nreturn ceil(number) if up else floor(number)\nround_number(1.5, True)  # What does `True` mean?\nround_number(1.5, False)  # What does `False` mean?\n</code></pre> <p>Instead, refactor into separate implementations:</p> <pre><code>from math import ceil, floor\ndef round_up(number: float) -&gt; int:\nreturn ceil(number)\ndef round_down(number: float) -&gt; int:\nreturn floor(number)\nround_up(1.5)\nround_down(1.5)\n</code></pre> <p>Or, refactor to use an <code>Enum</code>:</p> <pre><code>from enum import Enum\nclass RoundingMethod(Enum):\nUP = 1\nDOWN = 2\ndef round_number(value: float, method: RoundingMethod) -&gt; float: ...\n</code></pre> <p>Or, make the argument a keyword-only argument:</p> <pre><code>from math import ceil, floor\ndef round_number(number: float, *, up: bool) -&gt; int:\nreturn ceil(number) if up else floor(number)\nround_number(1.5, up=True)\nround_number(1.5, up=False)\n</code></pre>","tags":["FBT001"]},{"location":"rules/boolean-type-hint-positional-argument/#references","title":"References","text":"<ul> <li>Python documentation: Calls</li> <li>How to Avoid \u201cThe Boolean Trap\u201d by Adam Johnson</li> </ul>","tags":["FBT001"]},{"location":"rules/break-outside-loop/","title":"break-outside-loop (F701)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F701"]},{"location":"rules/break-outside-loop/#what-it-does","title":"What it does","text":"<p>Checks for <code>break</code> statements outside of loops.</p>","tags":["F701"]},{"location":"rules/break-outside-loop/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of a <code>break</code> statement outside of a <code>for</code> or <code>while</code> loop will raise a <code>SyntaxError</code>.</p>","tags":["F701"]},{"location":"rules/break-outside-loop/#example","title":"Example","text":"<pre><code>def foo():\nbreak\n</code></pre>","tags":["F701"]},{"location":"rules/break-outside-loop/#references","title":"References","text":"<ul> <li>Python documentation: <code>break</code></li> </ul>","tags":["F701"]},{"location":"rules/builtin-argument-shadowing/","title":"builtin-argument-shadowing (A002)","text":"<p>Derived from the flake8-builtins linter.</p>","tags":["A002"]},{"location":"rules/builtin-argument-shadowing/#what-it-does","title":"What it does","text":"<p>Checks for function arguments that use the same names as builtins.</p>","tags":["A002"]},{"location":"rules/builtin-argument-shadowing/#why-is-this-bad","title":"Why is this bad?","text":"<p>Reusing a builtin name for the name of an argument increases the difficulty of reading and maintaining the code, and can cause non-obvious errors, as readers may mistake the argument for the builtin and vice versa.</p> <p>Builtins can be marked as exceptions to this rule via the <code>lint.flake8-builtins.builtins-ignorelist</code> configuration option.</p>","tags":["A002"]},{"location":"rules/builtin-argument-shadowing/#example","title":"Example","text":"<pre><code>def remove_duplicates(list, list2):\nresult = set()\nfor value in list:\nresult.add(value)\nfor value in list2:\nresult.add(value)\nreturn list(result)  # TypeError: 'list' object is not callable\n</code></pre> <p>Use instead:</p> <pre><code>def remove_duplicates(list1, list2):\nresult = set()\nfor value in list1:\nresult.add(value)\nfor value in list2:\nresult.add(value)\nreturn list(result)\n</code></pre>","tags":["A002"]},{"location":"rules/builtin-argument-shadowing/#options","title":"Options","text":"<ul> <li><code>lint.flake8-builtins.builtins-ignorelist</code></li> </ul>","tags":["A002"]},{"location":"rules/builtin-argument-shadowing/#references","title":"References","text":"<ul> <li>Is it bad practice to use a built-in function name as an attribute or method identifier?</li> <li>Why is it a bad idea to name a variable <code>id</code> in Python?</li> </ul>","tags":["A002"]},{"location":"rules/builtin-attribute-shadowing/","title":"builtin-attribute-shadowing (A003)","text":"<p>Derived from the flake8-builtins linter.</p>","tags":["A003"]},{"location":"rules/builtin-attribute-shadowing/#what-it-does","title":"What it does","text":"<p>Checks for class attributes and methods that use the same names as Python builtins.</p>","tags":["A003"]},{"location":"rules/builtin-attribute-shadowing/#why-is-this-bad","title":"Why is this bad?","text":"<p>Reusing a builtin name for the name of an attribute increases the difficulty of reading and maintaining the code, and can cause non-obvious errors, as readers may mistake the attribute for the builtin and vice versa.</p> <p>Since methods and class attributes typically cannot be referenced directly from outside the class scope, this rule only applies to those methods and attributes that both shadow a builtin and are referenced from within the class scope, as in the following example, where the <code>list[int]</code> return type annotation resolves to the <code>list</code> method, rather than the builtin:</p> <pre><code>class Class:\n@staticmethod\ndef list() -&gt; None:\npass\n@staticmethod\ndef repeat(value: int, times: int) -&gt; list[int]:\nreturn [value] * times\n</code></pre> <p>Builtins can be marked as exceptions to this rule via the <code>lint.flake8-builtins.builtins-ignorelist</code> configuration option, or converted to the appropriate dunder method. Methods decorated with <code>@typing.override</code> or <code>@typing_extensions.override</code> are also ignored.</p>","tags":["A003"]},{"location":"rules/builtin-attribute-shadowing/#example","title":"Example","text":"<pre><code>class Class:\n@staticmethod\ndef list() -&gt; None:\npass\n@staticmethod\ndef repeat(value: int, times: int) -&gt; list[int]:\nreturn [value] * times\n</code></pre>","tags":["A003"]},{"location":"rules/builtin-attribute-shadowing/#options","title":"Options","text":"<ul> <li><code>lint.flake8-builtins.builtins-ignorelist</code></li> </ul>","tags":["A003"]},{"location":"rules/builtin-import-shadowing/","title":"builtin-import-shadowing (A004)","text":"<p>Derived from the flake8-builtins linter.</p>","tags":["A004"]},{"location":"rules/builtin-import-shadowing/#what-it-does","title":"What it does","text":"<p>Checks for imports that use the same names as builtins.</p>","tags":["A004"]},{"location":"rules/builtin-import-shadowing/#why-is-this-bad","title":"Why is this bad?","text":"<p>Reusing a builtin for the name of an import increases the difficulty of reading and maintaining the code, and can cause non-obvious errors, as readers may mistake the variable for the builtin and vice versa.</p> <p>Builtins can be marked as exceptions to this rule via the <code>lint.flake8-builtins.builtins-ignorelist</code> configuration option.</p>","tags":["A004"]},{"location":"rules/builtin-import-shadowing/#example","title":"Example","text":"<pre><code>from rich import print\nprint(\"Some message\")\n</code></pre> <p>Use instead:</p> <pre><code>from rich import print as rich_print\nrich_print(\"Some message\")\n</code></pre> <p>or:</p> <pre><code>import rich\nrich.print(\"Some message\")\n</code></pre>","tags":["A004"]},{"location":"rules/builtin-import-shadowing/#options","title":"Options","text":"<ul> <li><code>lint.flake8-builtins.builtins-ignorelist</code></li> <li><code>target-version</code></li> </ul>","tags":["A004"]},{"location":"rules/builtin-lambda-argument-shadowing/","title":"builtin-lambda-argument-shadowing (A006)","text":"<p>Derived from the flake8-builtins linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["A006"]},{"location":"rules/builtin-lambda-argument-shadowing/#what-it-does","title":"What it does","text":"<p>Checks for lambda arguments that use the same names as Python builtins.</p>","tags":["A006"]},{"location":"rules/builtin-lambda-argument-shadowing/#why-is-this-bad","title":"Why is this bad?","text":"<p>Reusing a builtin name for the name of a lambda argument increases the difficulty of reading and maintaining the code, and can cause non-obvious errors, as readers may mistake the variable for the builtin and vice versa.</p> <p>Builtins can be marked as exceptions to this rule via the <code>lint.flake8-builtins.builtins-ignorelist</code> configuration option.</p>","tags":["A006"]},{"location":"rules/builtin-lambda-argument-shadowing/#options","title":"Options","text":"<ul> <li><code>lint.flake8-builtins.builtins-ignorelist</code></li> </ul>","tags":["A006"]},{"location":"rules/builtin-module-shadowing/","title":"builtin-module-shadowing (A005)","text":"<p>Derived from the flake8-builtins linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["A005"]},{"location":"rules/builtin-module-shadowing/#what-it-does","title":"What it does","text":"<p>Checks for modules that use the same names as Python builtin modules.</p>","tags":["A005"]},{"location":"rules/builtin-module-shadowing/#why-is-this-bad","title":"Why is this bad?","text":"<p>Reusing a builtin module name for the name of a module increases the difficulty of reading and maintaining the code, and can cause non-obvious errors, as readers may mistake the variable for the builtin and vice versa.</p> <p>Builtin modules can be marked as exceptions to this rule via the <code>lint.flake8-builtins.builtins-allowed-modules</code> configuration option.</p>","tags":["A005"]},{"location":"rules/builtin-module-shadowing/#options","title":"Options","text":"<ul> <li><code>lint.flake8-builtins.builtins-allowed-modules</code></li> </ul>","tags":["A005"]},{"location":"rules/builtin-open/","title":"builtin-open (PTH123)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH123"]},{"location":"rules/builtin-open/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>open</code> builtin.</p>","tags":["PTH123"]},{"location":"rules/builtin-open/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation. When possible, using <code>Path</code> object methods such as <code>Path.open()</code> can improve readability over the <code>open</code> builtin.</p>","tags":["PTH123"]},{"location":"rules/builtin-open/#examples","title":"Examples","text":"<pre><code>with open(\"f1.py\", \"wb\") as fp:\n...\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nwith Path(\"f1.py\").open(\"wb\") as fp:\n...\n</code></pre>","tags":["PTH123"]},{"location":"rules/builtin-open/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.open</code></li> <li>Python documentation: <code>open</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH123"]},{"location":"rules/builtin-variable-shadowing/","title":"builtin-variable-shadowing (A001)","text":"<p>Derived from the flake8-builtins linter.</p>","tags":["A001"]},{"location":"rules/builtin-variable-shadowing/#what-it-does","title":"What it does","text":"<p>Checks for variable (and function) assignments that use the same names as builtins.</p>","tags":["A001"]},{"location":"rules/builtin-variable-shadowing/#why-is-this-bad","title":"Why is this bad?","text":"<p>Reusing a builtin name for the name of a variable increases the difficulty of reading and maintaining the code, and can cause non-obvious errors, as readers may mistake the variable for the builtin and vice versa.</p> <p>Builtins can be marked as exceptions to this rule via the <code>lint.flake8-builtins.builtins-ignorelist</code> configuration option.</p>","tags":["A001"]},{"location":"rules/builtin-variable-shadowing/#example","title":"Example","text":"<pre><code>def find_max(list_of_lists):\nmax = 0\nfor flat_list in list_of_lists:\nfor value in flat_list:\nmax = max(max, value)  # TypeError: 'int' object is not callable\nreturn max\n</code></pre> <p>Use instead:</p> <pre><code>def find_max(list_of_lists):\nresult = 0\nfor flat_list in list_of_lists:\nfor value in flat_list:\nresult = max(result, value)\nreturn result\n</code></pre>","tags":["A001"]},{"location":"rules/builtin-variable-shadowing/#options","title":"Options","text":"<ul> <li><code>lint.flake8-builtins.builtins-ignorelist</code></li> </ul>","tags":["A001"]},{"location":"rules/builtin-variable-shadowing/#references","title":"References","text":"<ul> <li>Why is it a bad idea to name a variable <code>id</code> in Python?</li> </ul>","tags":["A001"]},{"location":"rules/byte-string-usage/","title":"byte-string-usage (PYI057)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI057"]},{"location":"rules/byte-string-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>typing.ByteString</code> or <code>collections.abc.ByteString</code>.</p>","tags":["PYI057"]},{"location":"rules/byte-string-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>ByteString</code> has been deprecated since Python 3.9 and will be removed in Python 3.14. The Python documentation recommends using either <code>collections.abc.Buffer</code> (or the <code>typing_extensions</code> backport on Python &lt;3.12) or a union like <code>bytes | bytearray | memoryview</code> instead.</p>","tags":["PYI057"]},{"location":"rules/byte-string-usage/#example","title":"Example","text":"<pre><code>from typing import ByteString\n</code></pre> <p>Use instead:</p> <pre><code>from collections.abc import Buffer\n</code></pre>","tags":["PYI057"]},{"location":"rules/byte-string-usage/#references","title":"References","text":"<ul> <li>Python documentation: The <code>ByteString</code> type</li> </ul>","tags":["PYI057"]},{"location":"rules/cached-instance-method/","title":"cached-instance-method (B019)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B019"]},{"location":"rules/cached-instance-method/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>functools.lru_cache</code> and <code>functools.cache</code> decorators on methods.</p>","tags":["B019"]},{"location":"rules/cached-instance-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using the <code>functools.lru_cache</code> and <code>functools.cache</code> decorators on methods can lead to memory leaks, as the global cache will retain a reference to the instance, preventing it from being garbage collected.</p> <p>Instead, refactor the method to depend only on its arguments and not on the instance of the class, or use the <code>@lru_cache</code> decorator on a function outside of the class.</p> <p>This rule ignores instance methods on enumeration classes, as enum members are singletons.</p>","tags":["B019"]},{"location":"rules/cached-instance-method/#example","title":"Example","text":"<pre><code>from functools import lru_cache\ndef square(x: int) -&gt; int:\nreturn x * x\nclass Number:\nvalue: int\n@lru_cache\ndef squared(self):\nreturn square(self.value)\n</code></pre> <p>Use instead:</p> <pre><code>from functools import lru_cache\n@lru_cache\ndef square(x: int) -&gt; int:\nreturn x * x\nclass Number:\nvalue: int\ndef squared(self):\nreturn square(self.value)\n</code></pre>","tags":["B019"]},{"location":"rules/cached-instance-method/#references","title":"References","text":"<ul> <li>Python documentation: <code>functools.lru_cache</code></li> <li>Python documentation: <code>functools.cache</code></li> <li>don't lru_cache methods!</li> </ul>","tags":["B019"]},{"location":"rules/call-date-fromtimestamp/","title":"call-date-fromtimestamp (DTZ012)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ012"]},{"location":"rules/call-date-fromtimestamp/#what-it-does","title":"What it does","text":"<p>Checks for usage of <code>datetime.date.fromtimestamp()</code>.</p>","tags":["DTZ012"]},{"location":"rules/call-date-fromtimestamp/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python datetime objects can be naive or timezone-aware. While an aware object represents a specific moment in time, a naive object does not contain enough information to unambiguously locate itself relative to other datetime objects. Since this can lead to errors, it is recommended to always use timezone-aware objects.</p> <p><code>datetime.date.fromtimestamp(ts)</code> returns a naive datetime object. Instead, use <code>datetime.datetime.fromtimestamp(ts, tz=...)</code> to create a timezone-aware object.</p>","tags":["DTZ012"]},{"location":"rules/call-date-fromtimestamp/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.date.fromtimestamp(946684800)\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime.fromtimestamp(946684800, tz=datetime.timezone.utc)\n</code></pre> <p>Or, for Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime.fromtimestamp(946684800, tz=datetime.UTC)\n</code></pre>","tags":["DTZ012"]},{"location":"rules/call-date-fromtimestamp/#references","title":"References","text":"<ul> <li>Python documentation: Aware and Naive Objects</li> </ul>","tags":["DTZ012"]},{"location":"rules/call-date-today/","title":"call-date-today (DTZ011)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ011"]},{"location":"rules/call-date-today/#what-it-does","title":"What it does","text":"<p>Checks for usage of <code>datetime.date.today()</code>.</p>","tags":["DTZ011"]},{"location":"rules/call-date-today/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python datetime objects can be naive or timezone-aware. While an aware object represents a specific moment in time, a naive object does not contain enough information to unambiguously locate itself relative to other datetime objects. Since this can lead to errors, it is recommended to always use timezone-aware objects.</p> <p><code>datetime.date.today</code> returns a naive datetime object. Instead, use <code>datetime.datetime.now(tz=...).date()</code> to create a timezone-aware object.</p>","tags":["DTZ011"]},{"location":"rules/call-date-today/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime.today()\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.timezone.utc).date()\n</code></pre> <p>Or, for Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.UTC).date()\n</code></pre>","tags":["DTZ011"]},{"location":"rules/call-date-today/#references","title":"References","text":"<ul> <li>Python documentation: Aware and Naive Objects</li> </ul>","tags":["DTZ011"]},{"location":"rules/call-datetime-fromtimestamp/","title":"call-datetime-fromtimestamp (DTZ006)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ006"]},{"location":"rules/call-datetime-fromtimestamp/#what-it-does","title":"What it does","text":"<p>Checks for usage of <code>datetime.datetime.fromtimestamp()</code> that do not specify a timezone.</p>","tags":["DTZ006"]},{"location":"rules/call-datetime-fromtimestamp/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python datetime objects can be naive or timezone-aware. While an aware object represents a specific moment in time, a naive object does not contain enough information to unambiguously locate itself relative to other datetime objects. Since this can lead to errors, it is recommended to always use timezone-aware objects.</p> <p><code>datetime.datetime.fromtimestamp(ts)</code> or <code>datetime.datetime.fromtimestampe(ts, tz=None)</code> returns a naive datetime object. Instead, use <code>datetime.datetime.fromtimestamp(ts, tz=&lt;timezone&gt;)</code> to create a timezone-aware object.</p>","tags":["DTZ006"]},{"location":"rules/call-datetime-fromtimestamp/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime.fromtimestamp(946684800)\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime.fromtimestamp(946684800, tz=datetime.timezone.utc)\n</code></pre> <p>Or, on Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime.fromtimestamp(946684800, tz=datetime.UTC)\n</code></pre>","tags":["DTZ006"]},{"location":"rules/call-datetime-fromtimestamp/#references","title":"References","text":"<ul> <li>Python documentation: Aware and Naive Objects</li> </ul>","tags":["DTZ006"]},{"location":"rules/call-datetime-now-without-tzinfo/","title":"call-datetime-now-without-tzinfo (DTZ005)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ005"]},{"location":"rules/call-datetime-now-without-tzinfo/#what-it-does","title":"What it does","text":"<p>Checks for usages of <code>datetime.datetime.now()</code> that do not specify a timezone.</p>","tags":["DTZ005"]},{"location":"rules/call-datetime-now-without-tzinfo/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python datetime objects can be naive or timezone-aware. While an aware object represents a specific moment in time, a naive object does not contain enough information to unambiguously locate itself relative to other datetime objects. Since this can lead to errors, it is recommended to always use timezone-aware objects.</p> <p><code>datetime.datetime.now()</code> or <code>datetime.datetime.now(tz=None)</code> returns a naive datetime object. Instead, use <code>datetime.datetime.now(tz=&lt;timezone&gt;)</code> to create a timezone-aware object.</p>","tags":["DTZ005"]},{"location":"rules/call-datetime-now-without-tzinfo/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime.now()\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.timezone.utc)\n</code></pre> <p>Or, for Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.UTC)\n</code></pre>","tags":["DTZ005"]},{"location":"rules/call-datetime-now-without-tzinfo/#references","title":"References","text":"<ul> <li>Python documentation: Aware and Naive Objects</li> </ul>","tags":["DTZ005"]},{"location":"rules/call-datetime-strptime-without-zone/","title":"call-datetime-strptime-without-zone (DTZ007)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ007"]},{"location":"rules/call-datetime-strptime-without-zone/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>datetime.datetime.strptime()</code> that lead to naive datetime objects.</p>","tags":["DTZ007"]},{"location":"rules/call-datetime-strptime-without-zone/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python datetime objects can be naive or timezone-aware. While an aware object represents a specific moment in time, a naive object does not contain enough information to unambiguously locate itself relative to other datetime objects. Since this can lead to errors, it is recommended to always use timezone-aware objects.</p> <p><code>datetime.datetime.strptime()</code> without <code>%z</code> returns a naive datetime object. Follow it with <code>.replace(tzinfo=&lt;timezone&gt;)</code> or <code>.astimezone()</code>.</p>","tags":["DTZ007"]},{"location":"rules/call-datetime-strptime-without-zone/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime.strptime(\"2022/01/31\", \"%Y/%m/%d\")\n</code></pre> <p>Instead, use <code>.replace(tzinfo=&lt;timezone&gt;)</code>:</p> <pre><code>import datetime\ndatetime.datetime.strptime(\"2022/01/31\", \"%Y/%m/%d\").replace(\ntzinfo=datetime.timezone.utc\n)\n</code></pre> <p>Or, use <code>.astimezone()</code>:</p> <pre><code>import datetime\ndatetime.datetime.strptime(\"2022/01/31\", \"%Y/%m/%d\").astimezone(datetime.timezone.utc)\n</code></pre> <p>On Python 3.11 and later, <code>datetime.timezone.utc</code> can be replaced with <code>datetime.UTC</code>.</p>","tags":["DTZ007"]},{"location":"rules/call-datetime-strptime-without-zone/#references","title":"References","text":"<ul> <li>Python documentation: Aware and Naive Objects</li> <li>Python documentation: <code>strftime()</code> and <code>strptime()</code> Behavior</li> </ul>","tags":["DTZ007"]},{"location":"rules/call-datetime-today/","title":"call-datetime-today (DTZ002)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ002"]},{"location":"rules/call-datetime-today/#what-it-does","title":"What it does","text":"<p>Checks for usage of <code>datetime.datetime.today()</code>.</p>","tags":["DTZ002"]},{"location":"rules/call-datetime-today/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>datetime</code> objects are \"naive\" by default, in that they do not include timezone information. \"Naive\" objects are easy to understand, but ignore some aspects of reality, which can lead to subtle bugs. Timezone-aware <code>datetime</code> objects are preferred, as they represent a specific moment in time, unlike \"naive\" objects.</p> <p><code>datetime.datetime.today()</code> creates a \"naive\" object; instead, use <code>datetime.datetime.now(tz=...)</code> to create a timezone-aware object.</p>","tags":["DTZ002"]},{"location":"rules/call-datetime-today/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime.today()\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.timezone.utc)\n</code></pre> <p>Or, for Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.UTC)\n</code></pre>","tags":["DTZ002"]},{"location":"rules/call-datetime-utcfromtimestamp/","title":"call-datetime-utcfromtimestamp (DTZ004)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ004"]},{"location":"rules/call-datetime-utcfromtimestamp/#what-it-does","title":"What it does","text":"<p>Checks for usage of <code>datetime.datetime.utcfromtimestamp()</code>.</p>","tags":["DTZ004"]},{"location":"rules/call-datetime-utcfromtimestamp/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python datetime objects can be naive or timezone-aware. While an aware object represents a specific moment in time, a naive object does not contain enough information to unambiguously locate itself relative to other datetime objects. Since this can lead to errors, it is recommended to always use timezone-aware objects.</p> <p><code>datetime.datetime.utcfromtimestamp()</code> returns a naive datetime object; instead, use <code>datetime.datetime.fromtimestamp(ts, tz=...)</code> to create a timezone-aware object.</p>","tags":["DTZ004"]},{"location":"rules/call-datetime-utcfromtimestamp/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime.utcfromtimestamp(946684800)\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime.fromtimestamp(946684800, tz=datetime.timezone.utc)\n</code></pre> <p>Or, on Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime.fromtimestamp(946684800, tz=datetime.UTC)\n</code></pre>","tags":["DTZ004"]},{"location":"rules/call-datetime-utcfromtimestamp/#references","title":"References","text":"<ul> <li>Python documentation: Aware and Naive Objects</li> </ul>","tags":["DTZ004"]},{"location":"rules/call-datetime-utcnow/","title":"call-datetime-utcnow (DTZ003)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ003"]},{"location":"rules/call-datetime-utcnow/#what-it-does","title":"What it does","text":"<p>Checks for usage of <code>datetime.datetime.utcnow()</code>.</p>","tags":["DTZ003"]},{"location":"rules/call-datetime-utcnow/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python datetime objects can be naive or timezone-aware. While an aware object represents a specific moment in time, a naive object does not contain enough information to unambiguously locate itself relative to other datetime objects. Since this can lead to errors, it is recommended to always use timezone-aware objects.</p> <p><code>datetime.datetime.utcnow()</code> returns a naive datetime object; instead, use <code>datetime.datetime.now(tz=...)</code> to create a timezone-aware object.</p>","tags":["DTZ003"]},{"location":"rules/call-datetime-utcnow/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime.utcnow()\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.timezone.utc)\n</code></pre> <p>Or, for Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime.now(tz=datetime.UTC)\n</code></pre>","tags":["DTZ003"]},{"location":"rules/call-datetime-utcnow/#references","title":"References","text":"<ul> <li>Python documentation: Aware and Naive Objects</li> </ul>","tags":["DTZ003"]},{"location":"rules/call-datetime-without-tzinfo/","title":"call-datetime-without-tzinfo (DTZ001)","text":"<p>Derived from the flake8-datetimez linter.</p>","tags":["DTZ001"]},{"location":"rules/call-datetime-without-tzinfo/#what-it-does","title":"What it does","text":"<p>Checks for <code>datetime</code> instantiations that do not specify a timezone.</p>","tags":["DTZ001"]},{"location":"rules/call-datetime-without-tzinfo/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>datetime</code> objects are \"naive\" by default, in that they do not include timezone information. \"Naive\" objects are easy to understand, but ignore some aspects of reality, which can lead to subtle bugs. Timezone-aware <code>datetime</code> objects are preferred, as they represent a specific moment in time, unlike \"naive\" objects.</p> <p>By providing a non-<code>None</code> value for <code>tzinfo</code>, a <code>datetime</code> can be made timezone-aware.</p>","tags":["DTZ001"]},{"location":"rules/call-datetime-without-tzinfo/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.datetime(2000, 1, 1, 0, 0, 0)\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.datetime(2000, 1, 1, 0, 0, 0, tzinfo=datetime.timezone.utc)\n</code></pre> <p>Or, on Python 3.11 and later:</p> <pre><code>import datetime\ndatetime.datetime(2000, 1, 1, 0, 0, 0, tzinfo=datetime.UTC)\n</code></pre>","tags":["DTZ001"]},{"location":"rules/call-with-shell-equals-true/","title":"call-with-shell-equals-true (S604)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S604"]},{"location":"rules/call-with-shell-equals-true/#what-it-does","title":"What it does","text":"<p>Checks for method calls that set the <code>shell</code> parameter to <code>true</code> or another truthy value when invoking a subprocess.</p>","tags":["S604"]},{"location":"rules/call-with-shell-equals-true/#why-is-this-bad","title":"Why is this bad?","text":"<p>Setting the <code>shell</code> parameter to <code>true</code> or another truthy value when invoking a subprocess can introduce security vulnerabilities, as it allows shell metacharacters and whitespace to be passed to child processes, potentially leading to shell injection attacks.</p> <p>It is recommended to avoid using <code>shell=True</code> unless absolutely necessary and, when used, to ensure that all inputs are properly sanitized and quoted to prevent such vulnerabilities.</p>","tags":["S604"]},{"location":"rules/call-with-shell-equals-true/#known-problems","title":"Known problems","text":"<p>Prone to false positives as it is triggered on any function call with a <code>shell=True</code> parameter.</p>","tags":["S604"]},{"location":"rules/call-with-shell-equals-true/#example","title":"Example","text":"<pre><code>import subprocess\nuser_input = input(\"Enter a command: \")\nsubprocess.run(user_input, shell=True)\n</code></pre>","tags":["S604"]},{"location":"rules/call-with-shell-equals-true/#references","title":"References","text":"<ul> <li>Python documentation: Security Considerations</li> </ul>","tags":["S604"]},{"location":"rules/camelcase-imported-as-acronym/","title":"camelcase-imported-as-acronym (N817)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N817"]},{"location":"rules/camelcase-imported-as-acronym/#what-it-does","title":"What it does","text":"<p>Checks for <code>CamelCase</code> imports that are aliased as acronyms.</p>","tags":["N817"]},{"location":"rules/camelcase-imported-as-acronym/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends naming conventions for classes, functions, constants, and more. The use of inconsistent naming styles between import and alias names may lead readers to expect an import to be of another type (e.g., confuse a Python class with a constant).</p> <p>Import aliases should thus follow the same naming style as the member being imported.</p> <p>Note that this rule is distinct from <code>camelcase-imported-as-constant</code> to accommodate selective enforcement.</p> <p>Also note that import aliases following an import convention according to the <code>lint.flake8-import-conventions.aliases</code> option are allowed.</p>","tags":["N817"]},{"location":"rules/camelcase-imported-as-acronym/#example","title":"Example","text":"<pre><code>from example import MyClassName as MCN\n</code></pre> <p>Use instead:</p> <pre><code>from example import MyClassName\n</code></pre>","tags":["N817"]},{"location":"rules/camelcase-imported-as-acronym/#options","title":"Options","text":"<ul> <li><code>lint.flake8-import-conventions.aliases</code></li> </ul>","tags":["N817"]},{"location":"rules/camelcase-imported-as-constant/","title":"camelcase-imported-as-constant (N814)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N814"]},{"location":"rules/camelcase-imported-as-constant/#what-it-does","title":"What it does","text":"<p>Checks for <code>CamelCase</code> imports that are aliased to constant-style names.</p>","tags":["N814"]},{"location":"rules/camelcase-imported-as-constant/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends naming conventions for classes, functions, constants, and more. The use of inconsistent naming styles between import and alias names may lead readers to expect an import to be of another type (e.g., confuse a Python class with a constant).</p> <p>Import aliases should thus follow the same naming style as the member being imported.</p>","tags":["N814"]},{"location":"rules/camelcase-imported-as-constant/#example","title":"Example","text":"<pre><code>from example import MyClassName as MY_CLASS_NAME\n</code></pre> <p>Use instead:</p> <pre><code>from example import MyClassName\n</code></pre>","tags":["N814"]},{"location":"rules/camelcase-imported-as-lowercase/","title":"camelcase-imported-as-lowercase (N813)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N813"]},{"location":"rules/camelcase-imported-as-lowercase/#what-it-does","title":"What it does","text":"<p>Checks for <code>CamelCase</code> imports that are aliased to lowercase names.</p>","tags":["N813"]},{"location":"rules/camelcase-imported-as-lowercase/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends naming conventions for classes, functions, constants, and more. The use of inconsistent naming styles between import and alias names may lead readers to expect an import to be of another type (e.g., confuse a Python class with a constant).</p> <p>Import aliases should thus follow the same naming style as the member being imported.</p>","tags":["N813"]},{"location":"rules/camelcase-imported-as-lowercase/#example","title":"Example","text":"<pre><code>from example import MyClassName as myclassname\n</code></pre> <p>Use instead:</p> <pre><code>from example import MyClassName\n</code></pre>","tags":["N813"]},{"location":"rules/cancel-scope-no-checkpoint/","title":"cancel-scope-no-checkpoint (ASYNC100)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC100"]},{"location":"rules/cancel-scope-no-checkpoint/#what-it-does","title":"What it does","text":"<p>Checks for timeout context managers which do not contain a checkpoint.</p> <p>For the purposes of this check, <code>yield</code> is considered a checkpoint, since checkpoints may occur in the caller to which we yield.</p>","tags":["ASYNC100"]},{"location":"rules/cancel-scope-no-checkpoint/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some asynchronous context managers, such as <code>asyncio.timeout</code> and <code>trio.move_on_after</code>, have no effect unless they contain a checkpoint. The use of such context managers without an <code>await</code>, <code>async with</code> or <code>async for</code> statement is likely a mistake.</p>","tags":["ASYNC100"]},{"location":"rules/cancel-scope-no-checkpoint/#example","title":"Example","text":"<pre><code>async def func():\nasync with asyncio.timeout(2):\ndo_something()\n</code></pre> <p>Use instead:</p> <pre><code>async def func():\nasync with asyncio.timeout(2):\ndo_something()\nawait awaitable()\n</code></pre>","tags":["ASYNC100"]},{"location":"rules/cancel-scope-no-checkpoint/#references","title":"References","text":"<ul> <li><code>asyncio</code> timeouts</li> <li><code>anyio</code> timeouts</li> <li><code>trio</code> timeouts</li> </ul>","tags":["ASYNC100"]},{"location":"rules/capitalize-section-name/","title":"capitalize-section-name (D405)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D405"]},{"location":"rules/capitalize-section-name/#what-it-does","title":"What it does","text":"<p>Checks for section headers in docstrings that do not begin with capital letters.</p>","tags":["D405"]},{"location":"rules/capitalize-section-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>For stylistic consistency, all section headers in a docstring should be capitalized.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections. Each section typically has a header and a body.</p> <p>This rule is enabled when using the <code>numpy</code> and <code>google</code> conventions, and disabled when using the <code>pep257</code> convention.</p>","tags":["D405"]},{"location":"rules/capitalize-section-name/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    returns:\n        Speed as distance divided by time.\n    raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D405"]},{"location":"rules/capitalize-section-name/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D405"]},{"location":"rules/capitalize-section-name/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D405"]},{"location":"rules/check-and-remove-from-set/","title":"check-and-remove-from-set (FURB132)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB132"]},{"location":"rules/check-and-remove-from-set/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>set.remove</code> that can be replaced with <code>set.discard</code>.</p>","tags":["FURB132"]},{"location":"rules/check-and-remove-from-set/#why-is-this-bad","title":"Why is this bad?","text":"<p>If an element should be removed from a set if it is present, it is more succinct and idiomatic to use <code>discard</code>.</p>","tags":["FURB132"]},{"location":"rules/check-and-remove-from-set/#known-problems","title":"Known problems","text":"<p>This rule is prone to false negatives due to type inference limitations, as it will only detect sets that are instantiated as literals or annotated with a type annotation.</p>","tags":["FURB132"]},{"location":"rules/check-and-remove-from-set/#example","title":"Example","text":"<pre><code>nums = {123, 456}\nif 123 in nums:\nnums.remove(123)\n</code></pre> <p>Use instead:</p> <pre><code>nums = {123, 456}\nnums.discard(123)\n</code></pre>","tags":["FURB132"]},{"location":"rules/check-and-remove-from-set/#references","title":"References","text":"<ul> <li>Python documentation: <code>set.discard()</code></li> </ul>","tags":["FURB132"]},{"location":"rules/collapsible-else-if/","title":"collapsible-else-if (PLR5501)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLR5501"]},{"location":"rules/collapsible-else-if/#what-it-does","title":"What it does","text":"<p>Checks for <code>else</code> blocks that consist of a single <code>if</code> statement.</p>","tags":["PLR5501"]},{"location":"rules/collapsible-else-if/#why-is-this-bad","title":"Why is this bad?","text":"<p>If an <code>else</code> block contains a single <code>if</code> statement, it can be collapsed into an <code>elif</code>, thus reducing the indentation level.</p>","tags":["PLR5501"]},{"location":"rules/collapsible-else-if/#example","title":"Example","text":"<pre><code>def check_sign(value: int) -&gt; None:\nif value &gt; 0:\nprint(\"Number is positive.\")\nelse:\nif value &lt; 0:\nprint(\"Number is negative.\")\nelse:\nprint(\"Number is zero.\")\n</code></pre> <p>Use instead:</p> <pre><code>def check_sign(value: int) -&gt; None:\nif value &gt; 0:\nprint(\"Number is positive.\")\nelif value &lt; 0:\nprint(\"Number is negative.\")\nelse:\nprint(\"Number is zero.\")\n</code></pre>","tags":["PLR5501"]},{"location":"rules/collapsible-else-if/#references","title":"References","text":"<ul> <li>Python documentation: <code>if</code> Statements</li> </ul>","tags":["PLR5501"]},{"location":"rules/collapsible-if/","title":"collapsible-if (SIM102)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM102"]},{"location":"rules/collapsible-if/#what-it-does","title":"What it does","text":"<p>Checks for nested <code>if</code> statements that can be collapsed into a single <code>if</code> statement.</p>","tags":["SIM102"]},{"location":"rules/collapsible-if/#why-is-this-bad","title":"Why is this bad?","text":"<p>Nesting <code>if</code> statements leads to deeper indentation and makes code harder to read. Instead, combine the conditions into a single <code>if</code> statement with an <code>and</code> operator.</p>","tags":["SIM102"]},{"location":"rules/collapsible-if/#example","title":"Example","text":"<pre><code>if foo:\nif bar:\n...\n</code></pre> <p>Use instead:</p> <pre><code>if foo and bar:\n...\n</code></pre>","tags":["SIM102"]},{"location":"rules/collapsible-if/#references","title":"References","text":"<ul> <li>Python documentation: The <code>if</code> statement</li> <li>Python documentation: Boolean operations</li> </ul>","tags":["SIM102"]},{"location":"rules/collection-literal-concatenation/","title":"collection-literal-concatenation (RUF005)","text":"<p>Fix is sometimes available.</p>","tags":["RUF005"]},{"location":"rules/collection-literal-concatenation/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>+</code> operator to concatenate collections.</p>","tags":["RUF005"]},{"location":"rules/collection-literal-concatenation/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the <code>+</code> operator can be used to concatenate collections (e.g., <code>x + y</code> to concatenate the lists <code>x</code> and <code>y</code>).</p> <p>However, collections can be concatenated more efficiently using the unpacking operator (e.g., <code>[*x, *y]</code> to concatenate <code>x</code> and <code>y</code>).</p> <p>Prefer the unpacking operator to concatenate collections, as it is more readable and flexible. The <code>*</code> operator can unpack any iterable, whereas <code>+</code> operates only on particular sequences which, in many cases, must be of the same type.</p>","tags":["RUF005"]},{"location":"rules/collection-literal-concatenation/#example","title":"Example","text":"<pre><code>foo = [2, 3, 4]\nbar = [1] + foo + [5, 6]\n</code></pre> <p>Use instead:</p> <pre><code>foo = [2, 3, 4]\nbar = [1, *foo, 5, 6]\n</code></pre>","tags":["RUF005"]},{"location":"rules/collection-literal-concatenation/#references","title":"References","text":"<ul> <li>PEP 448 \u2013 Additional Unpacking Generalizations</li> <li>Python documentation: Sequence Types \u2014 <code>list</code>, <code>tuple</code>, <code>range</code></li> </ul>","tags":["RUF005"]},{"location":"rules/collections-named-tuple/","title":"collections-named-tuple (PYI024)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI024"]},{"location":"rules/collections-named-tuple/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>collections.namedtuple</code> in stub files.</p>","tags":["PYI024"]},{"location":"rules/collections-named-tuple/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>typing.NamedTuple</code> is the \"typed version\" of <code>collections.namedtuple</code>.</p> <p>Inheriting from <code>typing.NamedTuple</code> creates a custom <code>tuple</code> subclass in the same way as using the <code>collections.namedtuple</code> factory function. However, using <code>typing.NamedTuple</code> allows you to provide a type annotation for each field in the class. This means that type checkers will have more information to work with, and will be able to analyze your code more precisely.</p>","tags":["PYI024"]},{"location":"rules/collections-named-tuple/#example","title":"Example","text":"<pre><code>from collections import namedtuple\nperson = namedtuple(\"Person\", [\"name\", \"age\"])\n</code></pre> <p>Use instead:</p> <pre><code>from typing import NamedTuple\nclass Person(NamedTuple):\nname: str\nage: int\n</code></pre>","tags":["PYI024"]},{"location":"rules/commented-out-code/","title":"commented-out-code (ERA001)","text":"<p>Derived from the eradicate linter.</p>","tags":["ERA001"]},{"location":"rules/commented-out-code/#what-it-does","title":"What it does","text":"<p>Checks for commented-out Python code.</p>","tags":["ERA001"]},{"location":"rules/commented-out-code/#why-is-this-bad","title":"Why is this bad?","text":"<p>Commented-out code is dead code, and is often included inadvertently. It should be removed.</p>","tags":["ERA001"]},{"location":"rules/commented-out-code/#known-problems","title":"Known problems","text":"<p>Prone to false positives when checking comments that resemble Python code, but are not actually Python code (#4845).</p>","tags":["ERA001"]},{"location":"rules/commented-out-code/#example","title":"Example","text":"<pre><code># print(\"Hello, world!\")\n</code></pre>","tags":["ERA001"]},{"location":"rules/commented-out-code/#options","title":"Options","text":"<ul> <li><code>lint.task-tags</code></li> </ul>","tags":["ERA001"]},{"location":"rules/compare-to-empty-string/","title":"compare-to-empty-string (PLC1901)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLC1901"]},{"location":"rules/compare-to-empty-string/#what-it-does","title":"What it does","text":"<p>Checks for comparisons to empty strings.</p>","tags":["PLC1901"]},{"location":"rules/compare-to-empty-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>An empty string is falsy, so it is unnecessary to compare it to <code>\"\"</code>. If the value can be something else Python considers falsy, such as <code>None</code>, <code>0</code>, or another empty container, then the code is not equivalent.</p>","tags":["PLC1901"]},{"location":"rules/compare-to-empty-string/#known-problems","title":"Known problems","text":"<p>High false positive rate, as the check is context-insensitive and does not consider the type of the variable being compared (#4282).</p>","tags":["PLC1901"]},{"location":"rules/compare-to-empty-string/#example","title":"Example","text":"<pre><code>x: str = ...\nif x == \"\":\nprint(\"x is empty\")\n</code></pre> <p>Use instead:</p> <pre><code>x: str = ...\nif not x:\nprint(\"x is empty\")\n</code></pre>","tags":["PLC1901"]},{"location":"rules/compare-to-empty-string/#references","title":"References","text":"<ul> <li>Python documentation: Truth Value Testing</li> </ul>","tags":["PLC1901"]},{"location":"rules/compare-with-tuple/","title":"compare-with-tuple (SIM109)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM109"]},{"location":"rules/compare-with-tuple/#what-it-does","title":"What it does","text":"<p>Checks for boolean expressions that contain multiple equality comparisons to the same value.</p>","tags":["SIM109"]},{"location":"rules/compare-with-tuple/#why-is-this-bad","title":"Why is this bad?","text":"<p>To check if an object is equal to any one of multiple values, it's more concise to use the <code>in</code> operator with a tuple of values.</p>","tags":["SIM109"]},{"location":"rules/compare-with-tuple/#example","title":"Example","text":"<pre><code>if foo == x or foo == y:\n...\n</code></pre> <p>Use instead:</p> <pre><code>if foo in (x, y):\n...\n</code></pre>","tags":["SIM109"]},{"location":"rules/compare-with-tuple/#references","title":"References","text":"<ul> <li>Python documentation: Membership test operations</li> </ul>","tags":["SIM109"]},{"location":"rules/comparison-of-constant/","title":"comparison-of-constant (PLR0133)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR0133"]},{"location":"rules/comparison-of-constant/#what-it-does","title":"What it does","text":"<p>Checks for comparisons between constants.</p>","tags":["PLR0133"]},{"location":"rules/comparison-of-constant/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparing two constants will always resolve to the same value, so the comparison is redundant. Instead, the expression should be replaced with the result of the comparison.</p>","tags":["PLR0133"]},{"location":"rules/comparison-of-constant/#example","title":"Example","text":"<pre><code>foo = 1 == 1\n</code></pre> <p>Use instead:</p> <pre><code>foo = True\n</code></pre>","tags":["PLR0133"]},{"location":"rules/comparison-of-constant/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> </ul>","tags":["PLR0133"]},{"location":"rules/comparison-with-itself/","title":"comparison-with-itself (PLR0124)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR0124"]},{"location":"rules/comparison-with-itself/#what-it-does","title":"What it does","text":"<p>Checks for operations that compare a name to itself.</p>","tags":["PLR0124"]},{"location":"rules/comparison-with-itself/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparing a name to itself always results in the same value, and is likely a mistake.</p>","tags":["PLR0124"]},{"location":"rules/comparison-with-itself/#example","title":"Example","text":"<pre><code>foo == foo\n</code></pre> <p>In some cases, self-comparisons are used to determine whether a float is NaN. Instead, prefer <code>math.isnan</code>:</p> <pre><code>import math\nmath.isnan(foo)\n</code></pre>","tags":["PLR0124"]},{"location":"rules/comparison-with-itself/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> </ul>","tags":["PLR0124"]},{"location":"rules/complex-assignment-in-stub/","title":"complex-assignment-in-stub (PYI017)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI017"]},{"location":"rules/complex-assignment-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for assignments with multiple or non-name targets in stub files.</p>","tags":["PYI017"]},{"location":"rules/complex-assignment-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>In general, stub files should be thought of as \"data files\" for a type checker, and are not intended to be executed. As such, it's useful to enforce that only a subset of Python syntax is allowed in a stub file, to ensure that everything in the stub is unambiguous for the type checker.</p> <p>The need to perform multi-assignment, or assignment to a non-name target, likely indicates a misunderstanding of how stub files are intended to be used.</p>","tags":["PYI017"]},{"location":"rules/complex-assignment-in-stub/#example","title":"Example","text":"<pre><code>from typing import TypeAlias\na = b = int\nclass Klass: ...\nKlass.X: TypeAlias = int\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypeAlias\na: TypeAlias = int\nb: TypeAlias = int\nclass Klass:\nX: TypeAlias = int\n</code></pre>","tags":["PYI017"]},{"location":"rules/complex-if-statement-in-stub/","title":"complex-if-statement-in-stub (PYI002)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI002"]},{"location":"rules/complex-if-statement-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> statements with complex conditionals in stubs.</p>","tags":["PYI002"]},{"location":"rules/complex-if-statement-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type checkers understand simple conditionals to express variations between different Python versions and platforms. However, complex tests may not be understood by a type checker, leading to incorrect inferences when they analyze your code.</p>","tags":["PYI002"]},{"location":"rules/complex-if-statement-in-stub/#example","title":"Example","text":"<pre><code>import sys\nif (3, 10) &lt;= sys.version_info &lt; (3, 12): ...\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info &gt;= (3, 10) and sys.version_info &lt; (3, 12): ...\n</code></pre>","tags":["PYI002"]},{"location":"rules/complex-if-statement-in-stub/#references","title":"References","text":"<ul> <li>Typing documentation: Version and platform checking</li> </ul>","tags":["PYI002"]},{"location":"rules/complex-structure/","title":"complex-structure (C901)","text":"<p>Derived from the mccabe linter.</p>","tags":["C901"]},{"location":"rules/complex-structure/#what-it-does","title":"What it does","text":"<p>Checks for functions with a high <code>McCabe</code> complexity.</p>","tags":["C901"]},{"location":"rules/complex-structure/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>McCabe</code> complexity of a function is a measure of the complexity of the control flow graph of the function. It is calculated by adding one to the number of decision points in the function. A decision point is a place in the code where the program has a choice of two or more paths to follow.</p> <p>Functions with a high complexity are hard to understand and maintain.</p>","tags":["C901"]},{"location":"rules/complex-structure/#example","title":"Example","text":"<pre><code>def foo(a, b, c):\nif a:\nif b:\nif c:\nreturn 1\nelse:\nreturn 2\nelse:\nreturn 3\nelse:\nreturn 4\n</code></pre> <p>Use instead:</p> <pre><code>def foo(a, b, c):\nif not a:\nreturn 4\nif not b:\nreturn 3\nif not c:\nreturn 2\nreturn 1\n</code></pre>","tags":["C901"]},{"location":"rules/complex-structure/#options","title":"Options","text":"<ul> <li><code>lint.mccabe.max-complexity</code></li> </ul>","tags":["C901"]},{"location":"rules/constant-imported-as-non-constant/","title":"constant-imported-as-non-constant (N811)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N811"]},{"location":"rules/constant-imported-as-non-constant/#what-it-does","title":"What it does","text":"<p>Checks for constant imports that are aliased to non-constant-style names.</p>","tags":["N811"]},{"location":"rules/constant-imported-as-non-constant/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends naming conventions for classes, functions, constants, and more. The use of inconsistent naming styles between import and alias names may lead readers to expect an import to be of another type (e.g., confuse a Python class with a constant).</p> <p>Import aliases should thus follow the same naming style as the member being imported.</p>","tags":["N811"]},{"location":"rules/constant-imported-as-non-constant/#example","title":"Example","text":"<pre><code>from example import CONSTANT_VALUE as ConstantValue\n</code></pre> <p>Use instead:</p> <pre><code>from example import CONSTANT_VALUE\n</code></pre>","tags":["N811"]},{"location":"rules/continue-in-finally/","title":"continue-in-finally (PLE0116)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0116"]},{"location":"rules/continue-in-finally/#what-it-does","title":"What it does","text":"<p>Checks for <code>continue</code> statements inside <code>finally</code></p>","tags":["PLE0116"]},{"location":"rules/continue-in-finally/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>continue</code> statements were not allowed within <code>finally</code> clauses prior to Python 3.8. Using a <code>continue</code> statement within a <code>finally</code> clause can cause a <code>SyntaxError</code>.</p>","tags":["PLE0116"]},{"location":"rules/continue-in-finally/#example","title":"Example","text":"<pre><code>while True:\ntry:\npass\nfinally:\ncontinue\n</code></pre> <p>Use instead:</p> <pre><code>while True:\ntry:\npass\nexcept Exception:\npass\nelse:\ncontinue\n</code></pre>","tags":["PLE0116"]},{"location":"rules/continue-in-finally/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["PLE0116"]},{"location":"rules/continue-outside-loop/","title":"continue-outside-loop (F702)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F702"]},{"location":"rules/continue-outside-loop/#what-it-does","title":"What it does","text":"<p>Checks for <code>continue</code> statements outside of loops.</p>","tags":["F702"]},{"location":"rules/continue-outside-loop/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of a <code>continue</code> statement outside of a <code>for</code> or <code>while</code> loop will raise a <code>SyntaxError</code>.</p>","tags":["F702"]},{"location":"rules/continue-outside-loop/#example","title":"Example","text":"<pre><code>def foo():\ncontinue  # SyntaxError\n</code></pre>","tags":["F702"]},{"location":"rules/continue-outside-loop/#references","title":"References","text":"<ul> <li>Python documentation: <code>continue</code></li> </ul>","tags":["F702"]},{"location":"rules/convert-named-tuple-functional-to-class/","title":"convert-named-tuple-functional-to-class (UP014)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP014"]},{"location":"rules/convert-named-tuple-functional-to-class/#what-it-does","title":"What it does","text":"<p>Checks for <code>NamedTuple</code> declarations that use functional syntax.</p>","tags":["UP014"]},{"location":"rules/convert-named-tuple-functional-to-class/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>NamedTuple</code> subclasses can be defined either through a functional syntax (<code>Foo = NamedTuple(...)</code>) or a class syntax (<code>class Foo(NamedTuple): ...</code>).</p> <p>The class syntax is more readable and generally preferred over the functional syntax, which exists primarily for backwards compatibility with <code>collections.namedtuple</code>.</p>","tags":["UP014"]},{"location":"rules/convert-named-tuple-functional-to-class/#example","title":"Example","text":"<pre><code>from typing import NamedTuple\nFoo = NamedTuple(\"Foo\", [(\"a\", int), (\"b\", str)])\n</code></pre> <p>Use instead:</p> <pre><code>from typing import NamedTuple\nclass Foo(NamedTuple):\na: int\nb: str\n</code></pre>","tags":["UP014"]},{"location":"rules/convert-named-tuple-functional-to-class/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.NamedTuple</code></li> </ul>","tags":["UP014"]},{"location":"rules/convert-typed-dict-functional-to-class/","title":"convert-typed-dict-functional-to-class (UP013)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP013"]},{"location":"rules/convert-typed-dict-functional-to-class/#what-it-does","title":"What it does","text":"<p>Checks for <code>TypedDict</code> declarations that use functional syntax.</p>","tags":["UP013"]},{"location":"rules/convert-typed-dict-functional-to-class/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>TypedDict</code> subclasses can be defined either through a functional syntax (<code>Foo = TypedDict(...)</code>) or a class syntax (<code>class Foo(TypedDict): ...</code>).</p> <p>The class syntax is more readable and generally preferred over the functional syntax.</p>","tags":["UP013"]},{"location":"rules/convert-typed-dict-functional-to-class/#example","title":"Example","text":"<pre><code>from typing import TypedDict\nFoo = TypedDict(\"Foo\", {\"a\": int, \"b\": str})\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypedDict\nclass Foo(TypedDict):\na: int\nb: str\n</code></pre>","tags":["UP013"]},{"location":"rules/convert-typed-dict-functional-to-class/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.TypedDict</code></li> </ul>","tags":["UP013"]},{"location":"rules/create-subprocess-in-async-function/","title":"create-subprocess-in-async-function (ASYNC220)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC220"]},{"location":"rules/create-subprocess-in-async-function/#what-it-does","title":"What it does","text":"<p>Checks that async functions do not create subprocesses with blocking methods.</p>","tags":["ASYNC220"]},{"location":"rules/create-subprocess-in-async-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Blocking an async function via a blocking call will block the entire event loop, preventing it from executing other tasks while waiting for the call to complete, negating the benefits of asynchronous programming.</p> <p>Instead of making a blocking call, use an equivalent asynchronous library or function.</p>","tags":["ASYNC220"]},{"location":"rules/create-subprocess-in-async-function/#example","title":"Example","text":"<pre><code>async def foo():\nos.popen(cmd)\n</code></pre> <p>Use instead:</p> <pre><code>async def foo():\nasyncio.create_subprocess_shell(cmd)\n</code></pre>","tags":["ASYNC220"]},{"location":"rules/custom-type-var-return-type/","title":"custom-type-var-return-type (PYI019)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI019"]},{"location":"rules/custom-type-var-return-type/#what-it-does","title":"What it does","text":"<p>Checks for methods that define a custom <code>TypeVar</code> for their return type annotation instead of using <code>Self</code>.</p>","tags":["PYI019"]},{"location":"rules/custom-type-var-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>While the semantics are often identical, using <code>Self</code> is more intuitive and succinct (per PEP 673) than a custom <code>TypeVar</code>. For example, the use of <code>Self</code> will typically allow for the omission of type parameters on the <code>self</code> and <code>cls</code> arguments.</p> <p>This check currently applies to instance methods that return <code>self</code>, class methods that return an instance of <code>cls</code>, and <code>__new__</code> methods.</p>","tags":["PYI019"]},{"location":"rules/custom-type-var-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __new__(cls: type[_S], *args: str, **kwargs: int) -&gt; _S: ...\ndef foo(self: _S, arg: bytes) -&gt; _S: ...\n@classmethod\ndef bar(cls: type[_S], arg: int) -&gt; _S: ...\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Self\nclass Foo:\ndef __new__(cls, *args: str, **kwargs: int) -&gt; Self: ...\ndef foo(self, arg: bytes) -&gt; Self: ...\n@classmethod\ndef bar(cls, arg: int) -&gt; Self: ...\n</code></pre>","tags":["PYI019"]},{"location":"rules/custom-type-var-return-type/#fix-safety","title":"Fix safety","text":"<p>The fix is only available in stub files. It will try to remove all usages and declarations of the custom type variable. Pre-[PEP-695]-style declarations will not be removed.</p> <p>If a variable's annotation is too complex to handle, the fix will be marked as display only. Otherwise, it will be marked as safe.</p>","tags":["PYI019"]},{"location":"rules/dashed-underline-after-section/","title":"dashed-underline-after-section (D407)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D407"]},{"location":"rules/dashed-underline-after-section/#what-it-does","title":"What it does","text":"<p>Checks for section headers in docstrings that are not followed by underlines.</p>","tags":["D407"]},{"location":"rules/dashed-underline-after-section/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline numpy-style docstrings, and helps prevent incorrect syntax in docstrings using reStructuredText.</p> <p>Multiline numpy-style docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections. Each section has a section header and a section body, and the header should be followed by a series of underline characters in the following line.</p> <p>This rule enforces a consistent style for multiline numpy-style docstrings with sections. If your docstring uses reStructuredText, the rule also helps protect against incorrect reStructuredText syntax, which would cause errors if you tried to use a tool such as Sphinx to generate documentation from the docstring.</p> <p>This rule is enabled when using the <code>numpy</code> convention, and disabled when using the <code>google</code> or <code>pep257</code> conventions.</p>","tags":["D407"]},{"location":"rules/dashed-underline-after-section/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    float\n        Speed as distance divided by time.\n    Raises\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D407"]},{"location":"rules/dashed-underline-after-section/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D407"]},{"location":"rules/dashed-underline-after-section/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> </ul>","tags":["D407"]},{"location":"rules/datetime-min-max/","title":"datetime-min-max (DTZ901)","text":"<p>Derived from the flake8-datetimez linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["DTZ901"]},{"location":"rules/datetime-min-max/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>datetime.datetime.max</code> and <code>datetime.datetime.min</code>.</p>","tags":["DTZ901"]},{"location":"rules/datetime-min-max/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>datetime.max</code> and <code>datetime.min</code> are non-timezone-aware datetime objects.</p> <p>As such, operations on <code>datetime.max</code> and <code>datetime.min</code> may behave unexpectedly, as in:</p> <pre><code># Timezone: UTC-14\ndatetime.max.timestamp()  # ValueError: year 10000 is out of range\ndatetime.min.timestamp()  # ValueError: year 0 is out of range\n</code></pre>","tags":["DTZ901"]},{"location":"rules/datetime-min-max/#example","title":"Example","text":"<pre><code>datetime.max\n</code></pre> <p>Use instead:</p> <pre><code>datetime.max.replace(tzinfo=datetime.UTC)\n</code></pre>","tags":["DTZ901"]},{"location":"rules/datetime-timezone-utc/","title":"datetime-timezone-utc (UP017)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP017"]},{"location":"rules/datetime-timezone-utc/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>datetime.timezone.utc</code>.</p>","tags":["UP017"]},{"location":"rules/datetime-timezone-utc/#why-is-this-bad","title":"Why is this bad?","text":"<p>As of Python 3.11, <code>datetime.UTC</code> is an alias for <code>datetime.timezone.utc</code>. The alias is more readable and generally preferred over the full path.</p>","tags":["UP017"]},{"location":"rules/datetime-timezone-utc/#example","title":"Example","text":"<pre><code>import datetime\ndatetime.timezone.utc\n</code></pre> <p>Use instead:</p> <pre><code>import datetime\ndatetime.UTC\n</code></pre>","tags":["UP017"]},{"location":"rules/datetime-timezone-utc/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["UP017"]},{"location":"rules/datetime-timezone-utc/#references","title":"References","text":"<ul> <li>Python documentation: <code>datetime.UTC</code></li> </ul>","tags":["UP017"]},{"location":"rules/debugger/","title":"debugger (T100)","text":"<p>Derived from the flake8-debugger linter.</p>","tags":["T100"]},{"location":"rules/debugger/#what-it-does","title":"What it does","text":"<p>Checks for the presence of debugger calls and imports.</p>","tags":["T100"]},{"location":"rules/debugger/#why-is-this-bad","title":"Why is this bad?","text":"<p>Debugger calls and imports should be used for debugging purposes only. The presence of a debugger call or import in production code is likely a mistake and may cause unintended behavior, such as exposing sensitive information or causing the program to hang.</p> <p>Instead, consider using a logging library to log information about the program's state, and writing tests to verify that the program behaves as expected.</p>","tags":["T100"]},{"location":"rules/debugger/#example","title":"Example","text":"<pre><code>def foo():\nbreakpoint()\n</code></pre>","tags":["T100"]},{"location":"rules/debugger/#references","title":"References","text":"<ul> <li>Python documentation: <code>pdb</code> \u2014 The Python Debugger</li> <li>Python documentation: <code>logging</code> \u2014 Logging facility for Python</li> </ul>","tags":["T100"]},{"location":"rules/decimal-from-float-literal/","title":"decimal-from-float-literal (RUF032)","text":"<p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF032"]},{"location":"rules/decimal-from-float-literal/#what-it-does","title":"What it does","text":"<p>Checks for <code>Decimal</code> calls passing a float literal.</p>","tags":["RUF032"]},{"location":"rules/decimal-from-float-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p>Float literals have limited precision that can lead to unexpected results. The <code>Decimal</code> class is designed to handle numbers with fixed-point precision, so a string literal should be used instead.</p>","tags":["RUF032"]},{"location":"rules/decimal-from-float-literal/#example","title":"Example","text":"<pre><code>num = Decimal(1.2345)\n</code></pre> <p>Use instead:</p> <pre><code>num = Decimal(\"1.2345\")\n</code></pre>","tags":["RUF032"]},{"location":"rules/decimal-from-float-literal/#fix-safety","title":"Fix Safety","text":"<p>This rule's fix is marked as unsafe because it changes the underlying value of the <code>Decimal</code> instance that is constructed. This can lead to unexpected behavior if your program relies on the previous value (whether deliberately or not).</p>","tags":["RUF032"]},{"location":"rules/default-except-not-last/","title":"default-except-not-last (F707)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F707"]},{"location":"rules/default-except-not-last/#what-it-does","title":"What it does","text":"<p>Checks for <code>except</code> blocks that handle all exceptions, but are not the last <code>except</code> block in a <code>try</code> statement.</p>","tags":["F707"]},{"location":"rules/default-except-not-last/#why-is-this-bad","title":"Why is this bad?","text":"<p>When an exception is raised within a <code>try</code> block, the <code>except</code> blocks are evaluated in order, and the first matching block is executed. If an <code>except</code> block handles all exceptions, but isn't the last block, Python will raise a <code>SyntaxError</code>, as the following blocks would never be executed.</p>","tags":["F707"]},{"location":"rules/default-except-not-last/#example","title":"Example","text":"<pre><code>def reciprocal(n):\ntry:\nreciprocal = 1 / n\nexcept:\nprint(\"An exception occurred.\")\nexcept ZeroDivisionError:\nprint(\"Cannot divide by zero.\")\nelse:\nreturn reciprocal\n</code></pre> <p>Use instead:</p> <pre><code>def reciprocal(n):\ntry:\nreciprocal = 1 / n\nexcept ZeroDivisionError:\nprint(\"Cannot divide by zero.\")\nexcept:\nprint(\"An exception occurred.\")\nelse:\nreturn reciprocal\n</code></pre>","tags":["F707"]},{"location":"rules/default-except-not-last/#references","title":"References","text":"<ul> <li>Python documentation: <code>except</code> clause</li> </ul>","tags":["F707"]},{"location":"rules/default-factory-kwarg/","title":"default-factory-kwarg (RUF026)","text":"<p>Fix is sometimes available.</p>","tags":["RUF026"]},{"location":"rules/default-factory-kwarg/#what-it-does","title":"What it does","text":"<p>Checks for incorrect usages of <code>default_factory</code> as a keyword argument when initializing a <code>defaultdict</code>.</p>","tags":["RUF026"]},{"location":"rules/default-factory-kwarg/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>defaultdict</code> constructor accepts a callable as its first argument. For example, it's common to initialize a <code>defaultdict</code> with <code>int</code> or <code>list</code> via <code>defaultdict(int)</code> or <code>defaultdict(list)</code>, to create a dictionary that returns <code>0</code> or <code>[]</code> respectively when a key is missing.</p> <p>The default factory must be provided as a positional argument, as all keyword arguments to <code>defaultdict</code> are interpreted as initial entries in the dictionary. For example, <code>defaultdict(foo=1, bar=2)</code> will create a dictionary with <code>{\"foo\": 1, \"bar\": 2}</code> as its initial entries.</p> <p>As such, <code>defaultdict(default_factory=list)</code> will create a dictionary with <code>{\"default_factory\": list}</code> as its initial entry, instead of a dictionary that returns <code>[]</code> when a key is missing. Specifying a <code>default_factory</code> keyword argument is almost always a mistake, and one that type checkers can't reliably detect.</p>","tags":["RUF026"]},{"location":"rules/default-factory-kwarg/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as converting <code>default_factory</code> from a keyword to a positional argument will change the behavior of the code, even if the keyword argument was used erroneously.</p>","tags":["RUF026"]},{"location":"rules/default-factory-kwarg/#examples","title":"Examples","text":"<pre><code>defaultdict(default_factory=int)\ndefaultdict(default_factory=list)\n</code></pre> <p>Use instead:</p> <pre><code>defaultdict(int)\ndefaultdict(list)\n</code></pre>","tags":["RUF026"]},{"location":"rules/delete-full-slice/","title":"delete-full-slice (FURB131)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB131"]},{"location":"rules/delete-full-slice/#what-it-does","title":"What it does","text":"<p>Checks for <code>del</code> statements that delete the entire slice of a list or dictionary.</p>","tags":["FURB131"]},{"location":"rules/delete-full-slice/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is faster and more succinct to remove all items via the <code>clear()</code> method.</p>","tags":["FURB131"]},{"location":"rules/delete-full-slice/#known-problems","title":"Known problems","text":"<p>This rule is prone to false negatives due to type inference limitations, as it will only detect lists and dictionaries that are instantiated as literals or annotated with a type annotation.</p>","tags":["FURB131"]},{"location":"rules/delete-full-slice/#example","title":"Example","text":"<pre><code>names = {\"key\": \"value\"}\nnums = [1, 2, 3]\ndel names[:]\ndel nums[:]\n</code></pre> <p>Use instead:</p> <pre><code>names = {\"key\": \"value\"}\nnums = [1, 2, 3]\nnames.clear()\nnums.clear()\n</code></pre>","tags":["FURB131"]},{"location":"rules/delete-full-slice/#references","title":"References","text":"<ul> <li>Python documentation: Mutable Sequence Types</li> <li>Python documentation: <code>dict.clear()</code></li> </ul>","tags":["FURB131"]},{"location":"rules/deprecated-c-element-tree/","title":"deprecated-c-element-tree (UP023)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP023"]},{"location":"rules/deprecated-c-element-tree/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>xml.etree.cElementTree</code> module.</p>","tags":["UP023"]},{"location":"rules/deprecated-c-element-tree/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 3.3, <code>xml.etree.cElementTree</code> was deprecated in favor of <code>xml.etree.ElementTree</code>.</p>","tags":["UP023"]},{"location":"rules/deprecated-c-element-tree/#example","title":"Example","text":"<pre><code>from xml.etree import cElementTree\n</code></pre> <p>Use instead:</p> <pre><code>from xml.etree import ElementTree\n</code></pre>","tags":["UP023"]},{"location":"rules/deprecated-c-element-tree/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml.etree.ElementTree</code></li> </ul>","tags":["UP023"]},{"location":"rules/deprecated-import/","title":"deprecated-import (UP035)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP035"]},{"location":"rules/deprecated-import/#what-it-does","title":"What it does","text":"<p>Checks for uses of deprecated imports based on the minimum supported Python version.</p>","tags":["UP035"]},{"location":"rules/deprecated-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Deprecated imports may be removed in future versions of Python, and should be replaced with their new equivalents.</p> <p>Note that, in some cases, it may be preferable to continue importing members from <code>typing_extensions</code> even after they're added to the Python standard library, as <code>typing_extensions</code> can backport bugfixes and optimizations from later Python versions. This rule thus avoids flagging imports from <code>typing_extensions</code> in such cases.</p>","tags":["UP035"]},{"location":"rules/deprecated-import/#example","title":"Example","text":"<pre><code>from collections import Sequence\n</code></pre> <p>Use instead:</p> <pre><code>from collections.abc import Sequence\n</code></pre>","tags":["UP035"]},{"location":"rules/deprecated-log-warn/","title":"deprecated-log-warn (PGH002)","text":"<p>Derived from the pygrep-hooks linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p> <p>Fix is sometimes available.</p>","tags":["PGH002"]},{"location":"rules/deprecated-log-warn/#removed","title":"Removed","text":"<p>This rule is identical to G010 which should be used instead.</p>","tags":["PGH002"]},{"location":"rules/deprecated-log-warn/#what-it-does","title":"What it does","text":"<p>Check for usages of the deprecated <code>warn</code> method from the <code>logging</code> module.</p>","tags":["PGH002"]},{"location":"rules/deprecated-log-warn/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>warn</code> method is deprecated. Use <code>warning</code> instead.</p>","tags":["PGH002"]},{"location":"rules/deprecated-log-warn/#example","title":"Example","text":"<pre><code>import logging\ndef foo():\nlogging.warn(\"Something happened\")\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ndef foo():\nlogging.warning(\"Something happened\")\n</code></pre>","tags":["PGH002"]},{"location":"rules/deprecated-log-warn/#references","title":"References","text":"<ul> <li>Python documentation: <code>logger.Logger.warning</code></li> </ul>","tags":["PGH002"]},{"location":"rules/deprecated-mock-import/","title":"deprecated-mock-import (UP026)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP026"]},{"location":"rules/deprecated-mock-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>mock</code> module that should be replaced with <code>unittest.mock</code>.</p>","tags":["UP026"]},{"location":"rules/deprecated-mock-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Since Python 3.3, <code>mock</code> has been a part of the standard library as <code>unittest.mock</code>. The <code>mock</code> package is deprecated; use <code>unittest.mock</code> instead.</p>","tags":["UP026"]},{"location":"rules/deprecated-mock-import/#example","title":"Example","text":"<pre><code>import mock\n</code></pre> <p>Use instead:</p> <pre><code>from unittest import mock\n</code></pre>","tags":["UP026"]},{"location":"rules/deprecated-mock-import/#references","title":"References","text":"<ul> <li>Python documentation: <code>unittest.mock</code></li> <li>PyPI: <code>mock</code></li> </ul>","tags":["UP026"]},{"location":"rules/deprecated-unittest-alias/","title":"deprecated-unittest-alias (UP005)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP005"]},{"location":"rules/deprecated-unittest-alias/#what-it-does","title":"What it does","text":"<p>Checks for uses of deprecated methods from the <code>unittest</code> module.</p>","tags":["UP005"]},{"location":"rules/deprecated-unittest-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>unittest</code> module has deprecated aliases for some of its methods. The deprecated aliases were removed in Python 3.12. Instead of aliases, use their non-deprecated counterparts.</p>","tags":["UP005"]},{"location":"rules/deprecated-unittest-alias/#example","title":"Example","text":"<pre><code>from unittest import TestCase\nclass SomeTest(TestCase):\ndef test_something(self):\nself.assertEquals(1, 1)\n</code></pre> <p>Use instead:</p> <pre><code>from unittest import TestCase\nclass SomeTest(TestCase):\ndef test_something(self):\nself.assertEqual(1, 1)\n</code></pre>","tags":["UP005"]},{"location":"rules/deprecated-unittest-alias/#references","title":"References","text":"<ul> <li>Python 3.11 documentation: Deprecated aliases</li> </ul>","tags":["UP005"]},{"location":"rules/dict-get-with-none-default/","title":"dict-get-with-none-default (SIM910)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM910"]},{"location":"rules/dict-get-with-none-default/#what-it-does","title":"What it does","text":"<p>Checks for <code>dict.get()</code> calls that pass <code>None</code> as the default value.</p>","tags":["SIM910"]},{"location":"rules/dict-get-with-none-default/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>None</code> is the default value for <code>dict.get()</code>, so it is redundant to pass it explicitly.</p>","tags":["SIM910"]},{"location":"rules/dict-get-with-none-default/#example","title":"Example","text":"<pre><code>ages = {\"Tom\": 23, \"Maria\": 23, \"Dog\": 11}\nage = ages.get(\"Cat\", None)\n</code></pre> <p>Use instead:</p> <pre><code>ages = {\"Tom\": 23, \"Maria\": 23, \"Dog\": 11}\nage = ages.get(\"Cat\")\n</code></pre>","tags":["SIM910"]},{"location":"rules/dict-get-with-none-default/#references","title":"References","text":"<ul> <li>Python documentation: <code>dict.get</code></li> </ul>","tags":["SIM910"]},{"location":"rules/dict-index-missing-items/","title":"dict-index-missing-items (PLC0206)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC0206"]},{"location":"rules/dict-index-missing-items/#what-it-does","title":"What it does","text":"<p>Checks for dictionary iterations that extract the dictionary value via explicit indexing, instead of using <code>.items()</code>.</p>","tags":["PLC0206"]},{"location":"rules/dict-index-missing-items/#why-is-this-bad","title":"Why is this bad?","text":"<p>Iterating over a dictionary with <code>.items()</code> is semantically clearer and more efficient than extracting the value with the key.</p>","tags":["PLC0206"]},{"location":"rules/dict-index-missing-items/#example","title":"Example","text":"<pre><code>ORCHESTRA = {\n\"violin\": \"strings\",\n\"oboe\": \"woodwind\",\n\"tuba\": \"brass\",\n\"gong\": \"percussion\",\n}\nfor instrument in ORCHESTRA:\nprint(f\"{instrument}: {ORCHESTRA[instrument]}\")\n</code></pre> <p>Use instead:</p> <pre><code>ORCHESTRA = {\n\"violin\": \"strings\",\n\"oboe\": \"woodwind\",\n\"tuba\": \"brass\",\n\"gong\": \"percussion\",\n}\nfor instrument, section in ORCHESTRA.items():\nprint(f\"{instrument}: {section}\")\n</code></pre>","tags":["PLC0206"]},{"location":"rules/dict-iter-missing-items/","title":"dict-iter-missing-items (PLE1141)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLE1141"]},{"location":"rules/dict-iter-missing-items/#what-it-does","title":"What it does","text":"<p>Checks for dictionary unpacking in a for loop without calling <code>.items()</code>.</p>","tags":["PLE1141"]},{"location":"rules/dict-iter-missing-items/#why-is-this-bad","title":"Why is this bad?","text":"<p>When iterating over a dictionary in a for loop, if a dictionary is unpacked without calling <code>.items()</code>, it could lead to a runtime error if the keys are not a tuple of two elements.</p> <p>It is likely that you're looking for an iteration over (key, value) pairs which can only be achieved when calling <code>.items()</code>.</p>","tags":["PLE1141"]},{"location":"rules/dict-iter-missing-items/#example","title":"Example","text":"<pre><code>data = {\"Paris\": 2_165_423, \"New York City\": 8_804_190, \"Tokyo\": 13_988_129}\nfor city, population in data:\nprint(f\"{city} has population {population}.\")\n</code></pre> <p>Use instead:</p> <pre><code>data = {\"Paris\": 2_165_423, \"New York City\": 8_804_190, \"Tokyo\": 13_988_129}\nfor city, population in data.items():\nprint(f\"{city} has population {population}.\")\n## Known problems\nIf the dictionary key is a tuple, e.g.:\n```python\nd = {(1, 2): 3, (3, 4): 5}\nfor x, y in d:\nprint(x, y)\n</code></pre> <p>The tuple key is unpacked into <code>x</code> and <code>y</code> instead of the key and values. This means that the suggested fix of using <code>d.items()</code> would result in different runtime behavior. Ruff cannot consistently infer the type of a dictionary's keys.</p>","tags":["PLE1141"]},{"location":"rules/dict-iter-missing-items/#fix-safety","title":"Fix safety","text":"<p>Due to the known problem with tuple keys, this fix is unsafe.</p>","tags":["PLE1141"]},{"location":"rules/direct-logger-instantiation/","title":"direct-logger-instantiation (LOG001)","text":"<p>Derived from the flake8-logging linter.</p> <p>Fix is sometimes available.</p>","tags":["LOG001"]},{"location":"rules/direct-logger-instantiation/#what-it-does","title":"What it does","text":"<p>Checks for direct instantiation of <code>logging.Logger</code>, as opposed to using <code>logging.getLogger()</code>.</p>","tags":["LOG001"]},{"location":"rules/direct-logger-instantiation/#why-is-this-bad","title":"Why is this bad?","text":"<p>The Logger Objects documentation states that:</p> <p>Note that Loggers should NEVER be instantiated directly, but always through the module-level function <code>logging.getLogger(name)</code>.</p> <p>If a logger is directly instantiated, it won't be added to the logger tree, and will bypass all configuration. Messages logged to it will only be sent to the \"handler of last resort\", skipping any filtering or formatting.</p>","tags":["LOG001"]},{"location":"rules/direct-logger-instantiation/#example","title":"Example","text":"<pre><code>import logging\nlogger = logging.Logger(__name__)\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogger = logging.getLogger(__name__)\n</code></pre>","tags":["LOG001"]},{"location":"rules/django-all-with-model-form/","title":"django-all-with-model-form (DJ007)","text":"<p>Derived from the flake8-django linter.</p>","tags":["DJ007"]},{"location":"rules/django-all-with-model-form/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>fields = \"__all__\"</code> in Django <code>ModelForm</code> classes.</p>","tags":["DJ007"]},{"location":"rules/django-all-with-model-form/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a <code>ModelForm</code> includes the <code>fields = \"__all__\"</code> attribute, any new field that is added to the model will automatically be exposed for modification.</p>","tags":["DJ007"]},{"location":"rules/django-all-with-model-form/#example","title":"Example","text":"<pre><code>from django.forms import ModelForm\nclass PostForm(ModelForm):\nclass Meta:\nmodel = Post\nfields = \"__all__\"\n</code></pre> <p>Use instead:</p> <pre><code>from django.forms import ModelForm\nclass PostForm(ModelForm):\nclass Meta:\nmodel = Post\nfields = [\"title\", \"content\"]\n</code></pre>","tags":["DJ007"]},{"location":"rules/django-exclude-with-model-form/","title":"django-exclude-with-model-form (DJ006)","text":"<p>Derived from the flake8-django linter.</p>","tags":["DJ006"]},{"location":"rules/django-exclude-with-model-form/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>exclude</code> in Django <code>ModelForm</code> classes.</p>","tags":["DJ006"]},{"location":"rules/django-exclude-with-model-form/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a <code>ModelForm</code> includes the <code>exclude</code> attribute, any new field that is added to the model will automatically be exposed for modification.</p>","tags":["DJ006"]},{"location":"rules/django-exclude-with-model-form/#example","title":"Example","text":"<pre><code>from django.forms import ModelForm\nclass PostForm(ModelForm):\nclass Meta:\nmodel = Post\nexclude = [\"author\"]\n</code></pre> <p>Use instead:</p> <pre><code>from django.forms import ModelForm\nclass PostForm(ModelForm):\nclass Meta:\nmodel = Post\nfields = [\"title\", \"content\"]\n</code></pre>","tags":["DJ006"]},{"location":"rules/django-extra/","title":"django-extra (S610)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S610"]},{"location":"rules/django-extra/#what-it-does","title":"What it does","text":"<p>Checks for uses of Django's <code>extra</code> function where one or more arguments passed are not literal expressions.</p>","tags":["S610"]},{"location":"rules/django-extra/#why-is-this-bad","title":"Why is this bad?","text":"<p>Django's <code>extra</code> function can be used to execute arbitrary SQL queries, which can in turn lead to SQL injection vulnerabilities.</p>","tags":["S610"]},{"location":"rules/django-extra/#example","title":"Example","text":"<pre><code>from django.contrib.auth.models import User\n# String interpolation creates a security loophole that could be used\n# for SQL injection:\nUser.objects.all().extra(select={\"test\": \"%secure\" % \"nos\"})\n</code></pre>","tags":["S610"]},{"location":"rules/django-extra/#use-instead","title":"Use instead:","text":"<pre><code>from django.contrib.auth.models import User\n# SQL injection is impossible if all arguments are literal expressions:\nUser.objects.all().extra(select={\"test\": \"secure\"})\n</code></pre>","tags":["S610"]},{"location":"rules/django-extra/#references","title":"References","text":"<ul> <li>Django documentation: SQL injection protection</li> <li>Common Weakness Enumeration: CWE-89</li> </ul>","tags":["S610"]},{"location":"rules/django-locals-in-render-function/","title":"django-locals-in-render-function (DJ003)","text":"<p>Derived from the flake8-django linter.</p>","tags":["DJ003"]},{"location":"rules/django-locals-in-render-function/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>locals()</code> in <code>render</code> functions.</p>","tags":["DJ003"]},{"location":"rules/django-locals-in-render-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>locals()</code> can expose internal variables or other unintentional data to the rendered template.</p>","tags":["DJ003"]},{"location":"rules/django-locals-in-render-function/#example","title":"Example","text":"<pre><code>from django.shortcuts import render\ndef index(request):\nposts = Post.objects.all()\nreturn render(request, \"app/index.html\", locals())\n</code></pre> <p>Use instead:</p> <pre><code>from django.shortcuts import render\ndef index(request):\nposts = Post.objects.all()\ncontext = {\"posts\": posts}\nreturn render(request, \"app/index.html\", context)\n</code></pre>","tags":["DJ003"]},{"location":"rules/django-model-without-dunder-str/","title":"django-model-without-dunder-str (DJ008)","text":"<p>Derived from the flake8-django linter.</p>","tags":["DJ008"]},{"location":"rules/django-model-without-dunder-str/#what-it-does","title":"What it does","text":"<p>Checks that a <code>__str__</code> method is defined in Django models.</p>","tags":["DJ008"]},{"location":"rules/django-model-without-dunder-str/#why-is-this-bad","title":"Why is this bad?","text":"<p>Django models should define a <code>__str__</code> method to return a string representation of the model instance, as Django calls this method to display the object in the Django Admin and elsewhere.</p> <p>Models without a <code>__str__</code> method will display a non-meaningful representation of the object in the Django Admin.</p>","tags":["DJ008"]},{"location":"rules/django-model-without-dunder-str/#example","title":"Example","text":"<pre><code>from django.db import models\nclass MyModel(models.Model):\nfield = models.CharField(max_length=255)\n</code></pre> <p>Use instead:</p> <pre><code>from django.db import models\nclass MyModel(models.Model):\nfield = models.CharField(max_length=255)\ndef __str__(self):\nreturn f\"{self.field}\"\n</code></pre>","tags":["DJ008"]},{"location":"rules/django-non-leading-receiver-decorator/","title":"django-non-leading-receiver-decorator (DJ013)","text":"<p>Derived from the flake8-django linter.</p>","tags":["DJ013"]},{"location":"rules/django-non-leading-receiver-decorator/#what-it-does","title":"What it does","text":"<p>Checks that Django's <code>@receiver</code> decorator is listed first, prior to any other decorators.</p>","tags":["DJ013"]},{"location":"rules/django-non-leading-receiver-decorator/#why-is-this-bad","title":"Why is this bad?","text":"<p>Django's <code>@receiver</code> decorator is special in that it does not return a wrapped function. Rather, <code>@receiver</code> connects the decorated function to a signal. If any other decorators are listed before <code>@receiver</code>, the decorated function will not be connected to the signal.</p>","tags":["DJ013"]},{"location":"rules/django-non-leading-receiver-decorator/#example","title":"Example","text":"<pre><code>from django.dispatch import receiver\nfrom django.db.models.signals import post_save\n@transaction.atomic\n@receiver(post_save, sender=MyModel)\ndef my_handler(sender, instance, created, **kwargs):\npass\n</code></pre> <p>Use instead:</p> <pre><code>from django.dispatch import receiver\nfrom django.db.models.signals import post_save\n@receiver(post_save, sender=MyModel)\n@transaction.atomic\ndef my_handler(sender, instance, created, **kwargs):\npass\n</code></pre>","tags":["DJ013"]},{"location":"rules/django-nullable-model-string-field/","title":"django-nullable-model-string-field (DJ001)","text":"<p>Derived from the flake8-django linter.</p>","tags":["DJ001"]},{"location":"rules/django-nullable-model-string-field/#what-it-does","title":"What it does","text":"<p>Checks nullable string-based fields (like <code>CharField</code> and <code>TextField</code>) in Django models.</p>","tags":["DJ001"]},{"location":"rules/django-nullable-model-string-field/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a string-based field is nullable, then your model will have two possible representations for \"no data\": <code>None</code> and the empty string. This can lead to confusion, as clients of the API have to check for both <code>None</code> and the empty string when trying to determine if the field has data.</p> <p>The Django convention is to use the empty string in lieu of <code>None</code> for string-based fields.</p>","tags":["DJ001"]},{"location":"rules/django-nullable-model-string-field/#example","title":"Example","text":"<pre><code>from django.db import models\nclass MyModel(models.Model):\nfield = models.CharField(max_length=255, null=True)\n</code></pre> <p>Use instead:</p> <pre><code>from django.db import models\nclass MyModel(models.Model):\nfield = models.CharField(max_length=255, default=\"\")\n</code></pre>","tags":["DJ001"]},{"location":"rules/django-raw-sql/","title":"django-raw-sql (S611)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S611"]},{"location":"rules/django-raw-sql/#what-it-does","title":"What it does","text":"<p>Checks for uses of Django's <code>RawSQL</code> function.</p>","tags":["S611"]},{"location":"rules/django-raw-sql/#why-is-this-bad","title":"Why is this bad?","text":"<p>Django's <code>RawSQL</code> function can be used to execute arbitrary SQL queries, which can in turn lead to SQL injection vulnerabilities.</p>","tags":["S611"]},{"location":"rules/django-raw-sql/#example","title":"Example","text":"<pre><code>from django.db.models.expressions import RawSQL\nfrom django.contrib.auth.models import User\nUser.objects.annotate(val=(\"%secure\" % \"nos\", []))\n</code></pre>","tags":["S611"]},{"location":"rules/django-raw-sql/#references","title":"References","text":"<ul> <li>Django documentation: SQL injection protection</li> <li>Common Weakness Enumeration: CWE-89</li> </ul>","tags":["S611"]},{"location":"rules/django-unordered-body-content-in-model/","title":"django-unordered-body-content-in-model (DJ012)","text":"<p>Derived from the flake8-django linter.</p>","tags":["DJ012"]},{"location":"rules/django-unordered-body-content-in-model/#what-it-does","title":"What it does","text":"<p>Checks for the order of Model's inner classes, methods, and fields as per the Django Style Guide.</p>","tags":["DJ012"]},{"location":"rules/django-unordered-body-content-in-model/#why-is-this-bad","title":"Why is this bad?","text":"<p>The Django Style Guide specifies that the order of Model inner classes, attributes and methods should be as follows:</p> <ol> <li>All database fields</li> <li>Custom manager attributes</li> <li><code>class Meta</code></li> <li><code>def __str__()</code></li> <li><code>def save()</code></li> <li><code>def get_absolute_url()</code></li> <li>Any custom methods</li> </ol>","tags":["DJ012"]},{"location":"rules/django-unordered-body-content-in-model/#examples","title":"Examples","text":"<pre><code>from django.db import models\nclass StrBeforeFieldModel(models.Model):\nclass Meta:\nverbose_name = \"test\"\nverbose_name_plural = \"tests\"\ndef __str__(self):\nreturn \"foobar\"\nfirst_name = models.CharField(max_length=32)\nlast_name = models.CharField(max_length=40)\n</code></pre> <p>Use instead:</p> <pre><code>from django.db import models\nclass StrBeforeFieldModel(models.Model):\nfirst_name = models.CharField(max_length=32)\nlast_name = models.CharField(max_length=40)\nclass Meta:\nverbose_name = \"test\"\nverbose_name_plural = \"tests\"\ndef __str__(self):\nreturn \"foobar\"\n</code></pre>","tags":["DJ012"]},{"location":"rules/doc-line-too-long/","title":"doc-line-too-long (W505)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["W505"]},{"location":"rules/doc-line-too-long/#what-it-does","title":"What it does","text":"<p>Checks for doc lines that exceed the specified maximum character length.</p>","tags":["W505"]},{"location":"rules/doc-line-too-long/#why-is-this-bad","title":"Why is this bad?","text":"<p>For flowing long blocks of text (docstrings or comments), overlong lines can hurt readability. PEP 8, for example, recommends that such lines be limited to 72 characters, while this rule enforces the limit specified by the <code>lint.pycodestyle.max-doc-length</code> setting. (If no value is provided, this rule will be ignored, even if it's added to your <code>--select</code> list.)</p> <p>In the context of this rule, a \"doc line\" is defined as a line consisting of either a standalone comment or a standalone string, like a docstring.</p> <p>In the interest of pragmatism, this rule makes a few exceptions when determining whether a line is overlong. Namely, it:</p> <ol> <li>Ignores lines that consist of a single \"word\" (i.e., without any     whitespace between its characters).</li> <li>Ignores lines that end with a URL, as long as the URL starts before     the line-length threshold.</li> <li>Ignores line that end with a pragma comment (e.g., <code># type: ignore</code>     or <code># noqa</code>), as long as the pragma comment starts before the     line-length threshold. That is, a line will not be flagged as     overlong if a pragma comment causes it to exceed the line length.     (This behavior aligns with that of the Ruff formatter.)</li> </ol> <p>If <code>lint.pycodestyle.ignore-overlong-task-comments</code> is <code>true</code>, this rule will also ignore comments that start with any of the specified <code>lint.task-tags</code> (e.g., <code># TODO:</code>).</p>","tags":["W505"]},{"location":"rules/doc-line-too-long/#example","title":"Example","text":"<pre><code>def function(x):\n\"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis auctor purus ut ex fermentum, at maximus est hendrerit.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def function(x):\n\"\"\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    Duis auctor purus ut ex fermentum, at maximus est hendrerit.\n    \"\"\"\n</code></pre>","tags":["W505"]},{"location":"rules/doc-line-too-long/#error-suppression","title":"Error suppression","text":"<p>Hint: when suppressing <code>W505</code> errors within multi-line strings (like docstrings), the <code>noqa</code> directive should come at the end of the string (after the closing triple quote), and will apply to the entire string, like so:</p> <pre><code>\"\"\"Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\n\"\"\"  # noqa: W505\n</code></pre>","tags":["W505"]},{"location":"rules/doc-line-too-long/#options","title":"Options","text":"<ul> <li><code>lint.task-tags</code></li> <li><code>lint.pycodestyle.max-doc-length</code></li> <li><code>lint.pycodestyle.ignore-overlong-task-comments</code></li> </ul>","tags":["W505"]},{"location":"rules/docstring-extraneous-exception/","title":"docstring-extraneous-exception (DOC502)","text":"<p>Derived from the pydoclint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["DOC502"]},{"location":"rules/docstring-extraneous-exception/#what-it-does","title":"What it does","text":"<p>Checks for function docstrings that include exceptions which are not explicitly raised.</p>","tags":["DOC502"]},{"location":"rules/docstring-extraneous-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some conventions prefer non-explicit exceptions be omitted from the docstring.</p> <p>This rule is not enforced for stub functions.</p>","tags":["DOC502"]},{"location":"rules/docstring-extraneous-exception/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        ZeroDivisionError: Divided by zero.\n    \"\"\"\nreturn distance / time\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    \"\"\"\nreturn distance / time\n</code></pre>","tags":["DOC502"]},{"location":"rules/docstring-extraneous-returns/","title":"docstring-extraneous-returns (DOC202)","text":"<p>Derived from the pydoclint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["DOC202"]},{"location":"rules/docstring-extraneous-returns/#what-it-does","title":"What it does","text":"<p>Checks for function docstrings that have a \"returns\" section without needing one.</p>","tags":["DOC202"]},{"location":"rules/docstring-extraneous-returns/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions without an explicit return should not have a returns section in their docstrings.</p> <p>This rule is not enforced for stub functions.</p>","tags":["DOC202"]},{"location":"rules/docstring-extraneous-returns/#example","title":"Example","text":"<pre><code>def say_hello(n: int) -&gt; None:\n\"\"\"Says hello to the user.\n    Args:\n        n: Number of times to say hello.\n    Returns:\n        Doesn't return anything.\n    \"\"\"\nfor _ in range(n):\nprint(\"Hello!\")\n</code></pre> <p>Use instead:</p> <pre><code>def say_hello(n: int) -&gt; None:\n\"\"\"Says hello to the user.\n    Args:\n        n: Number of times to say hello.\n    \"\"\"\nfor _ in range(n):\nprint(\"Hello!\")\n</code></pre>","tags":["DOC202"]},{"location":"rules/docstring-extraneous-yields/","title":"docstring-extraneous-yields (DOC403)","text":"<p>Derived from the pydoclint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["DOC403"]},{"location":"rules/docstring-extraneous-yields/#what-it-does","title":"What it does","text":"<p>Checks for function docstrings that have a \"yields\" section without needing one.</p>","tags":["DOC403"]},{"location":"rules/docstring-extraneous-yields/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions which don't yield anything should not have a yields section in their docstrings.</p> <p>This rule is not enforced for stub functions.</p>","tags":["DOC403"]},{"location":"rules/docstring-extraneous-yields/#example","title":"Example","text":"<pre><code>def say_hello(n: int) -&gt; None:\n\"\"\"Says hello to the user.\n    Args:\n        n: Number of times to say hello.\n    Yields:\n        Doesn't yield anything.\n    \"\"\"\nfor _ in range(n):\nprint(\"Hello!\")\n</code></pre> <p>Use instead:</p> <pre><code>def say_hello(n: int) -&gt; None:\n\"\"\"Says hello to the user.\n    Args:\n        n: Number of times to say hello.\n    \"\"\"\nfor _ in range(n):\nprint(\"Hello!\")\n</code></pre>","tags":["DOC403"]},{"location":"rules/docstring-in-stub/","title":"docstring-in-stub (PYI021)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI021"]},{"location":"rules/docstring-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for the presence of docstrings in stub files.</p>","tags":["PYI021"]},{"location":"rules/docstring-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files should omit docstrings, as they're intended to provide type hints, rather than documentation.</p>","tags":["PYI021"]},{"location":"rules/docstring-in-stub/#example","title":"Example","text":"<pre><code>def func(param: int) -&gt; str:\n\"\"\"This is a docstring.\"\"\"\n...\n</code></pre> <p>Use instead:</p> <pre><code>def func(param: int) -&gt; str: ...\n</code></pre>","tags":["PYI021"]},{"location":"rules/docstring-missing-exception/","title":"docstring-missing-exception (DOC501)","text":"<p>Derived from the pydoclint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["DOC501"]},{"location":"rules/docstring-missing-exception/#what-it-does","title":"What it does","text":"<p>Checks for function docstrings that do not include documentation for all explicitly raised exceptions.</p>","tags":["DOC501"]},{"location":"rules/docstring-missing-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a function raises an exception without documenting it in its docstring, it can be misleading to users and/or a sign of incomplete documentation or refactors.</p> <p>This rule is not enforced for abstract methods and stubs functions.</p>","tags":["DOC501"]},{"location":"rules/docstring-missing-exception/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["DOC501"]},{"location":"rules/docstring-missing-returns/","title":"docstring-missing-returns (DOC201)","text":"<p>Derived from the pydoclint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["DOC201"]},{"location":"rules/docstring-missing-returns/#what-it-does","title":"What it does","text":"<p>Checks for functions with explicit returns missing a \"returns\" section in their docstring.</p>","tags":["DOC201"]},{"location":"rules/docstring-missing-returns/#why-is-this-bad","title":"Why is this bad?","text":"<p>Docstrings missing return sections are a sign of incomplete documentation or refactors.</p> <p>This rule is not enforced for abstract methods, stubs functions, or functions that only return <code>None</code>.</p>","tags":["DOC201"]},{"location":"rules/docstring-missing-returns/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    \"\"\"\nreturn distance / time\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    \"\"\"\nreturn distance / time\n</code></pre>","tags":["DOC201"]},{"location":"rules/docstring-missing-yields/","title":"docstring-missing-yields (DOC402)","text":"<p>Derived from the pydoclint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["DOC402"]},{"location":"rules/docstring-missing-yields/#what-it-does","title":"What it does","text":"<p>Checks for functions with yield statements missing a \"yields\" section in their docstring.</p>","tags":["DOC402"]},{"location":"rules/docstring-missing-yields/#why-is-this-bad","title":"Why is this bad?","text":"<p>Docstrings missing yields sections are a sign of incomplete documentation or refactors.</p> <p>This rule is not enforced for abstract methods, stubs functions, or functions that only yield <code>None</code>.</p>","tags":["DOC402"]},{"location":"rules/docstring-missing-yields/#example","title":"Example","text":"<pre><code>def count_to_n(n: int) -&gt; int:\n\"\"\"Generate integers up to *n*.\n    Args:\n        n: The number at which to stop counting.\n    \"\"\"\nfor i in range(1, n + 1):\nyield i\n</code></pre> <p>Use instead:</p> <pre><code>def count_to_n(n: int) -&gt; int:\n\"\"\"Generate integers up to *n*.\n    Args:\n        n: The number at which to stop counting.\n    Yields:\n        int: The number we're at in the count.\n    \"\"\"\nfor i in range(1, n + 1):\nyield i\n</code></pre>","tags":["DOC402"]},{"location":"rules/docstring-starts-with-this/","title":"docstring-starts-with-this (D404)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D404"]},{"location":"rules/docstring-starts-with-this/#what-it-does","title":"What it does","text":"<p>Checks for docstrings that start with <code>This</code>.</p>","tags":["D404"]},{"location":"rules/docstring-starts-with-this/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that the first line of a docstring be written in the imperative mood, for consistency.</p> <p>Hint: to rewrite the docstring in the imperative, phrase the first line as if it were a command.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>numpy</code> convention,, and disabled when using the <code>google</code> and <code>pep257</code> conventions.</p>","tags":["D404"]},{"location":"rules/docstring-starts-with-this/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"This function returns the mean of the given values.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D404"]},{"location":"rules/docstring-starts-with-this/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D404"]},{"location":"rules/docstring-starts-with-this/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> </ul>","tags":["D404"]},{"location":"rules/dot-format-in-exception/","title":"dot-format-in-exception (EM103)","text":"<p>Derived from the flake8-errmsg linter.</p> <p>Fix is sometimes available.</p>","tags":["EM103"]},{"location":"rules/dot-format-in-exception/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>.format</code> calls on string literals in exception constructors.</p>","tags":["EM103"]},{"location":"rules/dot-format-in-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python includes the <code>raise</code> in the default traceback (and formatters like Rich and IPython do too).</p> <p>By using a <code>.format</code> call, the error message will be duplicated in the traceback, which can make the traceback less readable.</p>","tags":["EM103"]},{"location":"rules/dot-format-in-exception/#example","title":"Example","text":"<p>Given:</p> <pre><code>sub = \"Some value\"\nraise RuntimeError(\"'{}' is incorrect\".format(sub))\n</code></pre> <p>Python will produce a traceback like:</p> <pre><code>Traceback (most recent call last):\n  File \"tmp.py\", line 2, in &lt;module&gt;\n    raise RuntimeError(\"'{}' is incorrect\".format(sub))\nRuntimeError: 'Some value' is incorrect\n</code></pre> <p>Instead, assign the string to a variable:</p> <pre><code>sub = \"Some value\"\nmsg = \"'{}' is incorrect\".format(sub)\nraise RuntimeError(msg)\n</code></pre> <p>Which will produce a traceback like:</p> <pre><code>Traceback (most recent call last):\n  File \"tmp.py\", line 3, in &lt;module&gt;\n    raise RuntimeError(msg)\nRuntimeError: 'Some value' is incorrect\n</code></pre>","tags":["EM103"]},{"location":"rules/double-negation/","title":"double-negation (SIM208)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM208"]},{"location":"rules/double-negation/#what-it-does","title":"What it does","text":"<p>Checks for double negations (i.e., multiple <code>not</code> operators).</p>","tags":["SIM208"]},{"location":"rules/double-negation/#why-is-this-bad","title":"Why is this bad?","text":"<p>A double negation is redundant and less readable than omitting the <code>not</code> operators entirely.</p>","tags":["SIM208"]},{"location":"rules/double-negation/#example","title":"Example","text":"<pre><code>not (not a)\n</code></pre> <p>Use instead:</p> <pre><code>a\n</code></pre>","tags":["SIM208"]},{"location":"rules/double-negation/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> </ul>","tags":["SIM208"]},{"location":"rules/dunder-function-name/","title":"dunder-function-name (N807)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N807"]},{"location":"rules/dunder-function-name/#what-it-does","title":"What it does","text":"<p>Checks for functions with \"dunder\" names (that is, names with two leading and trailing underscores) that are not documented.</p>","tags":["N807"]},{"location":"rules/dunder-function-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends that only documented \"dunder\" methods are used:</p> <p>...\"magic\" objects or attributes that live in user-controlled namespaces. E.g. <code>__init__</code>, <code>__import__</code> or <code>__file__</code>. Never invent such names; only use them as documented.</p>","tags":["N807"]},{"location":"rules/dunder-function-name/#example","title":"Example","text":"<pre><code>def __my_function__():\npass\n</code></pre> <p>Use instead:</p> <pre><code>def my_function():\npass\n</code></pre>","tags":["N807"]},{"location":"rules/duplicate-bases/","title":"duplicate-bases (PLE0241)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLE0241"]},{"location":"rules/duplicate-bases/#what-it-does","title":"What it does","text":"<p>Checks for duplicate base classes in class definitions.</p>","tags":["PLE0241"]},{"location":"rules/duplicate-bases/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including duplicate base classes will raise a <code>TypeError</code> at runtime.</p>","tags":["PLE0241"]},{"location":"rules/duplicate-bases/#example","title":"Example","text":"<pre><code>class Foo:\npass\nclass Bar(Foo, Foo):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\npass\nclass Bar(Foo):\npass\n</code></pre>","tags":["PLE0241"]},{"location":"rules/duplicate-bases/#references","title":"References","text":"<ul> <li>Python documentation: Class definitions</li> </ul>","tags":["PLE0241"]},{"location":"rules/duplicate-class-field-definition/","title":"duplicate-class-field-definition (PIE794)","text":"<p>Derived from the flake8-pie linter.</p> <p>Fix is always available.</p>","tags":["PIE794"]},{"location":"rules/duplicate-class-field-definition/#what-it-does","title":"What it does","text":"<p>Checks for duplicate field definitions in classes.</p>","tags":["PIE794"]},{"location":"rules/duplicate-class-field-definition/#why-is-this-bad","title":"Why is this bad?","text":"<p>Defining a field multiple times in a class body is redundant and likely a mistake.</p>","tags":["PIE794"]},{"location":"rules/duplicate-class-field-definition/#example","title":"Example","text":"<pre><code>class Person:\nname = Tom\n...\nname = Ben\n</code></pre> <p>Use instead:</p> <pre><code>class Person:\nname = Tom\n...\n</code></pre>","tags":["PIE794"]},{"location":"rules/duplicate-handler-exception/","title":"duplicate-handler-exception (B014)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is always available.</p>","tags":["B014"]},{"location":"rules/duplicate-handler-exception/#what-it-does","title":"What it does","text":"<p>Checks for exception handlers that catch duplicate exceptions.</p>","tags":["B014"]},{"location":"rules/duplicate-handler-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including the same exception multiple times in the same handler is redundant, as the first exception will catch the exception, making the second exception unreachable. The same applies to exception hierarchies, as a handler for a parent exception (like <code>Exception</code>) will also catch child exceptions (like <code>ValueError</code>).</p>","tags":["B014"]},{"location":"rules/duplicate-handler-exception/#example","title":"Example","text":"<pre><code>try:\n...\nexcept (Exception, ValueError):  # `Exception` includes `ValueError`.\n...\n</code></pre> <p>Use instead:</p> <pre><code>try:\n...\nexcept Exception:\n...\n</code></pre>","tags":["B014"]},{"location":"rules/duplicate-handler-exception/#references","title":"References","text":"<ul> <li>Python documentation: <code>except</code> clause</li> <li>Python documentation: Exception hierarchy</li> </ul>","tags":["B014"]},{"location":"rules/duplicate-isinstance-call/","title":"duplicate-isinstance-call (SIM101)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM101"]},{"location":"rules/duplicate-isinstance-call/#what-it-does","title":"What it does","text":"<p>Checks for multiple <code>isinstance</code> calls on the same target.</p>","tags":["SIM101"]},{"location":"rules/duplicate-isinstance-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>To check if an object is an instance of any one of multiple types or classes, it is unnecessary to use multiple <code>isinstance</code> calls, as the second argument of the <code>isinstance</code> built-in function accepts a tuple of types and classes.</p> <p>Using a single <code>isinstance</code> call implements the same behavior with more concise code and clearer intent.</p>","tags":["SIM101"]},{"location":"rules/duplicate-isinstance-call/#example","title":"Example","text":"<pre><code>if isinstance(obj, int) or isinstance(obj, float):\npass\n</code></pre> <p>Use instead:</p> <pre><code>if isinstance(obj, (int, float)):\npass\n</code></pre>","tags":["SIM101"]},{"location":"rules/duplicate-isinstance-call/#references","title":"References","text":"<ul> <li>Python documentation: <code>isinstance</code></li> </ul>","tags":["SIM101"]},{"location":"rules/duplicate-literal-member/","title":"duplicate-literal-member (PYI062)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI062"]},{"location":"rules/duplicate-literal-member/#what-it-does","title":"What it does","text":"<p>Checks for duplicate members in a <code>typing.Literal[]</code> slice.</p>","tags":["PYI062"]},{"location":"rules/duplicate-literal-member/#why-is-this-bad","title":"Why is this bad?","text":"<p>Duplicate literal members are redundant and should be removed.</p>","tags":["PYI062"]},{"location":"rules/duplicate-literal-member/#example","title":"Example","text":"<pre><code>foo: Literal[\"a\", \"b\", \"a\"]\n</code></pre> <p>Use instead:</p> <pre><code>foo: Literal[\"a\", \"b\"]\n</code></pre>","tags":["PYI062"]},{"location":"rules/duplicate-literal-member/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as safe, unless the type annotation contains comments.</p> <p>Note that while the fix may flatten nested literals into a single top-level literal, the semantics of the annotation will remain unchanged.</p>","tags":["PYI062"]},{"location":"rules/duplicate-literal-member/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.Literal</code></li> </ul>","tags":["PYI062"]},{"location":"rules/duplicate-try-block-exception/","title":"duplicate-try-block-exception (B025)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B025"]},{"location":"rules/duplicate-try-block-exception/#what-it-does","title":"What it does","text":"<p>Checks for <code>try-except</code> blocks with duplicate exception handlers.</p>","tags":["B025"]},{"location":"rules/duplicate-try-block-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>Duplicate exception handlers are redundant, as the first handler will catch the exception, making the second handler unreachable.</p>","tags":["B025"]},{"location":"rules/duplicate-try-block-exception/#example","title":"Example","text":"<pre><code>try:\n...\nexcept ValueError:\n...\nexcept ValueError:\n...\n</code></pre> <p>Use instead:</p> <pre><code>try:\n...\nexcept ValueError:\n...\n</code></pre>","tags":["B025"]},{"location":"rules/duplicate-try-block-exception/#references","title":"References","text":"<ul> <li>Python documentation: <code>except</code> clause</li> </ul>","tags":["B025"]},{"location":"rules/duplicate-union-member/","title":"duplicate-union-member (PYI016)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI016"]},{"location":"rules/duplicate-union-member/#what-it-does","title":"What it does","text":"<p>Checks for duplicate union members.</p>","tags":["PYI016"]},{"location":"rules/duplicate-union-member/#why-is-this-bad","title":"Why is this bad?","text":"<p>Duplicate union members are redundant and should be removed.</p>","tags":["PYI016"]},{"location":"rules/duplicate-union-member/#example","title":"Example","text":"<pre><code>foo: str | str\n</code></pre> <p>Use instead:</p> <pre><code>foo: str\n</code></pre>","tags":["PYI016"]},{"location":"rules/duplicate-union-member/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as safe unless the union contains comments.</p> <p>For nested union, the fix will flatten type expressions into a single top-level union.</p>","tags":["PYI016"]},{"location":"rules/duplicate-union-member/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.Union</code></li> </ul>","tags":["PYI016"]},{"location":"rules/duplicate-value/","title":"duplicate-value (B033)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is sometimes available.</p>","tags":["B033"]},{"location":"rules/duplicate-value/#what-it-does","title":"What it does","text":"<p>Checks for set literals that contain duplicate items.</p>","tags":["B033"]},{"location":"rules/duplicate-value/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, sets are unordered collections of unique elements. Including a duplicate item in a set literal is redundant, as the duplicate item will be replaced with a single item at runtime.</p>","tags":["B033"]},{"location":"rules/duplicate-value/#example","title":"Example","text":"<pre><code>{1, 2, 3, 1}\n</code></pre> <p>Use instead:</p> <pre><code>{1, 2, 3}\n</code></pre>","tags":["B033"]},{"location":"rules/ellipsis-in-non-empty-class-body/","title":"ellipsis-in-non-empty-class-body (PYI013)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI013"]},{"location":"rules/ellipsis-in-non-empty-class-body/#what-it-does","title":"What it does","text":"<p>Removes ellipses (<code>...</code>) in otherwise non-empty class bodies.</p>","tags":["PYI013"]},{"location":"rules/ellipsis-in-non-empty-class-body/#why-is-this-bad","title":"Why is this bad?","text":"<p>An ellipsis in a class body is only necessary if the class body is otherwise empty. If the class body is non-empty, then the ellipsis is redundant.</p>","tags":["PYI013"]},{"location":"rules/ellipsis-in-non-empty-class-body/#example","title":"Example","text":"<pre><code>class Foo:\n...\nvalue: int\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\nvalue: int\n</code></pre>","tags":["PYI013"]},{"location":"rules/empty-comment/","title":"empty-comment (PLR2044)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLR2044"]},{"location":"rules/empty-comment/#what-it-does","title":"What it does","text":"<p>Checks for a # symbol appearing on a line not followed by an actual comment.</p>","tags":["PLR2044"]},{"location":"rules/empty-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Empty comments don't provide any clarity to the code, and just add clutter. Either add a comment or delete the empty comment.</p>","tags":["PLR2044"]},{"location":"rules/empty-comment/#example","title":"Example","text":"<pre><code>class Foo:  #\npass\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\npass\n</code></pre>","tags":["PLR2044"]},{"location":"rules/empty-comment/#references","title":"References","text":"<ul> <li>Pylint documentation</li> </ul>","tags":["PLR2044"]},{"location":"rules/empty-docstring-section/","title":"empty-docstring-section (D414)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D414"]},{"location":"rules/empty-docstring-section/#what-it-does","title":"What it does","text":"<p>Checks for docstrings with empty sections.</p>","tags":["D414"]},{"location":"rules/empty-docstring-section/#why-is-this-bad","title":"Why is this bad?","text":"<p>An empty section in a multiline docstring likely indicates an unfinished or incomplete docstring.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body. Each section body should be non-empty; empty sections should either have content added to them, or be removed entirely.</p>","tags":["D414"]},{"location":"rules/empty-docstring-section/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D414"]},{"location":"rules/empty-docstring-section/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Style Guide</li> </ul>","tags":["D414"]},{"location":"rules/empty-docstring/","title":"empty-docstring (D419)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D419"]},{"location":"rules/empty-docstring/#what-it-does","title":"What it does","text":"<p>Checks for empty docstrings.</p>","tags":["D419"]},{"location":"rules/empty-docstring/#why-is-this-bad","title":"Why is this bad?","text":"<p>An empty docstring is indicative of incomplete documentation. It should either be removed or replaced with a meaningful docstring.</p>","tags":["D419"]},{"location":"rules/empty-docstring/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D419"]},{"location":"rules/empty-docstring/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D419"]},{"location":"rules/empty-method-without-abstract-decorator/","title":"empty-method-without-abstract-decorator (B027)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B027"]},{"location":"rules/empty-method-without-abstract-decorator/#what-it-does","title":"What it does","text":"<p>Checks for empty methods in abstract base classes without an abstract decorator.</p>","tags":["B027"]},{"location":"rules/empty-method-without-abstract-decorator/#why-is-this-bad","title":"Why is this bad?","text":"<p>Empty methods in abstract base classes without an abstract decorator may be be indicative of a mistake. If the method is meant to be abstract, add an <code>@abstractmethod</code> decorator to the method.</p>","tags":["B027"]},{"location":"rules/empty-method-without-abstract-decorator/#example","title":"Example","text":"<pre><code>from abc import ABC\nclass Foo(ABC):\ndef method(self): ...\n</code></pre> <p>Use instead:</p> <pre><code>from abc import ABC, abstractmethod\nclass Foo(ABC):\n@abstractmethod\ndef method(self): ...\n</code></pre>","tags":["B027"]},{"location":"rules/empty-method-without-abstract-decorator/#references","title":"References","text":"<ul> <li>Python documentation: <code>abc</code></li> </ul>","tags":["B027"]},{"location":"rules/empty-type-checking-block/","title":"empty-type-checking-block (TC005)","text":"<p>Derived from the flake8-type-checking linter.</p> <p>Fix is always available.</p>","tags":["TC005"]},{"location":"rules/empty-type-checking-block/#what-it-does","title":"What it does","text":"<p>Checks for an empty type-checking block.</p>","tags":["TC005"]},{"location":"rules/empty-type-checking-block/#why-is-this-bad","title":"Why is this bad?","text":"<p>The type-checking block does not do anything and should be removed to avoid confusion.</p>","tags":["TC005"]},{"location":"rules/empty-type-checking-block/#example","title":"Example","text":"<pre><code>from typing import TYPE_CHECKING\nif TYPE_CHECKING:\npass\nprint(\"Hello, world!\")\n</code></pre> <p>Use instead:</p> <pre><code>print(\"Hello, world!\")\n</code></pre>","tags":["TC005"]},{"location":"rules/empty-type-checking-block/#references","title":"References","text":"<ul> <li>PEP 563: Runtime annotation resolution and <code>TYPE_CHECKING</code></li> </ul>","tags":["TC005"]},{"location":"rules/ends-in-period/","title":"ends-in-period (D400)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is sometimes available.</p>","tags":["D400"]},{"location":"rules/ends-in-period/#what-it-does","title":"What it does","text":"<p>Checks for docstrings in which the first line does not end in a period.</p>","tags":["D400"]},{"location":"rules/ends-in-period/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that the first line of a docstring is written in the form of a command, ending in a period.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>numpy</code> and <code>pep257</code> conventions, and disabled when using the <code>google</code> convention.</p>","tags":["D400"]},{"location":"rules/ends-in-period/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D400"]},{"location":"rules/ends-in-period/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D400"]},{"location":"rules/ends-in-period/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D400"]},{"location":"rules/ends-in-punctuation/","title":"ends-in-punctuation (D415)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is sometimes available.</p>","tags":["D415"]},{"location":"rules/ends-in-punctuation/#what-it-does","title":"What it does","text":"<p>Checks for docstrings in which the first line does not end in a punctuation mark, such as a period, question mark, or exclamation point.</p>","tags":["D415"]},{"location":"rules/ends-in-punctuation/#why-is-this-bad","title":"Why is this bad?","text":"<p>The first line of a docstring should end with a period, question mark, or exclamation point, for grammatical correctness and consistency.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>google</code> convention, and disabled when using the <code>numpy</code> and <code>pep257</code> conventions.</p>","tags":["D415"]},{"location":"rules/ends-in-punctuation/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D415"]},{"location":"rules/ends-in-punctuation/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D415"]},{"location":"rules/ends-in-punctuation/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D415"]},{"location":"rules/enumerate-for-loop/","title":"enumerate-for-loop (SIM113)","text":"<p>Derived from the flake8-simplify linter.</p>","tags":["SIM113"]},{"location":"rules/enumerate-for-loop/#what-it-does","title":"What it does","text":"<p>Checks for <code>for</code> loops with explicit loop-index variables that can be replaced with <code>enumerate()</code>.</p>","tags":["SIM113"]},{"location":"rules/enumerate-for-loop/#why-is-this-bad","title":"Why is this bad?","text":"<p>When iterating over a sequence, it's often desirable to keep track of the index of each element alongside the element itself. Prefer the <code>enumerate</code> builtin over manually incrementing a counter variable within the loop, as <code>enumerate</code> is more concise and idiomatic.</p>","tags":["SIM113"]},{"location":"rules/enumerate-for-loop/#example","title":"Example","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\nprint(f\"{i + 1}. {fruit}\")\ni += 1\n</code></pre> <p>Use instead:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor i, fruit in enumerate(fruits):\nprint(f\"{i + 1}. {fruit}\")\n</code></pre>","tags":["SIM113"]},{"location":"rules/enumerate-for-loop/#references","title":"References","text":"<ul> <li>Python documentation: <code>enumerate</code></li> </ul>","tags":["SIM113"]},{"location":"rules/eq-without-hash/","title":"eq-without-hash (PLW1641)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLW1641"]},{"location":"rules/eq-without-hash/#what-it-does","title":"What it does","text":"<p>Checks for classes that implement <code>__eq__</code> but not <code>__hash__</code>.</p>","tags":["PLW1641"]},{"location":"rules/eq-without-hash/#why-is-this-bad","title":"Why is this bad?","text":"<p>A class that implements <code>__eq__</code> but not <code>__hash__</code> will have its hash method implicitly set to <code>None</code>. This will cause the class to be unhashable, will in turn cause issues when using the class as a key in a dictionary or a member of a set.</p>","tags":["PLW1641"]},{"location":"rules/eq-without-hash/#known-problems","title":"Known problems","text":"<p>Does not check for <code>__hash__</code> implementations in superclasses.</p>","tags":["PLW1641"]},{"location":"rules/eq-without-hash/#example","title":"Example","text":"<pre><code>class Person:\ndef __init__(self):\nself.name = \"monty\"\ndef __eq__(self, other):\nreturn isinstance(other, Person) and other.name == self.name\n</code></pre> <p>Use instead:</p> <pre><code>class Person:\ndef __init__(self):\nself.name = \"monty\"\ndef __eq__(self, other):\nreturn isinstance(other, Person) and other.name == self.name\ndef __hash__(self):\nreturn hash(self.name)\n</code></pre>","tags":["PLW1641"]},{"location":"rules/error-instead-of-exception/","title":"error-instead-of-exception (TRY400)","text":"<p>Derived from the tryceratops linter.</p> <p>Fix is sometimes available.</p>","tags":["TRY400"]},{"location":"rules/error-instead-of-exception/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>logging.error</code> instead of <code>logging.exception</code> when logging an exception.</p>","tags":["TRY400"]},{"location":"rules/error-instead-of-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>logging.exception</code> logs the exception and the traceback, while <code>logging.error</code> only logs the exception. The former is more appropriate when logging an exception, as the traceback is often useful for debugging.</p>","tags":["TRY400"]},{"location":"rules/error-instead-of-exception/#example","title":"Example","text":"<pre><code>import logging\ndef func():\ntry:\nraise NotImplementedError\nexcept NotImplementedError:\nlogging.error(\"Exception occurred\")\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ndef func():\ntry:\nraise NotImplementedError\nexcept NotImplementedError:\nlogging.exception(\"Exception occurred\")\n</code></pre>","tags":["TRY400"]},{"location":"rules/error-instead-of-exception/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as safe when run against <code>logging.error</code> calls, but unsafe when marked against other logger-like calls (e.g., <code>logger.error</code>), since the rule is prone to false positives when detecting logger-like calls outside of the <code>logging</code> module.</p>","tags":["TRY400"]},{"location":"rules/error-instead-of-exception/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging.exception</code></li> </ul>","tags":["TRY400"]},{"location":"rules/error-suffix-on-exception-name/","title":"error-suffix-on-exception-name (N818)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N818"]},{"location":"rules/error-suffix-on-exception-name/#what-it-does","title":"What it does","text":"<p>Checks for custom exception definitions that omit the <code>Error</code> suffix.</p>","tags":["N818"]},{"location":"rules/error-suffix-on-exception-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>Error</code> suffix is recommended by PEP 8:</p> <p>Because exceptions should be classes, the class naming convention applies here. However, you should use the suffix <code>\"Error\"</code> on your exception names (if the exception actually is an error).</p>","tags":["N818"]},{"location":"rules/error-suffix-on-exception-name/#example","title":"Example","text":"<pre><code>class Validation(Exception): ...\n</code></pre> <p>Use instead:</p> <pre><code>class ValidationError(Exception): ...\n</code></pre>","tags":["N818"]},{"location":"rules/escape-sequence-in-docstring/","title":"escape-sequence-in-docstring (D301)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is sometimes available.</p>","tags":["D301"]},{"location":"rules/escape-sequence-in-docstring/#what-it-does","title":"What it does","text":"<p>Checks for docstrings that include backslashes, but are not defined as raw string literals.</p>","tags":["D301"]},{"location":"rules/escape-sequence-in-docstring/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, backslashes are typically used to escape characters in strings. In raw strings (those prefixed with an <code>r</code>), however, backslashes are treated as literal characters.</p> <p>PEP 257 recommends the use of raw strings (i.e., <code>r\"\"\"raw triple double quotes\"\"\"</code>) for docstrings that include backslashes. The use of a raw string ensures that any backslashes are treated as literal characters, and not as escape sequences, which avoids confusion.</p>","tags":["D301"]},{"location":"rules/escape-sequence-in-docstring/#example","title":"Example","text":"<pre><code>def foobar():\n\"\"\"Docstring for foo\\bar.\"\"\"\nfoobar.__doc__  # \"Docstring for foar.\"\n</code></pre> <p>Use instead:</p> <pre><code>def foobar():\nr\"\"\"Docstring for foo\\bar.\"\"\"\nfoobar.__doc__  # \"Docstring for foo\\bar.\"\n</code></pre>","tags":["D301"]},{"location":"rules/escape-sequence-in-docstring/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>Python documentation: String and Bytes literals</li> </ul>","tags":["D301"]},{"location":"rules/eval/","title":"eval (PGH001)","text":"<p>Derived from the pygrep-hooks linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["PGH001"]},{"location":"rules/eval/#removed","title":"Removed","text":"<p>This rule is identical to S307 which should be used instead.</p>","tags":["PGH001"]},{"location":"rules/eval/#what-it-does","title":"What it does","text":"<p>Checks for uses of the builtin <code>eval()</code> function.</p>","tags":["PGH001"]},{"location":"rules/eval/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>eval()</code> function is insecure as it enables arbitrary code execution.</p>","tags":["PGH001"]},{"location":"rules/eval/#example","title":"Example","text":"<pre><code>def foo():\nx = eval(input(\"Enter a number: \"))\n...\n</code></pre> <p>Use instead:</p> <pre><code>def foo():\nx = input(\"Enter a number: \")\n...\n</code></pre>","tags":["PGH001"]},{"location":"rules/eval/#references","title":"References","text":"<ul> <li>Python documentation: <code>eval</code></li> <li>Eval really is dangerous by Ned Batchelder</li> </ul>","tags":["PGH001"]},{"location":"rules/except-with-empty-tuple/","title":"except-with-empty-tuple (B029)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B029"]},{"location":"rules/except-with-empty-tuple/#what-it-does","title":"What it does","text":"<p>Checks for exception handlers that catch an empty tuple.</p>","tags":["B029"]},{"location":"rules/except-with-empty-tuple/#why-is-this-bad","title":"Why is this bad?","text":"<p>An exception handler that catches an empty tuple will not catch anything, and is indicative of a mistake. Instead, add exceptions to the <code>except</code> clause.</p>","tags":["B029"]},{"location":"rules/except-with-empty-tuple/#example","title":"Example","text":"<pre><code>try:\n1 / 0\nexcept ():\n...\n</code></pre> <p>Use instead:</p> <pre><code>try:\n1 / 0\nexcept ZeroDivisionError:\n...\n</code></pre>","tags":["B029"]},{"location":"rules/except-with-empty-tuple/#references","title":"References","text":"<ul> <li>Python documentation: <code>except</code> clause</li> </ul>","tags":["B029"]},{"location":"rules/except-with-non-exception-classes/","title":"except-with-non-exception-classes (B030)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B030"]},{"location":"rules/except-with-non-exception-classes/#what-it-does","title":"What it does","text":"<p>Checks for exception handlers that catch non-exception classes.</p>","tags":["B030"]},{"location":"rules/except-with-non-exception-classes/#why-is-this-bad","title":"Why is this bad?","text":"<p>Catching classes that do not inherit from <code>BaseException</code> will raise a <code>TypeError</code>.</p>","tags":["B030"]},{"location":"rules/except-with-non-exception-classes/#example","title":"Example","text":"<pre><code>try:\n1 / 0\nexcept 1:\n...\n</code></pre> <p>Use instead:</p> <pre><code>try:\n1 / 0\nexcept ZeroDivisionError:\n...\n</code></pre>","tags":["B030"]},{"location":"rules/except-with-non-exception-classes/#references","title":"References","text":"<ul> <li>Python documentation: <code>except</code> clause</li> <li>Python documentation: Built-in Exceptions</li> </ul>","tags":["B030"]},{"location":"rules/exception-without-exc-info/","title":"exception-without-exc-info (LOG007)","text":"<p>Derived from the flake8-logging linter.</p>","tags":["LOG007"]},{"location":"rules/exception-without-exc-info/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>logging.exception()</code> with <code>exc_info</code> set to <code>False</code>.</p>","tags":["LOG007"]},{"location":"rules/exception-without-exc-info/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>logging.exception()</code> method captures the exception automatically, but accepts an optional <code>exc_info</code> argument to override this behavior. Setting <code>exc_info</code> to <code>False</code> disables the automatic capture of the exception and stack trace.</p> <p>Instead of setting <code>exc_info</code> to <code>False</code>, prefer <code>logging.error()</code>, which has equivalent behavior to <code>logging.exception()</code> with <code>exc_info</code> set to <code>False</code>, but is clearer in intent.</p>","tags":["LOG007"]},{"location":"rules/exception-without-exc-info/#example","title":"Example","text":"<pre><code>logging.exception(\"...\", exc_info=False)\n</code></pre> <p>Use instead:</p> <pre><code>logging.error(\"...\")\n</code></pre>","tags":["LOG007"]},{"location":"rules/exec-builtin/","title":"exec-builtin (S102)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S102"]},{"location":"rules/exec-builtin/#what-it-does","title":"What it does","text":"<p>Checks for uses of the builtin <code>exec</code> function.</p>","tags":["S102"]},{"location":"rules/exec-builtin/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>exec()</code> function is insecure as it allows for arbitrary code execution.</p>","tags":["S102"]},{"location":"rules/exec-builtin/#example","title":"Example","text":"<pre><code>exec(\"print('Hello World')\")\n</code></pre>","tags":["S102"]},{"location":"rules/exec-builtin/#references","title":"References","text":"<ul> <li>Python documentation: <code>exec</code></li> <li>Common Weakness Enumeration: CWE-78</li> </ul>","tags":["S102"]},{"location":"rules/explicit-f-string-type-conversion/","title":"explicit-f-string-type-conversion (RUF010)","text":"<p>Fix is always available.</p>","tags":["RUF010"]},{"location":"rules/explicit-f-string-type-conversion/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>str()</code>, <code>repr()</code>, and <code>ascii()</code> as explicit type conversions within f-strings.</p>","tags":["RUF010"]},{"location":"rules/explicit-f-string-type-conversion/#why-is-this-bad","title":"Why is this bad?","text":"<p>f-strings support dedicated conversion flags for these types, which are more succinct and idiomatic.</p> <p>Note that, in many cases, calling <code>str()</code> within an f-string is unnecessary and can be removed entirely, as the value will be converted to a string automatically, the notable exception being for classes that implement a custom <code>__format__</code> method.</p>","tags":["RUF010"]},{"location":"rules/explicit-f-string-type-conversion/#example","title":"Example","text":"<pre><code>a = \"some string\"\nf\"{repr(a)}\"\n</code></pre> <p>Use instead:</p> <pre><code>a = \"some string\"\nf\"{a!r}\"\n</code></pre>","tags":["RUF010"]},{"location":"rules/explicit-string-concatenation/","title":"explicit-string-concatenation (ISC003)","text":"<p>Derived from the flake8-implicit-str-concat linter.</p>","tags":["ISC003"]},{"location":"rules/explicit-string-concatenation/#what-it-does","title":"What it does","text":"<p>Checks for string literals that are explicitly concatenated (using the <code>+</code> operator).</p>","tags":["ISC003"]},{"location":"rules/explicit-string-concatenation/#why-is-this-bad","title":"Why is this bad?","text":"<p>For string literals that wrap across multiple lines, implicit string concatenation within parentheses is preferred over explicit concatenation using the <code>+</code> operator, as the former is more readable.</p>","tags":["ISC003"]},{"location":"rules/explicit-string-concatenation/#example","title":"Example","text":"<pre><code>z = (\n\"The quick brown fox jumps over the lazy \"\n+ \"dog\"\n)\n</code></pre> <p>Use instead:</p> <pre><code>z = (\n\"The quick brown fox jumps over the lazy \"\n\"dog\"\n)\n</code></pre>","tags":["ISC003"]},{"location":"rules/expr-and-false/","title":"expr-and-false (SIM223)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM223"]},{"location":"rules/expr-and-false/#what-it-does","title":"What it does","text":"<p>Checks for <code>and</code> expressions that contain falsey values.</p>","tags":["SIM223"]},{"location":"rules/expr-and-false/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the expression is used as a condition, it can be replaced in-full with <code>False</code>.</p> <p>In other cases, the expression can be short-circuited to the first falsey value.</p> <p>By using <code>False</code> (or the first falsey value), the code is more concise and easier to understand, since it no longer contains redundant conditions.</p>","tags":["SIM223"]},{"location":"rules/expr-and-false/#example","title":"Example","text":"<pre><code>if x and [] and y:\npass\na = x and [] and y\n</code></pre> <p>Use instead:</p> <pre><code>if False:\npass\na = x and []\n</code></pre>","tags":["SIM223"]},{"location":"rules/expr-and-not-expr/","title":"expr-and-not-expr (SIM220)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM220"]},{"location":"rules/expr-and-not-expr/#what-it-does","title":"What it does","text":"<p>Checks for <code>and</code> expressions that include both an expression and its negation.</p>","tags":["SIM220"]},{"location":"rules/expr-and-not-expr/#why-is-this-bad","title":"Why is this bad?","text":"<p>An <code>and</code> expression that includes both an expression and its negation will always evaluate to <code>False</code>.</p>","tags":["SIM220"]},{"location":"rules/expr-and-not-expr/#example","title":"Example","text":"<pre><code>x and not x\n</code></pre>","tags":["SIM220"]},{"location":"rules/expr-and-not-expr/#references","title":"References","text":"<ul> <li>Python documentation: Boolean operations</li> </ul>","tags":["SIM220"]},{"location":"rules/expr-or-not-expr/","title":"expr-or-not-expr (SIM221)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM221"]},{"location":"rules/expr-or-not-expr/#what-it-does","title":"What it does","text":"<p>Checks for <code>or</code> expressions that include both an expression and its negation.</p>","tags":["SIM221"]},{"location":"rules/expr-or-not-expr/#why-is-this-bad","title":"Why is this bad?","text":"<p>An <code>or</code> expression that includes both an expression and its negation will always evaluate to <code>True</code>.</p>","tags":["SIM221"]},{"location":"rules/expr-or-not-expr/#example","title":"Example","text":"<pre><code>x or not x\n</code></pre>","tags":["SIM221"]},{"location":"rules/expr-or-not-expr/#references","title":"References","text":"<ul> <li>Python documentation: Boolean operations</li> </ul>","tags":["SIM221"]},{"location":"rules/expr-or-true/","title":"expr-or-true (SIM222)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM222"]},{"location":"rules/expr-or-true/#what-it-does","title":"What it does","text":"<p>Checks for <code>or</code> expressions that contain truthy values.</p>","tags":["SIM222"]},{"location":"rules/expr-or-true/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the expression is used as a condition, it can be replaced in-full with <code>True</code>.</p> <p>In other cases, the expression can be short-circuited to the first truthy value.</p> <p>By using <code>True</code> (or the first truthy value), the code is more concise and easier to understand, since it no longer contains redundant conditions.</p>","tags":["SIM222"]},{"location":"rules/expr-or-true/#example","title":"Example","text":"<pre><code>if x or [1] or y:\npass\na = x or [1] or y\n</code></pre> <p>Use instead:</p> <pre><code>if True:\npass\na = x or [1]\n</code></pre>","tags":["SIM222"]},{"location":"rules/expressions-in-star-assignment/","title":"expressions-in-star-assignment (F621)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F621"]},{"location":"rules/expressions-in-star-assignment/#what-it-does","title":"What it does","text":"<p>Checks for the use of too many expressions in starred assignment statements.</p>","tags":["F621"]},{"location":"rules/expressions-in-star-assignment/#why-is-this-bad","title":"Why is this bad?","text":"<p>In assignment statements, starred expressions can be used to unpack iterables.</p> <p>In Python 3, no more than 1 &lt;&lt; 8 assignments are allowed before a starred expression, and no more than 1 &lt;&lt; 24 expressions are allowed after a starred expression.</p>","tags":["F621"]},{"location":"rules/expressions-in-star-assignment/#references","title":"References","text":"<ul> <li>PEP 3132 \u2013 Extended Iterable Unpacking</li> </ul>","tags":["F621"]},{"location":"rules/extraneous-parentheses/","title":"extraneous-parentheses (UP034)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP034"]},{"location":"rules/extraneous-parentheses/#what-it-does","title":"What it does","text":"<p>Checks for extraneous parentheses.</p>","tags":["UP034"]},{"location":"rules/extraneous-parentheses/#why-is-this-bad","title":"Why is this bad?","text":"<p>Extraneous parentheses are redundant, and can be removed to improve readability while retaining identical semantics.</p>","tags":["UP034"]},{"location":"rules/extraneous-parentheses/#example","title":"Example","text":"<pre><code>print((\"Hello, world\"))\n</code></pre> <p>Use instead:</p> <pre><code>print(\"Hello, world\")\n</code></pre>","tags":["UP034"]},{"location":"rules/f-string-docstring/","title":"f-string-docstring (B021)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B021"]},{"location":"rules/f-string-docstring/#what-it-does","title":"What it does","text":"<p>Checks for docstrings that are written via f-strings.</p>","tags":["B021"]},{"location":"rules/f-string-docstring/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python will interpret the f-string as a joined string, rather than as a docstring. As such, the \"docstring\" will not be accessible via the <code>__doc__</code> attribute, nor will it be picked up by any automated documentation tooling.</p>","tags":["B021"]},{"location":"rules/f-string-docstring/#example","title":"Example","text":"<pre><code>def foo():\nf\"\"\"Not a docstring.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def foo():\n\"\"\"A docstring.\"\"\"\n</code></pre>","tags":["B021"]},{"location":"rules/f-string-docstring/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>Python documentation: Formatted string literals</li> </ul>","tags":["B021"]},{"location":"rules/f-string-in-exception/","title":"f-string-in-exception (EM102)","text":"<p>Derived from the flake8-errmsg linter.</p> <p>Fix is sometimes available.</p>","tags":["EM102"]},{"location":"rules/f-string-in-exception/#what-it-does","title":"What it does","text":"<p>Checks for the use of f-strings in exception constructors.</p>","tags":["EM102"]},{"location":"rules/f-string-in-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python includes the <code>raise</code> in the default traceback (and formatters like Rich and IPython do too).</p> <p>By using an f-string, the error message will be duplicated in the traceback, which can make the traceback less readable.</p>","tags":["EM102"]},{"location":"rules/f-string-in-exception/#example","title":"Example","text":"<p>Given:</p> <pre><code>sub = \"Some value\"\nraise RuntimeError(f\"{sub!r} is incorrect\")\n</code></pre> <p>Python will produce a traceback like:</p> <pre><code>Traceback (most recent call last):\n  File \"tmp.py\", line 2, in &lt;module&gt;\n    raise RuntimeError(f\"{sub!r} is incorrect\")\nRuntimeError: 'Some value' is incorrect\n</code></pre> <p>Instead, assign the string to a variable:</p> <pre><code>sub = \"Some value\"\nmsg = f\"{sub!r} is incorrect\"\nraise RuntimeError(msg)\n</code></pre> <p>Which will produce a traceback like:</p> <pre><code>Traceback (most recent call last):\n  File \"tmp.py\", line 3, in &lt;module&gt;\n    raise RuntimeError(msg)\nRuntimeError: 'Some value' is incorrect\n</code></pre>","tags":["EM102"]},{"location":"rules/f-string-in-get-text-func-call/","title":"f-string-in-get-text-func-call (INT001)","text":"<p>Derived from the flake8-gettext linter.</p>","tags":["INT001"]},{"location":"rules/f-string-in-get-text-func-call/#what-it-does","title":"What it does","text":"<p>Checks for f-strings in <code>gettext</code> function calls.</p>","tags":["INT001"]},{"location":"rules/f-string-in-get-text-func-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>In the <code>gettext</code> API, the <code>gettext</code> function (often aliased to <code>_</code>) returns a translation of its input argument by looking it up in a translation catalog.</p> <p>Calling <code>gettext</code> with an f-string as its argument can cause unexpected behavior. Since the f-string is resolved before the function call, the translation catalog will look up the formatted string, rather than the f-string template.</p> <p>Instead, format the value returned by the function call, rather than its argument.</p>","tags":["INT001"]},{"location":"rules/f-string-in-get-text-func-call/#example","title":"Example","text":"<pre><code>from gettext import gettext as _\nname = \"Maria\"\n_(f\"Hello, {name}!\")  # Looks for \"Hello, Maria!\".\n</code></pre> <p>Use instead:</p> <pre><code>from gettext import gettext as _\nname = \"Maria\"\n_(\"Hello, %s!\") % name  # Looks for \"Hello, %s!\".\n</code></pre>","tags":["INT001"]},{"location":"rules/f-string-in-get-text-func-call/#references","title":"References","text":"<ul> <li>Python documentation: <code>gettext</code> \u2014 Multilingual internationalization services</li> </ul>","tags":["INT001"]},{"location":"rules/f-string-missing-placeholders/","title":"f-string-missing-placeholders (F541)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is always available.</p>","tags":["F541"]},{"location":"rules/f-string-missing-placeholders/#what-it-does","title":"What it does","text":"<p>Checks for f-strings that do not contain any placeholder expressions.</p>","tags":["F541"]},{"location":"rules/f-string-missing-placeholders/#why-is-this-bad","title":"Why is this bad?","text":"<p>f-strings are a convenient way to format strings, but they are not necessary if there are no placeholder expressions to format. In this case, a regular string should be used instead, as an f-string without placeholders can be confusing for readers, who may expect such a placeholder to be present.</p> <p>An f-string without any placeholders could also indicate that the author forgot to add a placeholder expression.</p>","tags":["F541"]},{"location":"rules/f-string-missing-placeholders/#example","title":"Example","text":"<pre><code>f\"Hello, world!\"\n</code></pre> <p>Use instead:</p> <pre><code>\"Hello, world!\"\n</code></pre> <p>Note: to maintain compatibility with PyFlakes, this rule only flags f-strings that are part of an implicit concatenation if none of the f-string segments contain placeholder expressions.</p> <p>For example:</p> <pre><code># Will not be flagged.\n(\nf\"Hello,\"\nf\" {name}!\"\n)\n# Will be flagged.\n(\nf\"Hello,\"\nf\" World!\"\n)\n</code></pre> <p>See #10885 for more.</p>","tags":["F541"]},{"location":"rules/f-string-missing-placeholders/#references","title":"References","text":"<ul> <li>PEP 498 \u2013 Literal String Interpolation</li> </ul>","tags":["F541"]},{"location":"rules/f-string-number-format/","title":"f-string-number-format (FURB116)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB116"]},{"location":"rules/f-string-number-format/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>bin(...)[2:]</code> (or <code>hex</code>, or <code>oct</code>) to convert an integer into a string.</p>","tags":["FURB116"]},{"location":"rules/f-string-number-format/#why-is-this-bad","title":"Why is this bad?","text":"<p>When converting an integer to a baseless binary, hexadecimal, or octal string, using f-strings is more concise and readable than using the <code>bin</code>, <code>hex</code>, or <code>oct</code> functions followed by a slice.</p>","tags":["FURB116"]},{"location":"rules/f-string-number-format/#example","title":"Example","text":"<pre><code>print(bin(1337)[2:])\n</code></pre> <p>Use instead:</p> <pre><code>print(f\"{1337:b}\")\n</code></pre>","tags":["FURB116"]},{"location":"rules/f-string/","title":"f-string (UP032)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP032"]},{"location":"rules/f-string/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.format</code> calls that can be replaced with f-strings.</p>","tags":["UP032"]},{"location":"rules/f-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>f-strings are more readable and generally preferred over <code>str.format</code> calls.</p>","tags":["UP032"]},{"location":"rules/f-string/#example","title":"Example","text":"<pre><code>\"{}\".format(foo)\n</code></pre> <p>Use instead:</p> <pre><code>f\"{foo}\"\n</code></pre>","tags":["UP032"]},{"location":"rules/f-string/#references","title":"References","text":"<ul> <li>Python documentation: f-strings</li> </ul>","tags":["UP032"]},{"location":"rules/fast-api-non-annotated-dependency/","title":"fast-api-non-annotated-dependency (FAST002)","text":"<p>Derived from the FastAPI linter.</p> <p>Fix is sometimes available.</p>","tags":["FAST002"]},{"location":"rules/fast-api-non-annotated-dependency/#what-it-does","title":"What it does","text":"<p>Identifies FastAPI routes with deprecated uses of <code>Depends</code> or similar.</p>","tags":["FAST002"]},{"location":"rules/fast-api-non-annotated-dependency/#why-is-this-bad","title":"Why is this bad?","text":"<p>The FastAPI documentation recommends the use of <code>typing.Annotated</code> for defining route dependencies and parameters, rather than using <code>Depends</code>, <code>Query</code> or similar as a default value for a parameter. Using this approach everywhere helps ensure consistency and clarity in defining dependencies and parameters.</p> <p><code>Annotated</code> was added to the <code>typing</code> module in Python 3.9; however, the third-party <code>typing_extensions</code> package provides a backport that can be used on older versions of Python.</p>","tags":["FAST002"]},{"location":"rules/fast-api-non-annotated-dependency/#example","title":"Example","text":"<pre><code>from fastapi import Depends, FastAPI\napp = FastAPI()\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\nreturn {\"q\": q, \"skip\": skip, \"limit\": limit}\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\nreturn commons\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Annotated\nfrom fastapi import Depends, FastAPI\napp = FastAPI()\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\nreturn {\"q\": q, \"skip\": skip, \"limit\": limit}\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\nreturn commons\n</code></pre>","tags":["FAST002"]},{"location":"rules/fast-api-redundant-response-model/","title":"fast-api-redundant-response-model (FAST001)","text":"<p>Derived from the FastAPI linter.</p> <p>Fix is always available.</p>","tags":["FAST001"]},{"location":"rules/fast-api-redundant-response-model/#what-it-does","title":"What it does","text":"<p>Checks for FastAPI routes that use the optional <code>response_model</code> parameter with the same type as the return type.</p>","tags":["FAST001"]},{"location":"rules/fast-api-redundant-response-model/#why-is-this-bad","title":"Why is this bad?","text":"<p>FastAPI routes automatically infer the response model type from the return type, so specifying it explicitly is redundant.</p> <p>The <code>response_model</code> parameter is used to override the default response model type. For example, <code>response_model</code> can be used to specify that a non-serializable response type should instead be serialized via an alternative type.</p> <p>For more information, see the FastAPI documentation.</p>","tags":["FAST001"]},{"location":"rules/fast-api-redundant-response-model/#example","title":"Example","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\nclass Item(BaseModel):\nname: str\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Item:\nreturn item\n</code></pre> <p>Use instead:</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\nclass Item(BaseModel):\nname: str\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\nreturn item\n</code></pre>","tags":["FAST001"]},{"location":"rules/fast-api-unused-path-parameter/","title":"fast-api-unused-path-parameter (FAST003)","text":"<p>Derived from the FastAPI linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FAST003"]},{"location":"rules/fast-api-unused-path-parameter/#what-it-does","title":"What it does","text":"<p>Identifies FastAPI routes that declare path parameters in the route path that are not included in the function signature.</p>","tags":["FAST003"]},{"location":"rules/fast-api-unused-path-parameter/#why-is-this-bad","title":"Why is this bad?","text":"<p>Path parameters are used to extract values from the URL path.</p> <p>If a path parameter is declared in the route path but not in the function signature, it will not be accessible in the function body, which is likely a mistake.</p> <p>If a path parameter is declared in the route path, but as a positional-only argument in the function signature, it will also not be accessible in the function body, as FastAPI will not inject the parameter.</p>","tags":["FAST003"]},{"location":"rules/fast-api-unused-path-parameter/#known-problems","title":"Known problems","text":"<p>If the path parameter is not a valid Python identifier (e.g., <code>user-id</code>, as opposed to <code>user_id</code>), FastAPI will normalize it. However, this rule simply ignores such path parameters, as FastAPI's normalization behavior is undocumented.</p>","tags":["FAST003"]},{"location":"rules/fast-api-unused-path-parameter/#example","title":"Example","text":"<pre><code>from fastapi import FastAPI\napp = FastAPI()\n@app.get(\"/things/{thing_id}\")\nasync def read_thing(query: str): ...\n</code></pre> <p>Use instead:</p> <pre><code>from fastapi import FastAPI\napp = FastAPI()\n@app.get(\"/things/{thing_id}\")\nasync def read_thing(thing_id: int, query: str): ...\n</code></pre>","tags":["FAST003"]},{"location":"rules/fast-api-unused-path-parameter/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as modifying a function signature can change the behavior of the code.</p>","tags":["FAST003"]},{"location":"rules/first-line-capitalized/","title":"first-line-capitalized (D403)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D403"]},{"location":"rules/first-line-capitalized/#what-it-does","title":"What it does","text":"<p>Checks for docstrings that do not start with a capital letter.</p>","tags":["D403"]},{"location":"rules/first-line-capitalized/#why-is-this-bad","title":"Why is this bad?","text":"<p>The first character in a docstring should be capitalized for, grammatical correctness and consistency.</p>","tags":["D403"]},{"location":"rules/first-line-capitalized/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"return the mean of the given values.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D403"]},{"location":"rules/first-line-capitalized/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D403"]},{"location":"rules/fits-on-one-line/","title":"fits-on-one-line (D200)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is sometimes available.</p>","tags":["D200"]},{"location":"rules/fits-on-one-line/#what-it-does","title":"What it does","text":"<p>Checks for single-line docstrings that are broken across multiple lines.</p>","tags":["D200"]},{"location":"rules/fits-on-one-line/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that docstrings that can fit on one line should be formatted on a single line, for consistency and readability.</p>","tags":["D200"]},{"location":"rules/fits-on-one-line/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"\n    Return the mean of the given values.\n    \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D200"]},{"location":"rules/fits-on-one-line/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> </ul>","tags":["D200"]},{"location":"rules/flask-debug-true/","title":"flask-debug-true (S201)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S201"]},{"location":"rules/flask-debug-true/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>debug=True</code> in Flask.</p>","tags":["S201"]},{"location":"rules/flask-debug-true/#why-is-this-bad","title":"Why is this bad?","text":"<p>Enabling debug mode shows an interactive debugger in the browser if an error occurs, and allows running arbitrary Python code from the browser. This could leak sensitive information, or allow an attacker to run arbitrary code.</p>","tags":["S201"]},{"location":"rules/flask-debug-true/#example","title":"Example","text":"<pre><code>import flask\napp = Flask()\napp.run(debug=True)\n</code></pre> <p>Use instead:</p> <pre><code>import flask\napp = Flask()\napp.run(debug=os.environ[\"ENV\"] == \"dev\")\n</code></pre>","tags":["S201"]},{"location":"rules/flask-debug-true/#references","title":"References","text":"<ul> <li>Flask documentation: Debug Mode</li> </ul>","tags":["S201"]},{"location":"rules/for-loop-set-mutations/","title":"for-loop-set-mutations (FURB142)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB142"]},{"location":"rules/for-loop-set-mutations/#what-it-does","title":"What it does","text":"<p>Checks for code that updates a set with the contents of an iterable by using a <code>for</code> loop to call <code>.add()</code> or <code>.discard()</code> on each element separately.</p>","tags":["FURB142"]},{"location":"rules/for-loop-set-mutations/#why-is-this-bad","title":"Why is this bad?","text":"<p>When adding or removing a batch of elements to or from a set, it's more idiomatic to use a single method call rather than adding or removing elements one by one.</p>","tags":["FURB142"]},{"location":"rules/for-loop-set-mutations/#example","title":"Example","text":"<pre><code>s = set()\nfor x in (1, 2, 3):\ns.add(x)\nfor x in (1, 2, 3):\ns.discard(x)\n</code></pre> <p>Use instead:</p> <pre><code>s = set()\ns.update((1, 2, 3))\ns.difference_update((1, 2, 3))\n</code></pre>","tags":["FURB142"]},{"location":"rules/for-loop-set-mutations/#references","title":"References","text":"<ul> <li>Python documentation: <code>set</code></li> </ul>","tags":["FURB142"]},{"location":"rules/format-in-get-text-func-call/","title":"format-in-get-text-func-call (INT002)","text":"<p>Derived from the flake8-gettext linter.</p>","tags":["INT002"]},{"location":"rules/format-in-get-text-func-call/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.format</code> calls in <code>gettext</code> function calls.</p>","tags":["INT002"]},{"location":"rules/format-in-get-text-func-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>In the <code>gettext</code> API, the <code>gettext</code> function (often aliased to <code>_</code>) returns a translation of its input argument by looking it up in a translation catalog.</p> <p>Calling <code>gettext</code> with a formatted string as its argument can cause unexpected behavior. Since the formatted string is resolved before the function call, the translation catalog will look up the formatted string, rather than the <code>str.format</code>-style template.</p> <p>Instead, format the value returned by the function call, rather than its argument.</p>","tags":["INT002"]},{"location":"rules/format-in-get-text-func-call/#example","title":"Example","text":"<pre><code>from gettext import gettext as _\nname = \"Maria\"\n_(\"Hello, %s!\" % name)  # Looks for \"Hello, Maria!\".\n</code></pre> <p>Use instead:</p> <pre><code>from gettext import gettext as _\nname = \"Maria\"\n_(\"Hello, %s!\") % name  # Looks for \"Hello, %s!\".\n</code></pre>","tags":["INT002"]},{"location":"rules/format-in-get-text-func-call/#references","title":"References","text":"<ul> <li>Python documentation: <code>gettext</code> \u2014 Multilingual internationalization services</li> </ul>","tags":["INT002"]},{"location":"rules/format-literals/","title":"format-literals (UP030)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP030"]},{"location":"rules/format-literals/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary positional indices in format strings.</p>","tags":["UP030"]},{"location":"rules/format-literals/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 3.1 and later, format strings can use implicit positional references. For example, <code>\"{0}, {1}\".format(\"Hello\", \"World\")</code> can be rewritten as <code>\"{}, {}\".format(\"Hello\", \"World\")</code>.</p> <p>If the positional indices appear exactly in-order, they can be omitted in favor of automatic indices to improve readability.</p>","tags":["UP030"]},{"location":"rules/format-literals/#example","title":"Example","text":"<pre><code>\"{0}, {1}\".format(\"Hello\", \"World\")  # \"Hello, World\"\n</code></pre> <p>Use instead:</p> <pre><code>\"{}, {}\".format(\"Hello\", \"World\")  # \"Hello, World\"\n</code></pre>","tags":["UP030"]},{"location":"rules/format-literals/#references","title":"References","text":"<ul> <li>Python documentation: Format String Syntax</li> <li>Python documentation: <code>str.format</code></li> </ul>","tags":["UP030"]},{"location":"rules/forward-annotation-syntax-error/","title":"forward-annotation-syntax-error (F722)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F722"]},{"location":"rules/forward-annotation-syntax-error/#what-it-does","title":"What it does","text":"<p>Checks for forward annotations that include invalid syntax.</p>","tags":["F722"]},{"location":"rules/forward-annotation-syntax-error/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, type annotations can be quoted as strings literals to enable references to types that have not yet been defined, known as \"forward references\".</p> <p>However, these quoted annotations must be valid Python expressions. The use of invalid syntax in a quoted annotation won't raise a <code>SyntaxError</code>, but will instead raise an error when type checking is performed.</p>","tags":["F722"]},{"location":"rules/forward-annotation-syntax-error/#example","title":"Example","text":"<pre><code>def foo() -&gt; \"/\": ...\n</code></pre>","tags":["F722"]},{"location":"rules/forward-annotation-syntax-error/#references","title":"References","text":"<ul> <li>PEP 563 \u2013 Postponed Evaluation of Annotations</li> </ul>","tags":["F722"]},{"location":"rules/function-call-in-dataclass-default-argument/","title":"function-call-in-dataclass-default-argument (RUF009)","text":"","tags":["RUF009"]},{"location":"rules/function-call-in-dataclass-default-argument/#what-it-does","title":"What it does","text":"<p>Checks for function calls in dataclass attribute defaults.</p>","tags":["RUF009"]},{"location":"rules/function-call-in-dataclass-default-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Function calls are only performed once, at definition time. The returned value is then reused by all instances of the dataclass. This can lead to unexpected behavior when the function call returns a mutable object, as changes to the object will be shared across all instances.</p> <p>If a field needs to be initialized with a mutable object, use the <code>field(default_factory=...)</code> pattern.</p>","tags":["RUF009"]},{"location":"rules/function-call-in-dataclass-default-argument/#examples","title":"Examples","text":"<pre><code>from dataclasses import dataclass\ndef simple_list() -&gt; list[int]:\nreturn [1, 2, 3, 4]\n@dataclass\nclass A:\nmutable_default: list[int] = simple_list()\n</code></pre> <p>Use instead:</p> <pre><code>from dataclasses import dataclass, field\ndef creating_list() -&gt; list[int]:\nreturn [1, 2, 3, 4]\n@dataclass\nclass A:\nmutable_default: list[int] = field(default_factory=creating_list)\n</code></pre>","tags":["RUF009"]},{"location":"rules/function-call-in-dataclass-default-argument/#options","title":"Options","text":"<ul> <li><code>lint.flake8-bugbear.extend-immutable-calls</code></li> </ul>","tags":["RUF009"]},{"location":"rules/function-call-in-default-argument/","title":"function-call-in-default-argument (B008)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B008"]},{"location":"rules/function-call-in-default-argument/#what-it-does","title":"What it does","text":"<p>Checks for function calls in default function arguments.</p>","tags":["B008"]},{"location":"rules/function-call-in-default-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Any function call that's used in a default argument will only be performed once, at definition time. The returned value will then be reused by all calls to the function, which can lead to unexpected behaviour.</p> <p>Calls can be marked as an exception to this rule with the <code>lint.flake8-bugbear.extend-immutable-calls</code> configuration option.</p> <p>Arguments with immutable type annotations will be ignored by this rule. Types outside of the standard library can be marked as immutable with the <code>lint.flake8-bugbear.extend-immutable-calls</code> configuration option as well.</p>","tags":["B008"]},{"location":"rules/function-call-in-default-argument/#example","title":"Example","text":"<pre><code>def create_list() -&gt; list[int]:\nreturn [1, 2, 3]\ndef mutable_default(arg: list[int] = create_list()) -&gt; list[int]:\narg.append(4)\nreturn arg\n</code></pre> <p>Use instead:</p> <pre><code>def better(arg: list[int] | None = None) -&gt; list[int]:\nif arg is None:\narg = create_list()\narg.append(4)\nreturn arg\n</code></pre> <p>If the use of a singleton is intentional, assign the result call to a module-level variable, and use that variable in the default argument:</p> <pre><code>ERROR = ValueError(\"Hosts weren't successfully added\")\ndef add_host(error: Exception = ERROR) -&gt; None: ...\n</code></pre>","tags":["B008"]},{"location":"rules/function-call-in-default-argument/#options","title":"Options","text":"<ul> <li><code>lint.flake8-bugbear.extend-immutable-calls</code></li> </ul>","tags":["B008"]},{"location":"rules/function-uses-loop-variable/","title":"function-uses-loop-variable (B023)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B023"]},{"location":"rules/function-uses-loop-variable/#what-it-does","title":"What it does","text":"<p>Checks for function definitions that use a loop variable.</p>","tags":["B023"]},{"location":"rules/function-uses-loop-variable/#why-is-this-bad","title":"Why is this bad?","text":"<p>The loop variable is not bound in the function definition, so it will always have the value it had in the last iteration when the function is called.</p> <p>Instead, consider using a default argument to bind the loop variable at function definition time. Or, use <code>functools.partial</code>.</p>","tags":["B023"]},{"location":"rules/function-uses-loop-variable/#example","title":"Example","text":"<pre><code>adders = [lambda x: x + i for i in range(3)]\nvalues = [adder(1) for adder in adders]  # [3, 3, 3]\n</code></pre> <p>Use instead:</p> <pre><code>adders = [lambda x, i=i: x + i for i in range(3)]\nvalues = [adder(1) for adder in adders]  # [1, 2, 3]\n</code></pre> <p>Or:</p> <pre><code>from functools import partial\nadders = [partial(lambda x, i: x + i, i=i) for i in range(3)]\nvalues = [adder(1) for adder in adders]  # [1, 2, 3]\n</code></pre>","tags":["B023"]},{"location":"rules/function-uses-loop-variable/#references","title":"References","text":"<ul> <li>The Hitchhiker's Guide to Python: Late Binding Closures</li> <li>Python documentation: <code>functools.partial</code></li> </ul>","tags":["B023"]},{"location":"rules/future-annotations-in-stub/","title":"future-annotations-in-stub (PYI044)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI044"]},{"location":"rules/future-annotations-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for the presence of the <code>from __future__ import annotations</code> import statement in stub files.</p>","tags":["PYI044"]},{"location":"rules/future-annotations-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files natively support forward references in all contexts, as stubs are never executed at runtime. (They should be thought of as \"data files\" for type checkers.) As such, the <code>from __future__ import annotations</code> import statement has no effect and should be omitted.</p>","tags":["PYI044"]},{"location":"rules/future-annotations-in-stub/#references","title":"References","text":"<ul> <li>Static Typing with Python: Type Stubs</li> </ul>","tags":["PYI044"]},{"location":"rules/future-feature-not-defined/","title":"future-feature-not-defined (F407)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F407"]},{"location":"rules/future-feature-not-defined/#what-it-does","title":"What it does","text":"<p>Checks for <code>__future__</code> imports that are not defined in the current Python version.</p>","tags":["F407"]},{"location":"rules/future-feature-not-defined/#why-is-this-bad","title":"Why is this bad?","text":"<p>Importing undefined or unsupported members from the <code>__future__</code> module is a <code>SyntaxError</code>.</p>","tags":["F407"]},{"location":"rules/future-feature-not-defined/#references","title":"References","text":"<ul> <li>Python documentation: <code>__future__</code></li> </ul>","tags":["F407"]},{"location":"rules/future-required-type-annotation/","title":"future-required-type-annotation (FA102)","text":"<p>Derived from the flake8-future-annotations linter.</p> <p>Fix is always available.</p>","tags":["FA102"]},{"location":"rules/future-required-type-annotation/#what-it-does","title":"What it does","text":"<p>Checks for uses of PEP 585- and PEP 604-style type annotations in Python modules that lack the required <code>from __future__ import annotations</code> import for compatibility with older Python versions.</p>","tags":["FA102"]},{"location":"rules/future-required-type-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using PEP 585 and PEP 604 style annotations without a <code>from __future__ import annotations</code> import will cause runtime errors on Python versions prior to 3.9 and 3.10, respectively.</p> <p>By adding the <code>__future__</code> import, the interpreter will no longer interpret annotations at evaluation time, making the code compatible with both past and future Python versions.</p> <p>This rule respects the <code>target-version</code> setting. For example, if your project targets Python 3.10 and above, adding <code>from __future__ import annotations</code> does not impact your ability to leverage PEP 604-style unions (e.g., to convert <code>Optional[str]</code> to <code>str | None</code>). As such, this rule will only flag such usages if your project targets Python 3.9 or below.</p>","tags":["FA102"]},{"location":"rules/future-required-type-annotation/#example","title":"Example","text":"<pre><code>def func(obj: dict[str, int | None]) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\ndef func(obj: dict[str, int | None]) -&gt; None: ...\n</code></pre>","tags":["FA102"]},{"location":"rules/future-required-type-annotation/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as adding <code>from __future__ import annotations</code> may change the semantics of the program.</p>","tags":["FA102"]},{"location":"rules/future-required-type-annotation/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["FA102"]},{"location":"rules/future-rewritable-type-annotation/","title":"future-rewritable-type-annotation (FA100)","text":"<p>Derived from the flake8-future-annotations linter.</p>","tags":["FA100"]},{"location":"rules/future-rewritable-type-annotation/#what-it-does","title":"What it does","text":"<p>Checks for missing <code>from __future__ import annotations</code> imports upon detecting type annotations that can be written more succinctly under PEP 563.</p>","tags":["FA100"]},{"location":"rules/future-rewritable-type-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 585 enabled the use of a number of convenient type annotations, such as <code>list[str]</code> instead of <code>List[str]</code>. However, these annotations are only available on Python 3.9 and higher, unless the <code>from __future__ import annotations</code> import is present.</p> <p>Similarly, PEP 604 enabled the use of the <code>|</code> operator for unions, such as <code>str | None</code> instead of <code>Optional[str]</code>. However, these annotations are only available on Python 3.10 and higher, unless the <code>from __future__ import annotations</code> import is present.</p> <p>By adding the <code>__future__</code> import, the pyupgrade rules can automatically migrate existing code to use the new syntax, even for older Python versions. This rule thus pairs well with pyupgrade and with Ruff's pyupgrade rules.</p> <p>This rule respects the <code>target-version</code> setting. For example, if your project targets Python 3.10 and above, adding <code>from __future__ import annotations</code> does not impact your ability to leverage PEP 604-style unions (e.g., to convert <code>Optional[str]</code> to <code>str | None</code>). As such, this rule will only flag such usages if your project targets Python 3.9 or below.</p>","tags":["FA100"]},{"location":"rules/future-rewritable-type-annotation/#example","title":"Example","text":"<pre><code>from typing import List, Dict, Optional\ndef func(obj: Dict[str, Optional[int]]) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\nfrom typing import List, Dict, Optional\ndef func(obj: Dict[str, Optional[int]]) -&gt; None: ...\n</code></pre> <p>After running the additional pyupgrade rules:</p> <pre><code>from __future__ import annotations\ndef func(obj: dict[str, int | None]) -&gt; None: ...\n</code></pre>","tags":["FA100"]},{"location":"rules/future-rewritable-type-annotation/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["FA100"]},{"location":"rules/generator-return-from-iter-method/","title":"generator-return-from-iter-method (PYI058)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI058"]},{"location":"rules/generator-return-from-iter-method/#what-it-does","title":"What it does","text":"<p>Checks for simple <code>__iter__</code> methods that return <code>Generator</code>, and for simple <code>__aiter__</code> methods that return <code>AsyncGenerator</code>.</p>","tags":["PYI058"]},{"location":"rules/generator-return-from-iter-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>(Async)Iterator</code> for these methods is simpler and more elegant. More importantly, it also reflects the fact that the precise kind of iterator returned from an <code>__iter__</code> method is usually an implementation detail that could change at any time. Type annotations help define a contract for a function; implementation details should not leak into that contract.</p> <p>For example:</p> <pre><code>from collections.abc import AsyncGenerator, Generator\nfrom typing import Any\nclass CustomIterator:\ndef __iter__(self) -&gt; Generator:\nyield from range(42)\nclass CustomIterator2:\ndef __iter__(self) -&gt; Generator[str, Any, None]:\nyield from \"abcdefg\"\n</code></pre> <p>Use instead:</p> <pre><code>from collections.abc import Iterator\nclass CustomIterator:\ndef __iter__(self) -&gt; Iterator:\nyield from range(42)\nclass CustomIterator2:\ndef __iter__(self) -&gt; Iterator[str]:\nyield from \"abdefg\"\n</code></pre>","tags":["PYI058"]},{"location":"rules/generator-return-from-iter-method/#fix-safety","title":"Fix safety","text":"<p>This rule tries hard to avoid false-positive errors, and the rule's fix should always be safe for <code>.pyi</code> stub files. However, there is a slightly higher chance that a false positive might be emitted by this rule when applied to runtime Python (<code>.py</code> files). As such, the fix is marked as unsafe for any <code>__iter__</code> or <code>__aiter__</code> method in a <code>.py</code> file that has more than two statements (including docstrings) in its body.</p>","tags":["PYI058"]},{"location":"rules/generic-not-last-base-class/","title":"generic-not-last-base-class (PYI059)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PYI059"]},{"location":"rules/generic-not-last-base-class/#what-it-does","title":"What it does","text":"<p>Checks for classes inheriting from <code>typing.Generic[]</code> where <code>Generic[]</code> is not the last base class in the bases tuple.</p>","tags":["PYI059"]},{"location":"rules/generic-not-last-base-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>If <code>Generic[]</code> is not the final class in the bases tuple, unexpected behaviour can occur at runtime (See this CPython issue for an example). The rule is also applied to stub files, but, unlike at runtime, in stubs it is purely enforced for stylistic consistency.</p> <p>For example:</p> <pre><code>class LinkedList(Generic[T], Sized):\ndef push(self, item: T) -&gt; None:\nself._items.append(item)\nclass MyMapping(\nGeneric[K, V],\nIterable[Tuple[K, V]],\nContainer[Tuple[K, V]],\n):\n...\n</code></pre> <p>Use instead:</p> <pre><code>class LinkedList(Sized, Generic[T]):\ndef push(self, item: T) -&gt; None:\nself._items.append(item)\nclass MyMapping(\nIterable[Tuple[K, V]],\nContainer[Tuple[K, V]],\nGeneric[K, V],\n):\n...\n</code></pre>","tags":["PYI059"]},{"location":"rules/generic-not-last-base-class/#references","title":"References","text":"<ul> <li><code>typing.Generic</code> documentation</li> </ul>","tags":["PYI059"]},{"location":"rules/get-attr-with-constant/","title":"get-attr-with-constant (B009)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is always available.</p>","tags":["B009"]},{"location":"rules/get-attr-with-constant/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>getattr</code> that take a constant attribute value as an argument (e.g., <code>getattr(obj, \"foo\")</code>).</p>","tags":["B009"]},{"location":"rules/get-attr-with-constant/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>getattr</code> is used to access attributes dynamically. If the attribute is defined as a constant, it is no safer than a typical property access. When possible, prefer property access over <code>getattr</code> calls, as the former is more concise and idiomatic.</p>","tags":["B009"]},{"location":"rules/get-attr-with-constant/#example","title":"Example","text":"<pre><code>getattr(obj, \"foo\")\n</code></pre> <p>Use instead:</p> <pre><code>obj.foo\n</code></pre>","tags":["B009"]},{"location":"rules/get-attr-with-constant/#references","title":"References","text":"<ul> <li>Python documentation: <code>getattr</code></li> </ul>","tags":["B009"]},{"location":"rules/glob/","title":"glob (PTH207)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH207"]},{"location":"rules/glob/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>glob</code> and <code>iglob</code>.</p>","tags":["PTH207"]},{"location":"rules/glob/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code> and <code>glob</code>.</p> <p>When possible, using <code>Path</code> object methods such as <code>Path.glob()</code> can improve readability over their low-level counterparts (e.g., <code>glob.glob()</code>).</p> <p>Note that <code>glob.glob</code> and <code>Path.glob</code> are not exact equivalents:</p> <code>glob</code> <code>Path.glob</code> Hidden files Excludes hidden files by default. From Python 3.11 onwards, the <code>include_hidden</code> keyword can be used to include hidden directories. Includes hidden files by default. Iterator <code>iglob</code> returns an iterator. Under the hood, <code>glob</code> simply converts the iterator to a list. <code>Path.glob</code> returns an iterator. Working directory <code>glob</code> takes a <code>root_dir</code> keyword to set the current working directory. <code>Path.rglob</code> can be used to return the relative path. Globstar (<code>**</code>) <code>glob</code> requires the <code>recursive</code> flag to be set to <code>True</code> for the <code>**</code> pattern to match any files and zero or more directories, subdirectories, and symbolic links. The <code>**</code> pattern in <code>Path.glob</code> means \"this directory and all subdirectories, recursively\". In other words, it enables recursive globbing.","tags":["PTH207"]},{"location":"rules/glob/#example","title":"Example","text":"<pre><code>import glob\nimport os\nglob.glob(os.path.join(path, \"requirements*.txt\"))\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(path).glob(\"requirements*.txt\")\n</code></pre>","tags":["PTH207"]},{"location":"rules/glob/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.glob</code></li> <li>Python documentation: <code>Path.rglob</code></li> <li>Python documentation: <code>glob.glob</code></li> <li>Python documentation: <code>glob.iglob</code></li> </ul>","tags":["PTH207"]},{"location":"rules/global-at-module-level/","title":"global-at-module-level (PLW0604)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0604"]},{"location":"rules/global-at-module-level/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>global</code> keyword at the module level.</p>","tags":["PLW0604"]},{"location":"rules/global-at-module-level/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>global</code> keyword is used within functions to indicate that a name refers to a global variable, rather than a local variable.</p> <p>At the module level, all names are global by default, so the <code>global</code> keyword is redundant.</p>","tags":["PLW0604"]},{"location":"rules/global-statement/","title":"global-statement (PLW0603)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0603"]},{"location":"rules/global-statement/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>global</code> statements to update identifiers.</p>","tags":["PLW0603"]},{"location":"rules/global-statement/#why-is-this-bad","title":"Why is this bad?","text":"<p>Pylint discourages the use of <code>global</code> variables as global mutable state is a common source of bugs and confusing behavior.</p>","tags":["PLW0603"]},{"location":"rules/global-statement/#example","title":"Example","text":"<pre><code>var = 1\ndef foo():\nglobal var  # [global-statement]\nvar = 10\nprint(var)\nfoo()\nprint(var)\n</code></pre> <p>Use instead:</p> <pre><code>var = 1\ndef foo():\nprint(var)\nreturn 10\nvar = foo()\nprint(var)\n</code></pre>","tags":["PLW0603"]},{"location":"rules/global-variable-not-assigned/","title":"global-variable-not-assigned (PLW0602)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0602"]},{"location":"rules/global-variable-not-assigned/#what-it-does","title":"What it does","text":"<p>Checks for <code>global</code> variables that are not assigned a value in the current scope.</p>","tags":["PLW0602"]},{"location":"rules/global-variable-not-assigned/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>global</code> keyword allows an inner scope to modify a variable declared in the outer scope. If the variable is not modified within the inner scope, there is no need to use <code>global</code>.</p>","tags":["PLW0602"]},{"location":"rules/global-variable-not-assigned/#example","title":"Example","text":"<pre><code>DEBUG = True\ndef foo():\nglobal DEBUG\nif DEBUG:\nprint(\"foo() called\")\n...\n</code></pre> <p>Use instead:</p> <pre><code>DEBUG = True\ndef foo():\nif DEBUG:\nprint(\"foo() called\")\n...\n</code></pre>","tags":["PLW0602"]},{"location":"rules/global-variable-not-assigned/#references","title":"References","text":"<ul> <li>Python documentation: The <code>global</code> statement</li> </ul>","tags":["PLW0602"]},{"location":"rules/hardcoded-bind-all-interfaces/","title":"hardcoded-bind-all-interfaces (S104)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S104"]},{"location":"rules/hardcoded-bind-all-interfaces/#what-it-does","title":"What it does","text":"<p>Checks for hardcoded bindings to all network interfaces (<code>0.0.0.0</code>).</p>","tags":["S104"]},{"location":"rules/hardcoded-bind-all-interfaces/#why-is-this-bad","title":"Why is this bad?","text":"<p>Binding to all network interfaces is insecure as it allows access from unintended interfaces, which may be poorly secured or unauthorized.</p> <p>Instead, bind to specific interfaces.</p>","tags":["S104"]},{"location":"rules/hardcoded-bind-all-interfaces/#example","title":"Example","text":"<pre><code>ALLOWED_HOSTS = [\"0.0.0.0\"]\n</code></pre> <p>Use instead:</p> <pre><code>ALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\"]\n</code></pre>","tags":["S104"]},{"location":"rules/hardcoded-bind-all-interfaces/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-200</li> </ul>","tags":["S104"]},{"location":"rules/hardcoded-password-default/","title":"hardcoded-password-default (S107)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S107"]},{"location":"rules/hardcoded-password-default/#what-it-does","title":"What it does","text":"<p>Checks for potential uses of hardcoded passwords in function argument defaults.</p>","tags":["S107"]},{"location":"rules/hardcoded-password-default/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including a hardcoded password in source code is a security risk, as an attacker could discover the password and use it to gain unauthorized access.</p> <p>Instead, store passwords and other secrets in configuration files, environment variables, or other sources that are excluded from version control.</p>","tags":["S107"]},{"location":"rules/hardcoded-password-default/#example","title":"Example","text":"<pre><code>def connect_to_server(password=\"hunter2\"): ...\n</code></pre> <p>Use instead:</p> <pre><code>import os\ndef connect_to_server(password=os.environ[\"PASSWORD\"]): ...\n</code></pre>","tags":["S107"]},{"location":"rules/hardcoded-password-default/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-259</li> </ul>","tags":["S107"]},{"location":"rules/hardcoded-password-func-arg/","title":"hardcoded-password-func-arg (S106)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S106"]},{"location":"rules/hardcoded-password-func-arg/#what-it-does","title":"What it does","text":"<p>Checks for potential uses of hardcoded passwords in function calls.</p>","tags":["S106"]},{"location":"rules/hardcoded-password-func-arg/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including a hardcoded password in source code is a security risk, as an attacker could discover the password and use it to gain unauthorized access.</p> <p>Instead, store passwords and other secrets in configuration files, environment variables, or other sources that are excluded from version control.</p>","tags":["S106"]},{"location":"rules/hardcoded-password-func-arg/#example","title":"Example","text":"<pre><code>connect_to_server(password=\"hunter2\")\n</code></pre> <p>Use instead:</p> <pre><code>import os\nconnect_to_server(password=os.environ[\"PASSWORD\"])\n</code></pre>","tags":["S106"]},{"location":"rules/hardcoded-password-func-arg/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-259</li> </ul>","tags":["S106"]},{"location":"rules/hardcoded-password-string/","title":"hardcoded-password-string (S105)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S105"]},{"location":"rules/hardcoded-password-string/#what-it-does","title":"What it does","text":"<p>Checks for potential uses of hardcoded passwords in strings.</p>","tags":["S105"]},{"location":"rules/hardcoded-password-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including a hardcoded password in source code is a security risk, as an attacker could discover the password and use it to gain unauthorized access.</p> <p>Instead, store passwords and other secrets in configuration files, environment variables, or other sources that are excluded from version control.</p>","tags":["S105"]},{"location":"rules/hardcoded-password-string/#example","title":"Example","text":"<pre><code>SECRET_KEY = \"hunter2\"\n</code></pre> <p>Use instead:</p> <pre><code>import os\nSECRET_KEY = os.environ[\"SECRET_KEY\"]\n</code></pre>","tags":["S105"]},{"location":"rules/hardcoded-password-string/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-259</li> </ul>","tags":["S105"]},{"location":"rules/hardcoded-sql-expression/","title":"hardcoded-sql-expression (S608)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S608"]},{"location":"rules/hardcoded-sql-expression/#what-it-does","title":"What it does","text":"<p>Checks for strings that resemble SQL statements involved in some form string building operation.</p>","tags":["S608"]},{"location":"rules/hardcoded-sql-expression/#why-is-this-bad","title":"Why is this bad?","text":"<p>SQL injection is a common attack vector for web applications. Directly interpolating user input into SQL statements should always be avoided. Instead, favor parameterized queries, in which the SQL statement is provided separately from its parameters, as supported by <code>psycopg3</code> and other database drivers and ORMs.</p>","tags":["S608"]},{"location":"rules/hardcoded-sql-expression/#example","title":"Example","text":"<pre><code>query = \"DELETE FROM foo WHERE id = '%s'\" % identifier\n</code></pre>","tags":["S608"]},{"location":"rules/hardcoded-sql-expression/#references","title":"References","text":"<ul> <li>B608: Test for SQL injection</li> <li>psycopg3: Server-side binding</li> </ul>","tags":["S608"]},{"location":"rules/hardcoded-string-charset/","title":"hardcoded-string-charset (FURB156)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB156"]},{"location":"rules/hardcoded-string-charset/#what-it-does","title":"What it does","text":"<p>Checks for uses of hardcoded charsets, which are defined in Python string module.</p>","tags":["FURB156"]},{"location":"rules/hardcoded-string-charset/#why-is-this-bad","title":"Why is this bad?","text":"<p>Usage of named charsets from the standard library is more readable and less error-prone.</p>","tags":["FURB156"]},{"location":"rules/hardcoded-string-charset/#example","title":"Example","text":"<pre><code>x = \"0123456789\"\ny in \"abcdefghijklmnopqrstuvwxyz\"\n</code></pre> <p>Use instead</p> <pre><code>import string\nx = string.digits\ny in string.ascii_lowercase\n</code></pre>","tags":["FURB156"]},{"location":"rules/hardcoded-string-charset/#references","title":"References","text":"<ul> <li>Python documentation: String constants</li> </ul>","tags":["FURB156"]},{"location":"rules/hardcoded-temp-file/","title":"hardcoded-temp-file (S108)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S108"]},{"location":"rules/hardcoded-temp-file/#what-it-does","title":"What it does","text":"<p>Checks for the use of hardcoded temporary file or directory paths.</p>","tags":["S108"]},{"location":"rules/hardcoded-temp-file/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of hardcoded paths for temporary files can be insecure. If an attacker discovers the location of a hardcoded path, they can replace the contents of the file or directory with a malicious payload.</p> <p>Other programs may also read or write contents to these hardcoded paths, causing unexpected behavior.</p>","tags":["S108"]},{"location":"rules/hardcoded-temp-file/#example","title":"Example","text":"<pre><code>with open(\"/tmp/foo.txt\", \"w\") as file:\n...\n</code></pre> <p>Use instead:</p> <pre><code>import tempfile\nwith tempfile.NamedTemporaryFile() as file:\n...\n</code></pre>","tags":["S108"]},{"location":"rules/hardcoded-temp-file/#options","title":"Options","text":"<ul> <li><code>lint.flake8-bandit.hardcoded-tmp-directory</code></li> <li><code>lint.flake8-bandit.hardcoded-tmp-directory-extend</code></li> </ul>","tags":["S108"]},{"location":"rules/hardcoded-temp-file/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-377</li> <li>Common Weakness Enumeration: CWE-379</li> <li>Python documentation: <code>tempfile</code></li> </ul>","tags":["S108"]},{"location":"rules/hashlib-digest-hex/","title":"hashlib-digest-hex (FURB181)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p>","tags":["FURB181"]},{"location":"rules/hashlib-digest-hex/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>.digest().hex()</code> on a hashlib hash, like <code>sha512</code>.</p>","tags":["FURB181"]},{"location":"rules/hashlib-digest-hex/#why-is-this-bad","title":"Why is this bad?","text":"<p>When generating a hex digest from a hash, it's preferable to use the <code>.hexdigest()</code> method, rather than calling <code>.digest()</code> and then <code>.hex()</code>, as the former is more concise and readable.</p>","tags":["FURB181"]},{"location":"rules/hashlib-digest-hex/#example","title":"Example","text":"<pre><code>from hashlib import sha512\nhashed = sha512(b\"some data\").digest().hex()\n</code></pre> <p>Use instead:</p> <pre><code>from hashlib import sha512\nhashed = sha512(b\"some data\").hexdigest()\n</code></pre>","tags":["FURB181"]},{"location":"rules/hashlib-digest-hex/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as the target of the <code>.digest()</code> call could be a user-defined class that implements a <code>.hex()</code> method, rather than a hashlib hash object.</p>","tags":["FURB181"]},{"location":"rules/hashlib-digest-hex/#references","title":"References","text":"<ul> <li>Python documentation: <code>hashlib</code></li> </ul>","tags":["FURB181"]},{"location":"rules/hashlib-insecure-hash-function/","title":"hashlib-insecure-hash-function (S324)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S324"]},{"location":"rules/hashlib-insecure-hash-function/#what-it-does","title":"What it does","text":"<p>Checks for uses of weak or broken cryptographic hash functions in <code>hashlib</code> and <code>crypt</code> libraries.</p>","tags":["S324"]},{"location":"rules/hashlib-insecure-hash-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Weak or broken cryptographic hash functions may be susceptible to collision attacks (where two different inputs produce the same hash) or pre-image attacks (where an attacker can find an input that produces a given hash). This can lead to security vulnerabilities in applications that rely on these hash functions.</p> <p>Avoid using weak or broken cryptographic hash functions in security contexts. Instead, use a known secure hash function such as SHA256.</p>","tags":["S324"]},{"location":"rules/hashlib-insecure-hash-function/#example","title":"Example","text":"<pre><code>import hashlib\ndef certificate_is_valid(certificate: bytes, known_hash: str) -&gt; bool:\nhash = hashlib.md5(certificate).hexdigest()\nreturn hash == known_hash\n</code></pre> <p>Use instead:</p> <pre><code>import hashlib\ndef certificate_is_valid(certificate: bytes, known_hash: str) -&gt; bool:\nhash = hashlib.sha256(certificate).hexdigest()\nreturn hash == known_hash\n</code></pre>","tags":["S324"]},{"location":"rules/hashlib-insecure-hash-function/#references","title":"References","text":"<ul> <li>Python documentation: <code>hashlib</code> \u2014 Secure hashes and message digests</li> <li>Python documentation: <code>crypt</code> \u2014 Function to check Unix passwords</li> <li>Common Weakness Enumeration: CWE-327</li> <li>Common Weakness Enumeration: CWE-328</li> <li>Common Weakness Enumeration: CWE-916</li> </ul>","tags":["S324"]},{"location":"rules/if-else-block-instead-of-dict-get/","title":"if-else-block-instead-of-dict-get (SIM401)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM401"]},{"location":"rules/if-else-block-instead-of-dict-get/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> statements that can be replaced with <code>dict.get</code> calls.</p>","tags":["SIM401"]},{"location":"rules/if-else-block-instead-of-dict-get/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>dict.get()</code> calls can be used to replace <code>if</code> statements that assign a value to a variable in both branches, falling back to a default value if the key is not found. When possible, using <code>dict.get</code> is more concise and more idiomatic.</p> <p>Under preview mode, this rule will also suggest replacing <code>if</code>-<code>else</code> expressions with <code>dict.get</code> calls.</p>","tags":["SIM401"]},{"location":"rules/if-else-block-instead-of-dict-get/#example","title":"Example","text":"<pre><code>if \"bar\" in foo:\nvalue = foo[\"bar\"]\nelse:\nvalue = 0\n</code></pre> <p>Use instead:</p> <pre><code>value = foo.get(\"bar\", 0)\n</code></pre> <p>If preview mode is enabled:</p> <pre><code>value = foo[\"bar\"] if \"bar\" in foo else 0\n</code></pre> <p>Use instead:</p> <pre><code>value = foo.get(\"bar\", 0)\n</code></pre>","tags":["SIM401"]},{"location":"rules/if-else-block-instead-of-dict-get/#references","title":"References","text":"<ul> <li>Python documentation: Mapping Types</li> </ul>","tags":["SIM401"]},{"location":"rules/if-else-block-instead-of-dict-lookup/","title":"if-else-block-instead-of-dict-lookup (SIM116)","text":"<p>Derived from the flake8-simplify linter.</p>","tags":["SIM116"]},{"location":"rules/if-else-block-instead-of-dict-lookup/#what-it-does","title":"What it does","text":"<p>Checks for three or more consecutive if-statements with direct returns</p>","tags":["SIM116"]},{"location":"rules/if-else-block-instead-of-dict-lookup/#why-is-this-bad","title":"Why is this bad?","text":"<p>These can be simplified by using a dictionary</p>","tags":["SIM116"]},{"location":"rules/if-else-block-instead-of-dict-lookup/#example","title":"Example","text":"<pre><code>if x == 1:\nreturn \"Hello\"\nelif x == 2:\nreturn \"Goodbye\"\nelse:\nreturn \"Goodnight\"\n</code></pre> <p>Use instead:</p> <pre><code>return {1: \"Hello\", 2: \"Goodbye\"}.get(x, \"Goodnight\")\n</code></pre>","tags":["SIM116"]},{"location":"rules/if-else-block-instead-of-if-exp/","title":"if-else-block-instead-of-if-exp (SIM108)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM108"]},{"location":"rules/if-else-block-instead-of-if-exp/#what-it-does","title":"What it does","text":"<p>Check for <code>if</code>-<code>else</code>-blocks that can be replaced with a ternary operator. Moreover, in preview, check if these ternary expressions can be further simplified to binary expressions.</p>","tags":["SIM108"]},{"location":"rules/if-else-block-instead-of-if-exp/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>if</code>-<code>else</code>-blocks that assign a value to a variable in both branches can be expressed more concisely by using a ternary or binary operator.</p>","tags":["SIM108"]},{"location":"rules/if-else-block-instead-of-if-exp/#example","title":"Example","text":"<pre><code>if foo:\nbar = x\nelse:\nbar = y\n</code></pre> <p>Use instead:</p> <pre><code>bar = x if foo else y\n</code></pre> <p>Or, in preview:</p> <pre><code>if cond:\nz = cond\nelse:\nz = other_cond\n</code></pre> <p>Use instead:</p> <pre><code>z = cond or other_cond\n</code></pre>","tags":["SIM108"]},{"location":"rules/if-else-block-instead-of-if-exp/#known-issues","title":"Known issues","text":"<p>This is an opinionated style rule that may not always be to everyone's taste, especially for code that makes use of complex <code>if</code> conditions. Ternary operators can also make it harder to measure code coverage with tools that use line profiling.</p>","tags":["SIM108"]},{"location":"rules/if-else-block-instead-of-if-exp/#references","title":"References","text":"<ul> <li>Python documentation: Conditional expressions</li> </ul>","tags":["SIM108"]},{"location":"rules/if-exp-instead-of-or-operator/","title":"if-exp-instead-of-or-operator (FURB110)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB110"]},{"location":"rules/if-exp-instead-of-or-operator/#what-it-does","title":"What it does","text":"<p>Checks for ternary <code>if</code> expressions that can be replaced with the <code>or</code> operator.</p>","tags":["FURB110"]},{"location":"rules/if-exp-instead-of-or-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>Ternary <code>if</code> expressions are more verbose than <code>or</code> expressions while providing the same functionality.</p>","tags":["FURB110"]},{"location":"rules/if-exp-instead-of-or-operator/#example","title":"Example","text":"<pre><code>z = x if x else y\n</code></pre> <p>Use instead:</p> <pre><code>z = x or y\n</code></pre>","tags":["FURB110"]},{"location":"rules/if-exp-instead-of-or-operator/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe in the event that the body of the <code>if</code> expression contains side effects.</p> <p>For example, <code>foo</code> will be called twice in <code>foo() if foo() else bar()</code> (assuming <code>foo()</code> returns a truthy value), but only once in <code>foo() or bar()</code>.</p>","tags":["FURB110"]},{"location":"rules/if-expr-min-max/","title":"if-expr-min-max (FURB136)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p>","tags":["FURB136"]},{"location":"rules/if-expr-min-max/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> expressions that can be replaced with <code>min()</code> or <code>max()</code> calls.</p>","tags":["FURB136"]},{"location":"rules/if-expr-min-max/#why-is-this-bad","title":"Why is this bad?","text":"<p>An <code>if</code> expression that selects the lesser or greater of two sub-expressions can be replaced with a <code>min()</code> or <code>max()</code> call respectively. When possible, prefer <code>min()</code> and <code>max()</code>, as they're more concise and readable than the equivalent <code>if</code> expression.</p>","tags":["FURB136"]},{"location":"rules/if-expr-min-max/#example","title":"Example","text":"<pre><code>highest_score = score1 if score1 &gt; score2 else score2\n</code></pre> <p>Use instead:</p> <pre><code>highest_score = max(score2, score1)\n</code></pre>","tags":["FURB136"]},{"location":"rules/if-expr-min-max/#references","title":"References","text":"<ul> <li>Python documentation: <code>min</code></li> <li>Python documentation: <code>max</code></li> </ul>","tags":["FURB136"]},{"location":"rules/if-expr-with-false-true/","title":"if-expr-with-false-true (SIM211)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM211"]},{"location":"rules/if-expr-with-false-true/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> expressions that can be replaced by negating a given condition.</p>","tags":["SIM211"]},{"location":"rules/if-expr-with-false-true/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>if</code> expressions that evaluate to <code>False</code> for a truthy condition and <code>True</code> for a falsey condition can be replaced with <code>not</code> operators, which are more concise and readable.</p>","tags":["SIM211"]},{"location":"rules/if-expr-with-false-true/#example","title":"Example","text":"<pre><code>False if a else True\n</code></pre> <p>Use instead:</p> <pre><code>not a\n</code></pre>","tags":["SIM211"]},{"location":"rules/if-expr-with-false-true/#references","title":"References","text":"<ul> <li>Python documentation: Truth Value Testing</li> </ul>","tags":["SIM211"]},{"location":"rules/if-expr-with-true-false/","title":"if-expr-with-true-false (SIM210)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM210"]},{"location":"rules/if-expr-with-true-false/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> expressions that can be replaced with <code>bool()</code> calls.</p>","tags":["SIM210"]},{"location":"rules/if-expr-with-true-false/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>if</code> expressions that evaluate to <code>True</code> for a truthy condition an <code>False</code> for a falsey condition can be replaced with <code>bool()</code> calls, which are more concise and readable.</p>","tags":["SIM210"]},{"location":"rules/if-expr-with-true-false/#example","title":"Example","text":"<pre><code>True if a else False\n</code></pre> <p>Use instead:</p> <pre><code>bool(a)\n</code></pre>","tags":["SIM210"]},{"location":"rules/if-expr-with-true-false/#references","title":"References","text":"<ul> <li>Python documentation: Truth Value Testing</li> </ul>","tags":["SIM210"]},{"location":"rules/if-expr-with-twisted-arms/","title":"if-expr-with-twisted-arms (SIM212)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM212"]},{"location":"rules/if-expr-with-twisted-arms/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> expressions that check against a negated condition.</p>","tags":["SIM212"]},{"location":"rules/if-expr-with-twisted-arms/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>if</code> expressions that check against a negated condition are more difficult to read than <code>if</code> expressions that check against the condition directly.</p>","tags":["SIM212"]},{"location":"rules/if-expr-with-twisted-arms/#example","title":"Example","text":"<pre><code>b if not a else a\n</code></pre> <p>Use instead:</p> <pre><code>a if a else b\n</code></pre>","tags":["SIM212"]},{"location":"rules/if-expr-with-twisted-arms/#references","title":"References","text":"<ul> <li>Python documentation: Truth Value Testing</li> </ul>","tags":["SIM212"]},{"location":"rules/if-stmt-min-max/","title":"if-stmt-min-max (PLR1730)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLR1730"]},{"location":"rules/if-stmt-min-max/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> statements that can be replaced with <code>min()</code> or <code>max()</code> calls.</p>","tags":["PLR1730"]},{"location":"rules/if-stmt-min-max/#why-is-this-bad","title":"Why is this bad?","text":"<p>An <code>if</code> statement that selects the lesser or greater of two sub-expressions can be replaced with a <code>min()</code> or <code>max()</code> call respectively. Where possible, prefer <code>min()</code> and <code>max()</code>, as they're more concise and readable than the equivalent <code>if</code> statements.</p>","tags":["PLR1730"]},{"location":"rules/if-stmt-min-max/#example","title":"Example","text":"<pre><code>if score &gt; highest_score:\nhighest_score = score\n</code></pre> <p>Use instead:</p> <pre><code>highest_score = max(highest_score, score)\n</code></pre>","tags":["PLR1730"]},{"location":"rules/if-stmt-min-max/#references","title":"References","text":"<ul> <li>Python documentation: <code>max</code></li> <li>Python documentation: <code>min</code></li> </ul>","tags":["PLR1730"]},{"location":"rules/if-tuple/","title":"if-tuple (F634)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F634"]},{"location":"rules/if-tuple/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> statements that use non-empty tuples as test conditions.</p>","tags":["F634"]},{"location":"rules/if-tuple/#why-is-this-bad","title":"Why is this bad?","text":"<p>Non-empty tuples are always <code>True</code>, so an <code>if</code> statement with a non-empty tuple as its test condition will always pass. This is likely a mistake.</p>","tags":["F634"]},{"location":"rules/if-tuple/#example","title":"Example","text":"<pre><code>if (False,):\nprint(\"This will always run\")\n</code></pre> <p>Use instead:</p> <pre><code>if False:\nprint(\"This will never run\")\n</code></pre>","tags":["F634"]},{"location":"rules/if-tuple/#references","title":"References","text":"<ul> <li>Python documentation: The <code>if</code> statement</li> </ul>","tags":["F634"]},{"location":"rules/if-with-same-arms/","title":"if-with-same-arms (SIM114)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM114"]},{"location":"rules/if-with-same-arms/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> branches with identical arm bodies.</p>","tags":["SIM114"]},{"location":"rules/if-with-same-arms/#why-is-this-bad","title":"Why is this bad?","text":"<p>If multiple arms of an <code>if</code> statement have the same body, using <code>or</code> better signals the intent of the statement.</p>","tags":["SIM114"]},{"location":"rules/if-with-same-arms/#example","title":"Example","text":"<pre><code>if x == 1:\nprint(\"Hello\")\nelif x == 2:\nprint(\"Hello\")\n</code></pre> <p>Use instead:</p> <pre><code>if x == 1 or x == 2:\nprint(\"Hello\")\n</code></pre>","tags":["SIM114"]},{"location":"rules/implicit-cwd/","title":"implicit-cwd (FURB177)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p>","tags":["FURB177"]},{"location":"rules/implicit-cwd/#what-it-does","title":"What it does","text":"<p>Checks for current-directory lookups using <code>Path().resolve()</code>.</p>","tags":["FURB177"]},{"location":"rules/implicit-cwd/#why-is-this-bad","title":"Why is this bad?","text":"<p>When looking up the current directory, prefer <code>Path.cwd()</code> over <code>Path().resolve()</code>, as <code>Path.cwd()</code> is more explicit in its intent.</p>","tags":["FURB177"]},{"location":"rules/implicit-cwd/#example","title":"Example","text":"<pre><code>cwd = Path().resolve()\n</code></pre> <p>Use instead:</p> <pre><code>cwd = Path.cwd()\n</code></pre>","tags":["FURB177"]},{"location":"rules/implicit-cwd/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.cwd</code></li> </ul>","tags":["FURB177"]},{"location":"rules/implicit-namespace-package/","title":"implicit-namespace-package (INP001)","text":"<p>Derived from the flake8-no-pep420 linter.</p>","tags":["INP001"]},{"location":"rules/implicit-namespace-package/#what-it-does","title":"What it does","text":"<p>Checks for packages that are missing an <code>__init__.py</code> file.</p>","tags":["INP001"]},{"location":"rules/implicit-namespace-package/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python packages are directories that contain a file named <code>__init__.py</code>. The existence of this file indicates that the directory is a Python package, and so it can be imported the same way a module can be imported.</p> <p>Directories that lack an <code>__init__.py</code> file can still be imported, but they're indicative of a special kind of package, known as a \"namespace package\" (see: PEP 420). Namespace packages are less widely used, so a package that lacks an <code>__init__.py</code> file is typically meant to be a regular package, and the absence of the <code>__init__.py</code> file is probably an oversight.</p>","tags":["INP001"]},{"location":"rules/implicit-namespace-package/#options","title":"Options","text":"<ul> <li><code>namespace-packages</code></li> </ul>","tags":["INP001"]},{"location":"rules/implicit-optional/","title":"implicit-optional (RUF013)","text":"<p>Fix is sometimes available.</p>","tags":["RUF013"]},{"location":"rules/implicit-optional/#what-it-does","title":"What it does","text":"<p>Checks for the use of implicit <code>Optional</code> in type annotations when the default parameter value is <code>None</code>.</p>","tags":["RUF013"]},{"location":"rules/implicit-optional/#why-is-this-bad","title":"Why is this bad?","text":"<p>Implicit <code>Optional</code> is prohibited by PEP 484. It is confusing and inconsistent with the rest of the type system.</p> <p>It's recommended to use <code>Optional[T]</code> instead. For Python 3.10 and later, you can also use <code>T | None</code>.</p>","tags":["RUF013"]},{"location":"rules/implicit-optional/#example","title":"Example","text":"<pre><code>def foo(arg: int = None):\npass\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Optional\ndef foo(arg: Optional[int] = None):\npass\n</code></pre> <p>Or, for Python 3.10 and later:</p> <pre><code>def foo(arg: int | None = None):\npass\n</code></pre> <p>If you want to use the <code>|</code> operator in Python 3.9 and earlier, you can use future imports:</p> <pre><code>from __future__ import annotations\ndef foo(arg: int | None = None):\npass\n</code></pre>","tags":["RUF013"]},{"location":"rules/implicit-optional/#limitations","title":"Limitations","text":"<p>Type aliases are not supported and could result in false negatives. For example, the following code will not be flagged:</p> <pre><code>Text = str | bytes\ndef foo(arg: Text = None):\npass\n</code></pre>","tags":["RUF013"]},{"location":"rules/implicit-optional/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["RUF013"]},{"location":"rules/implicit-return-value/","title":"implicit-return-value (RET502)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is always available.</p>","tags":["RET502"]},{"location":"rules/implicit-return-value/#what-it-does","title":"What it does","text":"<p>Checks for the presence of a <code>return</code> statement with no explicit value, for functions that return non-<code>None</code> values elsewhere.</p>","tags":["RET502"]},{"location":"rules/implicit-return-value/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including a <code>return</code> statement with no explicit value can cause confusion when other <code>return</code> statements in the function return non-<code>None</code> values. Python implicitly assumes return <code>None</code> if no other return value is present. Adding an explicit <code>return None</code> can make the code more readable by clarifying intent.</p>","tags":["RET502"]},{"location":"rules/implicit-return-value/#example","title":"Example","text":"<pre><code>def foo(bar):\nif not bar:\nreturn\nreturn 1\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar):\nif not bar:\nreturn None\nreturn 1\n</code></pre>","tags":["RET502"]},{"location":"rules/implicit-return/","title":"implicit-return (RET503)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is always available.</p>","tags":["RET503"]},{"location":"rules/implicit-return/#what-it-does","title":"What it does","text":"<p>Checks for missing explicit <code>return</code> statements at the end of functions that can return non-<code>None</code> values.</p>","tags":["RET503"]},{"location":"rules/implicit-return/#why-is-this-bad","title":"Why is this bad?","text":"<p>The lack of an explicit <code>return</code> statement at the end of a function that can return non-<code>None</code> values can cause confusion. Python implicitly returns <code>None</code> if no other return value is present. Adding an explicit <code>return None</code> can make the code more readable by clarifying intent.</p>","tags":["RET503"]},{"location":"rules/implicit-return/#example","title":"Example","text":"<pre><code>def foo(bar):\nif not bar:\nreturn 1\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar):\nif not bar:\nreturn 1\nreturn None\n</code></pre>","tags":["RET503"]},{"location":"rules/import-outside-top-level/","title":"import-outside-top-level (PLC0415)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLC0415"]},{"location":"rules/import-outside-top-level/#what-it-does","title":"What it does","text":"<p>Checks for <code>import</code> statements outside of a module's top-level scope, such as within a function or class definition.</p>","tags":["PLC0415"]},{"location":"rules/import-outside-top-level/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends placing imports not only at the top-level of a module, but at the very top of the file, \"just after any module comments and docstrings, and before module globals and constants.\"</p> <p><code>import</code> statements have effects that are global in scope; defining them at the top level has a number of benefits. For example, it makes it easier to identify the dependencies of a module, and ensures that any invalid imports are caught regardless of whether a specific function is called or class is instantiated.</p> <p>An import statement would typically be placed within a function only to avoid a circular dependency, to defer a costly module load, or to avoid loading a dependency altogether in a certain runtime environment.</p>","tags":["PLC0415"]},{"location":"rules/import-outside-top-level/#example","title":"Example","text":"<pre><code>def print_python_version():\nimport platform\nprint(python.python_version())\n</code></pre> <p>Use instead:</p> <pre><code>import platform\ndef print_python_version():\nprint(python.python_version())\n</code></pre>","tags":["PLC0415"]},{"location":"rules/import-private-name/","title":"import-private-name (PLC2701)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLC2701"]},{"location":"rules/import-private-name/#what-it-does","title":"What it does","text":"<p>Checks for import statements that import a private name (a name starting with an underscore <code>_</code>) from another module.</p>","tags":["PLC2701"]},{"location":"rules/import-private-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 states that names starting with an underscore are private. Thus, they are not intended to be used outside of the module in which they are defined.</p> <p>Further, as private imports are not considered part of the public API, they are prone to unexpected changes, especially outside of semantic versioning.</p> <p>Instead, consider using the public API of the module.</p> <p>This rule ignores private name imports that are exclusively used in type annotations. Ideally, types would be public; however, this is not always possible when using third-party libraries.</p>","tags":["PLC2701"]},{"location":"rules/import-private-name/#known-problems","title":"Known problems","text":"<p>Does not ignore private name imports from within the module that defines the private name if the module is defined with PEP 420 namespace packages (i.e., directories that omit the <code>__init__.py</code> file). Namespace packages must be configured via the <code>namespace-packages</code> setting.</p>","tags":["PLC2701"]},{"location":"rules/import-private-name/#example","title":"Example","text":"<pre><code>from foo import _bar\n</code></pre>","tags":["PLC2701"]},{"location":"rules/import-private-name/#options","title":"Options","text":"<ul> <li><code>namespace-packages</code></li> </ul>","tags":["PLC2701"]},{"location":"rules/import-private-name/#references","title":"References","text":"<ul> <li>PEP 8: Naming Conventions</li> <li>Semantic Versioning</li> </ul>","tags":["PLC2701"]},{"location":"rules/import-self/","title":"import-self (PLW0406)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0406"]},{"location":"rules/import-self/#what-it-does","title":"What it does","text":"<p>Checks for import statements that import the current module.</p>","tags":["PLW0406"]},{"location":"rules/import-self/#why-is-this-bad","title":"Why is this bad?","text":"<p>Importing a module from itself is a circular dependency and results in an <code>ImportError</code> exception.</p>","tags":["PLW0406"]},{"location":"rules/import-self/#example","title":"Example","text":"<pre><code># file: this_file.py\nfrom this_file import foo\ndef foo(): ...\n</code></pre>","tags":["PLW0406"]},{"location":"rules/import-shadowed-by-loop-var/","title":"import-shadowed-by-loop-var (F402)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F402"]},{"location":"rules/import-shadowed-by-loop-var/#what-it-does","title":"What it does","text":"<p>Checks for import bindings that are shadowed by loop variables.</p>","tags":["F402"]},{"location":"rules/import-shadowed-by-loop-var/#why-is-this-bad","title":"Why is this bad?","text":"<p>Shadowing an import with loop variables makes the code harder to read and reason about, as the identify of the imported binding is no longer clear. It's also often indicative of a mistake, as it's unlikely that the loop variable is intended to be used as the imported binding.</p> <p>Consider using a different name for the loop variable.</p>","tags":["F402"]},{"location":"rules/import-shadowed-by-loop-var/#example","title":"Example","text":"<pre><code>from os import path\nfor path in files:\nprint(path)\n</code></pre> <p>Use instead:</p> <pre><code>from os import path\nfor filename in files:\nprint(filename)\n</code></pre>","tags":["F402"]},{"location":"rules/in-dict-keys/","title":"in-dict-keys (SIM118)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM118"]},{"location":"rules/in-dict-keys/#what-it-does","title":"What it does","text":"<p>Checks for key-existence checks against <code>dict.keys()</code> calls.</p>","tags":["SIM118"]},{"location":"rules/in-dict-keys/#why-is-this-bad","title":"Why is this bad?","text":"<p>When checking for the existence of a key in a given dictionary, using <code>key in dict</code> is more readable and efficient than <code>key in dict.keys()</code>, while having the same semantics.</p>","tags":["SIM118"]},{"location":"rules/in-dict-keys/#example","title":"Example","text":"<pre><code>key in foo.keys()\n</code></pre> <p>Use instead:</p> <pre><code>key in foo\n</code></pre>","tags":["SIM118"]},{"location":"rules/in-dict-keys/#fix-safety","title":"Fix safety","text":"<p>Given <code>key in obj.keys()</code>, <code>obj</code> could be a dictionary, or it could be another type that defines a <code>.keys()</code> method. In the latter case, removing the <code>.keys()</code> attribute could lead to a runtime error. The fix is marked as safe when the type of <code>obj</code> is known to be a dictionary; otherwise, it is marked as unsafe.</p>","tags":["SIM118"]},{"location":"rules/in-dict-keys/#references","title":"References","text":"<ul> <li>Python documentation: Mapping Types</li> </ul>","tags":["SIM118"]},{"location":"rules/incorrect-dict-iterator/","title":"incorrect-dict-iterator (PERF102)","text":"<p>Derived from the Perflint linter.</p> <p>Fix is always available.</p>","tags":["PERF102"]},{"location":"rules/incorrect-dict-iterator/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>dict.items()</code> that discard either the key or the value when iterating over the dictionary.</p>","tags":["PERF102"]},{"location":"rules/incorrect-dict-iterator/#why-is-this-bad","title":"Why is this bad?","text":"<p>If you only need the keys or values of a dictionary, you should use <code>dict.keys()</code> or <code>dict.values()</code> respectively, instead of <code>dict.items()</code>. These specialized methods are more efficient than <code>dict.items()</code>, as they avoid allocating tuples for every item in the dictionary. They also communicate the intent of the code more clearly.</p> <p>Note that, as with all <code>perflint</code> rules, this is only intended as a micro-optimization, and will have a negligible impact on performance in most cases.</p>","tags":["PERF102"]},{"location":"rules/incorrect-dict-iterator/#example","title":"Example","text":"<pre><code>obj = {\"a\": 1, \"b\": 2}\nfor key, value in obj.items():\nprint(value)\n</code></pre> <p>Use instead:</p> <pre><code>obj = {\"a\": 1, \"b\": 2}\nfor value in obj.values():\nprint(value)\n</code></pre>","tags":["PERF102"]},{"location":"rules/incorrect-dict-iterator/#fix-safety","title":"Fix safety","text":"<p>The fix does not perform any type analysis and, as such, may suggest an incorrect fix if the object in question does not duck-type as a mapping (e.g., if it is missing a <code>.keys()</code> or <code>.values()</code> method, or if those methods behave differently than they do on standard mapping types).</p>","tags":["PERF102"]},{"location":"rules/incorrectly-parenthesized-tuple-in-subscript/","title":"incorrectly-parenthesized-tuple-in-subscript (RUF031)","text":"<p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF031"]},{"location":"rules/incorrectly-parenthesized-tuple-in-subscript/#what-it-does","title":"What it does","text":"<p>Checks for consistent style regarding whether nonempty tuples in subscripts are parenthesized.</p> <p>The exact nature of this violation depends on the setting <code>lint.ruff.parenthesize-tuple-in-subscript</code>. By default, the use of parentheses is considered a violation.</p> <p>This rule is not applied inside \"typing contexts\" (type annotations, type aliases and subscripted class bases), as these have their own specific conventions around them.</p>","tags":["RUF031"]},{"location":"rules/incorrectly-parenthesized-tuple-in-subscript/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is good to be consistent and, depending on the codebase, one or the other convention may be preferred.</p>","tags":["RUF031"]},{"location":"rules/incorrectly-parenthesized-tuple-in-subscript/#example","title":"Example","text":"<pre><code>directions = {(0, 1): \"North\", (1, 0): \"East\", (0, -1): \"South\", (-1, 0): \"West\"}\ndirections[(0, 1)]\n</code></pre> <p>Use instead (with default setting):</p> <pre><code>directions = {(0, 1): \"North\", (1, 0): \"East\", (0, -1): \"South\", (-1, 0): \"West\"}\ndirections[0, 1]\n</code></pre>","tags":["RUF031"]},{"location":"rules/incorrectly-parenthesized-tuple-in-subscript/#options","title":"Options","text":"<ul> <li><code>lint.ruff.parenthesize-tuple-in-subscript</code></li> </ul>","tags":["RUF031"]},{"location":"rules/indent-with-spaces/","title":"indent-with-spaces (D206)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D206"]},{"location":"rules/indent-with-spaces/#what-it-does","title":"What it does","text":"<p>Checks for docstrings that are indented with tabs.</p>","tags":["D206"]},{"location":"rules/indent-with-spaces/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends using spaces over tabs for indentation.</p>","tags":["D206"]},{"location":"rules/indent-with-spaces/#example","title":"Example","text":"<pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the bubble\n    sort algorithm.\n    \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the bubble\n    sort algorithm.\n    \"\"\"\n</code></pre>","tags":["D206"]},{"location":"rules/indent-with-spaces/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent indentation, making the rule redundant.</p> <p>The rule is also incompatible with the formatter when using <code>format.indent-style=\"tab\"</code>.</p>","tags":["D206"]},{"location":"rules/indent-with-spaces/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D206"]},{"location":"rules/indentation-with-invalid-multiple-comment/","title":"indentation-with-invalid-multiple-comment (E114)","text":"<p>Derived from the pycodestyle linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E114"]},{"location":"rules/indentation-with-invalid-multiple-comment/#what-it-does","title":"What it does","text":"<p>Checks for indentation of comments with a non-multiple of 4 spaces.</p>","tags":["E114"]},{"location":"rules/indentation-with-invalid-multiple-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, 4 spaces per indentation level should be preferred.</p>","tags":["E114"]},{"location":"rules/indentation-with-invalid-multiple-comment/#example","title":"Example","text":"<pre><code>if True:\n# a = 1\n</code></pre> <p>Use instead:</p> <pre><code>if True:\n# a = 1\n</code></pre>","tags":["E114"]},{"location":"rules/indentation-with-invalid-multiple-comment/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent indentation, making the rule redundant.</p> <p>The rule is also incompatible with the formatter when using <code>indent-width</code> with a value other than <code>4</code>.</p>","tags":["E114"]},{"location":"rules/indentation-with-invalid-multiple-comment/#options","title":"Options","text":"<ul> <li><code>indent-width</code></li> </ul>","tags":["E114"]},{"location":"rules/indentation-with-invalid-multiple/","title":"indentation-with-invalid-multiple (E111)","text":"<p>Derived from the pycodestyle linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E111"]},{"location":"rules/indentation-with-invalid-multiple/#what-it-does","title":"What it does","text":"<p>Checks for indentation with a non-multiple of 4 spaces.</p>","tags":["E111"]},{"location":"rules/indentation-with-invalid-multiple/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, 4 spaces per indentation level should be preferred.</p>","tags":["E111"]},{"location":"rules/indentation-with-invalid-multiple/#example","title":"Example","text":"<pre><code>if True:\na = 1\n</code></pre> <p>Use instead:</p> <pre><code>if True:\na = 1\n</code></pre>","tags":["E111"]},{"location":"rules/indentation-with-invalid-multiple/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent indentation, making the rule redundant.</p> <p>The rule is also incompatible with the formatter when using <code>indent-width</code> with a value other than <code>4</code>.</p>","tags":["E111"]},{"location":"rules/indentation-with-invalid-multiple/#options","title":"Options","text":"<ul> <li><code>indent-width</code></li> </ul>","tags":["E111"]},{"location":"rules/int-on-sliced-str/","title":"int-on-sliced-str (FURB166)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB166"]},{"location":"rules/int-on-sliced-str/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>int</code> with an explicit base in which a string expression is stripped of its leading prefix (i.e., <code>0b</code>, <code>0o</code>, or <code>0x</code>).</p>","tags":["FURB166"]},{"location":"rules/int-on-sliced-str/#why-is-this-bad","title":"Why is this bad?","text":"<p>Given an integer string with a prefix (e.g., <code>0xABC</code>), Python can automatically determine the base of the integer by the prefix without needing to specify it explicitly.</p> <p>Instead of <code>int(num[2:], 16)</code>, use <code>int(num, 0)</code>, which will automatically deduce the base based on the prefix.</p>","tags":["FURB166"]},{"location":"rules/int-on-sliced-str/#example","title":"Example","text":"<pre><code>num = \"0xABC\"\nif num.startswith(\"0b\"):\ni = int(num[2:], 2)\nelif num.startswith(\"0o\"):\ni = int(num[2:], 8)\nelif num.startswith(\"0x\"):\ni = int(num[2:], 16)\nprint(i)\n</code></pre> <p>Use instead:</p> <pre><code>num = \"0xABC\"\ni = int(num, 0)\nprint(i)\n</code></pre>","tags":["FURB166"]},{"location":"rules/int-on-sliced-str/#fix-safety","title":"Fix safety","text":"<p>The rule's fix is marked as unsafe, as Ruff cannot guarantee that the argument to <code>int</code> will remain valid when its base is included in the function call.</p>","tags":["FURB166"]},{"location":"rules/int-on-sliced-str/#references","title":"References","text":"<ul> <li>Python documentation: <code>int</code></li> </ul>","tags":["FURB166"]},{"location":"rules/invalid-all-format/","title":"invalid-all-format (PLE0605)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0605"]},{"location":"rules/invalid-all-format/#what-it-does","title":"What it does","text":"<p>Checks for invalid assignments to <code>__all__</code>.</p>","tags":["PLE0605"]},{"location":"rules/invalid-all-format/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, <code>__all__</code> should contain a sequence of strings that represent the names of all \"public\" symbols exported by a module.</p> <p>Assigning anything other than a <code>tuple</code> or <code>list</code> of strings to <code>__all__</code> is invalid.</p>","tags":["PLE0605"]},{"location":"rules/invalid-all-format/#example","title":"Example","text":"<pre><code>__all__ = \"Foo\"\n</code></pre> <p>Use instead:</p> <pre><code>__all__ = (\"Foo\",)\n</code></pre>","tags":["PLE0605"]},{"location":"rules/invalid-all-format/#references","title":"References","text":"<ul> <li>Python documentation: The <code>import</code> statement</li> </ul>","tags":["PLE0605"]},{"location":"rules/invalid-all-object/","title":"invalid-all-object (PLE0604)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0604"]},{"location":"rules/invalid-all-object/#what-it-does","title":"What it does","text":"<p>Checks for the inclusion of invalid objects in <code>__all__</code>.</p>","tags":["PLE0604"]},{"location":"rules/invalid-all-object/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, <code>__all__</code> should contain a sequence of strings that represent the names of all \"public\" symbols exported by a module.</p> <p>Assigning anything other than a <code>tuple</code> or <code>list</code> of strings to <code>__all__</code> is invalid.</p>","tags":["PLE0604"]},{"location":"rules/invalid-all-object/#example","title":"Example","text":"<pre><code>__all__ = [Foo, 1, None]\n</code></pre> <p>Use instead:</p> <pre><code>__all__ = [\"Foo\", \"Bar\", \"Baz\"]\n</code></pre>","tags":["PLE0604"]},{"location":"rules/invalid-all-object/#references","title":"References","text":"<ul> <li>Python documentation: The <code>import</code> statement</li> </ul>","tags":["PLE0604"]},{"location":"rules/invalid-argument-name/","title":"invalid-argument-name (N803)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N803"]},{"location":"rules/invalid-argument-name/#what-it-does","title":"What it does","text":"<p>Checks for argument names that do not follow the <code>snake_case</code> convention.</p>","tags":["N803"]},{"location":"rules/invalid-argument-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends that function names should be lower case and separated by underscores (also known as <code>snake_case</code>).</p> <p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p> <p>Variable names follow the same convention as function names.</p> <p>mixedCase is allowed only in contexts where that\u2019s already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p>","tags":["N803"]},{"location":"rules/invalid-argument-name/#example","title":"Example","text":"<pre><code>def my_function(A, myArg):\npass\n</code></pre> <p>Use instead:</p> <pre><code>def my_function(a, my_arg):\npass\n</code></pre>","tags":["N803"]},{"location":"rules/invalid-bool-return-type/","title":"invalid-bool-return-type (PLE0304)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLE0304"]},{"location":"rules/invalid-bool-return-type/#what-it-does","title":"What it does","text":"<p>Checks for <code>__bool__</code> implementations that return a type other than <code>bool</code>.</p>","tags":["PLE0304"]},{"location":"rules/invalid-bool-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__bool__</code> method should return a <code>bool</code> object. Returning a different type may cause unexpected behavior.</p>","tags":["PLE0304"]},{"location":"rules/invalid-bool-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __bool__(self):\nreturn 2\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __bool__(self):\nreturn True\n</code></pre>","tags":["PLE0304"]},{"location":"rules/invalid-bool-return-type/#references","title":"References","text":"<ul> <li>Python documentation: The <code>__bool__</code> method</li> </ul>","tags":["PLE0304"]},{"location":"rules/invalid-bytes-return-type/","title":"invalid-bytes-return-type (PLE0308)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0308"]},{"location":"rules/invalid-bytes-return-type/#what-it-does","title":"What it does","text":"<p>Checks for <code>__bytes__</code> implementations that return types other than <code>bytes</code>.</p>","tags":["PLE0308"]},{"location":"rules/invalid-bytes-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__bytes__</code> method should return a <code>bytes</code> object. Returning a different type may cause unexpected behavior.</p>","tags":["PLE0308"]},{"location":"rules/invalid-bytes-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __bytes__(self):\nreturn 2\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __bytes__(self):\nreturn b\"2\"\n</code></pre>","tags":["PLE0308"]},{"location":"rules/invalid-bytes-return-type/#references","title":"References","text":"<ul> <li>Python documentation: The <code>__bytes__</code> method</li> </ul>","tags":["PLE0308"]},{"location":"rules/invalid-character-backspace/","title":"invalid-character-backspace (PLE2510)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLE2510"]},{"location":"rules/invalid-character-backspace/#what-it-does","title":"What it does","text":"<p>Checks for strings that contain the control character <code>BS</code>.</p>","tags":["PLE2510"]},{"location":"rules/invalid-character-backspace/#why-is-this-bad","title":"Why is this bad?","text":"<p>Control characters are displayed differently by different text editors and terminals.</p> <p>By using the <code>\\b</code> sequence in lieu of the <code>BS</code> control character, the string will contain the same value, but will render visibly in all editors.</p>","tags":["PLE2510"]},{"location":"rules/invalid-character-backspace/#example","title":"Example","text":"<pre><code>x = \"\"\n</code></pre> <p>Use instead:</p> <pre><code>x = \"\\b\"\n</code></pre>","tags":["PLE2510"]},{"location":"rules/invalid-character-esc/","title":"invalid-character-esc (PLE2513)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLE2513"]},{"location":"rules/invalid-character-esc/#what-it-does","title":"What it does","text":"<p>Checks for strings that contain the raw control character <code>ESC</code>.</p>","tags":["PLE2513"]},{"location":"rules/invalid-character-esc/#why-is-this-bad","title":"Why is this bad?","text":"<p>Control characters are displayed differently by different text editors and terminals.</p> <p>By using the <code>\\x1B</code> sequence in lieu of the <code>SUB</code> control character, the string will contain the same value, but will render visibly in all editors.</p>","tags":["PLE2513"]},{"location":"rules/invalid-character-esc/#example","title":"Example","text":"<pre><code>x = \"\"\n</code></pre> <p>Use instead:</p> <pre><code>x = \"\\x1b\"\n</code></pre>","tags":["PLE2513"]},{"location":"rules/invalid-character-nul/","title":"invalid-character-nul (PLE2514)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLE2514"]},{"location":"rules/invalid-character-nul/#what-it-does","title":"What it does","text":"<p>Checks for strings that contain the raw control character <code>NUL</code> (0 byte).</p>","tags":["PLE2514"]},{"location":"rules/invalid-character-nul/#why-is-this-bad","title":"Why is this bad?","text":"<p>Control characters are displayed differently by different text editors and terminals.</p> <p>By using the <code>\\0</code> sequence in lieu of the <code>NUL</code> control character, the string will contain the same value, but will render visibly in all editors.</p>","tags":["PLE2514"]},{"location":"rules/invalid-character-nul/#example","title":"Example","text":"<pre><code>x = \"\"\n</code></pre> <p>Use instead:</p> <pre><code>x = \"\\0\"\n</code></pre>","tags":["PLE2514"]},{"location":"rules/invalid-character-sub/","title":"invalid-character-sub (PLE2512)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLE2512"]},{"location":"rules/invalid-character-sub/#what-it-does","title":"What it does","text":"<p>Checks for strings that contain the raw control character <code>SUB</code>.</p>","tags":["PLE2512"]},{"location":"rules/invalid-character-sub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Control characters are displayed differently by different text editors and terminals.</p> <p>By using the <code>\\x1A</code> sequence in lieu of the <code>SUB</code> control character, the string will contain the same value, but will render visibly in all editors.</p>","tags":["PLE2512"]},{"location":"rules/invalid-character-sub/#example","title":"Example","text":"<pre><code>x = \"\"\n</code></pre> <p>Use instead:</p> <pre><code>x = \"\\x1a\"\n</code></pre>","tags":["PLE2512"]},{"location":"rules/invalid-character-zero-width-space/","title":"invalid-character-zero-width-space (PLE2515)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLE2515"]},{"location":"rules/invalid-character-zero-width-space/#what-it-does","title":"What it does","text":"<p>Checks for strings that contain the zero width space character.</p>","tags":["PLE2515"]},{"location":"rules/invalid-character-zero-width-space/#why-is-this-bad","title":"Why is this bad?","text":"<p>This character is rendered invisibly in some text editors and terminals.</p> <p>By using the <code>\\u200B</code> sequence, the string will contain the same value, but will render visibly in all editors.</p>","tags":["PLE2515"]},{"location":"rules/invalid-character-zero-width-space/#example","title":"Example","text":"<pre><code>x = \"Dear Sir/Madam\"\n</code></pre> <p>Use instead:</p> <pre><code>x = \"Dear Sir\\u200b/\\u200bMadam\"  # zero width space\n</code></pre>","tags":["PLE2515"]},{"location":"rules/invalid-class-name/","title":"invalid-class-name (N801)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N801"]},{"location":"rules/invalid-class-name/#what-it-does","title":"What it does","text":"<p>Checks for class names that do not follow the <code>CamelCase</code> convention.</p>","tags":["N801"]},{"location":"rules/invalid-class-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the use of the <code>CapWords</code> (or <code>CamelCase</code>) convention for class names:</p> <p>Class names should normally use the <code>CapWords</code> convention.</p> <p>The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.</p> <p>Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the <code>CapWords</code> convention used only for exception names and builtin constants.</p>","tags":["N801"]},{"location":"rules/invalid-class-name/#example","title":"Example","text":"<pre><code>class my_class:\npass\n</code></pre> <p>Use instead:</p> <pre><code>class MyClass:\npass\n</code></pre>","tags":["N801"]},{"location":"rules/invalid-envvar-default/","title":"invalid-envvar-default (PLW1508)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW1508"]},{"location":"rules/invalid-envvar-default/#what-it-does","title":"What it does","text":"<p>Checks for <code>os.getenv</code> calls with invalid default values.</p>","tags":["PLW1508"]},{"location":"rules/invalid-envvar-default/#why-is-this-bad","title":"Why is this bad?","text":"<p>If an environment variable is set, <code>os.getenv</code> will return its value as a string. If the environment variable is not set, <code>os.getenv</code> will return <code>None</code>, or the default value if one is provided.</p> <p>If the default value is not a string or <code>None</code>, then it will be inconsistent with the return type of <code>os.getenv</code>, which can lead to confusing behavior.</p>","tags":["PLW1508"]},{"location":"rules/invalid-envvar-default/#example","title":"Example","text":"<pre><code>import os\nint(os.getenv(\"FOO\", 1))\n</code></pre> <p>Use instead:</p> <pre><code>import os\nint(os.getenv(\"FOO\", \"1\"))\n</code></pre>","tags":["PLW1508"]},{"location":"rules/invalid-envvar-value/","title":"invalid-envvar-value (PLE1507)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1507"]},{"location":"rules/invalid-envvar-value/#what-it-does","title":"What it does","text":"<p>Checks for <code>os.getenv</code> calls with an invalid <code>key</code> argument.</p>","tags":["PLE1507"]},{"location":"rules/invalid-envvar-value/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>os.getenv</code> only supports strings as the first argument (<code>key</code>).</p> <p>If the provided argument is not a string, <code>os.getenv</code> will throw a <code>TypeError</code> at runtime.</p>","tags":["PLE1507"]},{"location":"rules/invalid-envvar-value/#example","title":"Example","text":"<pre><code>os.getenv(1)\n</code></pre> <p>Use instead:</p> <pre><code>os.getenv(\"1\")\n</code></pre>","tags":["PLE1507"]},{"location":"rules/invalid-escape-sequence/","title":"invalid-escape-sequence (W605)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["W605"]},{"location":"rules/invalid-escape-sequence/#what-it-does","title":"What it does","text":"<p>Checks for invalid escape sequences.</p>","tags":["W605"]},{"location":"rules/invalid-escape-sequence/#why-is-this-bad","title":"Why is this bad?","text":"<p>Invalid escape sequences are deprecated in Python 3.6.</p>","tags":["W605"]},{"location":"rules/invalid-escape-sequence/#example","title":"Example","text":"<pre><code>regex = \"\\.png$\"\n</code></pre> <p>Use instead:</p> <pre><code>regex = r\"\\.png$\"\n</code></pre> <p>Or, if the string already contains a valid escape sequence:</p> <pre><code>value = \"new line\\nand invalid escape \\_ here\"\n</code></pre> <p>Use instead:</p> <pre><code>value = \"new line\\nand invalid escape \\\\_ here\"\n</code></pre>","tags":["W605"]},{"location":"rules/invalid-escape-sequence/#references","title":"References","text":"<ul> <li>Python documentation: String and Bytes literals</li> </ul>","tags":["W605"]},{"location":"rules/invalid-first-argument-name-for-class-method/","title":"invalid-first-argument-name-for-class-method (N804)","text":"<p>Derived from the pep8-naming linter.</p> <p>Fix is sometimes available.</p>","tags":["N804"]},{"location":"rules/invalid-first-argument-name-for-class-method/#what-it-does","title":"What it does","text":"<p>Checks for class methods that use a name other than <code>cls</code> for their first argument.</p>","tags":["N804"]},{"location":"rules/invalid-first-argument-name-for-class-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the use of <code>cls</code> as the first argument for all class methods:</p> <p>Always use <code>cls</code> for the first argument to class methods.</p> <p>If a function argument\u2019s name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus <code>class_</code> is better than <code>clss</code>. (Perhaps better is to avoid such clashes by using a synonym.)</p> <p>Names can be excluded from this rule using the <code>lint.pep8-naming.ignore-names</code> or <code>lint.pep8-naming.extend-ignore-names</code> configuration options. For example, to allow the use of <code>klass</code> as the first argument to class methods, set the <code>lint.pep8-naming.extend-ignore-names</code> option to <code>[\"klass\"]</code>.</p>","tags":["N804"]},{"location":"rules/invalid-first-argument-name-for-class-method/#example","title":"Example","text":"<pre><code>class Example:\n@classmethod\ndef function(self, data): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Example:\n@classmethod\ndef function(cls, data): ...\n</code></pre>","tags":["N804"]},{"location":"rules/invalid-first-argument-name-for-class-method/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as renaming a method parameter can change the behavior of the program.</p>","tags":["N804"]},{"location":"rules/invalid-first-argument-name-for-class-method/#options","title":"Options","text":"<ul> <li><code>lint.pep8-naming.classmethod-decorators</code></li> <li><code>lint.pep8-naming.staticmethod-decorators</code></li> <li><code>lint.pep8-naming.ignore-names</code></li> <li><code>lint.pep8-naming.extend-ignore-names</code></li> </ul>","tags":["N804"]},{"location":"rules/invalid-first-argument-name-for-method/","title":"invalid-first-argument-name-for-method (N805)","text":"<p>Derived from the pep8-naming linter.</p> <p>Fix is sometimes available.</p>","tags":["N805"]},{"location":"rules/invalid-first-argument-name-for-method/#what-it-does","title":"What it does","text":"<p>Checks for instance methods that use a name other than <code>self</code> for their first argument.</p>","tags":["N805"]},{"location":"rules/invalid-first-argument-name-for-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the use of <code>self</code> as first argument for all instance methods:</p> <p>Always use self for the first argument to instance methods.</p> <p>If a function argument\u2019s name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus <code>class_</code> is better than <code>clss</code>. (Perhaps better is to avoid such clashes by using a synonym.)</p> <p>Names can be excluded from this rule using the <code>lint.pep8-naming.ignore-names</code> or <code>lint.pep8-naming.extend-ignore-names</code> configuration options. For example, to allow the use of <code>this</code> as the first argument to instance methods, set the <code>lint.pep8-naming.extend-ignore-names</code> option to <code>[\"this\"]</code>.</p>","tags":["N805"]},{"location":"rules/invalid-first-argument-name-for-method/#example","title":"Example","text":"<pre><code>class Example:\ndef function(cls, data): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Example:\ndef function(self, data): ...\n</code></pre>","tags":["N805"]},{"location":"rules/invalid-first-argument-name-for-method/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as renaming a method parameter can change the behavior of the program.</p>","tags":["N805"]},{"location":"rules/invalid-first-argument-name-for-method/#options","title":"Options","text":"<ul> <li><code>lint.pep8-naming.classmethod-decorators</code></li> <li><code>lint.pep8-naming.staticmethod-decorators</code></li> <li><code>lint.pep8-naming.ignore-names</code></li> <li><code>lint.pep8-naming.extend-ignore-names</code></li> </ul>","tags":["N805"]},{"location":"rules/invalid-formatter-suppression-comment/","title":"invalid-formatter-suppression-comment (RUF028)","text":"<p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF028"]},{"location":"rules/invalid-formatter-suppression-comment/#what-it-does","title":"What it does","text":"<p>Checks for formatter suppression comments that are ineffective or incompatible with Ruff's formatter.</p>","tags":["RUF028"]},{"location":"rules/invalid-formatter-suppression-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Suppression comments that do not actually prevent formatting could cause unintended changes when the formatter is run.</p>","tags":["RUF028"]},{"location":"rules/invalid-formatter-suppression-comment/#examples","title":"Examples","text":"<p>In the following example, all suppression comments would cause a rule violation.</p> <pre><code>def decorator():\npass\n@decorator\n# fmt: off\ndef example():\nif True:\n# fmt: skip\nexpression = [\n# fmt: off\n1,\n2,\n]\n# yapf: disable\n# fmt: on\n# yapf: enable\n</code></pre>","tags":["RUF028"]},{"location":"rules/invalid-function-name/","title":"invalid-function-name (N802)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N802"]},{"location":"rules/invalid-function-name/#what-it-does","title":"What it does","text":"<p>Checks for functions names that do not follow the <code>snake_case</code> naming convention.</p>","tags":["N802"]},{"location":"rules/invalid-function-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends that function names follow <code>snake_case</code>:</p> <p>Function names should be lowercase, with words separated by underscores as necessary to improve readability. mixedCase is allowed only in contexts where that\u2019s already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p> <p>Names can be excluded from this rule using the <code>lint.pep8-naming.ignore-names</code> or <code>lint.pep8-naming.extend-ignore-names</code> configuration options. For example, to ignore all functions starting with <code>test_</code> from this rule, set the <code>lint.pep8-naming.extend-ignore-names</code> option to <code>[\"test_*\"]</code>.</p>","tags":["N802"]},{"location":"rules/invalid-function-name/#example","title":"Example","text":"<pre><code>def myFunction():\npass\n</code></pre> <p>Use instead:</p> <pre><code>def my_function():\npass\n</code></pre>","tags":["N802"]},{"location":"rules/invalid-function-name/#options","title":"Options","text":"<ul> <li><code>lint.pep8-naming.ignore-names</code></li> <li><code>lint.pep8-naming.extend-ignore-names</code></li> </ul>","tags":["N802"]},{"location":"rules/invalid-get-logger-argument/","title":"invalid-get-logger-argument (LOG002)","text":"<p>Derived from the flake8-logging linter.</p> <p>Fix is sometimes available.</p>","tags":["LOG002"]},{"location":"rules/invalid-get-logger-argument/#what-it-does","title":"What it does","text":"<p>Checks for any usage of <code>__cached__</code> and <code>__file__</code> as an argument to <code>logging.getLogger()</code>.</p>","tags":["LOG002"]},{"location":"rules/invalid-get-logger-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>The logging documentation recommends this pattern:</p> <pre><code>logging.getLogger(__name__)\n</code></pre> <p>Here, <code>__name__</code> is the fully qualified module name, such as <code>foo.bar</code>, which is the intended format for logger names.</p> <p>This rule detects probably-mistaken usage of similar module-level dunder constants:</p> <ul> <li><code>__cached__</code> - the pathname of the module's compiled version, such as <code>foo/__pycache__/bar.cpython-311.pyc</code>.</li> <li><code>__file__</code> - the pathname of the module, such as <code>foo/bar.py</code>.</li> </ul>","tags":["LOG002"]},{"location":"rules/invalid-get-logger-argument/#example","title":"Example","text":"<pre><code>import logging\nlogger = logging.getLogger(__file__)\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogger = logging.getLogger(__name__)\n</code></pre>","tags":["LOG002"]},{"location":"rules/invalid-hash-return-type/","title":"invalid-hash-return-type (PLE0309)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0309"]},{"location":"rules/invalid-hash-return-type/#what-it-does","title":"What it does","text":"<p>Checks for <code>__hash__</code> implementations that return non-integer values.</p>","tags":["PLE0309"]},{"location":"rules/invalid-hash-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__hash__</code> method should return an integer. Returning a different type may cause unexpected behavior.</p> <p>Note: <code>bool</code> is a subclass of <code>int</code>, so it's technically valid for <code>__hash__</code> to return <code>True</code> or <code>False</code>. However, for consistency with other rules, Ruff will still emit a diagnostic when <code>__hash__</code> returns a <code>bool</code>.</p>","tags":["PLE0309"]},{"location":"rules/invalid-hash-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __hash__(self):\nreturn \"2\"\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __hash__(self):\nreturn 2\n</code></pre>","tags":["PLE0309"]},{"location":"rules/invalid-hash-return-type/#references","title":"References","text":"<ul> <li>Python documentation: The <code>__hash__</code> method</li> </ul>","tags":["PLE0309"]},{"location":"rules/invalid-index-return-type/","title":"invalid-index-return-type (PLE0305)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0305"]},{"location":"rules/invalid-index-return-type/#what-it-does","title":"What it does","text":"<p>Checks for <code>__index__</code> implementations that return non-integer values.</p>","tags":["PLE0305"]},{"location":"rules/invalid-index-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__index__</code> method should return an integer. Returning a different type may cause unexpected behavior.</p> <p>Note: <code>bool</code> is a subclass of <code>int</code>, so it's technically valid for <code>__index__</code> to return <code>True</code> or <code>False</code>. However, a DeprecationWarning (<code>DeprecationWarning: __index__ returned non-int (type bool)</code>) for such cases was already introduced, thus this is a conscious difference between the original pylint rule and the current ruff implementation.</p>","tags":["PLE0305"]},{"location":"rules/invalid-index-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __index__(self):\nreturn \"2\"\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __index__(self):\nreturn 2\n</code></pre>","tags":["PLE0305"]},{"location":"rules/invalid-index-return-type/#references","title":"References","text":"<ul> <li>Python documentation: The <code>__index__</code> method</li> </ul>","tags":["PLE0305"]},{"location":"rules/invalid-index-type/","title":"invalid-index-type (RUF016)","text":"","tags":["RUF016"]},{"location":"rules/invalid-index-type/#what-it-does","title":"What it does","text":"<p>Checks for indexed access to lists, strings, tuples, bytes, and comprehensions using a type other than an integer or slice.</p>","tags":["RUF016"]},{"location":"rules/invalid-index-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>Only integers or slices can be used as indices to these types. Using other types will result in a <code>TypeError</code> at runtime and a <code>SyntaxWarning</code> at import time.</p>","tags":["RUF016"]},{"location":"rules/invalid-index-type/#example","title":"Example","text":"<pre><code>var = [1, 2, 3][\"x\"]\n</code></pre> <p>Use instead:</p> <pre><code>var = [1, 2, 3][0]\n</code></pre>","tags":["RUF016"]},{"location":"rules/invalid-length-return-type/","title":"invalid-length-return-type (PLE0303)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0303"]},{"location":"rules/invalid-length-return-type/#what-it-does","title":"What it does","text":"<p>Checks for <code>__len__</code> implementations that return values that are not non-negative integers.</p>","tags":["PLE0303"]},{"location":"rules/invalid-length-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__len__</code> method should return a non-negative integer. Returning a different value may cause unexpected behavior.</p> <p>Note: <code>bool</code> is a subclass of <code>int</code>, so it's technically valid for <code>__len__</code> to return <code>True</code> or <code>False</code>. However, for consistency with other rules, Ruff will still emit a diagnostic when <code>__len__</code> returns a <code>bool</code>.</p>","tags":["PLE0303"]},{"location":"rules/invalid-length-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __len__(self):\nreturn \"2\"\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __len__(self):\nreturn 2\n</code></pre>","tags":["PLE0303"]},{"location":"rules/invalid-length-return-type/#references","title":"References","text":"<ul> <li>Python documentation: The <code>__len__</code> method</li> </ul>","tags":["PLE0303"]},{"location":"rules/invalid-mock-access/","title":"invalid-mock-access (PGH005)","text":"<p>Derived from the pygrep-hooks linter.</p>","tags":["PGH005"]},{"location":"rules/invalid-mock-access/#what-it-does","title":"What it does","text":"<p>Checks for common mistakes when using mock objects.</p>","tags":["PGH005"]},{"location":"rules/invalid-mock-access/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>mock</code> module exposes an assertion API that can be used to verify that mock objects undergo expected interactions. This rule checks for common mistakes when using this API.</p> <p>For example, it checks for mock attribute accesses that should be replaced with mock method calls.</p>","tags":["PGH005"]},{"location":"rules/invalid-mock-access/#example","title":"Example","text":"<pre><code>my_mock.assert_called\n</code></pre> <p>Use instead:</p> <pre><code>my_mock.assert_called()\n</code></pre>","tags":["PGH005"]},{"location":"rules/invalid-module-name/","title":"invalid-module-name (N999)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N999"]},{"location":"rules/invalid-module-name/#what-it-does","title":"What it does","text":"<p>Checks for module names that do not follow the <code>snake_case</code> naming convention or are otherwise invalid.</p>","tags":["N999"]},{"location":"rules/invalid-module-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the use of the <code>snake_case</code> naming convention for module names:</p> <p>Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.</p> <p>When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object-oriented) interface, the C/C++ module has a leading underscore (e.g. <code>_socket</code>).</p> <p>Further, in order for Python modules to be importable, they must be valid identifiers. As such, they cannot start with a digit, or collide with hard keywords, like <code>import</code> or <code>class</code>.</p>","tags":["N999"]},{"location":"rules/invalid-module-name/#example","title":"Example","text":"<ul> <li>Instead of <code>example-module-name</code> or <code>example module name</code>, use <code>example_module_name</code>.</li> <li>Instead of <code>ExampleModule</code>, use <code>example_module</code>.</li> </ul>","tags":["N999"]},{"location":"rules/invalid-print-syntax/","title":"invalid-print-syntax (F633)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F633"]},{"location":"rules/invalid-print-syntax/#what-it-does","title":"What it does","text":"<p>Checks for <code>print</code> statements that use the <code>&gt;&gt;</code> syntax.</p>","tags":["F633"]},{"location":"rules/invalid-print-syntax/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 2, the <code>print</code> statement can be used with the <code>&gt;&gt;</code> syntax to print to a file-like object. This <code>print &gt;&gt; sys.stderr</code> syntax no longer exists in Python 3, where <code>print</code> is only a function, not a statement.</p> <p>Instead, use the <code>file</code> keyword argument to the <code>print</code> function, the <code>sys.stderr.write</code> function, or the <code>logging</code> module.</p>","tags":["F633"]},{"location":"rules/invalid-print-syntax/#example","title":"Example","text":"<pre><code>from __future__ import print_function\nimport sys\nprint &gt;&gt; sys.stderr, \"Hello, world!\"\n</code></pre> <p>Use instead:</p> <pre><code>print(\"Hello, world!\", file=sys.stderr)\n</code></pre> <p>Or:</p> <pre><code>import sys\nsys.stderr.write(\"Hello, world!\\n\")\n</code></pre> <p>Or:</p> <pre><code>import logging\nlogging.error(\"Hello, world!\")\n</code></pre>","tags":["F633"]},{"location":"rules/invalid-print-syntax/#references","title":"References","text":"<ul> <li>Python documentation: <code>print</code></li> </ul>","tags":["F633"]},{"location":"rules/invalid-pyproject-toml/","title":"invalid-pyproject-toml (RUF200)","text":"","tags":["RUF200"]},{"location":"rules/invalid-pyproject-toml/#what-it-does","title":"What it does","text":"<p>Checks for any pyproject.toml that does not conform to the schema from the relevant PEPs.</p>","tags":["RUF200"]},{"location":"rules/invalid-pyproject-toml/#why-is-this-bad","title":"Why is this bad?","text":"<p>Your project may contain invalid metadata or configuration without you noticing</p>","tags":["RUF200"]},{"location":"rules/invalid-pyproject-toml/#example","title":"Example","text":"<pre><code>[project]\nname = \"crab\"\nversion = \"1.0.0\"\nauthors = [\"Ferris the Crab &lt;ferris@example.org&gt;\"]\n</code></pre> <p>Use instead:</p> <pre><code>[project]\nname = \"crab\"\nversion = \"1.0.0\"\nauthors = [\n{ email = \"ferris@example.org\" },\n{ name = \"Ferris the Crab\"}\n]\n</code></pre>","tags":["RUF200"]},{"location":"rules/invalid-pyproject-toml/#references","title":"References","text":"<ul> <li>Specification of <code>[project]</code> in pyproject.toml</li> <li>Specification of <code>[build-system]</code> in pyproject.toml</li> <li>Draft but implemented license declaration extensions</li> </ul>","tags":["RUF200"]},{"location":"rules/invalid-str-return-type/","title":"invalid-str-return-type (PLE0307)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0307"]},{"location":"rules/invalid-str-return-type/#what-it-does","title":"What it does","text":"<p>Checks for <code>__str__</code> implementations that return a type other than <code>str</code>.</p>","tags":["PLE0307"]},{"location":"rules/invalid-str-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__str__</code> method should return a <code>str</code> object. Returning a different type may cause unexpected behavior.</p>","tags":["PLE0307"]},{"location":"rules/invalid-str-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __str__(self):\nreturn True\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __str__(self):\nreturn \"Foo\"\n</code></pre>","tags":["PLE0307"]},{"location":"rules/invalid-str-return-type/#references","title":"References","text":"<ul> <li>Python documentation: The <code>__str__</code> method</li> </ul>","tags":["PLE0307"]},{"location":"rules/invalid-todo-capitalization/","title":"invalid-todo-capitalization (TD006)","text":"<p>Derived from the flake8-todos linter.</p> <p>Fix is always available.</p>","tags":["TD006"]},{"location":"rules/invalid-todo-capitalization/#what-it-does","title":"What it does","text":"<p>Checks that a \"TODO\" tag is properly capitalized (i.e., that the tag is uppercase).</p>","tags":["TD006"]},{"location":"rules/invalid-todo-capitalization/#why-is-this-bad","title":"Why is this bad?","text":"<p>Capitalizing the \"TODO\" in a TODO comment is a convention that makes it easier for future readers to identify TODOs.</p>","tags":["TD006"]},{"location":"rules/invalid-todo-capitalization/#example","title":"Example","text":"<pre><code># todo(charlie): capitalize this\n</code></pre> <p>Use instead:</p> <pre><code># TODO(charlie): this is capitalized\n</code></pre>","tags":["TD006"]},{"location":"rules/invalid-todo-tag/","title":"invalid-todo-tag (TD001)","text":"<p>Derived from the flake8-todos linter.</p>","tags":["TD001"]},{"location":"rules/invalid-todo-tag/#what-it-does","title":"What it does","text":"<p>Checks that a TODO comment is labelled with \"TODO\".</p>","tags":["TD001"]},{"location":"rules/invalid-todo-tag/#why-is-this-bad","title":"Why is this bad?","text":"<p>Ambiguous tags reduce code visibility and can lead to dangling TODOs. For example, if a comment is tagged with \"FIXME\" rather than \"TODO\", it may be overlooked by future readers.</p> <p>Note that this rule will only flag \"FIXME\" and \"XXX\" tags as incorrect.</p>","tags":["TD001"]},{"location":"rules/invalid-todo-tag/#example","title":"Example","text":"<pre><code># FIXME(ruff): this should get fixed!\n</code></pre> <p>Use instead:</p> <pre><code># TODO(ruff): this is now fixed!\n</code></pre>","tags":["TD001"]},{"location":"rules/io-error/","title":"io-error (E902)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E902"]},{"location":"rules/io-error/#what-it-does","title":"What it does","text":"<p>This is not a regular diagnostic; instead, it's raised when a file cannot be read from disk.</p>","tags":["E902"]},{"location":"rules/io-error/#why-is-this-bad","title":"Why is this bad?","text":"<p>An <code>IOError</code> indicates an error in the development setup. For example, the user may not have permissions to read a given file, or the filesystem may contain a broken symlink.</p>","tags":["E902"]},{"location":"rules/io-error/#example","title":"Example","text":"<p>On Linux or macOS:</p> <pre><code>$ echo 'print(\"hello world!\")' &gt; a.py\n$ chmod 000 a.py\n$ ruff a.py\na.py:1:1: E902 Permission denied (os error 13)\nFound 1 error.\n</code></pre>","tags":["E902"]},{"location":"rules/io-error/#references","title":"References","text":"<ul> <li>UNIX Permissions introduction</li> <li>Command Line Basics: Symbolic Links</li> </ul>","tags":["E902"]},{"location":"rules/is-literal/","title":"is-literal (F632)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is always available.</p>","tags":["F632"]},{"location":"rules/is-literal/#what-it-does","title":"What it does","text":"<p>Checks for <code>is</code> and <code>is not</code> comparisons against literals, like integers, strings, or lists.</p>","tags":["F632"]},{"location":"rules/is-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>is</code> and <code>is not</code> comparators operate on identity, in that they check whether two objects are the same object. If the objects are not the same object, the comparison will always be <code>False</code>. Using <code>is</code> and <code>is not</code> with constant literals often works \"by accident\", but are not guaranteed to produce the expected result.</p> <p>As of Python 3.8, using <code>is</code> and <code>is not</code> with constant literals will produce a <code>SyntaxWarning</code>.</p> <p>This rule will also flag <code>is</code> and <code>is not</code> comparisons against non-constant literals, like lists, sets, and dictionaries. While such comparisons will not raise a <code>SyntaxWarning</code>, they are still likely to be incorrect, as they will compare the identities of the objects instead of their values, which will always evaluate to <code>False</code>.</p> <p>Instead, use <code>==</code> and <code>!=</code> to compare literals, which will compare the values of the objects instead of their identities.</p>","tags":["F632"]},{"location":"rules/is-literal/#example","title":"Example","text":"<pre><code>x = 200\nif x is 200:\nprint(\"It's 200!\")\n</code></pre> <p>Use instead:</p> <pre><code>x = 200\nif x == 200:\nprint(\"It's 200!\")\n</code></pre>","tags":["F632"]},{"location":"rules/is-literal/#references","title":"References","text":"<ul> <li>Python documentation: Identity comparisons</li> <li>Python documentation: Value comparisons</li> <li>Why does Python log a SyntaxWarning for \u2018is\u2019 with literals? by Adam Johnson</li> </ul>","tags":["F632"]},{"location":"rules/isinstance-type-none/","title":"isinstance-type-none (FURB168)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p>","tags":["FURB168"]},{"location":"rules/isinstance-type-none/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>isinstance</code> that check if an object is of type <code>None</code>.</p>","tags":["FURB168"]},{"location":"rules/isinstance-type-none/#why-is-this-bad","title":"Why is this bad?","text":"<p>There is only ever one instance of <code>None</code>, so it is more efficient and readable to use the <code>is</code> operator to check if an object is <code>None</code>.</p>","tags":["FURB168"]},{"location":"rules/isinstance-type-none/#example","title":"Example","text":"<pre><code>isinstance(obj, type(None))\n</code></pre> <p>Use instead:</p> <pre><code>obj is None\n</code></pre>","tags":["FURB168"]},{"location":"rules/isinstance-type-none/#references","title":"References","text":"<ul> <li>Python documentation: <code>isinstance</code></li> <li>Python documentation: <code>None</code></li> <li>Python documentation: <code>type</code></li> <li>Python documentation: Identity comparisons</li> </ul>","tags":["FURB168"]},{"location":"rules/iter-method-return-iterable/","title":"iter-method-return-iterable (PYI045)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI045"]},{"location":"rules/iter-method-return-iterable/#what-it-does","title":"What it does","text":"<p>Checks for <code>__iter__</code> methods in stubs that return <code>Iterable[T]</code> instead of an <code>Iterator[T]</code>.</p>","tags":["PYI045"]},{"location":"rules/iter-method-return-iterable/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>__iter__</code> methods should always should return an <code>Iterator</code> of some kind, not an <code>Iterable</code>.</p> <p>In Python, an <code>Iterable</code> is an object that has an <code>__iter__</code> method; an <code>Iterator</code> is an object that has <code>__iter__</code> and <code>__next__</code> methods. All <code>__iter__</code> methods are expected to return <code>Iterator</code>s. Type checkers may not always recognize an object as being iterable if its <code>__iter__</code> method does not return an <code>Iterator</code>.</p> <p>Every <code>Iterator</code> is an <code>Iterable</code>, but not every <code>Iterable</code> is an <code>Iterator</code>. For example, <code>list</code> is an <code>Iterable</code>, but not an <code>Iterator</code>; you can obtain an iterator over a list's elements by passing the list to <code>iter()</code>:</p> <pre><code>&gt;&gt;&gt; import collections.abc\n&gt;&gt;&gt; x = [42]\n&gt;&gt;&gt; isinstance(x, collections.abc.Iterable)\nTrue\n&gt;&gt;&gt; isinstance(x, collections.abc.Iterator)\nFalse\n&gt;&gt;&gt; next(x)\nTraceback (most recent call last):\n File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'list' object is not an iterator\n&gt;&gt;&gt; y = iter(x)\n&gt;&gt;&gt; isinstance(y, collections.abc.Iterable)\nTrue\n&gt;&gt;&gt; isinstance(y, collections.abc.Iterator)\nTrue\n&gt;&gt;&gt; next(y)\n42\n</code></pre> <p>Using <code>Iterable</code> rather than <code>Iterator</code> as a return type for an <code>__iter__</code> methods would imply that you would not necessarily be able to call <code>next()</code> on the returned object, violating the expectations of the interface.</p>","tags":["PYI045"]},{"location":"rules/iter-method-return-iterable/#example","title":"Example","text":"<pre><code>import collections.abc\nclass Klass:\ndef __iter__(self) -&gt; collections.abc.Iterable[str]: ...\n</code></pre> <p>Use instead:</p> <pre><code>import collections.abc\nclass Klass:\ndef __iter__(self) -&gt; collections.abc.Iterator[str]: ...\n</code></pre>","tags":["PYI045"]},{"location":"rules/iteration-over-set/","title":"iteration-over-set (PLC0208)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLC0208"]},{"location":"rules/iteration-over-set/#what-it-does","title":"What it does","text":"<p>Checks for iteration over a <code>set</code> literal where each element in the set is itself a literal value.</p>","tags":["PLC0208"]},{"location":"rules/iteration-over-set/#why-is-this-bad","title":"Why is this bad?","text":"<p>Iterating over a <code>set</code> is less efficient than iterating over a sequence type, like <code>list</code> or <code>tuple</code>.</p>","tags":["PLC0208"]},{"location":"rules/iteration-over-set/#example","title":"Example","text":"<pre><code>for number in {1, 2, 3}:\n...\n</code></pre> <p>Use instead:</p> <pre><code>for number in (1, 2, 3):\n...\n</code></pre>","tags":["PLC0208"]},{"location":"rules/iteration-over-set/#references","title":"References","text":"<ul> <li>Python documentation: <code>set</code></li> </ul>","tags":["PLC0208"]},{"location":"rules/jinja2-autoescape-false/","title":"jinja2-autoescape-false (S701)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S701"]},{"location":"rules/jinja2-autoescape-false/#what-it-does","title":"What it does","text":"<p>Checks for <code>jinja2</code> templates that use <code>autoescape=False</code>.</p>","tags":["S701"]},{"location":"rules/jinja2-autoescape-false/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>jinja2</code> templates that use <code>autoescape=False</code> are vulnerable to cross-site scripting (XSS) attacks that allow attackers to execute arbitrary JavaScript.</p> <p>By default, <code>jinja2</code> sets <code>autoescape</code> to <code>False</code>, so it is important to set <code>autoescape=True</code> or use the <code>select_autoescape</code> function to mitigate XSS vulnerabilities.</p>","tags":["S701"]},{"location":"rules/jinja2-autoescape-false/#example","title":"Example","text":"<pre><code>import jinja2\njinja2.Environment(loader=jinja2.FileSystemLoader(\".\"))\n</code></pre> <p>Use instead:</p> <pre><code>import jinja2\njinja2.Environment(loader=jinja2.FileSystemLoader(\".\"), autoescape=True)\n</code></pre>","tags":["S701"]},{"location":"rules/jinja2-autoescape-false/#references","title":"References","text":"<ul> <li>Jinja documentation: API</li> <li>Common Weakness Enumeration: CWE-94</li> </ul>","tags":["S701"]},{"location":"rules/jump-statement-in-finally/","title":"jump-statement-in-finally (B012)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B012"]},{"location":"rules/jump-statement-in-finally/#what-it-does","title":"What it does","text":"<p>Checks for <code>break</code>, <code>continue</code>, and <code>return</code> statements in <code>finally</code> blocks.</p>","tags":["B012"]},{"location":"rules/jump-statement-in-finally/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of <code>break</code>, <code>continue</code>, and <code>return</code> statements in <code>finally</code> blocks can cause exceptions to be silenced.</p> <p><code>finally</code> blocks execute regardless of whether an exception is raised. If a <code>break</code>, <code>continue</code>, or <code>return</code> statement is reached in a <code>finally</code> block, any exception raised in the <code>try</code> or <code>except</code> blocks will be silenced.</p>","tags":["B012"]},{"location":"rules/jump-statement-in-finally/#example","title":"Example","text":"<pre><code>def speed(distance, time):\ntry:\nreturn distance / time\nexcept ZeroDivisionError:\nraise ValueError(\"Time cannot be zero\")\nfinally:\nreturn 299792458  # `ValueError` is silenced\n</code></pre> <p>Use instead:</p> <pre><code>def speed(distance, time):\ntry:\nreturn distance / time\nexcept ZeroDivisionError:\nraise ValueError(\"Time cannot be zero\")\n</code></pre>","tags":["B012"]},{"location":"rules/jump-statement-in-finally/#references","title":"References","text":"<ul> <li>Python documentation: The <code>try</code> statement</li> </ul>","tags":["B012"]},{"location":"rules/lambda-assignment/","title":"lambda-assignment (E731)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is sometimes available.</p>","tags":["E731"]},{"location":"rules/lambda-assignment/#what-it-does","title":"What it does","text":"<p>Checks for lambda expressions which are assigned to a variable.</p>","tags":["E731"]},{"location":"rules/lambda-assignment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Per PEP 8, you should \"Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.\"</p> <p>Using a <code>def</code> statement leads to better tracebacks, and the assignment itself negates the primary benefit of using a <code>lambda</code> expression (i.e., that it can be embedded inside another expression).</p>","tags":["E731"]},{"location":"rules/lambda-assignment/#example","title":"Example","text":"<pre><code>f = lambda x: 2 * x\n</code></pre> <p>Use instead:</p> <pre><code>def f(x):\nreturn 2 * x\n</code></pre>","tags":["E731"]},{"location":"rules/late-future-import/","title":"late-future-import (F404)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F404"]},{"location":"rules/late-future-import/#what-it-does","title":"What it does","text":"<p>Checks for <code>__future__</code> imports that are not located at the beginning of a file.</p>","tags":["F404"]},{"location":"rules/late-future-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Imports from <code>__future__</code> must be placed the beginning of the file, before any other statements (apart from docstrings). The use of <code>__future__</code> imports elsewhere is invalid and will result in a <code>SyntaxError</code>.</p>","tags":["F404"]},{"location":"rules/late-future-import/#example","title":"Example","text":"<pre><code>from pathlib import Path\nfrom __future__ import annotations\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\nfrom pathlib import Path\n</code></pre>","tags":["F404"]},{"location":"rules/late-future-import/#references","title":"References","text":"<ul> <li>Python documentation: Future statements</li> </ul>","tags":["F404"]},{"location":"rules/line-contains-fixme/","title":"line-contains-fixme (FIX001)","text":"<p>Derived from the flake8-fixme linter.</p>","tags":["FIX001"]},{"location":"rules/line-contains-fixme/#what-it-does","title":"What it does","text":"<p>Checks for \"FIXME\" comments.</p>","tags":["FIX001"]},{"location":"rules/line-contains-fixme/#why-is-this-bad","title":"Why is this bad?","text":"<p>\"FIXME\" comments are used to describe an issue that should be resolved (usually, a bug or unexpected behavior).</p> <p>Consider resolving the issue before deploying the code.</p> <p>Note that if you use \"FIXME\" comments as a form of documentation, this rule may not be appropriate for your project.</p>","tags":["FIX001"]},{"location":"rules/line-contains-fixme/#example","title":"Example","text":"<pre><code>def speed(distance, time):\nreturn distance / time  # FIXME: Raises ZeroDivisionError for time = 0.\n</code></pre>","tags":["FIX001"]},{"location":"rules/line-contains-hack/","title":"line-contains-hack (FIX004)","text":"<p>Derived from the flake8-fixme linter.</p>","tags":["FIX004"]},{"location":"rules/line-contains-hack/#what-it-does","title":"What it does","text":"<p>Checks for \"HACK\" comments.</p>","tags":["FIX004"]},{"location":"rules/line-contains-hack/#why-is-this-bad","title":"Why is this bad?","text":"<p>\"HACK\" comments are used to describe an issue that should be resolved (usually, a suboptimal solution or temporary workaround).</p> <p>Consider resolving the issue before deploying the code.</p> <p>Note that if you use \"HACK\" comments as a form of documentation, this rule may not be appropriate for your project.</p>","tags":["FIX004"]},{"location":"rules/line-contains-hack/#example","title":"Example","text":"<pre><code>import os\ndef running_windows():  # HACK: Use platform module instead.\ntry:\nos.mkdir(\"C:\\\\Windows\\\\System32\\\\\")\nexcept FileExistsError:\nreturn True\nelse:\nos.rmdir(\"C:\\\\Windows\\\\System32\\\\\")\nreturn False\n</code></pre>","tags":["FIX004"]},{"location":"rules/line-contains-todo/","title":"line-contains-todo (FIX002)","text":"<p>Derived from the flake8-fixme linter.</p>","tags":["FIX002"]},{"location":"rules/line-contains-todo/#what-it-does","title":"What it does","text":"<p>Checks for \"TODO\" comments.</p>","tags":["FIX002"]},{"location":"rules/line-contains-todo/#why-is-this-bad","title":"Why is this bad?","text":"<p>\"TODO\" comments are used to describe an issue that should be resolved (usually, a missing feature, optimization, or refactoring opportunity).</p> <p>Consider resolving the issue before deploying the code.</p> <p>Note that if you use \"TODO\" comments as a form of documentation (e.g., to provide context for future work), this rule may not be appropriate for your project.</p>","tags":["FIX002"]},{"location":"rules/line-contains-todo/#example","title":"Example","text":"<pre><code>def greet(name):\nreturn f\"Hello, {name}!\"  # TODO: Add support for custom greetings.\n</code></pre>","tags":["FIX002"]},{"location":"rules/line-contains-xxx/","title":"line-contains-xxx (FIX003)","text":"<p>Derived from the flake8-fixme linter.</p>","tags":["FIX003"]},{"location":"rules/line-contains-xxx/#what-it-does","title":"What it does","text":"<p>Checks for \"XXX\" comments.</p>","tags":["FIX003"]},{"location":"rules/line-contains-xxx/#why-is-this-bad","title":"Why is this bad?","text":"<p>\"XXX\" comments are used to describe an issue that should be resolved.</p> <p>Consider resolving the issue before deploying the code, or, at minimum, using a more descriptive comment tag (e.g, \"TODO\").</p>","tags":["FIX003"]},{"location":"rules/line-contains-xxx/#example","title":"Example","text":"<pre><code>def speed(distance, time):\nreturn distance / time  # XXX: Raises ZeroDivisionError for time = 0.\n</code></pre>","tags":["FIX003"]},{"location":"rules/line-too-long/","title":"line-too-long (E501)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E501"]},{"location":"rules/line-too-long/#what-it-does","title":"What it does","text":"<p>Checks for lines that exceed the specified maximum character length.</p>","tags":["E501"]},{"location":"rules/line-too-long/#why-is-this-bad","title":"Why is this bad?","text":"<p>Overlong lines can hurt readability. PEP 8, for example, recommends limiting lines to 79 characters. By default, this rule enforces a limit of 88 characters for compatibility with Black and the Ruff formatter, though that limit is configurable via the <code>line-length</code> setting.</p> <p>In the interest of pragmatism, this rule makes a few exceptions when determining whether a line is overlong. Namely, it:</p> <ol> <li>Ignores lines that consist of a single \"word\" (i.e., without any     whitespace between its characters).</li> <li>Ignores lines that end with a URL, as long as the URL starts before     the line-length threshold.</li> <li>Ignores line that end with a pragma comment (e.g., <code># type: ignore</code>     or <code># noqa</code>), as long as the pragma comment starts before the     line-length threshold. That is, a line will not be flagged as     overlong if a pragma comment causes it to exceed the line length.     (This behavior aligns with that of the Ruff formatter.)</li> <li>Ignores SPDX license identifiers and copyright notices     (e.g., <code># SPDX-License-Identifier: MIT</code>), which are machine-readable     and should not wrap over multiple lines.</li> </ol> <p>If <code>lint.pycodestyle.ignore-overlong-task-comments</code> is <code>true</code>, this rule will also ignore comments that start with any of the specified <code>lint.task-tags</code> (e.g., <code># TODO:</code>).</p>","tags":["E501"]},{"location":"rules/line-too-long/#example","title":"Example","text":"<pre><code>my_function(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10)\n</code></pre> <p>Use instead:</p> <pre><code>my_function(\nparam1, param2, param3, param4, param5,\nparam6, param7, param8, param9, param10\n)\n</code></pre>","tags":["E501"]},{"location":"rules/line-too-long/#error-suppression","title":"Error suppression","text":"<p>Hint: when suppressing <code>E501</code> errors within multi-line strings (like docstrings), the <code>noqa</code> directive should come at the end of the string (after the closing triple quote), and will apply to the entire string, like so:</p> <pre><code>\"\"\"Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\n\"\"\"  # noqa: E501\n</code></pre>","tags":["E501"]},{"location":"rules/line-too-long/#options","title":"Options","text":"<ul> <li><code>line-length</code></li> <li><code>lint.task-tags</code></li> <li><code>lint.pycodestyle.ignore-overlong-task-comments</code></li> <li><code>lint.pycodestyle.max-line-length</code></li> </ul>","tags":["E501"]},{"location":"rules/list-reverse-copy/","title":"list-reverse-copy (FURB187)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p>","tags":["FURB187"]},{"location":"rules/list-reverse-copy/#what-it-does","title":"What it does","text":"<p>Checks for list reversals that can be performed in-place in lieu of creating a new list.</p>","tags":["FURB187"]},{"location":"rules/list-reverse-copy/#why-is-this-bad","title":"Why is this bad?","text":"<p>When reversing a list, it's more efficient to use the in-place method <code>.reverse()</code> instead of creating a new list, if the original list is no longer needed.</p>","tags":["FURB187"]},{"location":"rules/list-reverse-copy/#example","title":"Example","text":"<pre><code>l = [1, 2, 3]\nl = reversed(l)\nl = [1, 2, 3]\nl = list(reversed(l))\nl = [1, 2, 3]\nl = l[::-1]\n</code></pre> <p>Use instead:</p> <pre><code>l = [1, 2, 3]\nl.reverse()\n</code></pre>","tags":["FURB187"]},{"location":"rules/list-reverse-copy/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as calling <code>.reverse()</code> on a list will mutate the list in-place, unlike <code>reversed</code>, which creates a new list and leaves the original list unchanged.</p> <p>If the list is referenced elsewhere, this could lead to unexpected behavior.</p>","tags":["FURB187"]},{"location":"rules/list-reverse-copy/#references","title":"References","text":"<ul> <li>Python documentation: More on Lists</li> </ul>","tags":["FURB187"]},{"location":"rules/literal-membership/","title":"literal-membership (PLR6201)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR6201"]},{"location":"rules/literal-membership/#what-it-does","title":"What it does","text":"<p>Checks for membership tests on <code>list</code> and <code>tuple</code> literals.</p>","tags":["PLR6201"]},{"location":"rules/literal-membership/#why-is-this-bad","title":"Why is this bad?","text":"<p>When testing for membership in a static sequence, prefer a <code>set</code> literal over a <code>list</code> or <code>tuple</code>, as Python optimizes <code>set</code> membership tests.</p>","tags":["PLR6201"]},{"location":"rules/literal-membership/#example","title":"Example","text":"<pre><code>1 in [1, 2, 3]\n</code></pre> <p>Use instead:</p> <pre><code>1 in {1, 2, 3}\n</code></pre>","tags":["PLR6201"]},{"location":"rules/literal-membership/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as the use of a <code>set</code> literal will error at runtime if the sequence contains unhashable elements (like lists or dictionaries). While Ruff will attempt to infer the hashability of the elements, it may not always be able to do so.</p>","tags":["PLR6201"]},{"location":"rules/literal-membership/#references","title":"References","text":"<ul> <li>What\u2019s New In Python 3.2</li> </ul>","tags":["PLR6201"]},{"location":"rules/load-before-global-declaration/","title":"load-before-global-declaration (PLE0118)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0118"]},{"location":"rules/load-before-global-declaration/#what-it-does","title":"What it does","text":"<p>Checks for uses of names that are declared as <code>global</code> prior to the relevant <code>global</code> declaration.</p>","tags":["PLE0118"]},{"location":"rules/load-before-global-declaration/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>global</code> declaration applies to the entire scope. Using a name that's declared as <code>global</code> in a given scope prior to the relevant <code>global</code> declaration is a <code>SyntaxError</code>.</p>","tags":["PLE0118"]},{"location":"rules/load-before-global-declaration/#example","title":"Example","text":"<pre><code>counter = 1\ndef increment():\nprint(f\"Adding 1 to {counter}\")\nglobal counter\ncounter += 1\n</code></pre> <p>Use instead:</p> <pre><code>counter = 1\ndef increment():\nglobal counter\nprint(f\"Adding 1 to {counter}\")\ncounter += 1\n</code></pre>","tags":["PLE0118"]},{"location":"rules/load-before-global-declaration/#references","title":"References","text":"<ul> <li>Python documentation: The <code>global</code> statement</li> </ul>","tags":["PLE0118"]},{"location":"rules/logging-config-insecure-listen/","title":"logging-config-insecure-listen (S612)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S612"]},{"location":"rules/logging-config-insecure-listen/#what-it-does","title":"What it does","text":"<p>Checks for insecure <code>logging.config.listen</code> calls.</p>","tags":["S612"]},{"location":"rules/logging-config-insecure-listen/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>logging.config.listen</code> starts a server that listens for logging configuration requests. This is insecure, as parts of the configuration are passed to the built-in <code>eval</code> function, which can be used to execute arbitrary code.</p>","tags":["S612"]},{"location":"rules/logging-config-insecure-listen/#example","title":"Example","text":"<pre><code>import logging\nlogging.config.listen(9999)\n</code></pre>","tags":["S612"]},{"location":"rules/logging-config-insecure-listen/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging.config.listen()</code></li> </ul>","tags":["S612"]},{"location":"rules/logging-exc-info/","title":"logging-exc-info (G201)","text":"<p>Derived from the flake8-logging-format linter.</p>","tags":["G201"]},{"location":"rules/logging-exc-info/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>logging.error</code> that pass <code>exc_info=True</code>.</p>","tags":["G201"]},{"location":"rules/logging-exc-info/#why-is-this-bad","title":"Why is this bad?","text":"<p>Calling <code>logging.error</code> with <code>exc_info=True</code> is equivalent to calling <code>logging.exception</code>. Using <code>logging.exception</code> is more concise, more readable, and conveys the intent of the logging statement more clearly.</p>","tags":["G201"]},{"location":"rules/logging-exc-info/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G201"]},{"location":"rules/logging-exc-info/#example","title":"Example","text":"<pre><code>import logging\ntry:\n...\nexcept ValueError:\nlogging.error(\"Exception occurred\", exc_info=True)\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ntry:\n...\nexcept ValueError:\nlogging.exception(\"Exception occurred\")\n</code></pre>","tags":["G201"]},{"location":"rules/logging-exc-info/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G201"]},{"location":"rules/logging-exc-info/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging.exception</code></li> <li>Python documentation: <code>exception</code></li> <li>Python documentation: <code>logging.error</code></li> <li>Python documentation: <code>error</code></li> </ul>","tags":["G201"]},{"location":"rules/logging-extra-attr-clash/","title":"logging-extra-attr-clash (G101)","text":"<p>Derived from the flake8-logging-format linter.</p>","tags":["G101"]},{"location":"rules/logging-extra-attr-clash/#what-it-does","title":"What it does","text":"<p>Checks for <code>extra</code> keywords in logging statements that clash with <code>LogRecord</code> attributes.</p>","tags":["G101"]},{"location":"rules/logging-extra-attr-clash/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>logging</code> module provides a mechanism for passing additional values to be logged using the <code>extra</code> keyword argument. These values are then passed to the <code>LogRecord</code> constructor.</p> <p>Providing a value via <code>extra</code> that clashes with one of the attributes of the <code>LogRecord</code> constructor will raise a <code>KeyError</code> when the <code>LogRecord</code> is constructed.</p>","tags":["G101"]},{"location":"rules/logging-extra-attr-clash/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G101"]},{"location":"rules/logging-extra-attr-clash/#example","title":"Example","text":"<pre><code>import logging\nlogging.basicConfig(format=\"%(name) - %(message)s\", level=logging.INFO)\nusername = \"Maria\"\nlogging.info(\"Something happened\", extra=dict(name=username))\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(user_id)s - %(message)s\", level=logging.INFO)\nusername = \"Maria\"\nlogging.info(\"Something happened\", extra=dict(user_id=username))\n</code></pre>","tags":["G101"]},{"location":"rules/logging-extra-attr-clash/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G101"]},{"location":"rules/logging-extra-attr-clash/#references","title":"References","text":"<ul> <li>Python documentation: LogRecord attributes</li> </ul>","tags":["G101"]},{"location":"rules/logging-f-string/","title":"logging-f-string (G004)","text":"<p>Derived from the flake8-logging-format linter.</p>","tags":["G004"]},{"location":"rules/logging-f-string/#what-it-does","title":"What it does","text":"<p>Checks for uses of f-strings to format logging messages.</p>","tags":["G004"]},{"location":"rules/logging-f-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>logging</code> module provides a mechanism for passing additional values to be logged using the <code>extra</code> keyword argument. This is more consistent, more efficient, and less error-prone than formatting the string directly.</p> <p>Using f-strings to format a logging message requires that Python eagerly format the string, even if the logging statement is never executed (e.g., if the log level is above the level of the logging statement), whereas using the <code>extra</code> keyword argument defers formatting until required.</p> <p>Additionally, the use of <code>extra</code> will ensure that the values are made available to all handlers, which can then be configured to log the values in a consistent manner.</p> <p>As an alternative to <code>extra</code>, passing values as arguments to the logging method can also be used to defer string formatting until required.</p>","tags":["G004"]},{"location":"rules/logging-f-string/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G004"]},{"location":"rules/logging-f-string/#example","title":"Example","text":"<pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(f\"{user} - Something happened\")\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(user_id)s - %(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"Something happened\", extra=dict(user_id=user))\n</code></pre> <p>Or:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"%s - Something happened\", user)\n</code></pre>","tags":["G004"]},{"location":"rules/logging-f-string/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G004"]},{"location":"rules/logging-f-string/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging</code></li> <li>Python documentation: Optimization</li> </ul>","tags":["G004"]},{"location":"rules/logging-percent-format/","title":"logging-percent-format (G002)","text":"<p>Derived from the flake8-logging-format linter.</p>","tags":["G002"]},{"location":"rules/logging-percent-format/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>printf</code>-style format strings to format logging messages.</p>","tags":["G002"]},{"location":"rules/logging-percent-format/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>logging</code> module provides a mechanism for passing additional values to be logged using the <code>extra</code> keyword argument. This is more consistent, more efficient, and less error-prone than formatting the string directly.</p> <p>Using <code>printf</code>-style format strings to format a logging message requires that Python eagerly format the string, even if the logging statement is never executed (e.g., if the log level is above the level of the logging statement), whereas using the <code>extra</code> keyword argument defers formatting until required.</p> <p>Additionally, the use of <code>extra</code> will ensure that the values are made available to all handlers, which can then be configured to log the values in a consistent manner.</p> <p>As an alternative to <code>extra</code>, passing values as arguments to the logging method can also be used to defer string formatting until required.</p>","tags":["G002"]},{"location":"rules/logging-percent-format/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G002"]},{"location":"rules/logging-percent-format/#example","title":"Example","text":"<pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"%s - Something happened\" % user)\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(user_id)s - %(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"Something happened\", extra=dict(user_id=user))\n</code></pre> <p>Or:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"%s - Something happened\", user)\n</code></pre>","tags":["G002"]},{"location":"rules/logging-percent-format/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G002"]},{"location":"rules/logging-percent-format/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging</code></li> <li>Python documentation: Optimization</li> </ul>","tags":["G002"]},{"location":"rules/logging-redundant-exc-info/","title":"logging-redundant-exc-info (G202)","text":"<p>Derived from the flake8-logging-format linter.</p>","tags":["G202"]},{"location":"rules/logging-redundant-exc-info/#what-it-does","title":"What it does","text":"<p>Checks for redundant <code>exc_info</code> keyword arguments in logging statements.</p>","tags":["G202"]},{"location":"rules/logging-redundant-exc-info/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>exc_info</code> is <code>True</code> by default for <code>logging.exception</code>, and <code>False</code> by default for <code>logging.error</code>.</p> <p>Passing <code>exc_info=True</code> to <code>logging.exception</code> calls is redundant, as is passing <code>exc_info=False</code> to <code>logging.error</code> calls.</p>","tags":["G202"]},{"location":"rules/logging-redundant-exc-info/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G202"]},{"location":"rules/logging-redundant-exc-info/#example","title":"Example","text":"<pre><code>import logging\ntry:\n...\nexcept ValueError:\nlogging.exception(\"Exception occurred\", exc_info=True)\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ntry:\n...\nexcept ValueError:\nlogging.exception(\"Exception occurred\")\n</code></pre>","tags":["G202"]},{"location":"rules/logging-redundant-exc-info/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G202"]},{"location":"rules/logging-redundant-exc-info/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging.exception</code></li> <li>Python documentation: <code>exception</code></li> <li>Python documentation: <code>logging.error</code></li> <li>Python documentation: <code>error</code></li> </ul>","tags":["G202"]},{"location":"rules/logging-string-concat/","title":"logging-string-concat (G003)","text":"<p>Derived from the flake8-logging-format linter.</p>","tags":["G003"]},{"location":"rules/logging-string-concat/#what-it-does","title":"What it does","text":"<p>Checks for uses string concatenation via the <code>+</code> operator to format logging messages.</p>","tags":["G003"]},{"location":"rules/logging-string-concat/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>logging</code> module provides a mechanism for passing additional values to be logged using the <code>extra</code> keyword argument. This is more consistent, more efficient, and less error-prone than formatting the string directly.</p> <p>Using concatenation to format a logging message requires that Python eagerly format the string, even if the logging statement is never executed (e.g., if the log level is above the level of the logging statement), whereas using the <code>extra</code> keyword argument defers formatting until required.</p> <p>Additionally, the use of <code>extra</code> will ensure that the values are made available to all handlers, which can then be configured to log the values in a consistent manner.</p> <p>As an alternative to <code>extra</code>, passing values as arguments to the logging method can also be used to defer string formatting until required.</p>","tags":["G003"]},{"location":"rules/logging-string-concat/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G003"]},{"location":"rules/logging-string-concat/#example","title":"Example","text":"<pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(user + \" - Something happened\")\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(user_id)s - %(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"Something happened\", extra=dict(user_id=user))\n</code></pre> <p>Or:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"%s - Something happened\", user)\n</code></pre>","tags":["G003"]},{"location":"rules/logging-string-concat/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G003"]},{"location":"rules/logging-string-concat/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging</code></li> <li>Python documentation: Optimization</li> </ul>","tags":["G003"]},{"location":"rules/logging-string-format/","title":"logging-string-format (G001)","text":"<p>Derived from the flake8-logging-format linter.</p>","tags":["G001"]},{"location":"rules/logging-string-format/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>str.format</code> to format logging messages.</p>","tags":["G001"]},{"location":"rules/logging-string-format/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>logging</code> module provides a mechanism for passing additional values to be logged using the <code>extra</code> keyword argument. This is more consistent, more efficient, and less error-prone than formatting the string directly.</p> <p>Using <code>str.format</code> to format a logging message requires that Python eagerly format the string, even if the logging statement is never executed (e.g., if the log level is above the level of the logging statement), whereas using the <code>extra</code> keyword argument defers formatting until required.</p> <p>Additionally, the use of <code>extra</code> will ensure that the values are made available to all handlers, which can then be configured to log the values in a consistent manner.</p> <p>As an alternative to <code>extra</code>, passing values as arguments to the logging method can also be used to defer string formatting until required.</p>","tags":["G001"]},{"location":"rules/logging-string-format/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G001"]},{"location":"rules/logging-string-format/#example","title":"Example","text":"<pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"{} - Something happened\".format(user))\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(user_id)s - %(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"Something happened\", extra={\"user_id\": user})\n</code></pre> <p>Or:</p> <pre><code>import logging\nlogging.basicConfig(format=\"%(message)s\", level=logging.INFO)\nuser = \"Maria\"\nlogging.info(\"%s - Something happened\", user)\n</code></pre>","tags":["G001"]},{"location":"rules/logging-string-format/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G001"]},{"location":"rules/logging-string-format/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging</code></li> <li>Python documentation: Optimization</li> </ul>","tags":["G001"]},{"location":"rules/logging-too-few-args/","title":"logging-too-few-args (PLE1206)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1206"]},{"location":"rules/logging-too-few-args/#what-it-does","title":"What it does","text":"<p>Checks for too few positional arguments for a <code>logging</code> format string.</p>","tags":["PLE1206"]},{"location":"rules/logging-too-few-args/#why-is-this-bad","title":"Why is this bad?","text":"<p>A <code>TypeError</code> will be raised if the statement is run.</p>","tags":["PLE1206"]},{"location":"rules/logging-too-few-args/#example","title":"Example","text":"<pre><code>import logging\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"%s error occurred: %s\", e)\nraise\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"%s error occurred: %s\", type(e), e)\nraise\n</code></pre>","tags":["PLE1206"]},{"location":"rules/logging-too-many-args/","title":"logging-too-many-args (PLE1205)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1205"]},{"location":"rules/logging-too-many-args/#what-it-does","title":"What it does","text":"<p>Checks for too many positional arguments for a <code>logging</code> format string.</p>","tags":["PLE1205"]},{"location":"rules/logging-too-many-args/#why-is-this-bad","title":"Why is this bad?","text":"<p>A <code>TypeError</code> will be raised if the statement is run.</p>","tags":["PLE1205"]},{"location":"rules/logging-too-many-args/#example","title":"Example","text":"<pre><code>import logging\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"Error occurred: %s\", type(e), e)\nraise\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"%s error occurred: %s\", type(e), e)\nraise\n</code></pre>","tags":["PLE1205"]},{"location":"rules/logging-warn/","title":"logging-warn (G010)","text":"<p>Derived from the flake8-logging-format linter.</p> <p>Fix is always available.</p>","tags":["G010"]},{"location":"rules/logging-warn/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>logging.warn</code> and <code>logging.Logger.warn</code>.</p>","tags":["G010"]},{"location":"rules/logging-warn/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>logging.warn</code> and <code>logging.Logger.warn</code> are deprecated in favor of <code>logging.warning</code> and <code>logging.Logger.warning</code>, which are functionally equivalent.</p>","tags":["G010"]},{"location":"rules/logging-warn/#known-problems","title":"Known problems","text":"<p>This rule detects uses of the <code>logging</code> module via a heuristic. Specifically, it matches against:</p> <ul> <li>Uses of the <code>logging</code> module itself (e.g., <code>import logging; logging.info(...)</code>).</li> <li>Uses of <code>flask.current_app.logger</code> (e.g., <code>from flask import current_app; current_app.logger.info(...)</code>).</li> <li>Objects whose name starts with <code>log</code> or ends with <code>logger</code> or <code>logging</code>,     when used in the same file in which they are defined (e.g., <code>logger = logging.getLogger(); logger.info(...)</code>).</li> <li>Imported objects marked as loggers via the <code>lint.logger-objects</code> setting, which can be     used to enforce these rules against shared logger objects (e.g., <code>from module import logger; logger.info(...)</code>,     when <code>lint.logger-objects</code> is set to <code>[\"module.logger\"]</code>).</li> </ul>","tags":["G010"]},{"location":"rules/logging-warn/#example","title":"Example","text":"<pre><code>import logging\nlogging.warn(\"Something happened\")\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogging.warning(\"Something happened\")\n</code></pre>","tags":["G010"]},{"location":"rules/logging-warn/#options","title":"Options","text":"<ul> <li><code>lint.logger-objects</code></li> </ul>","tags":["G010"]},{"location":"rules/logging-warn/#references","title":"References","text":"<ul> <li>Python documentation: <code>logging.warning</code></li> <li>Python documentation: <code>logging.Logger.warning</code></li> </ul>","tags":["G010"]},{"location":"rules/long-sleep-not-forever/","title":"long-sleep-not-forever (ASYNC116)","text":"<p>Derived from the flake8-async linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["ASYNC116"]},{"location":"rules/long-sleep-not-forever/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>trio.sleep()</code> or <code>anyio.sleep()</code> with a delay greater than 24 hours.</p>","tags":["ASYNC116"]},{"location":"rules/long-sleep-not-forever/#why-is-this-bad","title":"Why is this bad?","text":"<p>Calling <code>sleep()</code> with a delay greater than 24 hours is usually intended to sleep indefinitely. Instead of using a large delay, <code>trio.sleep_forever()</code> or <code>anyio.sleep_forever()</code> better conveys the intent.</p>","tags":["ASYNC116"]},{"location":"rules/long-sleep-not-forever/#example","title":"Example","text":"<pre><code>import trio\nasync def func():\nawait trio.sleep(86401)\n</code></pre> <p>Use instead:</p> <pre><code>import trio\nasync def func():\nawait trio.sleep_forever()\n</code></pre>","tags":["ASYNC116"]},{"location":"rules/loop-iterator-mutation/","title":"loop-iterator-mutation (B909)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["B909"]},{"location":"rules/loop-iterator-mutation/#what-it-does","title":"What it does","text":"<p>Checks for mutations to an iterable during a loop iteration.</p>","tags":["B909"]},{"location":"rules/loop-iterator-mutation/#why-is-this-bad","title":"Why is this bad?","text":"<p>When iterating over an iterable, mutating the iterable can lead to unexpected behavior, like skipping elements or infinite loops.</p>","tags":["B909"]},{"location":"rules/loop-iterator-mutation/#example","title":"Example","text":"<pre><code>items = [1, 2, 3]\nfor item in items:\nprint(item)\n# Create an infinite loop by appending to the list.\nitems.append(item)\n</code></pre>","tags":["B909"]},{"location":"rules/loop-iterator-mutation/#references","title":"References","text":"<ul> <li>Python documentation: Mutable Sequence Types</li> </ul>","tags":["B909"]},{"location":"rules/loop-variable-overrides-iterator/","title":"loop-variable-overrides-iterator (B020)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B020"]},{"location":"rules/loop-variable-overrides-iterator/#what-it-does","title":"What it does","text":"<p>Checks for loop control variables that override the loop iterable.</p>","tags":["B020"]},{"location":"rules/loop-variable-overrides-iterator/#why-is-this-bad","title":"Why is this bad?","text":"<p>Loop control variables should not override the loop iterable, as this can lead to confusing behavior.</p> <p>Instead, use a distinct variable name for any loop control variables.</p>","tags":["B020"]},{"location":"rules/loop-variable-overrides-iterator/#example","title":"Example","text":"<pre><code>items = [1, 2, 3]\nfor items in items:\nprint(items)\n</code></pre> <p>Use instead:</p> <pre><code>items = [1, 2, 3]\nfor item in items:\nprint(item)\n</code></pre>","tags":["B020"]},{"location":"rules/loop-variable-overrides-iterator/#references","title":"References","text":"<ul> <li>Python documentation: The <code>for</code> statement</li> </ul>","tags":["B020"]},{"location":"rules/lowercase-imported-as-non-lowercase/","title":"lowercase-imported-as-non-lowercase (N812)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N812"]},{"location":"rules/lowercase-imported-as-non-lowercase/#what-it-does","title":"What it does","text":"<p>Checks for lowercase imports that are aliased to non-lowercase names.</p>","tags":["N812"]},{"location":"rules/lowercase-imported-as-non-lowercase/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends naming conventions for classes, functions, constants, and more. The use of inconsistent naming styles between import and alias names may lead readers to expect an import to be of another type (e.g., confuse a Python class with a constant).</p> <p>Import aliases should thus follow the same naming style as the member being imported.</p>","tags":["N812"]},{"location":"rules/lowercase-imported-as-non-lowercase/#example","title":"Example","text":"<pre><code>from example import myclassname as MyClassName\n</code></pre> <p>Use instead:</p> <pre><code>from example import myclassname\n</code></pre>","tags":["N812"]},{"location":"rules/lru-cache-with-maxsize-none/","title":"lru-cache-with-maxsize-none (UP033)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP033"]},{"location":"rules/lru-cache-with-maxsize-none/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>functools.lru_cache</code> that set <code>maxsize=None</code>.</p>","tags":["UP033"]},{"location":"rules/lru-cache-with-maxsize-none/#why-is-this-bad","title":"Why is this bad?","text":"<p>Since Python 3.9, <code>functools.cache</code> can be used as a drop-in replacement for <code>functools.lru_cache(maxsize=None)</code>. When possible, prefer <code>functools.cache</code> as it is more readable and idiomatic.</p>","tags":["UP033"]},{"location":"rules/lru-cache-with-maxsize-none/#example","title":"Example","text":"<pre><code>import functools\n@functools.lru_cache(maxsize=None)\ndef foo(): ...\n</code></pre> <p>Use instead:</p> <pre><code>import functools\n@functools.cache\ndef foo(): ...\n</code></pre>","tags":["UP033"]},{"location":"rules/lru-cache-with-maxsize-none/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["UP033"]},{"location":"rules/lru-cache-with-maxsize-none/#references","title":"References","text":"<ul> <li>Python documentation: <code>@functools.cache</code></li> </ul>","tags":["UP033"]},{"location":"rules/lru-cache-without-parameters/","title":"lru-cache-without-parameters (UP011)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP011"]},{"location":"rules/lru-cache-without-parameters/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary parentheses on <code>functools.lru_cache</code> decorators.</p>","tags":["UP011"]},{"location":"rules/lru-cache-without-parameters/#why-is-this-bad","title":"Why is this bad?","text":"<p>Since Python 3.8, <code>functools.lru_cache</code> can be used as a decorator without trailing parentheses, as long as no arguments are passed to it.</p>","tags":["UP011"]},{"location":"rules/lru-cache-without-parameters/#example","title":"Example","text":"<pre><code>import functools\n@functools.lru_cache()\ndef foo(): ...\n</code></pre> <p>Use instead:</p> <pre><code>import functools\n@functools.lru_cache\ndef foo(): ...\n</code></pre>","tags":["UP011"]},{"location":"rules/lru-cache-without-parameters/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["UP011"]},{"location":"rules/lru-cache-without-parameters/#references","title":"References","text":"<ul> <li>Python documentation: <code>@functools.lru_cache</code></li> <li>Let lru_cache be used as a decorator with no arguments</li> </ul>","tags":["UP011"]},{"location":"rules/magic-value-comparison/","title":"magic-value-comparison (PLR2004)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR2004"]},{"location":"rules/magic-value-comparison/#what-it-does","title":"What it does","text":"<p>Checks for the use of unnamed numerical constants (\"magic\") values in comparisons.</p>","tags":["PLR2004"]},{"location":"rules/magic-value-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of \"magic\" values can make code harder to read and maintain, as readers will have to infer the meaning of the value from the context. Such values are discouraged by PEP 8.</p> <p>For convenience, this rule excludes a variety of common values from the \"magic\" value definition, such as <code>0</code>, <code>1</code>, <code>\"\"</code>, and <code>\"__main__\"</code>.</p>","tags":["PLR2004"]},{"location":"rules/magic-value-comparison/#example","title":"Example","text":"<pre><code>def apply_discount(price: float) -&gt; float:\nif price &lt;= 100:\nreturn price / 2\nelse:\nreturn price\n</code></pre> <p>Use instead:</p> <pre><code>MAX_DISCOUNT = 100\ndef apply_discount(price: float) -&gt; float:\nif price &lt;= MAX_DISCOUNT:\nreturn price / 2\nelse:\nreturn price\n</code></pre>","tags":["PLR2004"]},{"location":"rules/magic-value-comparison/#options","title":"Options","text":"<ul> <li><code>lint.pylint.allow-magic-value-types</code></li> </ul>","tags":["PLR2004"]},{"location":"rules/mako-templates/","title":"mako-templates (S702)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S702"]},{"location":"rules/mako-templates/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>mako</code> templates.</p>","tags":["S702"]},{"location":"rules/mako-templates/#why-is-this-bad","title":"Why is this bad?","text":"<p>Mako templates allow HTML and JavaScript rendering by default, and are inherently open to XSS attacks. Ensure variables in all templates are properly sanitized via the <code>n</code>, <code>h</code> or <code>x</code> flags (depending on context). For example, to HTML escape the variable <code>data</code>, use <code>${ data |h }</code>.</p>","tags":["S702"]},{"location":"rules/mako-templates/#example","title":"Example","text":"<pre><code>from mako.template import Template\nTemplate(\"hello\")\n</code></pre> <p>Use instead:</p> <pre><code>from mako.template import Template\nTemplate(\"hello |h\")\n</code></pre>","tags":["S702"]},{"location":"rules/mako-templates/#references","title":"References","text":"<ul> <li>Mako documentation</li> <li>OpenStack security: Cross site scripting XSS</li> <li>Common Weakness Enumeration: CWE-80</li> </ul>","tags":["S702"]},{"location":"rules/manual-dict-comprehension/","title":"manual-dict-comprehension (PERF403)","text":"<p>Derived from the Perflint linter.</p>","tags":["PERF403"]},{"location":"rules/manual-dict-comprehension/#what-it-does","title":"What it does","text":"<p>Checks for <code>for</code> loops that can be replaced by a dictionary comprehension.</p>","tags":["PERF403"]},{"location":"rules/manual-dict-comprehension/#why-is-this-bad","title":"Why is this bad?","text":"<p>When creating or extending a dictionary in a for-loop, prefer a dictionary comprehension. Comprehensions are more readable and more performant.</p> <p>For example, when comparing <code>{x: x for x in list(range(1000))}</code> to the <code>for</code> loop version, the comprehension is ~10% faster on Python 3.11.</p> <p>Note that, as with all <code>perflint</code> rules, this is only intended as a micro-optimization, and will have a negligible impact on performance in most cases.</p>","tags":["PERF403"]},{"location":"rules/manual-dict-comprehension/#example","title":"Example","text":"<pre><code>pairs = ((\"a\", 1), (\"b\", 2))\nresult = {}\nfor x, y in pairs:\nif y % 2:\nresult[x] = y\n</code></pre> <p>Use instead:</p> <pre><code>pairs = ((\"a\", 1), (\"b\", 2))\nresult = {x: y for x, y in pairs if y % 2}\n</code></pre> <p>If you're appending to an existing dictionary, use the <code>update</code> method instead:</p> <pre><code>pairs = ((\"a\", 1), (\"b\", 2))\nresult.update({x: y for x, y in pairs if y % 2})\n</code></pre>","tags":["PERF403"]},{"location":"rules/manual-from-import/","title":"manual-from-import (PLR0402)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLR0402"]},{"location":"rules/manual-from-import/#what-it-does","title":"What it does","text":"<p>Checks for submodule imports that are aliased to the submodule name.</p>","tags":["PLR0402"]},{"location":"rules/manual-from-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using the <code>from</code> keyword to import the submodule is more concise and readable.</p>","tags":["PLR0402"]},{"location":"rules/manual-from-import/#example","title":"Example","text":"<pre><code>import concurrent.futures as futures\n</code></pre> <p>Use instead:</p> <pre><code>from concurrent import futures\n</code></pre>","tags":["PLR0402"]},{"location":"rules/manual-from-import/#references","title":"References","text":"<ul> <li>Python documentation: Submodules</li> </ul>","tags":["PLR0402"]},{"location":"rules/manual-list-comprehension/","title":"manual-list-comprehension (PERF401)","text":"<p>Derived from the Perflint linter.</p> <p>Fix is sometimes available.</p>","tags":["PERF401"]},{"location":"rules/manual-list-comprehension/#what-it-does","title":"What it does","text":"<p>Checks for <code>for</code> loops that can be replaced by a list comprehension.</p>","tags":["PERF401"]},{"location":"rules/manual-list-comprehension/#why-is-this-bad","title":"Why is this bad?","text":"<p>When creating a transformed list from an existing list using a for-loop, prefer a list comprehension. List comprehensions are more readable and more performant.</p> <p>Using the below as an example, the list comprehension is ~10% faster on Python 3.11, and ~25% faster on Python 3.10.</p> <p>Note that, as with all <code>perflint</code> rules, this is only intended as a micro-optimization, and will have a negligible impact on performance in most cases.</p>","tags":["PERF401"]},{"location":"rules/manual-list-comprehension/#example","title":"Example","text":"<pre><code>original = list(range(10000))\nfiltered = []\nfor i in original:\nif i % 2:\nfiltered.append(i)\n</code></pre> <p>Use instead:</p> <pre><code>original = list(range(10000))\nfiltered = [x for x in original if x % 2]\n</code></pre> <p>If you're appending to an existing list, use the <code>extend</code> method instead:</p> <pre><code>original = list(range(10000))\nfiltered.extend(x for x in original if x % 2)\n</code></pre>","tags":["PERF401"]},{"location":"rules/manual-list-copy/","title":"manual-list-copy (PERF402)","text":"<p>Derived from the Perflint linter.</p>","tags":["PERF402"]},{"location":"rules/manual-list-copy/#what-it-does","title":"What it does","text":"<p>Checks for <code>for</code> loops that can be replaced by a making a copy of a list.</p>","tags":["PERF402"]},{"location":"rules/manual-list-copy/#why-is-this-bad","title":"Why is this bad?","text":"<p>When creating a copy of an existing list using a for-loop, prefer <code>list</code> or <code>list.copy</code> instead. Making a direct copy is more readable and more performant.</p> <p>Using the below as an example, the <code>list</code>-based copy is ~2x faster on Python 3.11.</p> <p>Note that, as with all <code>perflint</code> rules, this is only intended as a micro-optimization, and will have a negligible impact on performance in most cases.</p>","tags":["PERF402"]},{"location":"rules/manual-list-copy/#example","title":"Example","text":"<pre><code>original = list(range(10000))\nfiltered = []\nfor i in original:\nfiltered.append(i)\n</code></pre> <p>Use instead:</p> <pre><code>original = list(range(10000))\nfiltered = list(original)\n</code></pre>","tags":["PERF402"]},{"location":"rules/map-int-version-parsing/","title":"map-int-version-parsing (RUF048)","text":"<p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF048"]},{"location":"rules/map-int-version-parsing/#what-it-does","title":"What it does","text":"<p>Checks for calls of the form <code>map(int, __version__.split(\".\"))</code>.</p>","tags":["RUF048"]},{"location":"rules/map-int-version-parsing/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>__version__</code> does not always contain integral-like elements.</p> <pre><code>import matplotlib  # `__version__ == \"3.9.1.post-1\"` in our environment\n# ValueError: invalid literal for int() with base 10: 'post1'\ntuple(map(int, matplotlib.__version__.split(\".\")))\n</code></pre> <p>See also Version specifiers | Packaging spec.</p>","tags":["RUF048"]},{"location":"rules/map-int-version-parsing/#example","title":"Example","text":"<pre><code>tuple(map(int, matplotlib.__version__.split(\".\")))\n</code></pre> <p>Use instead:</p> <pre><code>import packaging.version as version\nversion.parse(matplotlib.__version__)\n</code></pre>","tags":["RUF048"]},{"location":"rules/math-constant/","title":"math-constant (FURB152)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB152"]},{"location":"rules/math-constant/#what-it-does","title":"What it does","text":"<p>Checks for literals that are similar to constants in <code>math</code> module.</p>","tags":["FURB152"]},{"location":"rules/math-constant/#why-is-this-bad","title":"Why is this bad?","text":"<p>Hard-coding mathematical constants like \u03c0 increases code duplication, reduces readability, and may lead to a lack of precision.</p>","tags":["FURB152"]},{"location":"rules/math-constant/#example","title":"Example","text":"<pre><code>A = 3.141592 * r**2\n</code></pre> <p>Use instead:</p> <pre><code>A = math.pi * r**2\n</code></pre>","tags":["FURB152"]},{"location":"rules/math-constant/#references","title":"References","text":"<ul> <li>Python documentation: <code>math</code> constants</li> </ul>","tags":["FURB152"]},{"location":"rules/meta-class-abc-meta/","title":"meta-class-abc-meta (FURB180)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB180"]},{"location":"rules/meta-class-abc-meta/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>metaclass=abc.ABCMeta</code> to define abstract base classes (ABCs).</p>","tags":["FURB180"]},{"location":"rules/meta-class-abc-meta/#why-is-this-bad","title":"Why is this bad?","text":"<p>Instead of <code>class C(metaclass=abc.ABCMeta): ...</code>, use <code>class C(ABC): ...</code> to define an abstract base class. Inheriting from the <code>ABC</code> wrapper class is semantically identical to setting <code>metaclass=abc.ABCMeta</code>, but more succinct.</p>","tags":["FURB180"]},{"location":"rules/meta-class-abc-meta/#example","title":"Example","text":"<pre><code>class C(metaclass=ABCMeta):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class C(ABC):\npass\n</code></pre>","tags":["FURB180"]},{"location":"rules/meta-class-abc-meta/#references","title":"References","text":"<ul> <li>Python documentation: <code>abc.ABC</code></li> <li>Python documentation: <code>abc.ABCMeta</code></li> </ul>","tags":["FURB180"]},{"location":"rules/misplaced-bare-raise/","title":"misplaced-bare-raise (PLE0704)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0704"]},{"location":"rules/misplaced-bare-raise/#what-it-does","title":"What it does","text":"<p>Checks for bare <code>raise</code> statements outside of exception handlers.</p>","tags":["PLE0704"]},{"location":"rules/misplaced-bare-raise/#why-is-this-bad","title":"Why is this bad?","text":"<p>A bare <code>raise</code> statement without an exception object will re-raise the last exception that was active in the current scope, and is typically used within an exception handler to re-raise the caught exception.</p> <p>If a bare <code>raise</code> is used outside of an exception handler, it will generate an error due to the lack of an active exception.</p> <p>Note that a bare <code>raise</code> within a  <code>finally</code> block will work in some cases (namely, when the exception is raised within the <code>try</code> block), but should be avoided as it can lead to confusing behavior.</p>","tags":["PLE0704"]},{"location":"rules/misplaced-bare-raise/#example","title":"Example","text":"<pre><code>from typing import Any\ndef is_some(obj: Any) -&gt; bool:\nif obj is None:\nraise\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Any\ndef is_some(obj: Any) -&gt; bool:\nif obj is None:\nraise ValueError(\"`obj` cannot be `None`\")\n</code></pre>","tags":["PLE0704"]},{"location":"rules/missing-copyright-notice/","title":"missing-copyright-notice (CPY001)","text":"<p>Derived from the flake8-copyright linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["CPY001"]},{"location":"rules/missing-copyright-notice/#what-it-does","title":"What it does","text":"<p>Checks for the absence of copyright notices within Python files.</p> <p>Note that this check only searches within the first 4096 bytes of the file.</p>","tags":["CPY001"]},{"location":"rules/missing-copyright-notice/#why-is-this-bad","title":"Why is this bad?","text":"<p>In some codebases, it's common to have a license header at the top of every file. This rule ensures that the license header is present.</p>","tags":["CPY001"]},{"location":"rules/missing-f-string-syntax/","title":"missing-f-string-syntax (RUF027)","text":"<p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF027"]},{"location":"rules/missing-f-string-syntax/#what-it-does","title":"What it does","text":"<p>Searches for strings that look like they were meant to be f-strings, but are missing an <code>f</code> prefix.</p>","tags":["RUF027"]},{"location":"rules/missing-f-string-syntax/#why-is-this-bad","title":"Why is this bad?","text":"<p>Expressions inside curly braces are only evaluated if the string has an <code>f</code> prefix.</p>","tags":["RUF027"]},{"location":"rules/missing-f-string-syntax/#details","title":"Details","text":"<p>There are many possible string literals which are not meant to be f-strings despite containing f-string-like syntax. As such, this lint ignores all strings where one of the following conditions applies:</p> <ol> <li>The string is a standalone expression. For example, the rule ignores all docstrings.</li> <li>The string is part of a function call with argument names that match at least one variable     (for example: <code>format(\"Message: {value}\", value=\"Hello World\")</code>)</li> <li>The string (or a parent expression of the string) has a direct method call on it     (for example: <code>\"{value}\".format(...)</code>)</li> <li>The string has no <code>{...}</code> expression sections, or uses invalid f-string syntax.</li> <li>The string references variables that are not in scope, or it doesn't capture variables at all.</li> <li>Any format specifiers in the potential f-string are invalid.</li> <li>The string is part of a function call that is known to expect a template string rather than an     evaluated f-string: for example, a <code>logging</code> call, a <code>gettext</code> call, or a fastAPI path.</li> </ol>","tags":["RUF027"]},{"location":"rules/missing-f-string-syntax/#example","title":"Example","text":"<pre><code>name = \"Sarah\"\nday_of_week = \"Tuesday\"\nprint(\"Hello {name}! It is {day_of_week} today!\")\n</code></pre> <p>Use instead:</p> <pre><code>name = \"Sarah\"\nday_of_week = \"Tuesday\"\nprint(f\"Hello {name}! It is {day_of_week} today!\")\n</code></pre>","tags":["RUF027"]},{"location":"rules/missing-newline-at-end-of-file/","title":"missing-newline-at-end-of-file (W292)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["W292"]},{"location":"rules/missing-newline-at-end-of-file/#what-it-does","title":"What it does","text":"<p>Checks for files missing a new line at the end of the file.</p>","tags":["W292"]},{"location":"rules/missing-newline-at-end-of-file/#why-is-this-bad","title":"Why is this bad?","text":"<p>Trailing blank lines in a file are superfluous.</p> <p>However, the last line of the file should end with a newline.</p>","tags":["W292"]},{"location":"rules/missing-newline-at-end-of-file/#example","title":"Example","text":"<pre><code>spam(1)\n</code></pre> <p>Use instead:</p> <pre><code>spam(1)\\n\n</code></pre>","tags":["W292"]},{"location":"rules/missing-required-import/","title":"missing-required-import (I002)","text":"<p>Derived from the isort linter.</p> <p>Fix is always available.</p>","tags":["I002"]},{"location":"rules/missing-required-import/#what-it-does","title":"What it does","text":"<p>Adds any required imports, as specified by the user, to the top of the file.</p>","tags":["I002"]},{"location":"rules/missing-required-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>In some projects, certain imports are required to be present in all files. For example, some projects assume that <code>from __future__ import annotations</code> is enabled, and thus require that import to be present in all files. Omitting a \"required\" import (as specified by the user) can cause errors or unexpected behavior.</p>","tags":["I002"]},{"location":"rules/missing-required-import/#example","title":"Example","text":"<pre><code>import typing\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\nimport typing\n</code></pre>","tags":["I002"]},{"location":"rules/missing-required-import/#options","title":"Options","text":"<ul> <li><code>lint.isort.required-imports</code></li> </ul>","tags":["I002"]},{"location":"rules/missing-return-type-class-method/","title":"missing-return-type-class-method (ANN206)","text":"<p>Derived from the flake8-annotations linter.</p> <p>Fix is sometimes available.</p>","tags":["ANN206"]},{"location":"rules/missing-return-type-class-method/#what-it-does","title":"What it does","text":"<p>Checks that class methods have return type annotations.</p>","tags":["ANN206"]},{"location":"rules/missing-return-type-class-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the return types of functions. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any returned values, and the types expected by callers, match expectation.</p>","tags":["ANN206"]},{"location":"rules/missing-return-type-class-method/#example","title":"Example","text":"<pre><code>class Foo:\n@classmethod\ndef bar(cls):\nreturn 1\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\n@classmethod\ndef bar(cls) -&gt; int:\nreturn 1\n</code></pre>","tags":["ANN206"]},{"location":"rules/missing-return-type-private-function/","title":"missing-return-type-private-function (ANN202)","text":"<p>Derived from the flake8-annotations linter.</p> <p>Fix is sometimes available.</p>","tags":["ANN202"]},{"location":"rules/missing-return-type-private-function/#what-it-does","title":"What it does","text":"<p>Checks that private functions and methods have return type annotations.</p>","tags":["ANN202"]},{"location":"rules/missing-return-type-private-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the return types of functions. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any returned values, and the types expected by callers, match expectation.</p>","tags":["ANN202"]},{"location":"rules/missing-return-type-private-function/#example","title":"Example","text":"<pre><code>def _add(a, b):\nreturn a + b\n</code></pre> <p>Use instead:</p> <pre><code>def _add(a: int, b: int) -&gt; int:\nreturn a + b\n</code></pre>","tags":["ANN202"]},{"location":"rules/missing-return-type-special-method/","title":"missing-return-type-special-method (ANN204)","text":"<p>Derived from the flake8-annotations linter.</p> <p>Fix is sometimes available.</p>","tags":["ANN204"]},{"location":"rules/missing-return-type-special-method/#what-it-does","title":"What it does","text":"<p>Checks that \"special\" methods, like <code>__init__</code>, <code>__new__</code>, and <code>__call__</code>, have return type annotations.</p>","tags":["ANN204"]},{"location":"rules/missing-return-type-special-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the return types of functions. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any returned values, and the types expected by callers, match expectation.</p> <p>Note that type checkers often allow you to omit the return type annotation for <code>__init__</code> methods, as long as at least one argument has a type annotation. To opt in to this behavior, use the <code>mypy-init-return</code> setting in your <code>pyproject.toml</code> or <code>ruff.toml</code> file:</p> <pre><code>[tool.ruff.lint.flake8-annotations]\nmypy-init-return = true\n</code></pre>","tags":["ANN204"]},{"location":"rules/missing-return-type-special-method/#example","title":"Example","text":"<pre><code>class Foo:\ndef __init__(self, x: int):\nself.x = x\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef __init__(self, x: int) -&gt; None:\nself.x = x\n</code></pre>","tags":["ANN204"]},{"location":"rules/missing-return-type-static-method/","title":"missing-return-type-static-method (ANN205)","text":"<p>Derived from the flake8-annotations linter.</p> <p>Fix is sometimes available.</p>","tags":["ANN205"]},{"location":"rules/missing-return-type-static-method/#what-it-does","title":"What it does","text":"<p>Checks that static methods have return type annotations.</p>","tags":["ANN205"]},{"location":"rules/missing-return-type-static-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the return types of functions. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any returned values, and the types expected by callers, match expectation.</p>","tags":["ANN205"]},{"location":"rules/missing-return-type-static-method/#example","title":"Example","text":"<pre><code>class Foo:\n@staticmethod\ndef bar():\nreturn 1\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\n@staticmethod\ndef bar() -&gt; int:\nreturn 1\n</code></pre>","tags":["ANN205"]},{"location":"rules/missing-return-type-undocumented-public-function/","title":"missing-return-type-undocumented-public-function (ANN201)","text":"<p>Derived from the flake8-annotations linter.</p> <p>Fix is sometimes available.</p>","tags":["ANN201"]},{"location":"rules/missing-return-type-undocumented-public-function/#what-it-does","title":"What it does","text":"<p>Checks that public functions and methods have return type annotations.</p>","tags":["ANN201"]},{"location":"rules/missing-return-type-undocumented-public-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the return types of functions. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any returned values, and the types expected by callers, match expectation.</p>","tags":["ANN201"]},{"location":"rules/missing-return-type-undocumented-public-function/#example","title":"Example","text":"<pre><code>def add(a, b):\nreturn a + b\n</code></pre> <p>Use instead:</p> <pre><code>def add(a: int, b: int) -&gt; int:\nreturn a + b\n</code></pre>","tags":["ANN201"]},{"location":"rules/missing-space-after-todo-colon/","title":"missing-space-after-todo-colon (TD007)","text":"<p>Derived from the flake8-todos linter.</p>","tags":["TD007"]},{"location":"rules/missing-space-after-todo-colon/#what-it-does","title":"What it does","text":"<p>Checks that the colon after a \"TODO\" tag is followed by a space.</p>","tags":["TD007"]},{"location":"rules/missing-space-after-todo-colon/#why-is-this-bad","title":"Why is this bad?","text":"<p>\"TODO\" tags are typically followed by a parenthesized author name, a colon, a space, and a description of the issue, in that order.</p> <p>Deviating from this pattern can lead to inconsistent and non-idiomatic comments.</p>","tags":["TD007"]},{"location":"rules/missing-space-after-todo-colon/#example","title":"Example","text":"<pre><code># TODO(charlie):fix this\n</code></pre> <p>Use instead:</p> <pre><code># TODO(charlie): fix this\n</code></pre>","tags":["TD007"]},{"location":"rules/missing-todo-author/","title":"missing-todo-author (TD002)","text":"<p>Derived from the flake8-todos linter.</p>","tags":["TD002"]},{"location":"rules/missing-todo-author/#what-it-does","title":"What it does","text":"<p>Checks that a TODO comment includes an author.</p>","tags":["TD002"]},{"location":"rules/missing-todo-author/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including an author on a TODO provides future readers with context around the issue. While the TODO author is not always considered responsible for fixing the issue, they are typically the individual with the most context.</p>","tags":["TD002"]},{"location":"rules/missing-todo-author/#example","title":"Example","text":"<pre><code># TODO: should assign an author here\n</code></pre> <p>Use instead</p> <pre><code># TODO(charlie): now an author is assigned\n</code></pre>","tags":["TD002"]},{"location":"rules/missing-todo-colon/","title":"missing-todo-colon (TD004)","text":"<p>Derived from the flake8-todos linter.</p>","tags":["TD004"]},{"location":"rules/missing-todo-colon/#what-it-does","title":"What it does","text":"<p>Checks that a \"TODO\" tag is followed by a colon.</p>","tags":["TD004"]},{"location":"rules/missing-todo-colon/#why-is-this-bad","title":"Why is this bad?","text":"<p>\"TODO\" tags are typically followed by a parenthesized author name, a colon, a space, and a description of the issue, in that order.</p> <p>Deviating from this pattern can lead to inconsistent and non-idiomatic comments.</p>","tags":["TD004"]},{"location":"rules/missing-todo-colon/#example","title":"Example","text":"<pre><code># TODO(charlie) fix this colon\n</code></pre> <p>Used instead:</p> <pre><code># TODO(charlie): colon fixed\n</code></pre>","tags":["TD004"]},{"location":"rules/missing-todo-description/","title":"missing-todo-description (TD005)","text":"<p>Derived from the flake8-todos linter.</p>","tags":["TD005"]},{"location":"rules/missing-todo-description/#what-it-does","title":"What it does","text":"<p>Checks that a \"TODO\" tag contains a description of the issue following the tag itself.</p>","tags":["TD005"]},{"location":"rules/missing-todo-description/#why-is-this-bad","title":"Why is this bad?","text":"<p>TODO comments should include a description of the issue to provide context for future readers.</p>","tags":["TD005"]},{"location":"rules/missing-todo-description/#example","title":"Example","text":"<pre><code># TODO(charlie)\n</code></pre> <p>Use instead:</p> <pre><code># TODO(charlie): fix some issue\n</code></pre>","tags":["TD005"]},{"location":"rules/missing-todo-link/","title":"missing-todo-link (TD003)","text":"<p>Derived from the flake8-todos linter.</p>","tags":["TD003"]},{"location":"rules/missing-todo-link/#what-it-does","title":"What it does","text":"<p>Checks that a TODO comment is associated with a link to a relevant issue or ticket.</p>","tags":["TD003"]},{"location":"rules/missing-todo-link/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including an issue link near a TODO makes it easier for resolvers to get context around the issue.</p>","tags":["TD003"]},{"location":"rules/missing-todo-link/#example","title":"Example","text":"<pre><code># TODO: this link has no issue\n</code></pre> <p>Use one of these instead:</p> <pre><code># TODO(charlie): this comment has an issue link\n# https://github.com/astral-sh/ruff/issues/3870\n# TODO(charlie): this comment has a 3-digit issue code\n# 003\n# TODO(charlie): this comment has an issue code of (up to) 6 characters, then digits\n# SIXCHR-003\n</code></pre>","tags":["TD003"]},{"location":"rules/missing-trailing-comma/","title":"missing-trailing-comma (COM812)","text":"<p>Derived from the flake8-commas linter.</p> <p>Fix is always available.</p>","tags":["COM812"]},{"location":"rules/missing-trailing-comma/#what-it-does","title":"What it does","text":"<p>Checks for the absence of trailing commas.</p>","tags":["COM812"]},{"location":"rules/missing-trailing-comma/#why-is-this-bad","title":"Why is this bad?","text":"<p>The presence of a trailing comma can reduce diff size when parameters or elements are added or removed from function calls, function definitions, literals, etc.</p>","tags":["COM812"]},{"location":"rules/missing-trailing-comma/#example","title":"Example","text":"<pre><code>foo = {\n\"bar\": 1,\n\"baz\": 2\n}\n</code></pre> <p>Use instead:</p> <pre><code>foo = {\n\"bar\": 1,\n\"baz\": 2,\n}\n</code></pre>","tags":["COM812"]},{"location":"rules/missing-trailing-comma/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent use of trailing commas, making the rule redundant.</p>","tags":["COM812"]},{"location":"rules/missing-type-args/","title":"missing-type-args (ANN002)","text":"<p>Derived from the flake8-annotations linter.</p>","tags":["ANN002"]},{"location":"rules/missing-type-args/#what-it-does","title":"What it does","text":"<p>Checks that function <code>*args</code> arguments have type annotations.</p>","tags":["ANN002"]},{"location":"rules/missing-type-args/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the types of function arguments. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any provided arguments match expectation.</p>","tags":["ANN002"]},{"location":"rules/missing-type-args/#example","title":"Example","text":"<pre><code>def foo(*args): ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(*args: int): ...\n</code></pre>","tags":["ANN002"]},{"location":"rules/missing-type-cls/","title":"missing-type-cls (ANN102)","text":"<p>Derived from the flake8-annotations linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["ANN102"]},{"location":"rules/missing-type-cls/#removed","title":"Removed","text":"<p>This rule has been removed because type checkers can infer this type without annotation.</p>","tags":["ANN102"]},{"location":"rules/missing-type-cls/#what-it-does","title":"What it does","text":"<p>Checks that class method <code>cls</code> arguments have type annotations.</p>","tags":["ANN102"]},{"location":"rules/missing-type-cls/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the types of function arguments. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any provided arguments match expectation.</p> <p>Note that many type checkers will infer the type of <code>cls</code> automatically, so this annotation is not strictly necessary.</p>","tags":["ANN102"]},{"location":"rules/missing-type-cls/#example","title":"Example","text":"<pre><code>class Foo:\n@classmethod\ndef bar(cls): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\n@classmethod\ndef bar(cls: Type[\"Foo\"]): ...\n</code></pre>","tags":["ANN102"]},{"location":"rules/missing-type-function-argument/","title":"missing-type-function-argument (ANN001)","text":"<p>Derived from the flake8-annotations linter.</p>","tags":["ANN001"]},{"location":"rules/missing-type-function-argument/#what-it-does","title":"What it does","text":"<p>Checks that function arguments have type annotations.</p>","tags":["ANN001"]},{"location":"rules/missing-type-function-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the types of function arguments. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any provided arguments match expectation.</p>","tags":["ANN001"]},{"location":"rules/missing-type-function-argument/#example","title":"Example","text":"<pre><code>def foo(x): ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(x: int): ...\n</code></pre>","tags":["ANN001"]},{"location":"rules/missing-type-kwargs/","title":"missing-type-kwargs (ANN003)","text":"<p>Derived from the flake8-annotations linter.</p>","tags":["ANN003"]},{"location":"rules/missing-type-kwargs/#what-it-does","title":"What it does","text":"<p>Checks that function <code>**kwargs</code> arguments have type annotations.</p>","tags":["ANN003"]},{"location":"rules/missing-type-kwargs/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the types of function arguments. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any provided arguments match expectation.</p>","tags":["ANN003"]},{"location":"rules/missing-type-kwargs/#example","title":"Example","text":"<pre><code>def foo(**kwargs): ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(**kwargs: int): ...\n</code></pre>","tags":["ANN003"]},{"location":"rules/missing-type-self/","title":"missing-type-self (ANN101)","text":"<p>Derived from the flake8-annotations linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["ANN101"]},{"location":"rules/missing-type-self/#removed","title":"Removed","text":"<p>This rule has been removed because type checkers can infer this type without annotation.</p>","tags":["ANN101"]},{"location":"rules/missing-type-self/#what-it-does","title":"What it does","text":"<p>Checks that instance method <code>self</code> arguments have type annotations.</p>","tags":["ANN101"]},{"location":"rules/missing-type-self/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotations are a good way to document the types of function arguments. They also help catch bugs, when used alongside a type checker, by ensuring that the types of any provided arguments match expectation.</p> <p>Note that many type checkers will infer the type of <code>self</code> automatically, so this annotation is not strictly necessary.</p>","tags":["ANN101"]},{"location":"rules/missing-type-self/#example","title":"Example","text":"<pre><code>class Foo:\ndef bar(self): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef bar(self: \"Foo\"): ...\n</code></pre>","tags":["ANN101"]},{"location":"rules/missing-whitespace-after-keyword/","title":"missing-whitespace-after-keyword (E275)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E275"]},{"location":"rules/missing-whitespace-after-keyword/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace after keywords.</p>","tags":["E275"]},{"location":"rules/missing-whitespace-after-keyword/#why-is-this-bad","title":"Why is this bad?","text":"<p>Missing whitespace after keywords makes the code harder to read.</p>","tags":["E275"]},{"location":"rules/missing-whitespace-after-keyword/#example","title":"Example","text":"<pre><code>if(True):\npass\n</code></pre> <p>Use instead:</p> <pre><code>if (True):\npass\n</code></pre>","tags":["E275"]},{"location":"rules/missing-whitespace-after-keyword/#references","title":"References","text":"<ul> <li>Python documentation: Keywords</li> </ul>","tags":["E275"]},{"location":"rules/missing-whitespace-around-arithmetic-operator/","title":"missing-whitespace-around-arithmetic-operator (E226)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E226"]},{"location":"rules/missing-whitespace-around-arithmetic-operator/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace arithmetic operators.</p>","tags":["E226"]},{"location":"rules/missing-whitespace-around-arithmetic-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, there should be one space before and after an arithmetic operator (+, -, /, and *).</p>","tags":["E226"]},{"location":"rules/missing-whitespace-around-arithmetic-operator/#example","title":"Example","text":"<pre><code>number = 40+2\n</code></pre> <p>Use instead:</p> <pre><code>number = 40 + 2\n</code></pre>","tags":["E226"]},{"location":"rules/missing-whitespace-around-bitwise-or-shift-operator/","title":"missing-whitespace-around-bitwise-or-shift-operator (E227)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E227"]},{"location":"rules/missing-whitespace-around-bitwise-or-shift-operator/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace around bitwise and shift operators.</p>","tags":["E227"]},{"location":"rules/missing-whitespace-around-bitwise-or-shift-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, there should be one space before and after bitwise and shift operators (&lt;&lt;, &gt;&gt;, &amp;, |, ^).</p>","tags":["E227"]},{"location":"rules/missing-whitespace-around-bitwise-or-shift-operator/#example","title":"Example","text":"<pre><code>x = 128&lt;&lt;1\n</code></pre> <p>Use instead:</p> <pre><code>x = 128 &lt;&lt; 1\n</code></pre>","tags":["E227"]},{"location":"rules/missing-whitespace-around-modulo-operator/","title":"missing-whitespace-around-modulo-operator (E228)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E228"]},{"location":"rules/missing-whitespace-around-modulo-operator/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace around the modulo operator.</p>","tags":["E228"]},{"location":"rules/missing-whitespace-around-modulo-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, the modulo operator (%) should have whitespace on either side of it.</p>","tags":["E228"]},{"location":"rules/missing-whitespace-around-modulo-operator/#example","title":"Example","text":"<pre><code>remainder = 10%2\n</code></pre> <p>Use instead:</p> <pre><code>remainder = 10 % 2\n</code></pre>","tags":["E228"]},{"location":"rules/missing-whitespace-around-operator/","title":"missing-whitespace-around-operator (E225)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E225"]},{"location":"rules/missing-whitespace-around-operator/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace around all operators.</p>","tags":["E225"]},{"location":"rules/missing-whitespace-around-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, there should be one space before and after all operators.</p>","tags":["E225"]},{"location":"rules/missing-whitespace-around-operator/#example","title":"Example","text":"<pre><code>if number==42:\nprint('you have found the meaning of life')\n</code></pre> <p>Use instead:</p> <pre><code>if number == 42:\nprint('you have found the meaning of life')\n</code></pre>","tags":["E225"]},{"location":"rules/missing-whitespace-around-parameter-equals/","title":"missing-whitespace-around-parameter-equals (E252)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E252"]},{"location":"rules/missing-whitespace-around-parameter-equals/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace around the equals sign in an annotated function keyword parameter.</p>","tags":["E252"]},{"location":"rules/missing-whitespace-around-parameter-equals/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, the spaces around the equals sign in a keyword parameter should only be omitted when the parameter is unannotated:</p> <p>Don\u2019t use spaces around the = sign when used to indicate a keyword argument, or when used to indicate a default value for an unannotated function parameter.</p>","tags":["E252"]},{"location":"rules/missing-whitespace-around-parameter-equals/#example","title":"Example","text":"<pre><code>def add(a: int=0) -&gt; int:\nreturn a + 1\n</code></pre> <p>Use instead:</p> <pre><code>def add(a: int = 0) -&gt; int:\nreturn a + 1\n</code></pre>","tags":["E252"]},{"location":"rules/missing-whitespace/","title":"missing-whitespace (E231)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E231"]},{"location":"rules/missing-whitespace/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace after <code>,</code>, <code>;</code>, and <code>:</code>.</p>","tags":["E231"]},{"location":"rules/missing-whitespace/#why-is-this-bad","title":"Why is this bad?","text":"<p>Missing whitespace after <code>,</code>, <code>;</code>, and <code>:</code> makes the code harder to read.</p>","tags":["E231"]},{"location":"rules/missing-whitespace/#example","title":"Example","text":"<pre><code>a = (1,2)\n</code></pre> <p>Use instead:</p> <pre><code>a = (1, 2)\n</code></pre>","tags":["E231"]},{"location":"rules/mixed-case-variable-in-class-scope/","title":"mixed-case-variable-in-class-scope (N815)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N815"]},{"location":"rules/mixed-case-variable-in-class-scope/#what-it-does","title":"What it does","text":"<p>Checks for class variable names that follow the <code>mixedCase</code> convention.</p>","tags":["N815"]},{"location":"rules/mixed-case-variable-in-class-scope/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends that variable names should be lower case and separated by underscores (also known as <code>snake_case</code>).</p> <p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p> <p>Variable names follow the same convention as function names.</p> <p>mixedCase is allowed only in contexts where that\u2019s already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p>","tags":["N815"]},{"location":"rules/mixed-case-variable-in-class-scope/#example","title":"Example","text":"<pre><code>class MyClass:\nmyVariable = \"hello\"\nanother_variable = \"world\"\n</code></pre> <p>Use instead:</p> <pre><code>class MyClass:\nmy_variable = \"hello\"\nanother_variable = \"world\"\n</code></pre>","tags":["N815"]},{"location":"rules/mixed-case-variable-in-global-scope/","title":"mixed-case-variable-in-global-scope (N816)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N816"]},{"location":"rules/mixed-case-variable-in-global-scope/#what-it-does","title":"What it does","text":"<p>Checks for global variable names that follow the <code>mixedCase</code> convention.</p>","tags":["N816"]},{"location":"rules/mixed-case-variable-in-global-scope/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends that global variable names should be lower case and separated by underscores (also known as <code>snake_case</code>).</p>","tags":["N816"]},{"location":"rules/mixed-case-variable-in-global-scope/#global-variable-names","title":"Global Variable Names","text":"<p>(Let\u2019s hope that these variables are meant for use inside one module only.) The conventions are about the same as those for functions.</p> <p>Modules that are designed for use via from M import * should use the all mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are \u201cmodule non-public\u201d).</p>","tags":["N816"]},{"location":"rules/mixed-case-variable-in-global-scope/#function-and-variable-names","title":"Function and Variable Names","text":"<p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p> <p>Variable names follow the same convention as function names.</p> <p>mixedCase is allowed only in contexts where that\u2019s already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p>","tags":["N816"]},{"location":"rules/mixed-case-variable-in-global-scope/#example","title":"Example","text":"<pre><code>myVariable = \"hello\"\nanother_variable = \"world\"\nyet_anotherVariable = \"foo\"\n</code></pre> <p>Use instead:</p> <pre><code>my_variable = \"hello\"\nanother_variable = \"world\"\nyet_another_variable = \"foo\"\n</code></pre>","tags":["N816"]},{"location":"rules/mixed-spaces-and-tabs/","title":"mixed-spaces-and-tabs (E101)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E101"]},{"location":"rules/mixed-spaces-and-tabs/#what-it-does","title":"What it does","text":"<p>Checks for mixed tabs and spaces in indentation.</p>","tags":["E101"]},{"location":"rules/mixed-spaces-and-tabs/#why-is-this-bad","title":"Why is this bad?","text":"<p>Never mix tabs and spaces.</p> <p>The most popular way of indenting Python is with spaces only. The second-most popular way is with tabs only. Code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.</p>","tags":["E101"]},{"location":"rules/mixed-spaces-and-tabs/#example","title":"Example","text":"<pre><code>if a == 0:\\n        a = 1\\n\\tb = 1\n</code></pre> <p>Use instead:</p> <pre><code>if a == 0:\\n    a = 1\\n    b = 1\n</code></pre>","tags":["E101"]},{"location":"rules/modified-iterating-set/","title":"modified-iterating-set (PLE4703)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLE4703"]},{"location":"rules/modified-iterating-set/#what-it-does","title":"What it does","text":"<p>Checks for loops in which a <code>set</code> is modified during iteration.</p>","tags":["PLE4703"]},{"location":"rules/modified-iterating-set/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a <code>set</code> is modified during iteration, it will cause a <code>RuntimeError</code>.</p> <p>If you need to modify a <code>set</code> within a loop, consider iterating over a copy of the <code>set</code> instead.</p>","tags":["PLE4703"]},{"location":"rules/modified-iterating-set/#known-problems","title":"Known problems","text":"<p>This rule favors false negatives over false positives. Specifically, it will only detect variables that can be inferred to be a <code>set</code> type based on local type inference, and will only detect modifications that are made directly on the variable itself (e.g., <code>set.add()</code>), as opposed to modifications within other function calls (e.g., <code>some_function(set)</code>).</p>","tags":["PLE4703"]},{"location":"rules/modified-iterating-set/#example","title":"Example","text":"<pre><code>nums = {1, 2, 3}\nfor num in nums:\nnums.add(num + 5)\n</code></pre> <p>Use instead:</p> <pre><code>nums = {1, 2, 3}\nfor num in nums.copy():\nnums.add(num + 5)\n</code></pre>","tags":["PLE4703"]},{"location":"rules/modified-iterating-set/#references","title":"References","text":"<ul> <li>Python documentation: <code>set</code></li> </ul>","tags":["PLE4703"]},{"location":"rules/module-import-not-at-top-of-file/","title":"module-import-not-at-top-of-file (E402)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E402"]},{"location":"rules/module-import-not-at-top-of-file/#what-it-does","title":"What it does","text":"<p>Checks for imports that are not at the top of the file.</p>","tags":["E402"]},{"location":"rules/module-import-not-at-top-of-file/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, \"imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.\"</p> <p>This rule makes an exception for both <code>sys.path</code> modifications (allowing for <code>sys.path.insert</code>, <code>sys.path.append</code>, etc.) and <code>os.environ</code> modifications between imports.</p>","tags":["E402"]},{"location":"rules/module-import-not-at-top-of-file/#example","title":"Example","text":"<pre><code>\"One string\"\n\"Two string\"\na = 1\nimport os\nfrom sys import x\n</code></pre> <p>Use instead:</p> <pre><code>import os\nfrom sys import x\n\"One string\"\n\"Two string\"\na = 1\n</code></pre>","tags":["E402"]},{"location":"rules/module-import-not-at-top-of-file/#notebook-behavior","title":"Notebook behavior","text":"<p>For Jupyter notebooks, this rule checks for imports that are not at the top of a cell.</p>","tags":["E402"]},{"location":"rules/multi-line-implicit-string-concatenation/","title":"multi-line-implicit-string-concatenation (ISC002)","text":"<p>Derived from the flake8-implicit-str-concat linter.</p>","tags":["ISC002"]},{"location":"rules/multi-line-implicit-string-concatenation/#what-it-does","title":"What it does","text":"<p>Checks for implicitly concatenated strings that span multiple lines.</p>","tags":["ISC002"]},{"location":"rules/multi-line-implicit-string-concatenation/#why-is-this-bad","title":"Why is this bad?","text":"<p>For string literals that wrap across multiple lines, PEP 8 recommends the use of implicit string concatenation within parentheses instead of using a backslash for line continuation, as the former is more readable than the latter.</p> <p>By default, this rule will only trigger if the string literal is concatenated via a backslash. To disallow implicit string concatenation altogether, set the <code>lint.flake8-implicit-str-concat.allow-multiline</code> option to <code>false</code>.</p>","tags":["ISC002"]},{"location":"rules/multi-line-implicit-string-concatenation/#example","title":"Example","text":"<pre><code>z = \"The quick brown fox jumps over the lazy \"\\\n    \"dog.\"\n</code></pre> <p>Use instead:</p> <pre><code>z = (\n\"The quick brown fox jumps over the lazy \"\n\"dog.\"\n)\n</code></pre>","tags":["ISC002"]},{"location":"rules/multi-line-implicit-string-concatenation/#options","title":"Options","text":"<ul> <li><code>lint.flake8-implicit-str-concat.allow-multiline</code></li> </ul>","tags":["ISC002"]},{"location":"rules/multi-line-implicit-string-concatenation/#formatter-compatibility","title":"Formatter compatibility","text":"<p>Use of this rule alongside the formatter must be handled with care. Currently, the formatter can introduce new multi-line implicitly concatenated strings, therefore we suggest rerunning the linter and formatter in the following order:</p> <ol> <li>Run the linter with this rule (<code>ISC002</code>) disabled</li> <li>Run the formatter</li> <li>Rerun the linter with this rule (<code>ISC002</code>) enabled     This is one of very few cases where the formatter can produce code that     contains lint violations. It is a known issue that should be resolved by the     new 2025 style guide.</li> </ol>","tags":["ISC002"]},{"location":"rules/multi-line-summary-first-line/","title":"multi-line-summary-first-line (D212)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D212"]},{"location":"rules/multi-line-summary-first-line/#what-it-does","title":"What it does","text":"<p>Checks for docstring summary lines that are not positioned on the first physical line of the docstring.</p>","tags":["D212"]},{"location":"rules/multi-line-summary-first-line/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that multi-line docstrings consist of \"a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description.\"</p> <p>The summary line should be located on the first physical line of the docstring, immediately after the opening quotes.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>google</code> convention, and disabled when using the <code>numpy</code> and <code>pep257</code> conventions.</p> <p>For an alternative, see D213.</p>","tags":["D212"]},{"location":"rules/multi-line-summary-first-line/#example","title":"Example","text":"<pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"\n    Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the\n    bubble sort algorithm.\n    \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the bubble\n    sort algorithm.\n    \"\"\"\n</code></pre>","tags":["D212"]},{"location":"rules/multi-line-summary-first-line/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D212"]},{"location":"rules/multi-line-summary-first-line/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D212"]},{"location":"rules/multi-line-summary-second-line/","title":"multi-line-summary-second-line (D213)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D213"]},{"location":"rules/multi-line-summary-second-line/#what-it-does","title":"What it does","text":"<p>Checks for docstring summary lines that are not positioned on the second physical line of the docstring.</p>","tags":["D213"]},{"location":"rules/multi-line-summary-second-line/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that multi-line docstrings consist of \"a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description.\"</p> <p>The summary line should be located on the second physical line of the docstring, immediately after the opening quotes and the blank line.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is disabled when using the <code>google</code>, <code>numpy</code>, and <code>pep257</code> conventions.</p> <p>For an alternative, see D212.</p>","tags":["D213"]},{"location":"rules/multi-line-summary-second-line/#example","title":"Example","text":"<pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the\n    bubble sort algorithm.\n    \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"\n    Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the bubble\n    sort algorithm.\n    \"\"\"\n</code></pre>","tags":["D213"]},{"location":"rules/multi-line-summary-second-line/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D213"]},{"location":"rules/multi-line-summary-second-line/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D213"]},{"location":"rules/multi-value-repeated-key-literal/","title":"multi-value-repeated-key-literal (F601)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F601"]},{"location":"rules/multi-value-repeated-key-literal/#what-it-does","title":"What it does","text":"<p>Checks for dictionary literals that associate multiple values with the same key.</p>","tags":["F601"]},{"location":"rules/multi-value-repeated-key-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p>Dictionary keys should be unique. If a key is associated with multiple values, the earlier values will be overwritten. Including multiple values for the same key in a dictionary literal is likely a mistake.</p>","tags":["F601"]},{"location":"rules/multi-value-repeated-key-literal/#example","title":"Example","text":"<pre><code>foo = {\n\"bar\": 1,\n\"baz\": 2,\n\"baz\": 3,\n}\nfoo[\"baz\"]  # 3\n</code></pre> <p>Use instead:</p> <pre><code>foo = {\n\"bar\": 1,\n\"baz\": 2,\n}\nfoo[\"baz\"]  # 2\n</code></pre>","tags":["F601"]},{"location":"rules/multi-value-repeated-key-literal/#references","title":"References","text":"<ul> <li>Python documentation: Dictionaries</li> </ul>","tags":["F601"]},{"location":"rules/multi-value-repeated-key-variable/","title":"multi-value-repeated-key-variable (F602)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F602"]},{"location":"rules/multi-value-repeated-key-variable/#what-it-does","title":"What it does","text":"<p>Checks for dictionary keys that are repeated with different values.</p>","tags":["F602"]},{"location":"rules/multi-value-repeated-key-variable/#why-is-this-bad","title":"Why is this bad?","text":"<p>Dictionary keys should be unique. If a key is repeated with a different value, the first values will be overwritten and the key will correspond to the last value. This is likely a mistake.</p>","tags":["F602"]},{"location":"rules/multi-value-repeated-key-variable/#example","title":"Example","text":"<pre><code>foo = {\nbar: 1,\nbaz: 2,\nbaz: 3,\n}\nfoo[baz]  # 3\n</code></pre> <p>Use instead:</p> <pre><code>foo = {\nbar: 1,\nbaz: 2,\n}\nfoo[baz]  # 2\n</code></pre>","tags":["F602"]},{"location":"rules/multi-value-repeated-key-variable/#references","title":"References","text":"<ul> <li>Python documentation: Dictionaries</li> </ul>","tags":["F602"]},{"location":"rules/multiple-imports-on-one-line/","title":"multiple-imports-on-one-line (E401)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is sometimes available.</p>","tags":["E401"]},{"location":"rules/multiple-imports-on-one-line/#what-it-does","title":"What it does","text":"<p>Check for multiple imports on one line.</p>","tags":["E401"]},{"location":"rules/multiple-imports-on-one-line/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, \"imports should usually be on separate lines.\"</p>","tags":["E401"]},{"location":"rules/multiple-imports-on-one-line/#example","title":"Example","text":"<pre><code>import sys, os\n</code></pre> <p>Use instead:</p> <pre><code>import os\nimport sys\n</code></pre>","tags":["E401"]},{"location":"rules/multiple-leading-hashes-for-block-comment/","title":"multiple-leading-hashes-for-block-comment (E266)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E266"]},{"location":"rules/multiple-leading-hashes-for-block-comment/#what-it-does","title":"What it does","text":"<p>Checks for block comments that start with multiple leading <code>#</code> characters.</p>","tags":["E266"]},{"location":"rules/multiple-leading-hashes-for-block-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Per PEP 8, \"Block comments generally consist of one or more paragraphs built out of complete sentences, with each sentence ending in a period.\"</p> <p>Each line of a block comment should start with a <code>#</code> followed by a single space.</p> <p>Shebangs (lines starting with <code>#!</code>, at the top of a file) are exempt from this rule.</p>","tags":["E266"]},{"location":"rules/multiple-leading-hashes-for-block-comment/#example","title":"Example","text":"<pre><code>### Block comment\n</code></pre> <p>Use instead:</p> <pre><code># Block comment\n</code></pre> <p>Alternatively, this rule makes an exception for comments that consist solely of <code>#</code> characters, as in:</p> <pre><code>##############\n# Block header\n##############\n</code></pre>","tags":["E266"]},{"location":"rules/multiple-spaces-after-comma/","title":"multiple-spaces-after-comma (E241)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E241"]},{"location":"rules/multiple-spaces-after-comma/#what-it-does","title":"What it does","text":"<p>Checks for extraneous whitespace after a comma.</p>","tags":["E241"]},{"location":"rules/multiple-spaces-after-comma/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. This rule helps ensure you have a consistent formatting style across your project.</p>","tags":["E241"]},{"location":"rules/multiple-spaces-after-comma/#example","title":"Example","text":"<pre><code>a = 4,    5\n</code></pre> <p>Use instead:</p> <pre><code>a = 4, 5\n</code></pre>","tags":["E241"]},{"location":"rules/multiple-spaces-after-keyword/","title":"multiple-spaces-after-keyword (E271)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E271"]},{"location":"rules/multiple-spaces-after-keyword/#what-it-does","title":"What it does","text":"<p>Checks for extraneous whitespace after keywords.</p>","tags":["E271"]},{"location":"rules/multiple-spaces-after-keyword/#why-is-this-bad","title":"Why is this bad?","text":"","tags":["E271"]},{"location":"rules/multiple-spaces-after-keyword/#example","title":"Example","text":"<pre><code>True and  False\n</code></pre> <p>Use instead:</p> <pre><code>True and False\n</code></pre>","tags":["E271"]},{"location":"rules/multiple-spaces-after-operator/","title":"multiple-spaces-after-operator (E222)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E222"]},{"location":"rules/multiple-spaces-after-operator/#what-it-does","title":"What it does","text":"<p>Checks for extraneous whitespace after an operator.</p>","tags":["E222"]},{"location":"rules/multiple-spaces-after-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, operators should be surrounded by at most a single space on either side.</p>","tags":["E222"]},{"location":"rules/multiple-spaces-after-operator/#example","title":"Example","text":"<pre><code>a = 4 +  5\n</code></pre> <p>Use instead:</p> <pre><code>a = 4 + 5\n</code></pre>","tags":["E222"]},{"location":"rules/multiple-spaces-before-keyword/","title":"multiple-spaces-before-keyword (E272)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E272"]},{"location":"rules/multiple-spaces-before-keyword/#what-it-does","title":"What it does","text":"<p>Checks for extraneous whitespace before keywords.</p>","tags":["E272"]},{"location":"rules/multiple-spaces-before-keyword/#why-is-this-bad","title":"Why is this bad?","text":"","tags":["E272"]},{"location":"rules/multiple-spaces-before-keyword/#example","title":"Example","text":"<pre><code>True  and False\n</code></pre> <p>Use instead:</p> <pre><code>True and False\n</code></pre>","tags":["E272"]},{"location":"rules/multiple-spaces-before-operator/","title":"multiple-spaces-before-operator (E221)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E221"]},{"location":"rules/multiple-spaces-before-operator/#what-it-does","title":"What it does","text":"<p>Checks for extraneous whitespace before an operator.</p>","tags":["E221"]},{"location":"rules/multiple-spaces-before-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, operators should be surrounded by at most a single space on either side.</p>","tags":["E221"]},{"location":"rules/multiple-spaces-before-operator/#example","title":"Example","text":"<pre><code>a = 4  + 5\n</code></pre> <p>Use instead:</p> <pre><code>a = 4 + 5\n</code></pre>","tags":["E221"]},{"location":"rules/multiple-starred-expressions/","title":"multiple-starred-expressions (F622)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F622"]},{"location":"rules/multiple-starred-expressions/#what-it-does","title":"What it does","text":"<p>Checks for the use of multiple starred expressions in assignment statements.</p>","tags":["F622"]},{"location":"rules/multiple-starred-expressions/#why-is-this-bad","title":"Why is this bad?","text":"<p>In assignment statements, starred expressions can be used to unpack iterables. Including more than one starred expression on the left-hand-side of an assignment will cause a <code>SyntaxError</code>, as it is unclear which expression should receive the remaining values.</p>","tags":["F622"]},{"location":"rules/multiple-starred-expressions/#example","title":"Example","text":"<pre><code>*foo, *bar, baz = (1, 2, 3)\n</code></pre>","tags":["F622"]},{"location":"rules/multiple-starred-expressions/#references","title":"References","text":"<ul> <li>PEP 3132 \u2013 Extended Iterable Unpacking</li> </ul>","tags":["F622"]},{"location":"rules/multiple-starts-ends-with/","title":"multiple-starts-ends-with (PIE810)","text":"<p>Derived from the flake8-pie linter.</p> <p>Fix is always available.</p>","tags":["PIE810"]},{"location":"rules/multiple-starts-ends-with/#what-it-does","title":"What it does","text":"<p>Checks for <code>startswith</code> or <code>endswith</code> calls on the same value with different prefixes or suffixes.</p>","tags":["PIE810"]},{"location":"rules/multiple-starts-ends-with/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>startswith</code> and <code>endswith</code> methods accept tuples of prefixes or suffixes respectively. Passing a tuple of prefixes or suffixes is more efficient and readable than calling the method multiple times.</p>","tags":["PIE810"]},{"location":"rules/multiple-starts-ends-with/#example","title":"Example","text":"<pre><code>msg = \"Hello, world!\"\nif msg.startswith(\"Hello\") or msg.startswith(\"Hi\"):\nprint(\"Greetings!\")\n</code></pre> <p>Use instead:</p> <pre><code>msg = \"Hello, world!\"\nif msg.startswith((\"Hello\", \"Hi\")):\nprint(\"Greetings!\")\n</code></pre>","tags":["PIE810"]},{"location":"rules/multiple-starts-ends-with/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is unsafe, as in some cases, it will be unable to determine whether the argument to an existing <code>.startswith</code> or <code>.endswith</code> call is a tuple. For example, given <code>msg.startswith(x) or msg.startswith(y)</code>, if <code>x</code> or <code>y</code> is a tuple, and the semantic model is unable to detect it as such, the rule will suggest <code>msg.startswith((x, y))</code>, which will error at runtime.</p>","tags":["PIE810"]},{"location":"rules/multiple-starts-ends-with/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.startswith</code></li> <li>Python documentation: <code>str.endswith</code></li> </ul>","tags":["PIE810"]},{"location":"rules/multiple-statements-on-one-line-colon/","title":"multiple-statements-on-one-line-colon (E701)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E701"]},{"location":"rules/multiple-statements-on-one-line-colon/#what-it-does","title":"What it does","text":"<p>Checks for compound statements (multiple statements on the same line).</p>","tags":["E701"]},{"location":"rules/multiple-statements-on-one-line-colon/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, \"compound statements are generally discouraged\".</p>","tags":["E701"]},{"location":"rules/multiple-statements-on-one-line-colon/#example","title":"Example","text":"<pre><code>if foo == \"blah\": do_blah_thing()\n</code></pre> <p>Use instead:</p> <pre><code>if foo == \"blah\":\ndo_blah_thing()\n</code></pre>","tags":["E701"]},{"location":"rules/multiple-statements-on-one-line-semicolon/","title":"multiple-statements-on-one-line-semicolon (E702)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E702"]},{"location":"rules/multiple-statements-on-one-line-semicolon/#what-it-does","title":"What it does","text":"<p>Checks for multiline statements on one line.</p>","tags":["E702"]},{"location":"rules/multiple-statements-on-one-line-semicolon/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, including multi-clause statements on the same line is discouraged.</p>","tags":["E702"]},{"location":"rules/multiple-statements-on-one-line-semicolon/#example","title":"Example","text":"<pre><code>do_one(); do_two(); do_three()\n</code></pre> <p>Use instead:</p> <pre><code>do_one()\ndo_two()\ndo_three()\n</code></pre>","tags":["E702"]},{"location":"rules/multiple-with-statements/","title":"multiple-with-statements (SIM117)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM117"]},{"location":"rules/multiple-with-statements/#what-it-does","title":"What it does","text":"<p>Checks for the unnecessary nesting of multiple consecutive context managers.</p>","tags":["SIM117"]},{"location":"rules/multiple-with-statements/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 3, a single <code>with</code> block can include multiple context managers.</p> <p>Combining multiple context managers into a single <code>with</code> statement will minimize the indentation depth of the code, making it more readable.</p> <p>The following context managers are exempt when used as standalone statements:</p> <ul> <li><code>anyio</code>.{<code>CancelScope</code>, <code>fail_after</code>, <code>move_on_after</code>}</li> <li><code>asyncio</code>.{<code>timeout</code>, <code>timeout_at</code>}</li> <li><code>trio</code>.{<code>fail_after</code>, <code>fail_at</code>, <code>move_on_after</code>, <code>move_on_at</code>}</li> </ul>","tags":["SIM117"]},{"location":"rules/multiple-with-statements/#example","title":"Example","text":"<pre><code>with A() as a:\nwith B() as b:\npass\n</code></pre> <p>Use instead:</p> <pre><code>with A() as a, B() as b:\npass\n</code></pre>","tags":["SIM117"]},{"location":"rules/multiple-with-statements/#references","title":"References","text":"<ul> <li>Python documentation: The <code>with</code> statement</li> </ul>","tags":["SIM117"]},{"location":"rules/mutable-argument-default/","title":"mutable-argument-default (B006)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is sometimes available.</p>","tags":["B006"]},{"location":"rules/mutable-argument-default/#what-it-does","title":"What it does","text":"<p>Checks for uses of mutable objects as function argument defaults.</p>","tags":["B006"]},{"location":"rules/mutable-argument-default/#why-is-this-bad","title":"Why is this bad?","text":"<p>Function defaults are evaluated once, when the function is defined.</p> <p>The same mutable object is then shared across all calls to the function. If the object is modified, those modifications will persist across calls, which can lead to unexpected behavior.</p> <p>Instead, prefer to use immutable data structures, or take <code>None</code> as a default, and initialize a new mutable object inside the function body for each call.</p> <p>Arguments with immutable type annotations will be ignored by this rule. Types outside of the standard library can be marked as immutable with the <code>lint.flake8-bugbear.extend-immutable-calls</code> configuration option.</p>","tags":["B006"]},{"location":"rules/mutable-argument-default/#known-problems","title":"Known problems","text":"<p>Mutable argument defaults can be used intentionally to cache computation results. Replacing the default with <code>None</code> or an immutable data structure does not work for such usages. Instead, prefer the <code>@functools.lru_cache</code> decorator from the standard library.</p>","tags":["B006"]},{"location":"rules/mutable-argument-default/#example","title":"Example","text":"<pre><code>def add_to_list(item, some_list=[]):\nsome_list.append(item)\nreturn some_list\nl1 = add_to_list(0)  # [0]\nl2 = add_to_list(1)  # [0, 1]\n</code></pre> <p>Use instead:</p> <pre><code>def add_to_list(item, some_list=None):\nif some_list is None:\nsome_list = []\nsome_list.append(item)\nreturn some_list\nl1 = add_to_list(0)  # [0]\nl2 = add_to_list(1)  # [1]\n</code></pre>","tags":["B006"]},{"location":"rules/mutable-argument-default/#options","title":"Options","text":"<ul> <li><code>lint.flake8-bugbear.extend-immutable-calls</code></li> </ul>","tags":["B006"]},{"location":"rules/mutable-argument-default/#references","title":"References","text":"<ul> <li>Python documentation: Default Argument Values</li> </ul>","tags":["B006"]},{"location":"rules/mutable-class-default/","title":"mutable-class-default (RUF012)","text":"","tags":["RUF012"]},{"location":"rules/mutable-class-default/#what-it-does","title":"What it does","text":"<p>Checks for mutable default values in class attributes.</p>","tags":["RUF012"]},{"location":"rules/mutable-class-default/#why-is-this-bad","title":"Why is this bad?","text":"<p>Mutable default values share state across all instances of the class, while not being obvious. This can lead to bugs when the attributes are changed in one instance, as those changes will unexpectedly affect all other instances.</p> <p>When mutable values are intended, they should be annotated with <code>typing.ClassVar</code>. When mutability is not required, values should be immutable types, like <code>tuple</code> or <code>frozenset</code>.</p>","tags":["RUF012"]},{"location":"rules/mutable-class-default/#examples","title":"Examples","text":"<pre><code>class A:\nmutable_default: list[int] = []\nimmutable_default: list[int] = []\n</code></pre> <p>Use instead:</p> <pre><code>from typing import ClassVar\nclass A:\nmutable_default: ClassVar[list[int]] = []\nimmutable_default: tuple[int, ...] = ()\n</code></pre>","tags":["RUF012"]},{"location":"rules/mutable-contextvar-default/","title":"mutable-contextvar-default (B039)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B039"]},{"location":"rules/mutable-contextvar-default/#what-it-does","title":"What it does","text":"<p>Checks for uses of mutable objects as <code>ContextVar</code> defaults.</p>","tags":["B039"]},{"location":"rules/mutable-contextvar-default/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>ContextVar</code> default is evaluated once, when the <code>ContextVar</code> is defined.</p> <p>The same mutable object is then shared across all <code>.get()</code> method calls to the <code>ContextVar</code>. If the object is modified, those modifications will persist across calls, which can lead to unexpected behavior.</p> <p>Instead, prefer to use immutable data structures. Alternatively, take <code>None</code> as a default, and initialize a new mutable object inside for each call using the <code>.set()</code> method.</p> <p>Types outside the standard library can be marked as immutable with the <code>lint.flake8-bugbear.extend-immutable-calls</code> configuration option.</p>","tags":["B039"]},{"location":"rules/mutable-contextvar-default/#example","title":"Example","text":"<pre><code>from contextvars import ContextVar\ncv: ContextVar[list] = ContextVar(\"cv\", default=[])\n</code></pre> <p>Use instead:</p> <pre><code>from contextvars import ContextVar\ncv: ContextVar[list | None] = ContextVar(\"cv\", default=None)\n...\nif cv.get() is None:\ncv.set([])\n</code></pre>","tags":["B039"]},{"location":"rules/mutable-contextvar-default/#options","title":"Options","text":"<ul> <li><code>lint.flake8-bugbear.extend-immutable-calls</code></li> </ul>","tags":["B039"]},{"location":"rules/mutable-contextvar-default/#references","title":"References","text":"<ul> <li>Python documentation: <code>contextvars</code> \u2014 Context Variables</li> </ul>","tags":["B039"]},{"location":"rules/mutable-dataclass-default/","title":"mutable-dataclass-default (RUF008)","text":"","tags":["RUF008"]},{"location":"rules/mutable-dataclass-default/#what-it-does","title":"What it does","text":"<p>Checks for mutable default values in dataclass attributes.</p>","tags":["RUF008"]},{"location":"rules/mutable-dataclass-default/#why-is-this-bad","title":"Why is this bad?","text":"<p>Mutable default values share state across all instances of the dataclass. This can lead to bugs when the attributes are changed in one instance, as those changes will unexpectedly affect all other instances.</p> <p>Instead of sharing mutable defaults, use the <code>field(default_factory=...)</code> pattern.</p> <p>If the default value is intended to be mutable, it must be annotated with <code>typing.ClassVar</code>; otherwise, a <code>ValueError</code> will be raised.</p>","tags":["RUF008"]},{"location":"rules/mutable-dataclass-default/#examples","title":"Examples","text":"<pre><code>from dataclasses import dataclass\n@dataclass\nclass A:\n# A list without a `default_factory` or `ClassVar` annotation\n# will raise a `ValueError`.\nmutable_default: list[int] = []\n</code></pre> <p>Use instead:</p> <pre><code>from dataclasses import dataclass, field\n@dataclass\nclass A:\nmutable_default: list[int] = field(default_factory=list)\n</code></pre> <p>Or:</p> <pre><code>from dataclasses import dataclass\nfrom typing import ClassVar\n@dataclass\nclass A:\nmutable_default: ClassVar[list[int]] = []\n</code></pre>","tags":["RUF008"]},{"location":"rules/mutable-fromkeys-value/","title":"mutable-fromkeys-value (RUF024)","text":"<p>Fix is sometimes available.</p>","tags":["RUF024"]},{"location":"rules/mutable-fromkeys-value/#what-it-does","title":"What it does","text":"<p>Checks for mutable objects passed as a value argument to <code>dict.fromkeys</code>.</p>","tags":["RUF024"]},{"location":"rules/mutable-fromkeys-value/#why-is-this-bad","title":"Why is this bad?","text":"<p>All values in the dictionary created by the <code>dict.fromkeys</code> method refer to the same instance of the provided object. If that object is modified, all values are modified, which can lead to unexpected behavior. For example, if the empty list (<code>[]</code>) is provided as the default value, all values in the dictionary will use the same list; as such, appending to any one entry will append to all entries.</p> <p>Instead, use a comprehension to generate a dictionary with distinct instances of the default value.</p>","tags":["RUF024"]},{"location":"rules/mutable-fromkeys-value/#example","title":"Example","text":"<pre><code>cities = dict.fromkeys([\"UK\", \"Poland\"], [])\ncities[\"UK\"].append(\"London\")\ncities[\"Poland\"].append(\"Poznan\")\nprint(cities)  # {'UK': ['London', 'Poznan'], 'Poland': ['London', 'Poznan']}\n</code></pre> <p>Use instead:</p> <pre><code>cities = {country: [] for country in [\"UK\", \"Poland\"]}\ncities[\"UK\"].append(\"London\")\ncities[\"Poland\"].append(\"Poznan\")\nprint(cities)  # {'UK': ['London'], 'Poland': ['Poznan']}\n</code></pre>","tags":["RUF024"]},{"location":"rules/mutable-fromkeys-value/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as the edit will change the behavior of the program by using a distinct object for every value in the dictionary, rather than a shared mutable instance. In some cases, programs may rely on the previous behavior.</p>","tags":["RUF024"]},{"location":"rules/mutable-fromkeys-value/#references","title":"References","text":"<ul> <li>Python documentation: <code>dict.fromkeys</code></li> </ul>","tags":["RUF024"]},{"location":"rules/named-expr-without-context/","title":"named-expr-without-context (PLW0131)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0131"]},{"location":"rules/named-expr-without-context/#what-it-does","title":"What it does","text":"<p>Checks for uses of named expressions (e.g., <code>a := 42</code>) that can be replaced by regular assignment statements (e.g., <code>a = 42</code>).</p>","tags":["PLW0131"]},{"location":"rules/named-expr-without-context/#why-is-this-bad","title":"Why is this bad?","text":"<p>While a top-level named expression is syntactically and semantically valid, it's less clear than a regular assignment statement. Named expressions are intended to be used in comprehensions and generator expressions, where assignment statements are not allowed.</p>","tags":["PLW0131"]},{"location":"rules/named-expr-without-context/#example","title":"Example","text":"<pre><code>(a := 42)\n</code></pre> <p>Use instead:</p> <pre><code>a = 42\n</code></pre>","tags":["PLW0131"]},{"location":"rules/nan-comparison/","title":"nan-comparison (PLW0177)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLW0177"]},{"location":"rules/nan-comparison/#what-it-does","title":"What it does","text":"<p>Checks for comparisons against NaN values.</p>","tags":["PLW0177"]},{"location":"rules/nan-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparing against a NaN value can lead to unexpected results. For example, <code>float(\"NaN\") == float(\"NaN\")</code> will return <code>False</code> and, in general, <code>x == float(\"NaN\")</code> will always return <code>False</code>, even if <code>x</code> is <code>NaN</code>.</p> <p>To determine whether a value is <code>NaN</code>, use <code>math.isnan</code> or <code>np.isnan</code> instead of comparing against <code>NaN</code> directly.</p>","tags":["PLW0177"]},{"location":"rules/nan-comparison/#example","title":"Example","text":"<pre><code>if x == float(\"NaN\"):\npass\n</code></pre> <p>Use instead:</p> <pre><code>import math\nif math.isnan(x):\npass\n</code></pre>","tags":["PLW0177"]},{"location":"rules/native-literals/","title":"native-literals (UP018)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP018"]},{"location":"rules/native-literals/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary calls to <code>str</code>, <code>bytes</code>, <code>int</code>, <code>float</code>, and <code>bool</code>.</p>","tags":["UP018"]},{"location":"rules/native-literals/#why-is-this-bad","title":"Why is this bad?","text":"<p>The mentioned constructors can be replaced with their respective literal forms, which are more readable and idiomatic.</p>","tags":["UP018"]},{"location":"rules/native-literals/#example","title":"Example","text":"<pre><code>str(\"foo\")\n</code></pre> <p>Use instead:</p> <pre><code>\"foo\"\n</code></pre>","tags":["UP018"]},{"location":"rules/native-literals/#references","title":"References","text":"<ul> <li>Python documentation: <code>str</code></li> <li>Python documentation: <code>bytes</code></li> <li>Python documentation: <code>int</code></li> <li>Python documentation: <code>float</code></li> <li>Python documentation: <code>bool</code></li> </ul>","tags":["UP018"]},{"location":"rules/needless-bool/","title":"needless-bool (SIM103)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM103"]},{"location":"rules/needless-bool/#what-it-does","title":"What it does","text":"<p>Checks for <code>if</code> statements that can be replaced with <code>bool</code>.</p>","tags":["SIM103"]},{"location":"rules/needless-bool/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>if</code> statements that return <code>True</code> for a truthy condition and <code>False</code> for a falsey condition can be replaced with boolean casts.</p>","tags":["SIM103"]},{"location":"rules/needless-bool/#example","title":"Example","text":"<p>Given:</p> <pre><code>if x &gt; 0:\nreturn True\nelse:\nreturn False\n</code></pre> <p>Use instead:</p> <pre><code>return x &gt; 0\n</code></pre> <p>Or, given:</p> <pre><code>if x &gt; 0:\nreturn True\nreturn False\n</code></pre> <p>Use instead:</p> <pre><code>return x &gt; 0\n</code></pre>","tags":["SIM103"]},{"location":"rules/needless-bool/#references","title":"References","text":"<ul> <li>Python documentation: Truth Value Testing</li> </ul>","tags":["SIM103"]},{"location":"rules/negate-equal-op/","title":"negate-equal-op (SIM201)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM201"]},{"location":"rules/negate-equal-op/#what-it-does","title":"What it does","text":"<p>Checks for negated <code>==</code> operators.</p>","tags":["SIM201"]},{"location":"rules/negate-equal-op/#why-is-this-bad","title":"Why is this bad?","text":"<p>Negated <code>==</code> operators are less readable than <code>!=</code> operators. When testing for non-equality, it is more common to use <code>!=</code> than <code>==</code>.</p>","tags":["SIM201"]},{"location":"rules/negate-equal-op/#example","title":"Example","text":"<pre><code>not a == b\n</code></pre> <p>Use instead:</p> <pre><code>a != b\n</code></pre>","tags":["SIM201"]},{"location":"rules/negate-equal-op/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> </ul>","tags":["SIM201"]},{"location":"rules/negate-not-equal-op/","title":"negate-not-equal-op (SIM202)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM202"]},{"location":"rules/negate-not-equal-op/#what-it-does","title":"What it does","text":"<p>Checks for negated <code>!=</code> operators.</p>","tags":["SIM202"]},{"location":"rules/negate-not-equal-op/#why-is-this-bad","title":"Why is this bad?","text":"<p>Negated <code>!=</code> operators are less readable than <code>==</code> operators, as they avoid a double negation.</p>","tags":["SIM202"]},{"location":"rules/negate-not-equal-op/#example","title":"Example","text":"<pre><code>not a != b\n</code></pre> <p>Use instead:</p> <pre><code>a == b\n</code></pre>","tags":["SIM202"]},{"location":"rules/negate-not-equal-op/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> </ul>","tags":["SIM202"]},{"location":"rules/nested-min-max/","title":"nested-min-max (PLW3301)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLW3301"]},{"location":"rules/nested-min-max/#what-it-does","title":"What it does","text":"<p>Checks for nested <code>min</code> and <code>max</code> calls.</p>","tags":["PLW3301"]},{"location":"rules/nested-min-max/#why-is-this-bad","title":"Why is this bad?","text":"<p>Nested <code>min</code> and <code>max</code> calls can be flattened into a single call to improve readability.</p>","tags":["PLW3301"]},{"location":"rules/nested-min-max/#example","title":"Example","text":"<pre><code>minimum = min(1, 2, min(3, 4, 5))\nmaximum = max(1, 2, max(3, 4, 5))\ndiff = maximum - minimum\n</code></pre> <p>Use instead:</p> <pre><code>minimum = min(1, 2, 3, 4, 5)\nmaximum = max(1, 2, 3, 4, 5)\ndiff = maximum - minimum\n</code></pre>","tags":["PLW3301"]},{"location":"rules/nested-min-max/#references","title":"References","text":"<ul> <li>Python documentation: <code>min</code></li> <li>Python documentation: <code>max</code></li> </ul>","tags":["PLW3301"]},{"location":"rules/never-union/","title":"never-union (RUF020)","text":"<p>Fix is always available.</p>","tags":["RUF020"]},{"location":"rules/never-union/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>typing.NoReturn</code> and <code>typing.Never</code> in union types.</p>","tags":["RUF020"]},{"location":"rules/never-union/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>typing.NoReturn</code> and <code>typing.Never</code> are special types, used to indicate that a function never returns, or that a type has no values.</p> <p>Including <code>typing.NoReturn</code> or <code>typing.Never</code> in a union type is redundant, as, e.g., <code>typing.Never | T</code> is equivalent to <code>T</code>.</p>","tags":["RUF020"]},{"location":"rules/never-union/#example","title":"Example","text":"<pre><code>from typing import Never\ndef func() -&gt; Never | int: ...\n</code></pre> <p>Use instead:</p> <pre><code>def func() -&gt; int: ...\n</code></pre>","tags":["RUF020"]},{"location":"rules/never-union/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.Never</code></li> <li>Python documentation: <code>typing.NoReturn</code></li> </ul>","tags":["RUF020"]},{"location":"rules/new-line-after-last-paragraph/","title":"new-line-after-last-paragraph (D209)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D209"]},{"location":"rules/new-line-after-last-paragraph/#what-it-does","title":"What it does","text":"<p>Checks for multi-line docstrings whose closing quotes are not on their own line.</p>","tags":["D209"]},{"location":"rules/new-line-after-last-paragraph/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that the closing quotes of a multi-line docstring be on their own line, for consistency and compatibility with documentation tools that may need to parse the docstring.</p>","tags":["D209"]},{"location":"rules/new-line-after-last-paragraph/#example","title":"Example","text":"<pre><code>def sort_list(l: List[int]) -&gt; List[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the\n    bubble sort algorithm.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def sort_list(l: List[int]) -&gt; List[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the bubble\n    sort algorithm.\n    \"\"\"\n</code></pre>","tags":["D209"]},{"location":"rules/new-line-after-last-paragraph/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D209"]},{"location":"rules/new-line-after-section-name/","title":"new-line-after-section-name (D406)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D406"]},{"location":"rules/new-line-after-section-name/#what-it-does","title":"What it does","text":"<p>Checks for section headers in docstrings that are followed by non-newline characters.</p>","tags":["D406"]},{"location":"rules/new-line-after-section-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline numpy-style docstrings.</p> <p>Multiline numpy-style docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections. Each section has a section header and a section body. The section header should be followed by a newline, rather than by some other character (like a colon).</p> <p>This rule is enabled when using the <code>numpy</code> convention, and disabled when using the <code>google</code> or <code>pep257</code> conventions.</p>","tags":["D406"]},{"location":"rules/new-line-after-section-name/#example","title":"Example","text":"<pre><code># The `Parameters`, `Returns` and `Raises` section headers are all followed\n# by a colon in this function's docstring:\ndef calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters:\n    -----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns:\n    --------\n    float\n        Speed as distance divided by time.\n    Raises:\n    -------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D406"]},{"location":"rules/new-line-after-section-name/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D406"]},{"location":"rules/new-line-after-section-name/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> </ul>","tags":["D406"]},{"location":"rules/no-blank-line-after-function/","title":"no-blank-line-after-function (D202)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D202"]},{"location":"rules/no-blank-line-after-function/#what-it-does","title":"What it does","text":"<p>Checks for docstrings on functions that are separated by one or more blank lines from the function body.</p>","tags":["D202"]},{"location":"rules/no-blank-line-after-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Remove any blank lines between the function body and the function docstring, for consistency.</p>","tags":["D202"]},{"location":"rules/no-blank-line-after-function/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\nreturn sum(values) / len(values)\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\nreturn sum(values) / len(values)\n</code></pre>","tags":["D202"]},{"location":"rules/no-blank-line-after-function/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D202"]},{"location":"rules/no-blank-line-after-section/","title":"no-blank-line-after-section (D410)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D410"]},{"location":"rules/no-blank-line-after-section/#what-it-does","title":"What it does","text":"<p>Checks for docstring sections that are not separated by a single blank line.</p>","tags":["D410"]},{"location":"rules/no-blank-line-after-section/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces consistency in your docstrings, and helps ensure compatibility with documentation tooling.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body. If a multiline numpy-style or Google-style docstring consists of multiple sections, each section should be separated by a single blank line.</p> <p>This rule is enabled when using the <code>numpy</code> and <code>google</code> conventions, and disabled when using the <code>pep257</code> convention.</p>","tags":["D410"]},{"location":"rules/no-blank-line-after-section/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D410"]},{"location":"rules/no-blank-line-after-section/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D410"]},{"location":"rules/no-blank-line-after-section/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Style Guide</li> </ul>","tags":["D410"]},{"location":"rules/no-blank-line-before-function/","title":"no-blank-line-before-function (D201)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D201"]},{"location":"rules/no-blank-line-before-function/#what-it-does","title":"What it does","text":"<p>Checks for docstrings on functions that are separated by one or more blank lines from the function definition.</p>","tags":["D201"]},{"location":"rules/no-blank-line-before-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Remove any blank lines between the function definition and its docstring, for consistency.</p>","tags":["D201"]},{"location":"rules/no-blank-line-before-function/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D201"]},{"location":"rules/no-blank-line-before-function/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D201"]},{"location":"rules/no-blank-line-before-section/","title":"no-blank-line-before-section (D411)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D411"]},{"location":"rules/no-blank-line-before-section/#what-it-does","title":"What it does","text":"<p>Checks for docstring sections that are not separated by a blank line.</p>","tags":["D411"]},{"location":"rules/no-blank-line-before-section/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces consistency in numpy-style and Google-style docstrings, and helps ensure compatibility with documentation tooling.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body. Sections should be separated by a single blank line.</p> <p>This rule is enabled when using the <code>numpy</code> and <code>google</code> conventions, and disabled when using the <code>pep257</code> convention.</p>","tags":["D411"]},{"location":"rules/no-blank-line-before-section/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D411"]},{"location":"rules/no-blank-line-before-section/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D411"]},{"location":"rules/no-blank-line-before-section/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> </ul>","tags":["D411"]},{"location":"rules/no-classmethod-decorator/","title":"no-classmethod-decorator (PLR0202)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR0202"]},{"location":"rules/no-classmethod-decorator/#what-it-does","title":"What it does","text":"<p>Checks for the use of a classmethod being made without the decorator.</p>","tags":["PLR0202"]},{"location":"rules/no-classmethod-decorator/#why-is-this-bad","title":"Why is this bad?","text":"<p>When it comes to consistency and readability, it's preferred to use the decorator.</p>","tags":["PLR0202"]},{"location":"rules/no-classmethod-decorator/#example","title":"Example","text":"<pre><code>class Foo:\ndef bar(cls): ...\nbar = classmethod(bar)\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\n@classmethod\ndef bar(cls): ...\n</code></pre>","tags":["PLR0202"]},{"location":"rules/no-explicit-stacklevel/","title":"no-explicit-stacklevel (B028)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B028"]},{"location":"rules/no-explicit-stacklevel/#what-it-does","title":"What it does","text":"<p>Checks for <code>warnings.warn</code> calls without an explicit <code>stacklevel</code> keyword argument.</p>","tags":["B028"]},{"location":"rules/no-explicit-stacklevel/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>warnings.warn</code> method uses a <code>stacklevel</code> of 1 by default, which limits the rendered stack trace to that of the line on which the <code>warn</code> method is called.</p> <p>It's recommended to use a <code>stacklevel</code> of 2 or higher, give the caller more context about the warning.</p>","tags":["B028"]},{"location":"rules/no-explicit-stacklevel/#example","title":"Example","text":"<pre><code>warnings.warn(\"This is a warning\")\n</code></pre> <p>Use instead:</p> <pre><code>warnings.warn(\"This is a warning\", stacklevel=2)\n</code></pre>","tags":["B028"]},{"location":"rules/no-explicit-stacklevel/#references","title":"References","text":"<ul> <li>Python documentation: <code>warnings.warn</code></li> </ul>","tags":["B028"]},{"location":"rules/no-indented-block-comment/","title":"no-indented-block-comment (E115)","text":"<p>Derived from the pycodestyle linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E115"]},{"location":"rules/no-indented-block-comment/#what-it-does","title":"What it does","text":"<p>Checks for comments in a code blocks that are lacking indentation.</p>","tags":["E115"]},{"location":"rules/no-indented-block-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comments within an indented block should themselves be indented, to indicate that they are part of the block.</p>","tags":["E115"]},{"location":"rules/no-indented-block-comment/#example","title":"Example","text":"<pre><code>for item in items:\n# Hi\npass\n</code></pre> <p>Use instead:</p> <pre><code>for item in items:\n# Hi\npass\n</code></pre>","tags":["E115"]},{"location":"rules/no-indented-block/","title":"no-indented-block (E112)","text":"<p>Derived from the pycodestyle linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E112"]},{"location":"rules/no-indented-block/#what-it-does","title":"What it does","text":"<p>Checks for indented blocks that are lacking indentation.</p>","tags":["E112"]},{"location":"rules/no-indented-block/#why-is-this-bad","title":"Why is this bad?","text":"<p>All indented blocks should be indented; otherwise, they are not valid Python syntax.</p>","tags":["E112"]},{"location":"rules/no-indented-block/#example","title":"Example","text":"<pre><code>for item in items:\npass\n</code></pre> <p>Use instead:</p> <pre><code>for item in items:\npass\n</code></pre>","tags":["E112"]},{"location":"rules/no-return-argument-annotation-in-stub/","title":"no-return-argument-annotation-in-stub (PYI050)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI050"]},{"location":"rules/no-return-argument-annotation-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>typing.NoReturn</code> (and <code>typing_extensions.NoReturn</code>) for parameter annotations.</p>","tags":["PYI050"]},{"location":"rules/no-return-argument-annotation-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Prefer <code>Never</code> over <code>NoReturn</code> for parameter annotations. <code>Never</code> has a clearer name in these contexts, since it makes little sense to talk about a parameter annotation \"not returning\".</p> <p>This is a purely stylistic lint: the two types have identical semantics for type checkers. Both represent Python's \"bottom type\" (a type that has no members).</p>","tags":["PYI050"]},{"location":"rules/no-return-argument-annotation-in-stub/#example","title":"Example","text":"<pre><code>from typing import NoReturn\ndef foo(x: NoReturn): ...\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Never\ndef foo(x: Never): ...\n</code></pre>","tags":["PYI050"]},{"location":"rules/no-return-argument-annotation-in-stub/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.Never</code></li> <li>Python documentation: <code>typing.NoReturn</code></li> </ul>","tags":["PYI050"]},{"location":"rules/no-self-use/","title":"no-self-use (PLR6301)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR6301"]},{"location":"rules/no-self-use/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused <code>self</code> parameter in methods definitions.</p>","tags":["PLR6301"]},{"location":"rules/no-self-use/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused <code>self</code> parameters are usually a sign of a method that could be replaced by a function, class method, or static method.</p>","tags":["PLR6301"]},{"location":"rules/no-self-use/#example","title":"Example","text":"<pre><code>class Person:\ndef greeting(self):\nprint(\"Greetings friend!\")\n</code></pre> <p>Use instead:</p> <pre><code>def greeting():\nprint(\"Greetings friend!\")\n</code></pre> <p>or</p> <pre><code>class Person:\n@staticmethod\ndef greeting():\nprint(\"Greetings friend!\")\n</code></pre>","tags":["PLR6301"]},{"location":"rules/no-signature/","title":"no-signature (D402)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D402"]},{"location":"rules/no-signature/#what-it-does","title":"What it does","text":"<p>Checks for function docstrings that include the function's signature in the summary line.</p>","tags":["D402"]},{"location":"rules/no-signature/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends against including a function's signature in its docstring. Instead, consider using type annotations as a form of documentation for the function's parameters and return value.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>google</code> and <code>pep257</code> conventions, and disabled when using the <code>numpy</code> convention.</p>","tags":["D402"]},{"location":"rules/no-signature/#example","title":"Example","text":"<pre><code>def foo(a, b):\n\"\"\"foo(a: int, b: int) -&gt; list[int]\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def foo(a: int, b: int) -&gt; list[int]:\n\"\"\"Return a list of a and b.\"\"\"\n</code></pre>","tags":["D402"]},{"location":"rules/no-signature/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D402"]},{"location":"rules/no-signature/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D402"]},{"location":"rules/no-slots-in-namedtuple-subclass/","title":"no-slots-in-namedtuple-subclass (SLOT002)","text":"<p>Derived from the flake8-slots linter.</p>","tags":["SLOT002"]},{"location":"rules/no-slots-in-namedtuple-subclass/#what-it-does","title":"What it does","text":"<p>Checks for subclasses of <code>collections.namedtuple</code> or <code>typing.NamedTuple</code> that lack a <code>__slots__</code> definition.</p>","tags":["SLOT002"]},{"location":"rules/no-slots-in-namedtuple-subclass/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the <code>__slots__</code> attribute allows you to explicitly define the attributes (instance variables) that a class can have. By default, Python uses a dictionary to store an object's attributes, which incurs some memory overhead. However, when <code>__slots__</code> is defined, Python uses a more compact internal structure to store the object's attributes, resulting in memory savings.</p> <p>Subclasses of <code>namedtuple</code> inherit all the attributes and methods of the built-in <code>namedtuple</code> class. Since tuples are typically immutable, they don't require additional attributes beyond what the <code>namedtuple</code> class provides. Defining <code>__slots__</code> for subclasses of <code>namedtuple</code> prevents the creation of a dictionary for each instance, reducing memory consumption.</p>","tags":["SLOT002"]},{"location":"rules/no-slots-in-namedtuple-subclass/#example","title":"Example","text":"<pre><code>from collections import namedtuple\nclass Foo(namedtuple(\"foo\", [\"str\", \"int\"])):\npass\n</code></pre> <p>Use instead:</p> <pre><code>from collections import namedtuple\nclass Foo(namedtuple(\"foo\", [\"str\", \"int\"])):\n__slots__ = ()\n</code></pre>","tags":["SLOT002"]},{"location":"rules/no-slots-in-namedtuple-subclass/#references","title":"References","text":"<ul> <li>Python documentation: <code>__slots__</code></li> </ul>","tags":["SLOT002"]},{"location":"rules/no-slots-in-str-subclass/","title":"no-slots-in-str-subclass (SLOT000)","text":"<p>Derived from the flake8-slots linter.</p>","tags":["SLOT000"]},{"location":"rules/no-slots-in-str-subclass/#what-it-does","title":"What it does","text":"<p>Checks for subclasses of <code>str</code> that lack a <code>__slots__</code> definition.</p>","tags":["SLOT000"]},{"location":"rules/no-slots-in-str-subclass/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the <code>__slots__</code> attribute allows you to explicitly define the attributes (instance variables) that a class can have. By default, Python uses a dictionary to store an object's attributes, which incurs some memory overhead. However, when <code>__slots__</code> is defined, Python uses a more compact internal structure to store the object's attributes, resulting in memory savings.</p> <p>Subclasses of <code>str</code> inherit all the attributes and methods of the built-in <code>str</code> class. Since strings are typically immutable, they don't require additional attributes beyond what the <code>str</code> class provides. Defining <code>__slots__</code> for subclasses of <code>str</code> prevents the creation of a dictionary for each instance, reducing memory consumption.</p>","tags":["SLOT000"]},{"location":"rules/no-slots-in-str-subclass/#example","title":"Example","text":"<pre><code>class Foo(str):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class Foo(str):\n__slots__ = ()\n</code></pre>","tags":["SLOT000"]},{"location":"rules/no-slots-in-str-subclass/#references","title":"References","text":"<ul> <li>Python documentation: <code>__slots__</code></li> </ul>","tags":["SLOT000"]},{"location":"rules/no-slots-in-tuple-subclass/","title":"no-slots-in-tuple-subclass (SLOT001)","text":"<p>Derived from the flake8-slots linter.</p>","tags":["SLOT001"]},{"location":"rules/no-slots-in-tuple-subclass/#what-it-does","title":"What it does","text":"<p>Checks for subclasses of <code>tuple</code> that lack a <code>__slots__</code> definition.</p>","tags":["SLOT001"]},{"location":"rules/no-slots-in-tuple-subclass/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the <code>__slots__</code> attribute allows you to explicitly define the attributes (instance variables) that a class can have. By default, Python uses a dictionary to store an object's attributes, which incurs some memory overhead. However, when <code>__slots__</code> is defined, Python uses a more compact internal structure to store the object's attributes, resulting in memory savings.</p> <p>Subclasses of <code>tuple</code> inherit all the attributes and methods of the built-in <code>tuple</code> class. Since tuples are typically immutable, they don't require additional attributes beyond what the <code>tuple</code> class provides. Defining <code>__slots__</code> for subclasses of <code>tuple</code> prevents the creation of a dictionary for each instance, reducing memory consumption.</p>","tags":["SLOT001"]},{"location":"rules/no-slots-in-tuple-subclass/#example","title":"Example","text":"<pre><code>class Foo(tuple):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class Foo(tuple):\n__slots__ = ()\n</code></pre>","tags":["SLOT001"]},{"location":"rules/no-slots-in-tuple-subclass/#references","title":"References","text":"<ul> <li>Python documentation: <code>__slots__</code></li> </ul>","tags":["SLOT001"]},{"location":"rules/no-space-after-block-comment/","title":"no-space-after-block-comment (E265)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E265"]},{"location":"rules/no-space-after-block-comment/#what-it-does","title":"What it does","text":"<p>Checks for block comments that lack a single space after the leading <code>#</code> character.</p>","tags":["E265"]},{"location":"rules/no-space-after-block-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Per PEP 8, \"Block comments generally consist of one or more paragraphs built out of complete sentences, with each sentence ending in a period.\"</p> <p>Block comments should start with a <code>#</code> followed by a single space.</p> <p>Shebangs (lines starting with <code>#!</code>, at the top of a file) are exempt from this rule.</p>","tags":["E265"]},{"location":"rules/no-space-after-block-comment/#example","title":"Example","text":"<pre><code>#Block comment\n</code></pre> <p>Use instead:</p> <pre><code># Block comment\n</code></pre>","tags":["E265"]},{"location":"rules/no-space-after-inline-comment/","title":"no-space-after-inline-comment (E262)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E262"]},{"location":"rules/no-space-after-inline-comment/#what-it-does","title":"What it does","text":"<p>Checks if one space is used after inline comments.</p>","tags":["E262"]},{"location":"rules/no-space-after-inline-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>An inline comment is a comment on the same line as a statement.</p> <p>Per PEP 8, inline comments should start with a # and a single space.</p>","tags":["E262"]},{"location":"rules/no-space-after-inline-comment/#example","title":"Example","text":"<pre><code>x = x + 1  #Increment x\nx = x + 1  #  Increment x\nx = x + 1  # \\xa0Increment x\n</code></pre> <p>Use instead:</p> <pre><code>x = x + 1  # Increment x\nx = x + 1    # Increment x\n</code></pre>","tags":["E262"]},{"location":"rules/no-staticmethod-decorator/","title":"no-staticmethod-decorator (PLR0203)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR0203"]},{"location":"rules/no-staticmethod-decorator/#what-it-does","title":"What it does","text":"<p>Checks for the use of a staticmethod being made without the decorator.</p>","tags":["PLR0203"]},{"location":"rules/no-staticmethod-decorator/#why-is-this-bad","title":"Why is this bad?","text":"<p>When it comes to consistency and readability, it's preferred to use the decorator.</p>","tags":["PLR0203"]},{"location":"rules/no-staticmethod-decorator/#example","title":"Example","text":"<pre><code>class Foo:\ndef bar(arg1, arg2): ...\nbar = staticmethod(bar)\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\n@staticmethod\ndef bar(arg1, arg2): ...\n</code></pre>","tags":["PLR0203"]},{"location":"rules/non-ascii-import-name/","title":"non-ascii-import-name (PLC2403)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC2403"]},{"location":"rules/non-ascii-import-name/#what-it-does","title":"What it does","text":"<p>Checks for the use of non-ASCII characters in import statements.</p>","tags":["PLC2403"]},{"location":"rules/non-ascii-import-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of non-ASCII characters in import statements can cause confusion and compatibility issues (see: PEP 672).</p>","tags":["PLC2403"]},{"location":"rules/non-ascii-import-name/#example","title":"Example","text":"<pre><code>import b\u00e1r\n</code></pre> <p>Use instead:</p> <pre><code>import bar\n</code></pre> <p>If the module is third-party, use an ASCII-only alias:</p> <pre><code>import b\u00e1r as bar\n</code></pre>","tags":["PLC2403"]},{"location":"rules/non-ascii-name/","title":"non-ascii-name (PLC2401)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC2401"]},{"location":"rules/non-ascii-name/#what-it-does","title":"What it does","text":"<p>Checks for the use of non-ASCII characters in variable names.</p>","tags":["PLC2401"]},{"location":"rules/non-ascii-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of non-ASCII characters in variable names can cause confusion and compatibility issues (see: PEP 672).</p>","tags":["PLC2401"]},{"location":"rules/non-ascii-name/#example","title":"Example","text":"<pre><code>\u00e1pple_count: int\n</code></pre> <p>Use instead:</p> <pre><code>apple_count: int\n</code></pre>","tags":["PLC2401"]},{"location":"rules/non-augmented-assignment/","title":"non-augmented-assignment (PLR6104)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR6104"]},{"location":"rules/non-augmented-assignment/#what-it-does","title":"What it does","text":"<p>Checks for assignments that can be replaced with augmented assignment statements.</p>","tags":["PLR6104"]},{"location":"rules/non-augmented-assignment/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the right-hand side of an assignment statement consists of a binary operation in which one operand is the same as the assignment target, it can be rewritten as an augmented assignment. For example, <code>x = x + 1 can be rewritten as</code>x += 1`.</p> <p>When performing such an operation, an augmented assignment is more concise and idiomatic.</p>","tags":["PLR6104"]},{"location":"rules/non-augmented-assignment/#known-problems","title":"Known problems","text":"<p>In some cases, this rule will not detect assignments in which the target is on the right-hand side of a binary operation (e.g., <code>x = y + x</code>, as opposed to <code>x = x + y</code>), as such operations are not commutative for certain data types, like strings.</p> <p>For example, <code>x = \"prefix-\" + x</code> is not equivalent to <code>x += \"prefix-\"</code>, while <code>x = 1 + x</code> is equivalent to <code>x += 1</code>.</p> <p>If the type of the left-hand side cannot be trivially inferred, the rule will ignore the assignment.</p>","tags":["PLR6104"]},{"location":"rules/non-augmented-assignment/#example","title":"Example","text":"<pre><code>x = x + 1\n</code></pre> <p>Use instead:</p> <pre><code>x += 1\n</code></pre>","tags":["PLR6104"]},{"location":"rules/non-augmented-assignment/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as augmented assignments have different semantics when the target is a mutable data type, like a list or dictionary.</p> <p>For example, consider the following:</p> <pre><code>foo = [1]\nbar = foo\nfoo = foo + [2]\nassert (foo, bar) == ([1, 2], [1])\n</code></pre> <p>If the assignment is replaced with an augmented assignment, the update operation will apply to both <code>foo</code> and <code>bar</code>, as they refer to the same object:</p> <pre><code>foo = [1]\nbar = foo\nfoo += [2]\nassert (foo, bar) == ([1, 2], [1, 2])\n</code></pre>","tags":["PLR6104"]},{"location":"rules/non-empty-stub-body/","title":"non-empty-stub-body (PYI010)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI010"]},{"location":"rules/non-empty-stub-body/#what-it-does","title":"What it does","text":"<p>Checks for non-empty function stub bodies.</p>","tags":["PYI010"]},{"location":"rules/non-empty-stub-body/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files are never executed at runtime; they should be thought of as \"data files\" for type checkers or IDEs. Function bodies are redundant for this purpose.</p>","tags":["PYI010"]},{"location":"rules/non-empty-stub-body/#example","title":"Example","text":"<pre><code>def double(x: int) -&gt; int:\nreturn x * 2\n</code></pre> <p>Use instead:</p> <pre><code>def double(x: int) -&gt; int: ...\n</code></pre>","tags":["PYI010"]},{"location":"rules/non-empty-stub-body/#references","title":"References","text":"<ul> <li>Typing documentation - Writing and Maintaining Stub Files</li> </ul>","tags":["PYI010"]},{"location":"rules/non-imperative-mood/","title":"non-imperative-mood (D401)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D401"]},{"location":"rules/non-imperative-mood/#what-it-does","title":"What it does","text":"<p>Checks for docstring first lines that are not in an imperative mood.</p>","tags":["D401"]},{"location":"rules/non-imperative-mood/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that the first line of a docstring be written in the imperative mood, for consistency.</p> <p>Hint: to rewrite the docstring in the imperative, phrase the first line as if it were a command.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>numpy</code> and <code>pep257</code> conventions, and disabled when using the <code>google</code> conventions.</p>","tags":["D401"]},{"location":"rules/non-imperative-mood/#example","title":"Example","text":"<pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Returns the mean of the given values.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def average(values: list[float]) -&gt; float:\n\"\"\"Return the mean of the given values.\"\"\"\n</code></pre>","tags":["D401"]},{"location":"rules/non-imperative-mood/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> <li><code>lint.pydocstyle.property-decorators</code></li> <li><code>lint.pydocstyle.ignore-decorators</code></li> </ul>","tags":["D401"]},{"location":"rules/non-imperative-mood/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> </ul>","tags":["D401"]},{"location":"rules/non-lowercase-variable-in-function/","title":"non-lowercase-variable-in-function (N806)","text":"<p>Derived from the pep8-naming linter.</p>","tags":["N806"]},{"location":"rules/non-lowercase-variable-in-function/#what-it-does","title":"What it does","text":"<p>Checks for the use of non-lowercase variable names in functions.</p>","tags":["N806"]},{"location":"rules/non-lowercase-variable-in-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends that all function variables use lowercase names:</p> <p>Function names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names. mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p>","tags":["N806"]},{"location":"rules/non-lowercase-variable-in-function/#example","title":"Example","text":"<pre><code>def my_function(a):\nB = a + 3\nreturn B\n</code></pre> <p>Use instead:</p> <pre><code>def my_function(a):\nb = a + 3\nreturn b\n</code></pre>","tags":["N806"]},{"location":"rules/non-lowercase-variable-in-function/#options","title":"Options","text":"<ul> <li><code>lint.pep8-naming.ignore-names</code></li> <li><code>lint.pep8-naming.extend-ignore-names</code></li> </ul>","tags":["N806"]},{"location":"rules/non-pep585-annotation/","title":"non-pep585-annotation (UP006)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP006"]},{"location":"rules/non-pep585-annotation/#what-it-does","title":"What it does","text":"<p>Checks for the use of generics that can be replaced with standard library variants based on PEP 585.</p>","tags":["UP006"]},{"location":"rules/non-pep585-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 585 enabled collections in the Python standard library (like <code>list</code>) to be used as generics directly, instead of importing analogous members from the <code>typing</code> module (like <code>typing.List</code>).</p> <p>When available, the PEP 585 syntax should be used instead of importing members from the <code>typing</code> module, as it's more concise and readable. Importing those members from <code>typing</code> is considered deprecated as of PEP 585.</p> <p>This rule is enabled when targeting Python 3.9 or later (see: <code>target-version</code>). By default, it's also enabled for earlier Python versions if <code>from __future__ import annotations</code> is present, as <code>__future__</code> annotations are not evaluated at runtime. If your code relies on runtime type annotations (either directly or via a library like Pydantic), you can disable this behavior for Python versions prior to 3.9 by setting <code>lint.pyupgrade.keep-runtime-typing</code> to <code>true</code>.</p>","tags":["UP006"]},{"location":"rules/non-pep585-annotation/#example","title":"Example","text":"<pre><code>from typing import List\nfoo: List[int] = [1, 2, 3]\n</code></pre> <p>Use instead:</p> <pre><code>foo: list[int] = [1, 2, 3]\n</code></pre>","tags":["UP006"]},{"location":"rules/non-pep585-annotation/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may lead to runtime errors when alongside libraries that rely on runtime type annotations, like Pydantic, on Python versions prior to Python 3.9.</p>","tags":["UP006"]},{"location":"rules/non-pep585-annotation/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> <li><code>lint.pyupgrade.keep-runtime-typing</code></li> </ul>","tags":["UP006"]},{"location":"rules/non-pep604-annotation/","title":"non-pep604-annotation (UP007)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP007"]},{"location":"rules/non-pep604-annotation/#what-it-does","title":"What it does","text":"<p>Check for type annotations that can be rewritten based on PEP 604 syntax.</p>","tags":["UP007"]},{"location":"rules/non-pep604-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 604 introduced a new syntax for union type annotations based on the <code>|</code> operator. This syntax is more concise and readable than the previous <code>typing.Union</code> and <code>typing.Optional</code> syntaxes.</p> <p>This rule is enabled when targeting Python 3.10 or later (see: <code>target-version</code>). By default, it's also enabled for earlier Python versions if <code>from __future__ import annotations</code> is present, as <code>__future__</code> annotations are not evaluated at runtime. If your code relies on runtime type annotations (either directly or via a library like Pydantic), you can disable this behavior for Python versions prior to 3.10 by setting <code>lint.pyupgrade.keep-runtime-typing</code> to <code>true</code>.</p>","tags":["UP007"]},{"location":"rules/non-pep604-annotation/#example","title":"Example","text":"<pre><code>from typing import Union\nfoo: Union[int, str] = 1\n</code></pre> <p>Use instead:</p> <pre><code>foo: int | str = 1\n</code></pre>","tags":["UP007"]},{"location":"rules/non-pep604-annotation/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may lead to runtime errors when alongside libraries that rely on runtime type annotations, like Pydantic, on Python versions prior to Python 3.10. It may also lead to runtime errors in unusual and likely incorrect type annotations where the type does not support the <code>|</code> operator.</p>","tags":["UP007"]},{"location":"rules/non-pep604-annotation/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> <li><code>lint.pyupgrade.keep-runtime-typing</code></li> </ul>","tags":["UP007"]},{"location":"rules/non-pep604-isinstance/","title":"non-pep604-isinstance (UP038)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP038"]},{"location":"rules/non-pep604-isinstance/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>isinstance</code> and <code>issubclass</code> that take a tuple of types for comparison.</p>","tags":["UP038"]},{"location":"rules/non-pep604-isinstance/#why-is-this-bad","title":"Why is this bad?","text":"<p>Since Python 3.10, <code>isinstance</code> and <code>issubclass</code> can be passed a <code>|</code>-separated union of types, which is consistent with the union operator introduced in PEP 604.</p> <p>Note that this results in slower code. Ignore this rule if the performance of an <code>isinstance</code> or <code>issubclass</code> check is a concern, e.g., in a hot loop.</p>","tags":["UP038"]},{"location":"rules/non-pep604-isinstance/#example","title":"Example","text":"<pre><code>isinstance(x, (int, float))\n</code></pre> <p>Use instead:</p> <pre><code>isinstance(x, int | float)\n</code></pre>","tags":["UP038"]},{"location":"rules/non-pep604-isinstance/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["UP038"]},{"location":"rules/non-pep604-isinstance/#references","title":"References","text":"<ul> <li>Python documentation: <code>isinstance</code></li> <li>Python documentation: <code>issubclass</code></li> </ul>","tags":["UP038"]},{"location":"rules/non-pep646-unpack/","title":"non-pep646-unpack (UP044)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["UP044"]},{"location":"rules/non-pep646-unpack/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>Unpack[]</code> on Python 3.11 and above, and suggests using <code>*</code> instead.</p>","tags":["UP044"]},{"location":"rules/non-pep646-unpack/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 646 introduced a new syntax for unpacking sequences based on the <code>*</code> operator. This syntax is more concise and readable than the previous <code>Unpack[]</code> syntax.</p>","tags":["UP044"]},{"location":"rules/non-pep646-unpack/#example","title":"Example","text":"<pre><code>from typing import Unpack\ndef foo(*args: Unpack[tuple[int, ...]]) -&gt; None:\npass\n</code></pre> <p>Use instead:</p> <pre><code>def foo(*args: *tuple[int, ...]) -&gt; None:\npass\n</code></pre>","tags":["UP044"]},{"location":"rules/non-pep646-unpack/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as <code>Unpack[T]</code> and <code>*T</code> are considered different values when introspecting types at runtime. However, in most cases, the fix should be safe to apply.</p>","tags":["UP044"]},{"location":"rules/non-pep695-type-alias/","title":"non-pep695-type-alias (UP040)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP040"]},{"location":"rules/non-pep695-type-alias/#what-it-does","title":"What it does","text":"<p>Checks for use of <code>TypeAlias</code> annotations and <code>TypeAliasType</code> assignments for declaring type aliases.</p>","tags":["UP040"]},{"location":"rules/non-pep695-type-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>type</code> keyword was introduced in Python 3.12 by PEP 695 for defining type aliases. The <code>type</code> keyword is easier to read and provides cleaner support for generics.</p>","tags":["UP040"]},{"location":"rules/non-pep695-type-alias/#known-problems","title":"Known problems","text":"<p>PEP 695 uses inferred variance for type parameters, instead of the <code>covariant</code> and <code>contravariant</code> keywords used by <code>TypeParam</code> variables. As such, rewriting a <code>TypeParam</code> variable to a <code>type</code> alias may change its variance.</p> <p>Unlike <code>TypeParam</code> variables, PEP 695-style <code>type</code> aliases cannot be used at runtime. For example, calling <code>isinstance</code> on a <code>type</code> alias will throw a <code>TypeError</code>. As such, rewriting a <code>TypeParam</code> via the <code>type</code> keyword will cause issues for parameters that are used for such runtime checks.</p>","tags":["UP040"]},{"location":"rules/non-pep695-type-alias/#example","title":"Example","text":"<pre><code>ListOfInt: TypeAlias = list[int]\nPositiveInt = TypeAliasType(\"PositiveInt\", Annotated[int, Gt(0)])\n</code></pre> <p>Use instead:</p> <pre><code>type ListOfInt = list[int]\ntype PositiveInt = Annotated[int, Gt(0)]\n</code></pre>","tags":["UP040"]},{"location":"rules/non-self-return-type/","title":"non-self-return-type (PYI034)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI034"]},{"location":"rules/non-self-return-type/#what-it-does","title":"What it does","text":"<p>Checks for methods that are annotated with a fixed return type which should instead be returning <code>Self</code>.</p>","tags":["PYI034"]},{"location":"rules/non-self-return-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>If methods that generally return <code>self</code> at runtime are annotated with a fixed return type, and the class is subclassed, type checkers will not be able to infer the correct return type.</p> <p>For example:</p> <pre><code>class Shape:\ndef set_scale(self, scale: float) -&gt; Shape:\nself.scale = scale\nreturn self\nclass Circle(Shape):\ndef set_radius(self, radius: float) -&gt; Circle:\nself.radius = radius\nreturn self\n# Type checker infers return type as `Shape`, not `Circle`.\nCircle().set_scale(0.5)\n# Thus, this expression is invalid, as `Shape` has no attribute `set_radius`.\nCircle().set_scale(0.5).set_radius(2.7)\n</code></pre> <p>Specifically, this check enforces that the return type of the following methods is <code>Self</code>:</p> <ol> <li>In-place binary-operation dunder methods, like <code>__iadd__</code>, <code>__imul__</code>, etc.</li> <li><code>__new__</code>, <code>__enter__</code>, and <code>__aenter__</code>, if those methods return the     class name.</li> <li><code>__iter__</code> methods that return <code>Iterator</code>, despite the class inheriting     directly from <code>Iterator</code>.</li> <li><code>__aiter__</code> methods that return <code>AsyncIterator</code>, despite the class     inheriting directly from <code>AsyncIterator</code>.</li> </ol>","tags":["PYI034"]},{"location":"rules/non-self-return-type/#example","title":"Example","text":"<pre><code>class Foo:\ndef __new__(cls, *args: Any, **kwargs: Any) -&gt; Foo: ...\ndef __enter__(self) -&gt; Foo: ...\nasync def __aenter__(self) -&gt; Foo: ...\ndef __iadd__(self, other: Foo) -&gt; Foo: ...\n</code></pre> <p>Use instead:</p> <pre><code>from typing_extensions import Self\nclass Foo:\ndef __new__(cls, *args: Any, **kwargs: Any) -&gt; Self: ...\ndef __enter__(self) -&gt; Self: ...\nasync def __aenter__(self) -&gt; Self: ...\ndef __iadd__(self, other: Foo) -&gt; Self: ...\n</code></pre>","tags":["PYI034"]},{"location":"rules/non-self-return-type/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.Self</code></li> </ul>","tags":["PYI034"]},{"location":"rules/non-slot-assignment/","title":"non-slot-assignment (PLE0237)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0237"]},{"location":"rules/non-slot-assignment/#what-it-does","title":"What it does","text":"<p>Checks for assignments to attributes that are not defined in <code>__slots__</code>.</p>","tags":["PLE0237"]},{"location":"rules/non-slot-assignment/#why-is-this-bad","title":"Why is this bad?","text":"<p>When using <code>__slots__</code>, only the specified attributes are allowed. Attempting to assign to an attribute that is not defined in <code>__slots__</code> will result in an <code>AttributeError</code> at runtime.</p>","tags":["PLE0237"]},{"location":"rules/non-slot-assignment/#known-problems","title":"Known problems","text":"<p>This rule can't detect <code>__slots__</code> implementations in superclasses, and so limits its analysis to classes that inherit from (at most) <code>object</code>.</p>","tags":["PLE0237"]},{"location":"rules/non-slot-assignment/#example","title":"Example","text":"<pre><code>class Student:\n__slots__ = (\"name\",)\ndef __init__(self, name, surname):\nself.name = name\nself.surname = surname  # [assigning-non-slot]\nself.setup()\ndef setup(self):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class Student:\n__slots__ = (\"name\", \"surname\")\ndef __init__(self, name, surname):\nself.name = name\nself.surname = surname\nself.setup()\ndef setup(self):\npass\n</code></pre>","tags":["PLE0237"]},{"location":"rules/non-unique-enums/","title":"non-unique-enums (PIE796)","text":"<p>Derived from the flake8-pie linter.</p>","tags":["PIE796"]},{"location":"rules/non-unique-enums/#what-it-does","title":"What it does","text":"<p>Checks for enums that contain duplicate values.</p>","tags":["PIE796"]},{"location":"rules/non-unique-enums/#why-is-this-bad","title":"Why is this bad?","text":"<p>Enum values should be unique. Non-unique values are redundant and likely a mistake.</p>","tags":["PIE796"]},{"location":"rules/non-unique-enums/#example","title":"Example","text":"<pre><code>from enum import Enum\nclass Foo(Enum):\nA = 1\nB = 2\nC = 1\n</code></pre> <p>Use instead:</p> <pre><code>from enum import Enum\nclass Foo(Enum):\nA = 1\nB = 2\nC = 3\n</code></pre>","tags":["PIE796"]},{"location":"rules/non-unique-enums/#references","title":"References","text":"<ul> <li>Python documentation: <code>enum.Enum</code></li> </ul>","tags":["PIE796"]},{"location":"rules/none-comparison/","title":"none-comparison (E711)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["E711"]},{"location":"rules/none-comparison/#what-it-does","title":"What it does","text":"<p>Checks for comparisons to <code>None</code> which are not using the <code>is</code> operator.</p>","tags":["E711"]},{"location":"rules/none-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, \"Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators.\"</p>","tags":["E711"]},{"location":"rules/none-comparison/#example","title":"Example","text":"<pre><code>if arg != None:\npass\nif None == arg:\npass\n</code></pre> <p>Use instead:</p> <pre><code>if arg is not None:\npass\n</code></pre>","tags":["E711"]},{"location":"rules/none-comparison/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may alter runtime behavior when used with libraries that override the <code>==</code>/<code>__eq__</code> or <code>!=</code>/<code>__ne__</code> operators. In these cases, <code>is</code>/<code>is not</code> may not be equivalent to <code>==</code>/<code>!=</code>. For more information, see this issue.</p>","tags":["E711"]},{"location":"rules/none-not-at-end-of-union/","title":"none-not-at-end-of-union (RUF036)","text":"<p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF036"]},{"location":"rules/none-not-at-end-of-union/#what-it-does","title":"What it does","text":"<p>Checks for type annotations where <code>None</code> is not at the end of an union.</p>","tags":["RUF036"]},{"location":"rules/none-not-at-end-of-union/#why-is-this-bad","title":"Why is this bad?","text":"<p>Type annotation unions are associative, meaning that the order of the elements does not matter. The <code>None</code> literal represents the absence of a value. For readability, it's preferred to write the more informative type expressions first.</p>","tags":["RUF036"]},{"location":"rules/none-not-at-end-of-union/#example","title":"Example","text":"<pre><code>def func(arg: None | int): ...\n</code></pre> <p>Use instead:</p> <pre><code>def func(arg: int | None): ...\n</code></pre>","tags":["RUF036"]},{"location":"rules/none-not-at-end-of-union/#references","title":"References","text":"<ul> <li>Python documentation: Union type</li> <li>Python documentation: <code>typing.Optional</code></li> <li>Python documentation: <code>None</code></li> </ul>","tags":["RUF036"]},{"location":"rules/nonlocal-and-global/","title":"nonlocal-and-global (PLE0115)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0115"]},{"location":"rules/nonlocal-and-global/#what-it-does","title":"What it does","text":"<p>Checks for variables which are both declared as both <code>nonlocal</code> and <code>global</code>.</p>","tags":["PLE0115"]},{"location":"rules/nonlocal-and-global/#why-is-this-bad","title":"Why is this bad?","text":"<p>A <code>nonlocal</code> variable is a variable that is defined in the nearest enclosing scope, but not in the global scope, while a <code>global</code> variable is a variable that is defined in the global scope.</p> <p>Declaring a variable as both <code>nonlocal</code> and <code>global</code> is contradictory and will raise a <code>SyntaxError</code>.</p>","tags":["PLE0115"]},{"location":"rules/nonlocal-and-global/#example","title":"Example","text":"<pre><code>counter = 0\ndef increment():\nglobal counter\nnonlocal counter\ncounter += 1\n</code></pre> <p>Use instead:</p> <pre><code>counter = 0\ndef increment():\nglobal counter\ncounter += 1\n</code></pre>","tags":["PLE0115"]},{"location":"rules/nonlocal-and-global/#references","title":"References","text":"<ul> <li>Python documentation: The <code>global</code> statement</li> <li>Python documentation: The <code>nonlocal</code> statement</li> </ul>","tags":["PLE0115"]},{"location":"rules/nonlocal-without-binding/","title":"nonlocal-without-binding (PLE0117)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0117"]},{"location":"rules/nonlocal-without-binding/#what-it-does","title":"What it does","text":"<p>Checks for <code>nonlocal</code> names without bindings.</p>","tags":["PLE0117"]},{"location":"rules/nonlocal-without-binding/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>nonlocal</code> names must be bound to a name in an outer scope.</p>","tags":["PLE0117"]},{"location":"rules/nonlocal-without-binding/#example","title":"Example","text":"<pre><code>class Foo:\ndef get_bar(self):\nnonlocal bar\n...\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\nbar = 1\ndef get_bar(self):\nnonlocal bar\n...\n</code></pre>","tags":["PLE0117"]},{"location":"rules/nonlocal-without-binding/#references","title":"References","text":"<ul> <li>Python documentation: The <code>nonlocal</code> statement</li> <li>PEP 3104 \u2013 Access to Names in Outer Scopes</li> </ul>","tags":["PLE0117"]},{"location":"rules/not-in-test/","title":"not-in-test (E713)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["E713"]},{"location":"rules/not-in-test/#what-it-does","title":"What it does","text":"<p>Checks for membership tests using <code>not {element} in {collection}</code>.</p>","tags":["E713"]},{"location":"rules/not-in-test/#why-is-this-bad","title":"Why is this bad?","text":"<p>Testing membership with <code>{element} not in {collection}</code> is more readable.</p>","tags":["E713"]},{"location":"rules/not-in-test/#example","title":"Example","text":"<pre><code>Z = not X in Y\nif not X.B in Y:\npass\n</code></pre> <p>Use instead:</p> <pre><code>Z = X not in Y\nif X.B not in Y:\npass\n</code></pre>","tags":["E713"]},{"location":"rules/not-is-test/","title":"not-is-test (E714)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["E714"]},{"location":"rules/not-is-test/#what-it-does","title":"What it does","text":"<p>Checks for identity comparisons using <code>not {foo} is {bar}</code>.</p>","tags":["E714"]},{"location":"rules/not-is-test/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP8, testing for an object's identity with <code>is not</code> is more readable.</p>","tags":["E714"]},{"location":"rules/not-is-test/#example","title":"Example","text":"<pre><code>if not X is Y:\npass\nZ = not X.B is Y\n</code></pre> <p>Use instead:</p> <pre><code>if X is not Y:\npass\nZ = X.B is not Y\n</code></pre>","tags":["E714"]},{"location":"rules/numeric-literal-too-long/","title":"numeric-literal-too-long (PYI054)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI054"]},{"location":"rules/numeric-literal-too-long/#what-it-does","title":"What it does","text":"<p>Checks for numeric literals with a string representation longer than ten characters.</p>","tags":["PYI054"]},{"location":"rules/numeric-literal-too-long/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a function has a default value where the literal representation is greater than 50 characters, the value is likely to be an implementation detail or a constant that varies depending on the system you're running on.</p> <p>Default values like these should generally be omitted from stubs. Use ellipses (<code>...</code>) instead.</p>","tags":["PYI054"]},{"location":"rules/numeric-literal-too-long/#example","title":"Example","text":"<pre><code>def foo(arg: int = 693568516352839939918568862861217771399698285293568) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(arg: int = ...) -&gt; None: ...\n</code></pre>","tags":["PYI054"]},{"location":"rules/numpy-deprecated-function/","title":"numpy-deprecated-function (NPY003)","text":"<p>Fix is sometimes available.</p>","tags":["NPY003"]},{"location":"rules/numpy-deprecated-function/#what-it-does","title":"What it does","text":"<p>Checks for uses of deprecated NumPy functions.</p>","tags":["NPY003"]},{"location":"rules/numpy-deprecated-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>When NumPy functions are deprecated, they are usually replaced with newer, more efficient versions, or with functions that are more consistent with the rest of the NumPy API.</p> <p>Prefer newer APIs over deprecated ones.</p>","tags":["NPY003"]},{"location":"rules/numpy-deprecated-function/#examples","title":"Examples","text":"<pre><code>import numpy as np\nnp.alltrue([True, False])\n</code></pre> <p>Use instead:</p> <pre><code>import numpy as np\nnp.all([True, False])\n</code></pre>","tags":["NPY003"]},{"location":"rules/numpy-deprecated-type-alias/","title":"numpy-deprecated-type-alias (NPY001)","text":"<p>Fix is sometimes available.</p>","tags":["NPY001"]},{"location":"rules/numpy-deprecated-type-alias/#what-it-does","title":"What it does","text":"<p>Checks for deprecated NumPy type aliases.</p>","tags":["NPY001"]},{"location":"rules/numpy-deprecated-type-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>NumPy's <code>np.int</code> has long been an alias of the builtin <code>int</code>; the same is true of <code>np.float</code> and others. These aliases exist primarily for historic reasons, and have been a cause of frequent confusion for newcomers.</p> <p>These aliases were deprecated in 1.20, and removed in 1.24. Note, however, that <code>np.bool</code> and <code>np.long</code> were reintroduced in 2.0 with different semantics, and are thus omitted from this rule.</p>","tags":["NPY001"]},{"location":"rules/numpy-deprecated-type-alias/#examples","title":"Examples","text":"<pre><code>import numpy as np\nnp.int\n</code></pre> <p>Use instead:</p> <pre><code>int\n</code></pre>","tags":["NPY001"]},{"location":"rules/numpy-legacy-random/","title":"numpy-legacy-random (NPY002)","text":"","tags":["NPY002"]},{"location":"rules/numpy-legacy-random/#what-it-does","title":"What it does","text":"<p>Checks for the use of legacy <code>np.random</code> function calls.</p>","tags":["NPY002"]},{"location":"rules/numpy-legacy-random/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to the NumPy documentation's Legacy Random Generation:</p> <p>The <code>RandomState</code> provides access to legacy generators... This class should only be used if it is essential to have randoms that are identical to what would have been produced by previous versions of NumPy.</p> <p>The members exposed directly on the <code>random</code> module are convenience functions that alias to methods on a global singleton <code>RandomState</code> instance. NumPy recommends using a dedicated <code>Generator</code> instance rather than the random variate generation methods exposed directly on the <code>random</code> module, as the new <code>Generator</code> is both faster and has better statistical properties.</p> <p>See the documentation on Random Sampling and NEP 19 for further details.</p>","tags":["NPY002"]},{"location":"rules/numpy-legacy-random/#examples","title":"Examples","text":"<pre><code>import numpy as np\nnp.random.seed(1337)\nnp.random.normal()\n</code></pre> <p>Use instead:</p> <pre><code>rng = np.random.default_rng(1337)\nrng.normal()\n</code></pre>","tags":["NPY002"]},{"location":"rules/numpy2-deprecation/","title":"numpy2-deprecation (NPY201)","text":"<p>Fix is sometimes available.</p>","tags":["NPY201"]},{"location":"rules/numpy2-deprecation/#what-it-does","title":"What it does","text":"<p>Checks for uses of NumPy functions and constants that were removed from the main namespace in NumPy 2.0.</p>","tags":["NPY201"]},{"location":"rules/numpy2-deprecation/#why-is-this-bad","title":"Why is this bad?","text":"<p>NumPy 2.0 includes an overhaul of NumPy's Python API, intended to remove redundant aliases and routines, and establish unambiguous mechanisms for accessing constants, dtypes, and functions.</p> <p>As part of this overhaul, a variety of deprecated NumPy functions and constants were removed from the main namespace.</p> <p>The majority of these functions and constants can be automatically replaced by other members of the NumPy API or by equivalents from the Python standard library. With the exception of renaming <code>numpy.byte_bounds</code> to <code>numpy.lib.array_utils.byte_bounds</code>, all such replacements are backwards compatible with earlier versions of NumPy.</p> <p>This rule flags all uses of removed members, along with automatic fixes for any backwards-compatible replacements.</p>","tags":["NPY201"]},{"location":"rules/numpy2-deprecation/#examples","title":"Examples","text":"<pre><code>import numpy as np\narr1 = [np.Infinity, np.NaN, np.nan, np.PINF, np.inf]\narr2 = [np.float_(1.5), np.float64(5.1)]\nnp.round_(arr2)\n</code></pre> <p>Use instead:</p> <pre><code>import numpy as np\narr1 = [np.inf, np.nan, np.nan, np.inf, np.inf]\narr2 = [np.float64(1.5), np.float64(5.1)]\nnp.round(arr2)\n</code></pre>","tags":["NPY201"]},{"location":"rules/one-blank-line-after-class/","title":"one-blank-line-after-class (D204)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D204"]},{"location":"rules/one-blank-line-after-class/#what-it-does","title":"What it does","text":"<p>Checks for class methods that are not separated from the class's docstring by a blank line.</p>","tags":["D204"]},{"location":"rules/one-blank-line-after-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends the use of a blank line to separate a class's docstring from its methods.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is enabled when using the <code>numpy</code> and <code>pep257</code> conventions, and disabled when using the <code>google</code> convention.</p>","tags":["D204"]},{"location":"rules/one-blank-line-after-class/#example","title":"Example","text":"<pre><code>class PhotoMetadata:\n\"\"\"Metadata about a photo.\"\"\"\ndef __init__(self, file: Path):\n...\n</code></pre> <p>Use instead:</p> <pre><code>class PhotoMetadata:\n\"\"\"Metadata about a photo.\"\"\"\ndef __init__(self, file: Path):\n...\n</code></pre>","tags":["D204"]},{"location":"rules/one-blank-line-after-class/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D204"]},{"location":"rules/one-blank-line-after-class/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D204"]},{"location":"rules/one-blank-line-before-class/","title":"one-blank-line-before-class (D203)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D203"]},{"location":"rules/one-blank-line-before-class/#what-it-does","title":"What it does","text":"<p>Checks for docstrings on class definitions that are not preceded by a blank line.</p>","tags":["D203"]},{"location":"rules/one-blank-line-before-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>Use a blank line to separate the docstring from the class definition, for consistency.</p> <p>This rule may not apply to all projects; its applicability is a matter of convention. By default, this rule is disabled when using the <code>google</code>, <code>numpy</code>, and <code>pep257</code> conventions.</p> <p>For an alternative, see D211.</p>","tags":["D203"]},{"location":"rules/one-blank-line-before-class/#example","title":"Example","text":"<pre><code>class PhotoMetadata:\n\"\"\"Metadata about a photo.\"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>class PhotoMetadata:\n\"\"\"Metadata about a photo.\"\"\"\n</code></pre>","tags":["D203"]},{"location":"rules/one-blank-line-before-class/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D203"]},{"location":"rules/open-alias/","title":"open-alias (UP020)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP020"]},{"location":"rules/open-alias/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>io.open</code>.</p>","tags":["UP020"]},{"location":"rules/open-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 3, <code>io.open</code> is an alias for <code>open</code>. Prefer using <code>open</code> directly, as it is more idiomatic.</p>","tags":["UP020"]},{"location":"rules/open-alias/#example","title":"Example","text":"<pre><code>import io\nwith io.open(\"file.txt\") as f:\n...\n</code></pre> <p>Use instead:</p> <pre><code>with open(\"file.txt\") as f:\n...\n</code></pre>","tags":["UP020"]},{"location":"rules/open-alias/#references","title":"References","text":"<ul> <li>Python documentation: <code>io.open</code></li> </ul>","tags":["UP020"]},{"location":"rules/open-file-with-context-handler/","title":"open-file-with-context-handler (SIM115)","text":"<p>Derived from the flake8-simplify linter.</p>","tags":["SIM115"]},{"location":"rules/open-file-with-context-handler/#what-it-does","title":"What it does","text":"<p>Checks for cases where files are opened (e.g., using the builtin <code>open()</code> function) without using a context manager.</p>","tags":["SIM115"]},{"location":"rules/open-file-with-context-handler/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a file is opened without a context manager, it is not guaranteed that the file will be closed (e.g., if an exception is raised), which can cause resource leaks. The rule detects a wide array of IO calls where context managers could be used, such as <code>open</code>, <code>pathlib.Path(...).open()</code>, <code>tempfile.TemporaryFile()</code> or<code>tarfile.TarFile(...).gzopen()</code>.</p>","tags":["SIM115"]},{"location":"rules/open-file-with-context-handler/#example","title":"Example","text":"<pre><code>file = open(\"foo.txt\")\n...\nfile.close()\n</code></pre> <p>Use instead:</p> <pre><code>with open(\"foo.txt\") as file:\n...\n</code></pre>","tags":["SIM115"]},{"location":"rules/open-file-with-context-handler/#references","title":"References","text":"<ul> <li>Python documentation: <code>open</code></li> </ul>","tags":["SIM115"]},{"location":"rules/os-chmod/","title":"os-chmod (PTH101)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH101"]},{"location":"rules/os-chmod/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.chmod</code>.</p>","tags":["PTH101"]},{"location":"rules/os-chmod/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.chmod()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.chmod()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH101"]},{"location":"rules/os-chmod/#examples","title":"Examples","text":"<pre><code>import os\nos.chmod(\"file.py\", 0o444)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"file.py\").chmod(0o444)\n</code></pre>","tags":["PTH101"]},{"location":"rules/os-chmod/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.chmod</code></li> <li>Python documentation: <code>os.chmod</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH101"]},{"location":"rules/os-error-alias/","title":"os-error-alias (UP024)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP024"]},{"location":"rules/os-error-alias/#what-it-does","title":"What it does","text":"<p>Checks for uses of exceptions that alias <code>OSError</code>.</p>","tags":["UP024"]},{"location":"rules/os-error-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>OSError</code> is the builtin error type used for exceptions that relate to the operating system.</p> <p>In Python 3.3, a variety of other exceptions, like <code>WindowsError</code> were aliased to <code>OSError</code>. These aliases remain in place for compatibility with older versions of Python, but may be removed in future versions.</p> <p>Prefer using <code>OSError</code> directly, as it is more idiomatic and future-proof.</p>","tags":["UP024"]},{"location":"rules/os-error-alias/#example","title":"Example","text":"<pre><code>raise IOError\n</code></pre> <p>Use instead:</p> <pre><code>raise OSError\n</code></pre>","tags":["UP024"]},{"location":"rules/os-error-alias/#references","title":"References","text":"<ul> <li>Python documentation: <code>OSError</code></li> </ul>","tags":["UP024"]},{"location":"rules/os-getcwd/","title":"os-getcwd (PTH109)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH109"]},{"location":"rules/os-getcwd/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.getcwd</code> and <code>os.getcwdb</code>.</p>","tags":["PTH109"]},{"location":"rules/os-getcwd/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.cwd()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.getcwd()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH109"]},{"location":"rules/os-getcwd/#examples","title":"Examples","text":"<pre><code>import os\ncwd = os.getcwd()\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\ncwd = Path.cwd()\n</code></pre>","tags":["PTH109"]},{"location":"rules/os-getcwd/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.cwd</code></li> <li>Python documentation: <code>os.getcwd</code></li> <li>Python documentation: <code>os.getcwdb</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH109"]},{"location":"rules/os-makedirs/","title":"os-makedirs (PTH103)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH103"]},{"location":"rules/os-makedirs/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.makedirs</code>.</p>","tags":["PTH103"]},{"location":"rules/os-makedirs/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.mkdir(parents=True)</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.makedirs()</code>.</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH103"]},{"location":"rules/os-makedirs/#examples","title":"Examples","text":"<pre><code>import os\nos.makedirs(\"./nested/directory/\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"./nested/directory/\").mkdir(parents=True)\n</code></pre>","tags":["PTH103"]},{"location":"rules/os-makedirs/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.mkdir</code></li> <li>Python documentation: <code>os.makedirs</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH103"]},{"location":"rules/os-mkdir/","title":"os-mkdir (PTH102)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH102"]},{"location":"rules/os-mkdir/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.mkdir</code>.</p>","tags":["PTH102"]},{"location":"rules/os-mkdir/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.mkdir()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.mkdir()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH102"]},{"location":"rules/os-mkdir/#examples","title":"Examples","text":"<pre><code>import os\nos.mkdir(\"./directory/\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"./directory/\").mkdir()\n</code></pre>","tags":["PTH102"]},{"location":"rules/os-mkdir/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.mkdir</code></li> <li>Python documentation: <code>os.mkdir</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH102"]},{"location":"rules/os-path-abspath/","title":"os-path-abspath (PTH100)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH100"]},{"location":"rules/os-path-abspath/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.abspath</code>.</p>","tags":["PTH100"]},{"location":"rules/os-path-abspath/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.resolve()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.abspath()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH100"]},{"location":"rules/os-path-abspath/#examples","title":"Examples","text":"<pre><code>import os\nfile_path = os.path.abspath(\"../path/to/file\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nfile_path = Path(\"../path/to/file\").resolve()\n</code></pre>","tags":["PTH100"]},{"location":"rules/os-path-abspath/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.resolve</code></li> <li>Python documentation: <code>os.path.abspath</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH100"]},{"location":"rules/os-path-basename/","title":"os-path-basename (PTH119)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH119"]},{"location":"rules/os-path-basename/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.basename</code>.</p>","tags":["PTH119"]},{"location":"rules/os-path-basename/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.name</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.basename()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH119"]},{"location":"rules/os-path-basename/#examples","title":"Examples","text":"<pre><code>import os\nos.path.basename(__file__)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(__file__).name\n</code></pre>","tags":["PTH119"]},{"location":"rules/os-path-basename/#references","title":"References","text":"<ul> <li>Python documentation: <code>PurePath.name</code></li> <li>Python documentation: <code>os.path.basename</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH119"]},{"location":"rules/os-path-dirname/","title":"os-path-dirname (PTH120)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH120"]},{"location":"rules/os-path-dirname/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.dirname</code>.</p>","tags":["PTH120"]},{"location":"rules/os-path-dirname/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.parent</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.dirname()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH120"]},{"location":"rules/os-path-dirname/#examples","title":"Examples","text":"<pre><code>import os\nos.path.dirname(__file__)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(__file__).parent\n</code></pre>","tags":["PTH120"]},{"location":"rules/os-path-dirname/#references","title":"References","text":"<ul> <li>Python documentation: <code>PurePath.parent</code></li> <li>Python documentation: <code>os.path.dirname</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH120"]},{"location":"rules/os-path-exists/","title":"os-path-exists (PTH110)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH110"]},{"location":"rules/os-path-exists/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.exists</code>.</p>","tags":["PTH110"]},{"location":"rules/os-path-exists/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.exists()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.exists()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH110"]},{"location":"rules/os-path-exists/#examples","title":"Examples","text":"<pre><code>import os\nos.path.exists(\"file.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"file.py\").exists()\n</code></pre>","tags":["PTH110"]},{"location":"rules/os-path-exists/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.exists</code></li> <li>Python documentation: <code>os.path.exists</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH110"]},{"location":"rules/os-path-expanduser/","title":"os-path-expanduser (PTH111)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH111"]},{"location":"rules/os-path-expanduser/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.expanduser</code>.</p>","tags":["PTH111"]},{"location":"rules/os-path-expanduser/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.expanduser()</code> can improve readability over the <code>os</code> module's counterparts (e.g., as <code>os.path.expanduser()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH111"]},{"location":"rules/os-path-expanduser/#examples","title":"Examples","text":"<pre><code>import os\nos.path.expanduser(\"~/films/Monty Python\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"~/films/Monty Python\").expanduser()\n</code></pre>","tags":["PTH111"]},{"location":"rules/os-path-expanduser/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.expanduser</code></li> <li>Python documentation: <code>os.path.expanduser</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH111"]},{"location":"rules/os-path-getatime/","title":"os-path-getatime (PTH203)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH203"]},{"location":"rules/os-path-getatime/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.getatime</code>.</p>","tags":["PTH203"]},{"location":"rules/os-path-getatime/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>.</p> <p>When possible, using <code>Path</code> object methods such as <code>Path.stat()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.getatime()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH203"]},{"location":"rules/os-path-getatime/#examples","title":"Examples","text":"<pre><code>import os\nos.path.getatime(__file__)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(__file__).stat().st_atime\n</code></pre>","tags":["PTH203"]},{"location":"rules/os-path-getatime/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.stat</code></li> <li>Python documentation: <code>os.path.getatime</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH203"]},{"location":"rules/os-path-getctime/","title":"os-path-getctime (PTH205)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH205"]},{"location":"rules/os-path-getctime/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.getctime</code>.</p>","tags":["PTH205"]},{"location":"rules/os-path-getctime/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>.</p> <p>When possible, using <code>Path</code> object methods such as <code>Path.stat()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.getctime()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH205"]},{"location":"rules/os-path-getctime/#examples","title":"Examples","text":"<pre><code>import os\nos.path.getctime(__file__)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(__file__).stat().st_ctime\n</code></pre>","tags":["PTH205"]},{"location":"rules/os-path-getctime/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.stat</code></li> <li>Python documentation: <code>os.path.getctime</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH205"]},{"location":"rules/os-path-getmtime/","title":"os-path-getmtime (PTH204)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH204"]},{"location":"rules/os-path-getmtime/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.getmtime</code>.</p>","tags":["PTH204"]},{"location":"rules/os-path-getmtime/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>.</p> <p>When possible, using <code>Path</code> object methods such as <code>Path.stat()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.getmtime()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH204"]},{"location":"rules/os-path-getmtime/#examples","title":"Examples","text":"<pre><code>import os\nos.path.getmtime(__file__)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(__file__).stat().st_mtime\n</code></pre>","tags":["PTH204"]},{"location":"rules/os-path-getmtime/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.stat</code></li> <li>Python documentation: <code>os.path.getmtime</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH204"]},{"location":"rules/os-path-getsize/","title":"os-path-getsize (PTH202)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH202"]},{"location":"rules/os-path-getsize/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.getsize</code>.</p>","tags":["PTH202"]},{"location":"rules/os-path-getsize/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>.</p> <p>When possible, using <code>Path</code> object methods such as <code>Path.stat()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.getsize()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH202"]},{"location":"rules/os-path-getsize/#examples","title":"Examples","text":"<pre><code>import os\nos.path.getsize(__file__)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(__file__).stat().st_size\n</code></pre>","tags":["PTH202"]},{"location":"rules/os-path-getsize/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.stat</code></li> <li>Python documentation: <code>os.path.getsize</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH202"]},{"location":"rules/os-path-isabs/","title":"os-path-isabs (PTH117)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH117"]},{"location":"rules/os-path-isabs/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.isabs</code>.</p>","tags":["PTH117"]},{"location":"rules/os-path-isabs/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.is_absolute()</code> can improve readability over the <code>os</code> module's counterparts (e.g.,  as <code>os.path.isabs()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH117"]},{"location":"rules/os-path-isabs/#examples","title":"Examples","text":"<pre><code>import os\nif os.path.isabs(file_name):\nprint(\"Absolute path!\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nif Path(file_name).is_absolute():\nprint(\"Absolute path!\")\n</code></pre>","tags":["PTH117"]},{"location":"rules/os-path-isabs/#references","title":"References","text":"<ul> <li>Python documentation: <code>PurePath.is_absolute</code></li> <li>Python documentation: <code>os.path.isabs</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH117"]},{"location":"rules/os-path-isdir/","title":"os-path-isdir (PTH112)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH112"]},{"location":"rules/os-path-isdir/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.isdir</code>.</p>","tags":["PTH112"]},{"location":"rules/os-path-isdir/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.is_dir()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.isdir()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH112"]},{"location":"rules/os-path-isdir/#examples","title":"Examples","text":"<pre><code>import os\nos.path.isdir(\"docs\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"docs\").is_dir()\n</code></pre>","tags":["PTH112"]},{"location":"rules/os-path-isdir/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.is_dir</code></li> <li>Python documentation: <code>os.path.isdir</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH112"]},{"location":"rules/os-path-isfile/","title":"os-path-isfile (PTH113)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH113"]},{"location":"rules/os-path-isfile/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.isfile</code>.</p>","tags":["PTH113"]},{"location":"rules/os-path-isfile/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.is_file()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.isfile()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH113"]},{"location":"rules/os-path-isfile/#examples","title":"Examples","text":"<pre><code>import os\nos.path.isfile(\"docs\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"docs\").is_file()\n</code></pre>","tags":["PTH113"]},{"location":"rules/os-path-isfile/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.is_file</code></li> <li>Python documentation: <code>os.path.isfile</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH113"]},{"location":"rules/os-path-islink/","title":"os-path-islink (PTH114)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH114"]},{"location":"rules/os-path-islink/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.islink</code>.</p>","tags":["PTH114"]},{"location":"rules/os-path-islink/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.is_symlink()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.islink()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH114"]},{"location":"rules/os-path-islink/#examples","title":"Examples","text":"<pre><code>import os\nos.path.islink(\"docs\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"docs\").is_symlink()\n</code></pre>","tags":["PTH114"]},{"location":"rules/os-path-islink/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.is_symlink</code></li> <li>Python documentation: <code>os.path.islink</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH114"]},{"location":"rules/os-path-join/","title":"os-path-join (PTH118)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH118"]},{"location":"rules/os-path-join/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.join</code>.</p>","tags":["PTH118"]},{"location":"rules/os-path-join/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.joinpath()</code> or the <code>/</code> operator can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.join()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH118"]},{"location":"rules/os-path-join/#examples","title":"Examples","text":"<pre><code>import os\nos.path.join(os.path.join(ROOT_PATH, \"folder\"), \"file.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(ROOT_PATH) / \"folder\" / \"file.py\"\n</code></pre>","tags":["PTH118"]},{"location":"rules/os-path-join/#references","title":"References","text":"<ul> <li>Python documentation: <code>PurePath.joinpath</code></li> <li>Python documentation: <code>os.path.join</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH118"]},{"location":"rules/os-path-samefile/","title":"os-path-samefile (PTH121)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH121"]},{"location":"rules/os-path-samefile/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.samefile</code>.</p>","tags":["PTH121"]},{"location":"rules/os-path-samefile/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.samefile()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.samefile()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH121"]},{"location":"rules/os-path-samefile/#examples","title":"Examples","text":"<pre><code>import os\nos.path.samefile(\"f1.py\", \"f2.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"f1.py\").samefile(\"f2.py\")\n</code></pre>","tags":["PTH121"]},{"location":"rules/os-path-samefile/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.samefile</code></li> <li>Python documentation: <code>os.path.samefile</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH121"]},{"location":"rules/os-path-splitext/","title":"os-path-splitext (PTH122)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH122"]},{"location":"rules/os-path-splitext/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.path.splitext</code>.</p>","tags":["PTH122"]},{"location":"rules/os-path-splitext/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.suffix</code> and <code>Path.stem</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.splitext()</code>).</p> <p><code>os.path.splitext()</code> specifically returns a tuple of the file root and extension (e.g., given <code>splitext('/foo/bar.py')</code>, <code>os.path.splitext()</code> returns <code>(\"foo/bar\", \".py\")</code>. These outputs can be reconstructed through a combination of <code>Path.suffix</code> (<code>\".py\"</code>), <code>Path.stem</code> (<code>\"bar\"</code>), and <code>Path.parent</code> (<code>\"foo\"</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH122"]},{"location":"rules/os-path-splitext/#examples","title":"Examples","text":"<pre><code>import os\n(root, ext) = os.path.splitext(\"foo/bar.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\npath = Path(\"foo/bar.py\")\nroot = path.parent / path.stem\next = path.suffix\n</code></pre>","tags":["PTH122"]},{"location":"rules/os-path-splitext/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.suffix</code></li> <li>Python documentation: <code>Path.suffixes</code></li> <li>Python documentation: <code>os.path.splitext</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH122"]},{"location":"rules/os-readlink/","title":"os-readlink (PTH115)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH115"]},{"location":"rules/os-readlink/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.readlink</code>.</p>","tags":["PTH115"]},{"location":"rules/os-readlink/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.readlink()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.readlink()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH115"]},{"location":"rules/os-readlink/#examples","title":"Examples","text":"<pre><code>import os\nos.readlink(file_name)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(file_name).readlink()\n</code></pre>","tags":["PTH115"]},{"location":"rules/os-readlink/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.readlink</code></li> <li>Python documentation: <code>os.readlink</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH115"]},{"location":"rules/os-remove/","title":"os-remove (PTH107)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH107"]},{"location":"rules/os-remove/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.remove</code>.</p>","tags":["PTH107"]},{"location":"rules/os-remove/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.unlink()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.remove()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH107"]},{"location":"rules/os-remove/#examples","title":"Examples","text":"<pre><code>import os\nos.remove(\"file.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"file.py\").unlink()\n</code></pre>","tags":["PTH107"]},{"location":"rules/os-remove/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.unlink</code></li> <li>Python documentation: <code>os.remove</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH107"]},{"location":"rules/os-rename/","title":"os-rename (PTH104)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH104"]},{"location":"rules/os-rename/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.rename</code>.</p>","tags":["PTH104"]},{"location":"rules/os-rename/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.rename()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.rename()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH104"]},{"location":"rules/os-rename/#examples","title":"Examples","text":"<pre><code>import os\nos.rename(\"old.py\", \"new.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"old.py\").rename(\"new.py\")\n</code></pre>","tags":["PTH104"]},{"location":"rules/os-rename/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.rename</code></li> <li>Python documentation: <code>os.rename</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH104"]},{"location":"rules/os-replace/","title":"os-replace (PTH105)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH105"]},{"location":"rules/os-replace/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.replace</code>.</p>","tags":["PTH105"]},{"location":"rules/os-replace/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.replace()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.replace()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH105"]},{"location":"rules/os-replace/#examples","title":"Examples","text":"<pre><code>import os\nos.replace(\"old.py\", \"new.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"old.py\").replace(\"new.py\")\n</code></pre>","tags":["PTH105"]},{"location":"rules/os-replace/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.replace</code></li> <li>Python documentation: <code>os.replace</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH105"]},{"location":"rules/os-rmdir/","title":"os-rmdir (PTH106)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH106"]},{"location":"rules/os-rmdir/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.rmdir</code>.</p>","tags":["PTH106"]},{"location":"rules/os-rmdir/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.rmdir()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.rmdir()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH106"]},{"location":"rules/os-rmdir/#examples","title":"Examples","text":"<pre><code>import os\nos.rmdir(\"folder/\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"folder/\").rmdir()\n</code></pre>","tags":["PTH106"]},{"location":"rules/os-rmdir/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.rmdir</code></li> <li>Python documentation: <code>os.rmdir</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH106"]},{"location":"rules/os-sep-split/","title":"os-sep-split (PTH206)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH206"]},{"location":"rules/os-sep-split/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.split(os.sep)</code></p>","tags":["PTH206"]},{"location":"rules/os-sep-split/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>pathlib</code> module in the standard library should be used for path manipulation. It provides a high-level API with the functionality needed for common operations on <code>Path</code> objects.</p>","tags":["PTH206"]},{"location":"rules/os-sep-split/#example","title":"Example","text":"<p>If not all parts of the path are needed, then the <code>name</code> and <code>parent</code> attributes of the <code>Path</code> object should be used. Otherwise, the <code>parts</code> attribute can be used as shown in the last example.</p> <pre><code>import os\n\"path/to/file_name.txt\".split(os.sep)[-1]\n\"path/to/file_name.txt\".split(os.sep)[-2]\n# Iterating over the path parts\nif any(part in blocklist for part in \"my/file/path\".split(os.sep)):\n...\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"path/to/file_name.txt\").name\nPath(\"path/to/file_name.txt\").parent.name\n# Iterating over the path parts\nif any(part in blocklist for part in Path(\"my/file/path\").parts):\n...\n</code></pre>","tags":["PTH206"]},{"location":"rules/os-stat/","title":"os-stat (PTH116)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH116"]},{"location":"rules/os-stat/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.stat</code>.</p>","tags":["PTH116"]},{"location":"rules/os-stat/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.stat()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.path.stat()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH116"]},{"location":"rules/os-stat/#examples","title":"Examples","text":"<pre><code>import os\nfrom pwd import getpwuid\nfrom grp import getgrgid\nstat = os.stat(file_name)\nowner_name = getpwuid(stat.st_uid).pw_name\ngroup_name = getgrgid(stat.st_gid).gr_name\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nfile_path = Path(file_name)\nstat = file_path.stat()\nowner_name = file_path.owner()\ngroup_name = file_path.group()\n</code></pre>","tags":["PTH116"]},{"location":"rules/os-stat/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.stat</code></li> <li>Python documentation: <code>Path.group</code></li> <li>Python documentation: <code>Path.owner</code></li> <li>Python documentation: <code>os.stat</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH116"]},{"location":"rules/os-unlink/","title":"os-unlink (PTH108)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH108"]},{"location":"rules/os-unlink/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>os.unlink</code>.</p>","tags":["PTH108"]},{"location":"rules/os-unlink/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pathlib</code> offers a high-level API for path manipulation, as compared to the lower-level API offered by <code>os</code>. When possible, using <code>Path</code> object methods such as <code>Path.unlink()</code> can improve readability over the <code>os</code> module's counterparts (e.g., <code>os.unlink()</code>).</p> <p>Note that <code>os</code> functions may be preferable if performance is a concern, e.g., in hot loops.</p>","tags":["PTH108"]},{"location":"rules/os-unlink/#examples","title":"Examples","text":"<pre><code>import os\nos.unlink(\"file.py\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(\"file.py\").unlink()\n</code></pre>","tags":["PTH108"]},{"location":"rules/os-unlink/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.unlink</code></li> <li>Python documentation: <code>os.unlink</code></li> <li>PEP 428 \u2013 The pathlib module \u2013 object-oriented filesystem paths</li> <li>Correspondence between <code>os</code> and <code>pathlib</code></li> <li>Why you should be using pathlib</li> <li>No really, pathlib is great</li> </ul>","tags":["PTH108"]},{"location":"rules/outdated-version-block/","title":"outdated-version-block (UP036)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP036"]},{"location":"rules/outdated-version-block/#what-it-does","title":"What it does","text":"<p>Checks for conditional blocks gated on <code>sys.version_info</code> comparisons that are outdated for the minimum supported Python version.</p>","tags":["UP036"]},{"location":"rules/outdated-version-block/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, code can be conditionally executed based on the active Python version by comparing against the <code>sys.version_info</code> tuple.</p> <p>If a code block is only executed for Python versions older than the minimum supported version, it should be removed.</p>","tags":["UP036"]},{"location":"rules/outdated-version-block/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info &lt; (3, 0):\nprint(\"py2\")\nelse:\nprint(\"py3\")\n</code></pre> <p>Use instead:</p> <pre><code>print(\"py3\")\n</code></pre>","tags":["UP036"]},{"location":"rules/outdated-version-block/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["UP036"]},{"location":"rules/outdated-version-block/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["UP036"]},{"location":"rules/over-indentation/","title":"over-indentation (D208)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D208"]},{"location":"rules/over-indentation/#what-it-does","title":"What it does","text":"<p>Checks for over-indented docstrings.</p>","tags":["D208"]},{"location":"rules/over-indentation/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that docstrings be indented to the same level as their opening quotes. Avoid over-indenting docstrings, for consistency.</p>","tags":["D208"]},{"location":"rules/over-indentation/#example","title":"Example","text":"<pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n        Sort the list in ascending order and return a copy of the result using the\n        bubble sort algorithm.\n    \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the bubble\n    sort algorithm.\n    \"\"\"\n</code></pre>","tags":["D208"]},{"location":"rules/over-indentation/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent indentation, making the rule redundant.</p>","tags":["D208"]},{"location":"rules/over-indentation/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D208"]},{"location":"rules/over-indented/","title":"over-indented (E117)","text":"<p>Derived from the pycodestyle linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E117"]},{"location":"rules/over-indented/#what-it-does","title":"What it does","text":"<p>Checks for over-indented code.</p>","tags":["E117"]},{"location":"rules/over-indented/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, 4 spaces per indentation level should be preferred. Increased indentation can lead to inconsistent formatting, which can hurt readability.</p>","tags":["E117"]},{"location":"rules/over-indented/#example","title":"Example","text":"<pre><code>for item in items:\npass\n</code></pre> <p>Use instead:</p> <pre><code>for item in items:\npass\n</code></pre>","tags":["E117"]},{"location":"rules/over-indented/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent indentation, making the rule redundant.</p>","tags":["E117"]},{"location":"rules/overload-with-docstring/","title":"overload-with-docstring (D418)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D418"]},{"location":"rules/overload-with-docstring/#what-it-does","title":"What it does","text":"<p>Checks for <code>@overload</code> function definitions that contain a docstring.</p>","tags":["D418"]},{"location":"rules/overload-with-docstring/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>@overload</code> decorator is used to define multiple compatible signatures for a given function, to support type-checking. A series of <code>@overload</code> definitions should be followed by a single non-decorated definition that contains the implementation of the function.</p> <p><code>@overload</code> function definitions should not contain a docstring; instead, the docstring should be placed on the non-decorated definition that contains the implementation.</p>","tags":["D418"]},{"location":"rules/overload-with-docstring/#example","title":"Example","text":"<pre><code>from typing import overload\n@overload\ndef factorial(n: int) -&gt; int:\n\"\"\"Return the factorial of n.\"\"\"\n@overload\ndef factorial(n: float) -&gt; float:\n\"\"\"Return the factorial of n.\"\"\"\ndef factorial(n):\n\"\"\"Return the factorial of n.\"\"\"\nfactorial.__doc__  # \"Return the factorial of n.\"\n</code></pre> <p>Use instead:</p> <pre><code>from typing import overload\n@overload\ndef factorial(n: int) -&gt; int: ...\n@overload\ndef factorial(n: float) -&gt; float: ...\ndef factorial(n):\n\"\"\"Return the factorial of n.\"\"\"\nfactorial.__doc__  # \"Return the factorial of n.\"\n</code></pre>","tags":["D418"]},{"location":"rules/overload-with-docstring/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>Python documentation: <code>typing.overload</code></li> </ul>","tags":["D418"]},{"location":"rules/p-print/","title":"p-print (T203)","text":"<p>Derived from the flake8-print linter.</p> <p>Fix is sometimes available.</p>","tags":["T203"]},{"location":"rules/p-print/#what-it-does","title":"What it does","text":"<p>Checks for <code>pprint</code> statements.</p>","tags":["T203"]},{"location":"rules/p-print/#why-is-this-bad","title":"Why is this bad?","text":"<p>Like <code>print</code> statements, <code>pprint</code> statements are useful in some situations (e.g., debugging), but should typically be omitted from production code. <code>pprint</code> statements can lead to the accidental inclusion of sensitive information in logs, and are not configurable by clients, unlike <code>logging</code> statements.</p>","tags":["T203"]},{"location":"rules/p-print/#example","title":"Example","text":"<pre><code>import pprint\ndef merge_dicts(dict_a, dict_b):\ndict_c = {**dict_a, **dict_b}\npprint.pprint(dict_c)\nreturn dict_c\n</code></pre> <p>Use instead:</p> <pre><code>def merge_dicts(dict_a, dict_b):\ndict_c = {**dict_a, **dict_b}\nreturn dict_c\n</code></pre>","tags":["T203"]},{"location":"rules/p-print/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may remove <code>pprint</code> statements that are used beyond debugging purposes.</p>","tags":["T203"]},{"location":"rules/pandas-df-variable-name/","title":"pandas-df-variable-name (PD901)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD901"]},{"location":"rules/pandas-df-variable-name/#what-it-does","title":"What it does","text":"<p>Checks for assignments to the variable <code>df</code>.</p>","tags":["PD901"]},{"location":"rules/pandas-df-variable-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>Although <code>df</code> is a common variable name for a Pandas DataFrame, it's not a great variable name for production code, as it's non-descriptive and prone to name conflicts.</p> <p>Instead, use a more descriptive variable name.</p>","tags":["PD901"]},{"location":"rules/pandas-df-variable-name/#example","title":"Example","text":"<pre><code>import pandas as pd\ndf = pd.read_csv(\"animals.csv\")\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\nanimals = pd.read_csv(\"animals.csv\")\n</code></pre>","tags":["PD901"]},{"location":"rules/pandas-nunique-constant-series-check/","title":"pandas-nunique-constant-series-check (PD101)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD101"]},{"location":"rules/pandas-nunique-constant-series-check/#what-it-does","title":"What it does","text":"<p>Check for uses of <code>.nunique()</code> to check if a Pandas Series is constant (i.e., contains only one unique value).</p>","tags":["PD101"]},{"location":"rules/pandas-nunique-constant-series-check/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>.nunique()</code> is computationally inefficient for checking if a Series is constant.</p> <p>Consider, for example, a Series of length <code>n</code> that consists of increasing integer values (e.g., 1, 2, 3, 4). The <code>.nunique()</code> method will iterate over the entire Series to count the number of unique values. But in this case, we can detect that the Series is non-constant after visiting the first two values, which are non-equal.</p> <p>In general, <code>.nunique()</code> requires iterating over the entire Series, while a more efficient approach allows short-circuiting the operation as soon as a non-equal value is found.</p> <p>Instead of calling <code>.nunique()</code>, convert the Series to a NumPy array, and check if all values in the array are equal to the first observed value.</p>","tags":["PD101"]},{"location":"rules/pandas-nunique-constant-series-check/#example","title":"Example","text":"<pre><code>import pandas as pd\ndata = pd.Series(range(1000))\nif data.nunique() &lt;= 1:\nprint(\"Series is constant\")\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\ndata = pd.Series(range(1000))\narray = data.to_numpy()\nif array.shape[0] == 0 or (array[0] == array).all():\nprint(\"Series is constant\")\n</code></pre>","tags":["PD101"]},{"location":"rules/pandas-nunique-constant-series-check/#references","title":"References","text":"<ul> <li>Pandas Cookbook: \"Constant Series\"</li> <li>Pandas documentation: <code>nunique</code></li> </ul>","tags":["PD101"]},{"location":"rules/pandas-use-of-dot-at/","title":"pandas-use-of-dot-at (PD008)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD008"]},{"location":"rules/pandas-use-of-dot-at/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.at</code> on Pandas objects.</p>","tags":["PD008"]},{"location":"rules/pandas-use-of-dot-at/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>.at</code> method selects a single value from a DataFrame or Series based on a label index, and is slightly faster than using <code>.loc</code>. However, <code>.loc</code> is more idiomatic and versatile, as it can be used to select multiple values at once.</p> <p>If performance is an important consideration, convert the object to a NumPy array, which will provide a much greater performance boost than using <code>.at</code> over <code>.loc</code>.</p>","tags":["PD008"]},{"location":"rules/pandas-use-of-dot-at/#example","title":"Example","text":"<pre><code>import pandas as pd\nstudents_df = pd.read_csv(\"students.csv\")\nstudents_df.at[\"Maria\"]\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\nstudents_df = pd.read_csv(\"students.csv\")\nstudents_df.loc[\"Maria\"]\n</code></pre>","tags":["PD008"]},{"location":"rules/pandas-use-of-dot-at/#references","title":"References","text":"<ul> <li>Pandas documentation: <code>loc</code></li> <li>Pandas documentation: <code>at</code></li> </ul>","tags":["PD008"]},{"location":"rules/pandas-use-of-dot-iat/","title":"pandas-use-of-dot-iat (PD009)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD009"]},{"location":"rules/pandas-use-of-dot-iat/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.iat</code> on Pandas objects.</p>","tags":["PD009"]},{"location":"rules/pandas-use-of-dot-iat/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>.iat</code> method selects a single value from a DataFrame or Series based on an ordinal index, and is slightly faster than using <code>.iloc</code>. However, <code>.iloc</code> is more idiomatic and versatile, as it can be used to select multiple values at once.</p> <p>If performance is an important consideration, convert the object to a NumPy array, which will provide a much greater performance boost than using <code>.iat</code> over <code>.iloc</code>.</p>","tags":["PD009"]},{"location":"rules/pandas-use-of-dot-iat/#example","title":"Example","text":"<pre><code>import pandas as pd\nstudents_df = pd.read_csv(\"students.csv\")\nstudents_df.iat[0]\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\nstudents_df = pd.read_csv(\"students.csv\")\nstudents_df.iloc[0]\n</code></pre> <p>Or, using NumPy:</p> <pre><code>import numpy as np\nimport pandas as pd\nstudents_df = pd.read_csv(\"students.csv\")\nstudents_df.to_numpy()[0]\n</code></pre>","tags":["PD009"]},{"location":"rules/pandas-use-of-dot-iat/#references","title":"References","text":"<ul> <li>Pandas documentation: <code>iloc</code></li> <li>Pandas documentation: <code>iat</code></li> </ul>","tags":["PD009"]},{"location":"rules/pandas-use-of-dot-is-null/","title":"pandas-use-of-dot-is-null (PD003)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD003"]},{"location":"rules/pandas-use-of-dot-is-null/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.isnull</code> on Pandas objects.</p>","tags":["PD003"]},{"location":"rules/pandas-use-of-dot-is-null/#why-is-this-bad","title":"Why is this bad?","text":"<p>In the Pandas API, <code>.isna</code> and <code>.isnull</code> are equivalent. For consistency, prefer <code>.isna</code> over <code>.isnull</code>.</p> <p>As a name, <code>.isna</code> more accurately reflects the behavior of the method, since these methods check for <code>NaN</code> and <code>NaT</code> values in addition to <code>None</code> values.</p>","tags":["PD003"]},{"location":"rules/pandas-use-of-dot-is-null/#example","title":"Example","text":"<pre><code>import pandas as pd\nanimals_df = pd.read_csv(\"animals.csv\")\npd.isnull(animals_df)\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\nanimals_df = pd.read_csv(\"animals.csv\")\npd.isna(animals_df)\n</code></pre>","tags":["PD003"]},{"location":"rules/pandas-use-of-dot-is-null/#references","title":"References","text":"<ul> <li>Pandas documentation: <code>isnull</code></li> <li>Pandas documentation: <code>isna</code></li> </ul>","tags":["PD003"]},{"location":"rules/pandas-use-of-dot-ix/","title":"pandas-use-of-dot-ix (PD007)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD007"]},{"location":"rules/pandas-use-of-dot-ix/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.ix</code> on Pandas objects.</p>","tags":["PD007"]},{"location":"rules/pandas-use-of-dot-ix/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>.ix</code> method is deprecated as its behavior is ambiguous. Specifically, it's often unclear whether <code>.ix</code> is indexing by label or by ordinal position.</p> <p>Instead, prefer the <code>.loc</code> method for label-based indexing, and <code>.iloc</code> for ordinal indexing.</p>","tags":["PD007"]},{"location":"rules/pandas-use-of-dot-ix/#example","title":"Example","text":"<pre><code>import pandas as pd\nstudents_df = pd.read_csv(\"students.csv\")\nstudents_df.ix[0]  # 0th row or row with label 0?\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\nstudents_df = pd.read_csv(\"students.csv\")\nstudents_df.iloc[0]  # 0th row.\n</code></pre>","tags":["PD007"]},{"location":"rules/pandas-use-of-dot-ix/#references","title":"References","text":"<ul> <li>Pandas release notes: Deprecate <code>.ix</code></li> <li>Pandas documentation: <code>loc</code></li> <li>Pandas documentation: <code>iloc</code></li> </ul>","tags":["PD007"]},{"location":"rules/pandas-use-of-dot-not-null/","title":"pandas-use-of-dot-not-null (PD004)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD004"]},{"location":"rules/pandas-use-of-dot-not-null/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.notnull</code> on Pandas objects.</p>","tags":["PD004"]},{"location":"rules/pandas-use-of-dot-not-null/#why-is-this-bad","title":"Why is this bad?","text":"<p>In the Pandas API, <code>.notna</code> and <code>.notnull</code> are equivalent. For consistency, prefer <code>.notna</code> over <code>.notnull</code>.</p> <p>As a name, <code>.notna</code> more accurately reflects the behavior of the method, since these methods check for <code>NaN</code> and <code>NaT</code> values in addition to <code>None</code> values.</p>","tags":["PD004"]},{"location":"rules/pandas-use-of-dot-not-null/#example","title":"Example","text":"<pre><code>import pandas as pd\nanimals_df = pd.read_csv(\"animals.csv\")\npd.notnull(animals_df)\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\nanimals_df = pd.read_csv(\"animals.csv\")\npd.notna(animals_df)\n</code></pre>","tags":["PD004"]},{"location":"rules/pandas-use-of-dot-not-null/#references","title":"References","text":"<ul> <li>Pandas documentation: <code>notnull</code></li> <li>Pandas documentation: <code>notna</code></li> </ul>","tags":["PD004"]},{"location":"rules/pandas-use-of-dot-pivot-or-unstack/","title":"pandas-use-of-dot-pivot-or-unstack (PD010)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD010"]},{"location":"rules/pandas-use-of-dot-pivot-or-unstack/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.pivot</code> or <code>.unstack</code> on Pandas objects.</p>","tags":["PD010"]},{"location":"rules/pandas-use-of-dot-pivot-or-unstack/#why-is-this-bad","title":"Why is this bad?","text":"<p>Prefer <code>.pivot_table</code> to <code>.pivot</code> or <code>.unstack</code>. <code>.pivot_table</code> is more general and can be used to implement the same behavior as <code>.pivot</code> and <code>.unstack</code>.</p>","tags":["PD010"]},{"location":"rules/pandas-use-of-dot-pivot-or-unstack/#example","title":"Example","text":"<pre><code>import pandas as pd\ndf = pd.read_csv(\"cities.csv\")\ndf.pivot(index=\"city\", columns=\"year\", values=\"population\")\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\ndf = pd.read_csv(\"cities.csv\")\ndf.pivot_table(index=\"city\", columns=\"year\", values=\"population\")\n</code></pre>","tags":["PD010"]},{"location":"rules/pandas-use-of-dot-pivot-or-unstack/#references","title":"References","text":"<ul> <li>Pandas documentation: Reshaping and pivot tables</li> <li>Pandas documentation: <code>pivot_table</code></li> </ul>","tags":["PD010"]},{"location":"rules/pandas-use-of-dot-read-table/","title":"pandas-use-of-dot-read-table (PD012)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD012"]},{"location":"rules/pandas-use-of-dot-read-table/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>pd.read_table</code> to read CSV files.</p>","tags":["PD012"]},{"location":"rules/pandas-use-of-dot-read-table/#why-is-this-bad","title":"Why is this bad?","text":"<p>In the Pandas API, <code>pd.read_csv</code> and <code>pd.read_table</code> are equivalent apart from their default separator: <code>pd.read_csv</code> defaults to a comma (<code>,</code>), while <code>pd.read_table</code> defaults to a tab (<code>\\t</code>) as the default separator.</p> <p>Prefer <code>pd.read_csv</code> over <code>pd.read_table</code> when reading comma-separated data (like CSV files), as it is more idiomatic.</p>","tags":["PD012"]},{"location":"rules/pandas-use-of-dot-read-table/#example","title":"Example","text":"<pre><code>import pandas as pd\ncities_df = pd.read_table(\"cities.csv\", sep=\",\")\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\ncities_df = pd.read_csv(\"cities.csv\")\n</code></pre>","tags":["PD012"]},{"location":"rules/pandas-use-of-dot-read-table/#references","title":"References","text":"<ul> <li>Pandas documentation: <code>read_csv</code></li> <li>Pandas documentation: <code>read_table</code></li> </ul>","tags":["PD012"]},{"location":"rules/pandas-use-of-dot-stack/","title":"pandas-use-of-dot-stack (PD013)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD013"]},{"location":"rules/pandas-use-of-dot-stack/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.stack</code> on Pandas objects.</p>","tags":["PD013"]},{"location":"rules/pandas-use-of-dot-stack/#why-is-this-bad","title":"Why is this bad?","text":"<p>Prefer <code>.melt</code> to <code>.stack</code>, which has the same functionality but with support for direct column renaming and no dependence on <code>MultiIndex</code>.</p>","tags":["PD013"]},{"location":"rules/pandas-use-of-dot-stack/#example","title":"Example","text":"<pre><code>import pandas as pd\ncities_df = pd.read_csv(\"cities.csv\")\ncities_df.set_index(\"city\").stack()\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\ncities_df = pd.read_csv(\"cities.csv\")\ncities_df.melt(id_vars=\"city\")\n</code></pre>","tags":["PD013"]},{"location":"rules/pandas-use-of-dot-stack/#references","title":"References","text":"<ul> <li>Pandas documentation: <code>melt</code></li> <li>Pandas documentation: <code>stack</code></li> </ul>","tags":["PD013"]},{"location":"rules/pandas-use-of-dot-values/","title":"pandas-use-of-dot-values (PD011)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD011"]},{"location":"rules/pandas-use-of-dot-values/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>.values</code> on Pandas Series and Index objects.</p>","tags":["PD011"]},{"location":"rules/pandas-use-of-dot-values/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>.values</code> attribute is ambiguous as its return type is unclear. As such, it is no longer recommended by the Pandas documentation.</p> <p>Instead, use <code>.to_numpy()</code> to return a NumPy array, or <code>.array</code> to return a Pandas <code>ExtensionArray</code>.</p>","tags":["PD011"]},{"location":"rules/pandas-use-of-dot-values/#example","title":"Example","text":"<pre><code>import pandas as pd\nanimals = pd.read_csv(\"animals.csv\").values  # Ambiguous.\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\nanimals = pd.read_csv(\"animals.csv\").to_numpy()  # Explicit.\n</code></pre>","tags":["PD011"]},{"location":"rules/pandas-use-of-dot-values/#references","title":"References","text":"<ul> <li>Pandas documentation: Accessing the values in a Series or Index</li> </ul>","tags":["PD011"]},{"location":"rules/pandas-use-of-inplace-argument/","title":"pandas-use-of-inplace-argument (PD002)","text":"<p>Derived from the pandas-vet linter.</p> <p>Fix is sometimes available.</p>","tags":["PD002"]},{"location":"rules/pandas-use-of-inplace-argument/#what-it-does","title":"What it does","text":"<p>Checks for <code>inplace=True</code> usages in <code>pandas</code> function and method calls.</p>","tags":["PD002"]},{"location":"rules/pandas-use-of-inplace-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>inplace=True</code> encourages mutation rather than immutable data, which is harder to reason about and may cause bugs. It also removes the ability to use the method chaining style for <code>pandas</code> operations.</p> <p>Further, in many cases, <code>inplace=True</code> does not provide a performance benefit, as <code>pandas</code> will often copy <code>DataFrames</code> in the background.</p>","tags":["PD002"]},{"location":"rules/pandas-use-of-inplace-argument/#example","title":"Example","text":"<pre><code>df.sort_values(\"col1\", inplace=True)\n</code></pre> <p>Use instead:</p> <pre><code>sorted_df = df.sort_values(\"col1\")\n</code></pre>","tags":["PD002"]},{"location":"rules/pandas-use-of-inplace-argument/#references","title":"References","text":"<ul> <li>Why You Should Probably Never Use pandas <code>inplace=True</code></li> </ul>","tags":["PD002"]},{"location":"rules/pandas-use-of-pd-merge/","title":"pandas-use-of-pd-merge (PD015)","text":"<p>Derived from the pandas-vet linter.</p>","tags":["PD015"]},{"location":"rules/pandas-use-of-pd-merge/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>pd.merge</code> on Pandas objects.</p>","tags":["PD015"]},{"location":"rules/pandas-use-of-pd-merge/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Pandas, the <code>.merge</code> method (exposed on, e.g., DataFrame objects) and the <code>pd.merge</code> function (exposed on the Pandas module) are equivalent.</p> <p>For consistency, prefer calling <code>.merge</code> on an object over calling <code>pd.merge</code> on the Pandas module, as the former is more idiomatic.</p> <p>Further, <code>pd.merge</code> is not a method, but a function, which prohibits it from being used in method chains, a common pattern in Pandas code.</p>","tags":["PD015"]},{"location":"rules/pandas-use-of-pd-merge/#example","title":"Example","text":"<pre><code>import pandas as pd\ncats_df = pd.read_csv(\"cats.csv\")\ndogs_df = pd.read_csv(\"dogs.csv\")\nrabbits_df = pd.read_csv(\"rabbits.csv\")\npets_df = pd.merge(pd.merge(cats_df, dogs_df), rabbits_df)  # Hard to read.\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\ncats_df = pd.read_csv(\"cats.csv\")\ndogs_df = pd.read_csv(\"dogs.csv\")\nrabbits_df = pd.read_csv(\"rabbits.csv\")\npets_df = cats_df.merge(dogs_df).merge(rabbits_df)\n</code></pre>","tags":["PD015"]},{"location":"rules/pandas-use-of-pd-merge/#references","title":"References","text":"<ul> <li>Pandas documentation: <code>merge</code></li> <li>Pandas documentation: <code>pd.merge</code></li> </ul>","tags":["PD015"]},{"location":"rules/paramiko-call/","title":"paramiko-call (S601)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S601"]},{"location":"rules/paramiko-call/#what-it-does","title":"What it does","text":"<p>Checks for <code>paramiko</code> calls.</p>","tags":["S601"]},{"location":"rules/paramiko-call/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>paramiko</code> calls allow users to execute arbitrary shell commands on a remote machine. If the inputs to these calls are not properly sanitized, they can be vulnerable to shell injection attacks.</p>","tags":["S601"]},{"location":"rules/paramiko-call/#example","title":"Example","text":"<pre><code>import paramiko\nclient = paramiko.SSHClient()\nclient.exec_command(\"echo $HOME\")\n</code></pre>","tags":["S601"]},{"location":"rules/paramiko-call/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-78</li> <li>Paramiko documentation: <code>SSHClient.exec_command()</code></li> </ul>","tags":["S601"]},{"location":"rules/parenthesize-chained-operators/","title":"parenthesize-chained-operators (RUF021)","text":"<p>Fix is always available.</p>","tags":["RUF021"]},{"location":"rules/parenthesize-chained-operators/#what-it-does","title":"What it does","text":"<p>Checks for chained operators where adding parentheses could improve the clarity of the code.</p>","tags":["RUF021"]},{"location":"rules/parenthesize-chained-operators/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>and</code> always binds more tightly than <code>or</code> when chaining the two together, but this can be hard to remember (and sometimes surprising). Adding parentheses in these situations can greatly improve code readability, with no change to semantics or performance.</p> <p>For example:</p> <pre><code>a, b, c = 1, 0, 2\nx = a or b and c\nd, e, f = 0, 1, 2\ny = d and e or f\n</code></pre> <p>Use instead:</p> <pre><code>a, b, c = 1, 0, 2\nx = a or (b and c)\nd, e, f = 0, 1, 2\ny = (d and e) or f\n</code></pre>","tags":["RUF021"]},{"location":"rules/pass-in-class-body/","title":"pass-in-class-body (PYI012)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI012"]},{"location":"rules/pass-in-class-body/#what-it-does","title":"What it does","text":"<p>Checks for the presence of the <code>pass</code> statement in non-empty class bodies in <code>.pyi</code> files.</p>","tags":["PYI012"]},{"location":"rules/pass-in-class-body/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>pass</code> statement is always unnecessary in non-empty class bodies in stubs.</p>","tags":["PYI012"]},{"location":"rules/pass-in-class-body/#example","title":"Example","text":"<pre><code>class MyClass:\nx: int\npass\n</code></pre> <p>Use instead:</p> <pre><code>class MyClass:\nx: int\n</code></pre>","tags":["PYI012"]},{"location":"rules/pass-statement-stub-body/","title":"pass-statement-stub-body (PYI009)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI009"]},{"location":"rules/pass-statement-stub-body/#what-it-does","title":"What it does","text":"<p>Checks for <code>pass</code> statements in empty stub bodies.</p>","tags":["PYI009"]},{"location":"rules/pass-statement-stub-body/#why-is-this-bad","title":"Why is this bad?","text":"<p>For stylistic consistency, <code>...</code> should always be used rather than <code>pass</code> in stub files.</p>","tags":["PYI009"]},{"location":"rules/pass-statement-stub-body/#example","title":"Example","text":"<pre><code>def foo(bar: int) -&gt; list[int]: pass\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar: int) -&gt; list[int]: ...\n</code></pre>","tags":["PYI009"]},{"location":"rules/pass-statement-stub-body/#references","title":"References","text":"<ul> <li>Typing documentation - Writing and Maintaining Stub Files</li> </ul>","tags":["PYI009"]},{"location":"rules/patch-version-comparison/","title":"patch-version-comparison (PYI004)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI004"]},{"location":"rules/patch-version-comparison/#what-it-does","title":"What it does","text":"<p>Checks for Python version comparisons in stubs that compare against patch versions (e.g., Python 3.8.3) instead of major and minor versions (e.g., Python 3.8).</p>","tags":["PYI004"]},{"location":"rules/patch-version-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files support simple conditionals to test for differences in Python versions and platforms. However, type checkers only understand a limited subset of these conditionals. In particular, type checkers don't support patch versions (e.g., Python 3.8.3), only major and minor versions (e.g., Python 3.8). Therefore, version checks in stubs should only use the major and minor versions.</p>","tags":["PYI004"]},{"location":"rules/patch-version-comparison/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info &gt;= (3, 4, 3): ...\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info &gt;= (3, 4): ...\n</code></pre>","tags":["PYI004"]},{"location":"rules/patch-version-comparison/#references","title":"References","text":"<ul> <li>Typing documentation: Version and Platform checking</li> </ul>","tags":["PYI004"]},{"location":"rules/path-constructor-current-directory/","title":"path-constructor-current-directory (PTH201)","text":"<p>Derived from the flake8-use-pathlib linter.</p> <p>Fix is always available.</p>","tags":["PTH201"]},{"location":"rules/path-constructor-current-directory/#what-it-does","title":"What it does","text":"<p>Checks for <code>pathlib.Path</code> objects that are initialized with the current directory.</p>","tags":["PTH201"]},{"location":"rules/path-constructor-current-directory/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>Path()</code> constructor defaults to the current directory, so passing it in explicitly (as <code>\".\"</code>) is unnecessary.</p>","tags":["PTH201"]},{"location":"rules/path-constructor-current-directory/#example","title":"Example","text":"<pre><code>from pathlib import Path\n_ = Path(\".\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\n_ = Path()\n</code></pre>","tags":["PTH201"]},{"location":"rules/path-constructor-current-directory/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path</code></li> </ul>","tags":["PTH201"]},{"location":"rules/pep484-style-positional-only-parameter/","title":"pep484-style-positional-only-parameter (PYI063)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI063"]},{"location":"rules/pep484-style-positional-only-parameter/#what-it-does","title":"What it does","text":"<p>Checks for the presence of PEP 484-style positional-only parameters.</p>","tags":["PYI063"]},{"location":"rules/pep484-style-positional-only-parameter/#why-is-this-bad","title":"Why is this bad?","text":"<p>Historically, PEP 484 recommended prefixing parameter names with double underscores (<code>__</code>) to indicate to a type checker that they were positional-only. However, PEP 570 (introduced in Python 3.8) introduced dedicated syntax for positional-only arguments. If a forward slash (<code>/</code>) is present in a function signature on Python 3.8+, all parameters prior to the slash are interpreted as positional-only.</p> <p>The new syntax should be preferred as it is more widely used, more concise and more readable. It is also respected by Python at runtime, whereas the old-style syntax was only understood by type checkers.</p>","tags":["PYI063"]},{"location":"rules/pep484-style-positional-only-parameter/#example","title":"Example","text":"<pre><code>def foo(__x: int) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(x: int, /) -&gt; None: ...\n</code></pre>","tags":["PYI063"]},{"location":"rules/pep484-style-positional-only-parameter/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["PYI063"]},{"location":"rules/percent-format-expected-mapping/","title":"percent-format-expected-mapping (F502)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F502"]},{"location":"rules/percent-format-expected-mapping/#what-it-does","title":"What it does","text":"<p>Checks for named placeholders in <code>printf</code>-style format strings without mapping-type values.</p>","tags":["F502"]},{"location":"rules/percent-format-expected-mapping/#why-is-this-bad","title":"Why is this bad?","text":"<p>When using named placeholders in <code>printf</code>-style format strings, the values must be a map type (such as a dictionary). Otherwise, the expression will raise a <code>TypeError</code>.</p>","tags":["F502"]},{"location":"rules/percent-format-expected-mapping/#example","title":"Example","text":"<pre><code>\"%(greeting)s, %(name)s\" % (\"Hello\", \"World\")\n</code></pre> <p>Use instead:</p> <pre><code>\"%(greeting)s, %(name)s\" % {\"greeting\": \"Hello\", \"name\": \"World\"}\n</code></pre> <p>Or:</p> <pre><code>\"%s, %s\" % (\"Hello\", \"World\")\n</code></pre>","tags":["F502"]},{"location":"rules/percent-format-expected-mapping/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F502"]},{"location":"rules/percent-format-expected-sequence/","title":"percent-format-expected-sequence (F503)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F503"]},{"location":"rules/percent-format-expected-sequence/#what-it-does","title":"What it does","text":"<p>Checks for uses of mapping-type values in <code>printf</code>-style format strings without named placeholders.</p>","tags":["F503"]},{"location":"rules/percent-format-expected-sequence/#why-is-this-bad","title":"Why is this bad?","text":"<p>When using mapping-type values (such as <code>dict</code>) in <code>printf</code>-style format strings, the keys must be named. Otherwise, the expression will raise a <code>TypeError</code>.</p>","tags":["F503"]},{"location":"rules/percent-format-expected-sequence/#example","title":"Example","text":"<pre><code>\"%s, %s\" % {\"greeting\": \"Hello\", \"name\": \"World\"}\n</code></pre> <p>Use instead:</p> <pre><code>\"%(greeting)s, %(name)s\" % {\"greeting\": \"Hello\", \"name\": \"World\"}\n</code></pre> <p>Or:</p> <pre><code>\"%s, %s\" % (\"Hello\", \"World\")\n</code></pre>","tags":["F503"]},{"location":"rules/percent-format-expected-sequence/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F503"]},{"location":"rules/percent-format-extra-named-arguments/","title":"percent-format-extra-named-arguments (F504)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is always available.</p>","tags":["F504"]},{"location":"rules/percent-format-extra-named-arguments/#what-it-does","title":"What it does","text":"<p>Checks for unused mapping keys in <code>printf</code>-style format strings.</p>","tags":["F504"]},{"location":"rules/percent-format-extra-named-arguments/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused named placeholders in <code>printf</code>-style format strings are unnecessary, and likely indicative of a mistake. They should be removed.</p>","tags":["F504"]},{"location":"rules/percent-format-extra-named-arguments/#example","title":"Example","text":"<pre><code>\"Hello, %(name)s\" % {\"greeting\": \"Hello\", \"name\": \"World\"}\n</code></pre> <p>Use instead:</p> <pre><code>\"Hello, %(name)s\" % {\"name\": \"World\"}\n</code></pre>","tags":["F504"]},{"location":"rules/percent-format-extra-named-arguments/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F504"]},{"location":"rules/percent-format-invalid-format/","title":"percent-format-invalid-format (F501)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F501"]},{"location":"rules/percent-format-invalid-format/#what-it-does","title":"What it does","text":"<p>Checks for invalid <code>printf</code>-style format strings.</p>","tags":["F501"]},{"location":"rules/percent-format-invalid-format/#why-is-this-bad","title":"Why is this bad?","text":"<p>Conversion specifiers are required for <code>printf</code>-style format strings. These specifiers must contain a <code>%</code> character followed by a conversion type.</p>","tags":["F501"]},{"location":"rules/percent-format-invalid-format/#example","title":"Example","text":"<pre><code>\"Hello, %\" % \"world\"\n</code></pre> <p>Use instead:</p> <pre><code>\"Hello, %s\" % \"world\"\n</code></pre>","tags":["F501"]},{"location":"rules/percent-format-invalid-format/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F501"]},{"location":"rules/percent-format-missing-argument/","title":"percent-format-missing-argument (F505)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F505"]},{"location":"rules/percent-format-missing-argument/#what-it-does","title":"What it does","text":"<p>Checks for named placeholders in <code>printf</code>-style format strings that are not present in the provided mapping.</p>","tags":["F505"]},{"location":"rules/percent-format-missing-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Named placeholders that lack a corresponding value in the provided mapping will raise a <code>KeyError</code>.</p>","tags":["F505"]},{"location":"rules/percent-format-missing-argument/#example","title":"Example","text":"<pre><code>\"%(greeting)s, %(name)s\" % {\"name\": \"world\"}\n</code></pre> <p>Use instead:</p> <pre><code>\"Hello, %(name)s\" % {\"name\": \"world\"}\n</code></pre>","tags":["F505"]},{"location":"rules/percent-format-missing-argument/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F505"]},{"location":"rules/percent-format-mixed-positional-and-named/","title":"percent-format-mixed-positional-and-named (F506)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F506"]},{"location":"rules/percent-format-mixed-positional-and-named/#what-it-does","title":"What it does","text":"<p>Checks for <code>printf</code>-style format strings that have mixed positional and named placeholders.</p>","tags":["F506"]},{"location":"rules/percent-format-mixed-positional-and-named/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python does not support mixing positional and named placeholders in <code>printf</code>-style format strings. The use of mixed placeholders will raise a <code>TypeError</code> at runtime.</p>","tags":["F506"]},{"location":"rules/percent-format-mixed-positional-and-named/#example","title":"Example","text":"<pre><code>\"%s, %(name)s\" % (\"Hello\", {\"name\": \"World\"})\n</code></pre> <p>Use instead:</p> <pre><code>\"%s, %s\" % (\"Hello\", \"World\")\n</code></pre> <p>Or:</p> <pre><code>\"%(greeting)s, %(name)s\" % {\"greeting\": \"Hello\", \"name\": \"World\"}\n</code></pre>","tags":["F506"]},{"location":"rules/percent-format-mixed-positional-and-named/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F506"]},{"location":"rules/percent-format-positional-count-mismatch/","title":"percent-format-positional-count-mismatch (F507)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F507"]},{"location":"rules/percent-format-positional-count-mismatch/#what-it-does","title":"What it does","text":"<p>Checks for <code>printf</code>-style format strings that have a mismatch between the number of positional placeholders and the number of substitution values.</p>","tags":["F507"]},{"location":"rules/percent-format-positional-count-mismatch/#why-is-this-bad","title":"Why is this bad?","text":"<p>When a <code>printf</code>-style format string is provided with too many or too few substitution values, it will raise a <code>TypeError</code> at runtime.</p>","tags":["F507"]},{"location":"rules/percent-format-positional-count-mismatch/#example","title":"Example","text":"<pre><code>\"%s, %s\" % (\"Hello\", \"world\", \"!\")\n</code></pre> <p>Use instead:</p> <pre><code>\"%s, %s\" % (\"Hello\", \"world\")\n</code></pre>","tags":["F507"]},{"location":"rules/percent-format-positional-count-mismatch/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F507"]},{"location":"rules/percent-format-star-requires-sequence/","title":"percent-format-star-requires-sequence (F508)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F508"]},{"location":"rules/percent-format-star-requires-sequence/#what-it-does","title":"What it does","text":"<p>Checks for <code>printf</code>-style format strings that use the <code>*</code> specifier with non-tuple values.</p>","tags":["F508"]},{"location":"rules/percent-format-star-requires-sequence/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of the <code>*</code> specifier with non-tuple values will raise a <code>TypeError</code> at runtime.</p>","tags":["F508"]},{"location":"rules/percent-format-star-requires-sequence/#example","title":"Example","text":"<pre><code>from math import pi\n\"%(n).*f\" % {\"n\": (2, pi)}\n</code></pre> <p>Use instead:</p> <pre><code>from math import pi\n\"%.*f\" % (2, pi)  # 3.14\n</code></pre>","tags":["F508"]},{"location":"rules/percent-format-star-requires-sequence/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F508"]},{"location":"rules/percent-format-unsupported-format-character/","title":"percent-format-unsupported-format-character (F509)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F509"]},{"location":"rules/percent-format-unsupported-format-character/#what-it-does","title":"What it does","text":"<p>Checks for <code>printf</code>-style format strings with invalid format characters.</p>","tags":["F509"]},{"location":"rules/percent-format-unsupported-format-character/#why-is-this-bad","title":"Why is this bad?","text":"<p>In <code>printf</code>-style format strings, the <code>%</code> character is used to indicate placeholders. If a <code>%</code> character is not followed by a valid format character, it will raise a <code>ValueError</code> at runtime.</p>","tags":["F509"]},{"location":"rules/percent-format-unsupported-format-character/#example","title":"Example","text":"<pre><code>\"Hello, %S\" % \"world\"\n</code></pre> <p>Use instead:</p> <pre><code>\"Hello, %s\" % \"world\"\n</code></pre>","tags":["F509"]},{"location":"rules/percent-format-unsupported-format-character/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> </ul>","tags":["F509"]},{"location":"rules/post-init-default/","title":"post-init-default (RUF033)","text":"<p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF033"]},{"location":"rules/post-init-default/#what-it-does","title":"What it does","text":"<p>Checks for <code>__post_init__</code> dataclass methods with parameter defaults.</p>","tags":["RUF033"]},{"location":"rules/post-init-default/#why-is-this-bad","title":"Why is this bad?","text":"<p>Adding a default value to a parameter in a <code>__post_init__</code> method has no impact on whether the parameter will have a default value in the dataclass's generated <code>__init__</code> method. To create an init-only dataclass parameter with a default value, you should use an <code>InitVar</code> field in the dataclass's class body and give that <code>InitVar</code> field a default value.</p> <p>As the documentation states:</p> <p>Init-only fields are added as parameters to the generated <code>__init__()</code> method, and are passed to the optional <code>__post_init__()</code> method. They are not otherwise used by dataclasses.</p>","tags":["RUF033"]},{"location":"rules/post-init-default/#example","title":"Example","text":"<pre><code>from dataclasses import InitVar, dataclass\n@dataclass\nclass Foo:\nbar: InitVar[int] = 0\ndef __post_init__(self, bar: int = 1, baz: int = 2) -&gt; None:\nprint(bar, baz)\nfoo = Foo()  # Prints '0 2'.\n</code></pre> <p>Use instead:</p> <pre><code>from dataclasses import InitVar, dataclass\n@dataclass\nclass Foo:\nbar: InitVar[int] = 1\nbaz: InitVar[int] = 2\ndef __post_init__(self, bar: int, baz: int) -&gt; None:\nprint(bar, baz)\nfoo = Foo()  # Prints '1 2'.\n</code></pre>","tags":["RUF033"]},{"location":"rules/post-init-default/#references","title":"References","text":"<ul> <li>Python documentation: Post-init processing</li> <li>Python documentation: Init-only variables</li> </ul>","tags":["RUF033"]},{"location":"rules/potential-index-error/","title":"potential-index-error (PLE0643)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0643"]},{"location":"rules/potential-index-error/#what-it-does","title":"What it does","text":"<p>Checks for hard-coded sequence accesses that are known to be out of bounds.</p>","tags":["PLE0643"]},{"location":"rules/potential-index-error/#why-is-this-bad","title":"Why is this bad?","text":"<p>Attempting to access a sequence with an out-of-bounds index will cause an <code>IndexError</code> to be raised at runtime. When the sequence and index are defined statically (e.g., subscripts on <code>list</code> and <code>tuple</code> literals, with integer indexes), such errors can be detected ahead of time.</p>","tags":["PLE0643"]},{"location":"rules/potential-index-error/#example","title":"Example","text":"<pre><code>print([0, 1, 2][3])\n</code></pre>","tags":["PLE0643"]},{"location":"rules/print-empty-string/","title":"print-empty-string (FURB105)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p>","tags":["FURB105"]},{"location":"rules/print-empty-string/#what-it-does","title":"What it does","text":"<p>Checks for <code>print</code> calls with unnecessary empty strings as positional arguments and unnecessary <code>sep</code> keyword arguments.</p>","tags":["FURB105"]},{"location":"rules/print-empty-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>Prefer calling <code>print</code> without any positional arguments, which is equivalent and more concise.</p> <p>Similarly, when printing one or fewer items, the <code>sep</code> keyword argument, (used to define the string that separates the <code>print</code> arguments) can be omitted, as it's redundant when there are no items to separate.</p>","tags":["FURB105"]},{"location":"rules/print-empty-string/#example","title":"Example","text":"<pre><code>print(\"\")\n</code></pre> <p>Use instead:</p> <pre><code>print()\n</code></pre>","tags":["FURB105"]},{"location":"rules/print-empty-string/#references","title":"References","text":"<ul> <li>Python documentation: <code>print</code></li> </ul>","tags":["FURB105"]},{"location":"rules/print/","title":"print (T201)","text":"<p>Derived from the flake8-print linter.</p> <p>Fix is sometimes available.</p>","tags":["T201"]},{"location":"rules/print/#what-it-does","title":"What it does","text":"<p>Checks for <code>print</code> statements.</p>","tags":["T201"]},{"location":"rules/print/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>print</code> statements are useful in some situations (e.g., debugging), but should typically be omitted from production code. <code>print</code> statements can lead to the accidental inclusion of sensitive information in logs, and are not configurable by clients, unlike <code>logging</code> statements.</p>","tags":["T201"]},{"location":"rules/print/#example","title":"Example","text":"<pre><code>def add_numbers(a, b):\nprint(f\"The sum of {a} and {b} is {a + b}\")\nreturn a + b\n</code></pre> <p>Use instead:</p> <pre><code>def add_numbers(a, b):\nreturn a + b\n</code></pre>","tags":["T201"]},{"location":"rules/print/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may remove <code>print</code> statements that are used beyond debugging purposes.</p>","tags":["T201"]},{"location":"rules/printf-in-get-text-func-call/","title":"printf-in-get-text-func-call (INT003)","text":"<p>Derived from the flake8-gettext linter.</p>","tags":["INT003"]},{"location":"rules/printf-in-get-text-func-call/#what-it-does","title":"What it does","text":"<p>Checks for printf-style formatted strings in <code>gettext</code> function calls.</p>","tags":["INT003"]},{"location":"rules/printf-in-get-text-func-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>In the <code>gettext</code> API, the <code>gettext</code> function (often aliased to <code>_</code>) returns a translation of its input argument by looking it up in a translation catalog.</p> <p>Calling <code>gettext</code> with a formatted string as its argument can cause unexpected behavior. Since the formatted string is resolved before the function call, the translation catalog will look up the formatted string, rather than the printf-style template.</p> <p>Instead, format the value returned by the function call, rather than its argument.</p>","tags":["INT003"]},{"location":"rules/printf-in-get-text-func-call/#example","title":"Example","text":"<pre><code>from gettext import gettext as _\nname = \"Maria\"\n_(\"Hello, {}!\".format(name))  # Looks for \"Hello, Maria!\".\n</code></pre> <p>Use instead:</p> <pre><code>from gettext import gettext as _\nname = \"Maria\"\n_(\"Hello, %s!\") % name  # Looks for \"Hello, %s!\".\n</code></pre>","tags":["INT003"]},{"location":"rules/printf-in-get-text-func-call/#references","title":"References","text":"<ul> <li>Python documentation: <code>gettext</code> \u2014 Multilingual internationalization services</li> </ul>","tags":["INT003"]},{"location":"rules/printf-string-formatting/","title":"printf-string-formatting (UP031)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP031"]},{"location":"rules/printf-string-formatting/#what-it-does","title":"What it does","text":"<p>Checks for <code>printf</code>-style string formatting, and offers to replace it with <code>str.format</code> calls.</p>","tags":["UP031"]},{"location":"rules/printf-string-formatting/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>printf</code>-style string formatting has a number of quirks, and leads to less readable code than using <code>str.format</code> calls or f-strings. In general, prefer the newer <code>str.format</code> and f-strings constructs over <code>printf</code>-style string formatting.</p>","tags":["UP031"]},{"location":"rules/printf-string-formatting/#example","title":"Example","text":"<pre><code>\"%s, %s\" % (\"Hello\", \"World\")  # \"Hello, World\"\n</code></pre> <p>Use instead:</p> <pre><code>\"{}, {}\".format(\"Hello\", \"World\")  # \"Hello, World\"\n</code></pre> <pre><code>f\"{'Hello'}, {'World'}\"  # \"Hello, World\"\n</code></pre>","tags":["UP031"]},{"location":"rules/printf-string-formatting/#fix-safety","title":"Fix safety","text":"<p>In cases where the format string contains a single generic format specifier (e.g. <code>%s</code>), and the right-hand side is an ambiguous expression, we cannot offer a safe fix.</p> <p>For example, given:</p> <pre><code>\"%s\" % val\n</code></pre> <p><code>val</code> could be a single-element tuple, or a single value (not contained in a tuple). Both of these would resolve to the same formatted string when using <code>printf</code>-style formatting, but resolve differently when using f-strings:</p> <pre><code>val = 1\nprint(\"%s\" % val)  # \"1\"\nprint(\"{}\".format(val))  # \"1\"\nval = (1,)\nprint(\"%s\" % val)  # \"1\"\nprint(\"{}\".format(val))  # \"(1,)\"\n</code></pre>","tags":["UP031"]},{"location":"rules/printf-string-formatting/#references","title":"References","text":"<ul> <li>Python documentation: <code>printf</code>-style String Formatting</li> <li>Python documentation: <code>str.format</code></li> </ul>","tags":["UP031"]},{"location":"rules/private-member-access/","title":"private-member-access (SLF001)","text":"<p>Derived from the flake8-self linter.</p>","tags":["SLF001"]},{"location":"rules/private-member-access/#what-it-does","title":"What it does","text":"<p>Checks for accesses on \"private\" class members.</p>","tags":["SLF001"]},{"location":"rules/private-member-access/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the convention is such that class members that are prefixed with a single underscore, or prefixed but not suffixed with a double underscore, are considered private and intended for internal use.</p> <p>Using such \"private\" members is considered a misuse of the class, as there are no guarantees that the member will be present in future versions, that it will have the same type, or that it will have the same behavior. Instead, use the class's public interface.</p> <p>This rule ignores accesses on dunder methods (e.g., <code>__init__</code>) and sunder methods (e.g., <code>_missing_</code>).</p>","tags":["SLF001"]},{"location":"rules/private-member-access/#example","title":"Example","text":"<pre><code>class Class:\ndef __init__(self):\nself._private_member = \"...\"\nvar = Class()\nprint(var._private_member)\n</code></pre> <p>Use instead:</p> <pre><code>class Class:\ndef __init__(self):\nself.public_member = \"...\"\nvar = Class()\nprint(var.public_member)\n</code></pre>","tags":["SLF001"]},{"location":"rules/private-member-access/#options","title":"Options","text":"<ul> <li><code>lint.flake8-self.ignore-names</code></li> </ul>","tags":["SLF001"]},{"location":"rules/private-member-access/#references","title":"References","text":"<ul> <li>What is the meaning of single or double underscores before an object name?</li> </ul>","tags":["SLF001"]},{"location":"rules/prohibited-trailing-comma/","title":"prohibited-trailing-comma (COM819)","text":"<p>Derived from the flake8-commas linter.</p> <p>Fix is always available.</p>","tags":["COM819"]},{"location":"rules/prohibited-trailing-comma/#what-it-does","title":"What it does","text":"<p>Checks for the presence of prohibited trailing commas.</p>","tags":["COM819"]},{"location":"rules/prohibited-trailing-comma/#why-is-this-bad","title":"Why is this bad?","text":"<p>Trailing commas are not essential in some cases and can therefore be viewed as unnecessary.</p>","tags":["COM819"]},{"location":"rules/prohibited-trailing-comma/#example","title":"Example","text":"<pre><code>foo = (1, 2, 3,)\n</code></pre> <p>Use instead:</p> <pre><code>foo = (1, 2, 3)\n</code></pre>","tags":["COM819"]},{"location":"rules/prohibited-trailing-comma/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent use of trailing commas, making the rule redundant.</p>","tags":["COM819"]},{"location":"rules/property-with-parameters/","title":"property-with-parameters (PLR0206)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR0206"]},{"location":"rules/property-with-parameters/#what-it-does","title":"What it does","text":"<p>Checks for property definitions that accept function parameters.</p>","tags":["PLR0206"]},{"location":"rules/property-with-parameters/#why-is-this-bad","title":"Why is this bad?","text":"<p>Properties cannot be called with parameters.</p> <p>If you need to pass parameters to a property, create a method with the desired parameters and call that method instead.</p>","tags":["PLR0206"]},{"location":"rules/property-with-parameters/#example","title":"Example","text":"<pre><code>class Cat:\n@property\ndef purr(self, volume): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Cat:\n@property\ndef purr(self): ...\ndef purr_volume(self, volume): ...\n</code></pre>","tags":["PLR0206"]},{"location":"rules/property-with-parameters/#references","title":"References","text":"<ul> <li>Python documentation: <code>property</code></li> </ul>","tags":["PLR0206"]},{"location":"rules/py-path/","title":"py-path (PTH124)","text":"<p>Derived from the flake8-use-pathlib linter.</p>","tags":["PTH124"]},{"location":"rules/py-path/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>py.path</code> library.</p>","tags":["PTH124"]},{"location":"rules/py-path/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>py.path</code> library is in maintenance mode. Instead, prefer the standard library's <code>pathlib</code> module, or third-party modules like <code>path</code> (formerly <code>py.path</code>).</p>","tags":["PTH124"]},{"location":"rules/py-path/#examples","title":"Examples","text":"<pre><code>import py.path\np = py.path.local(\"/foo/bar\").join(\"baz/qux\")\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\np = Path(\"/foo/bar\") / \"bar\" / \"qux\"\n</code></pre>","tags":["PTH124"]},{"location":"rules/py-path/#references","title":"References","text":"<ul> <li>Python documentation: <code>Pathlib</code></li> <li>Path repository</li> </ul>","tags":["PTH124"]},{"location":"rules/pytest-assert-always-false/","title":"pytest-assert-always-false (PT015)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT015"]},{"location":"rules/pytest-assert-always-false/#what-it-does","title":"What it does","text":"<p>Checks for <code>assert</code> statements whose test expression is a falsy value.</p>","tags":["PT015"]},{"location":"rules/pytest-assert-always-false/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pytest.fail</code> conveys the intent more clearly than <code>assert falsy_value</code>.</p>","tags":["PT015"]},{"location":"rules/pytest-assert-always-false/#example","title":"Example","text":"<pre><code>def test_foo():\nif some_condition:\nassert False, \"some_condition was True\"\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\ndef test_foo():\nif some_condition:\npytest.fail(\"some_condition was True\")\n...\n</code></pre> <p>References</p> <ul> <li><code>pytest</code> documentation: <code>pytest.fail</code></li> </ul>","tags":["PT015"]},{"location":"rules/pytest-assert-in-except/","title":"pytest-assert-in-except (PT017)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT017"]},{"location":"rules/pytest-assert-in-except/#what-it-does","title":"What it does","text":"<p>Checks for <code>assert</code> statements in <code>except</code> clauses.</p>","tags":["PT017"]},{"location":"rules/pytest-assert-in-except/#why-is-this-bad","title":"Why is this bad?","text":"<p>When testing for exceptions, <code>pytest.raises()</code> should be used instead of <code>assert</code> statements in <code>except</code> clauses, as it's more explicit and idiomatic. Further, <code>pytest.raises()</code> will fail if the exception is not raised, unlike the <code>assert</code> statement.</p>","tags":["PT017"]},{"location":"rules/pytest-assert-in-except/#example","title":"Example","text":"<pre><code>def test_foo():\ntry:\n1 / 0\nexcept ZeroDivisionError as e:\nassert e.args\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\ndef test_foo():\nwith pytest.raises(ZeroDivisionError) as exc_info:\n1 / 0\nassert exc_info.value.args\n</code></pre>","tags":["PT017"]},{"location":"rules/pytest-assert-in-except/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.raises</code></li> </ul>","tags":["PT017"]},{"location":"rules/pytest-composite-assertion/","title":"pytest-composite-assertion (PT018)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is sometimes available.</p>","tags":["PT018"]},{"location":"rules/pytest-composite-assertion/#what-it-does","title":"What it does","text":"<p>Checks for assertions that combine multiple independent conditions.</p>","tags":["PT018"]},{"location":"rules/pytest-composite-assertion/#why-is-this-bad","title":"Why is this bad?","text":"<p>Composite assertion statements are harder to debug upon failure, as the failure message will not indicate which condition failed.</p>","tags":["PT018"]},{"location":"rules/pytest-composite-assertion/#example","title":"Example","text":"<pre><code>def test_foo():\nassert something and something_else\ndef test_bar():\nassert not (something or something_else)\n</code></pre> <p>Use instead:</p> <pre><code>def test_foo():\nassert something\nassert something_else\ndef test_bar():\nassert not something\nassert not something_else\n</code></pre>","tags":["PT018"]},{"location":"rules/pytest-deprecated-yield-fixture/","title":"pytest-deprecated-yield-fixture (PT020)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT020"]},{"location":"rules/pytest-deprecated-yield-fixture/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.yield_fixture</code> usage.</p>","tags":["PT020"]},{"location":"rules/pytest-deprecated-yield-fixture/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pytest.yield_fixture</code> is deprecated. <code>pytest.fixture</code> should be used instead.</p>","tags":["PT020"]},{"location":"rules/pytest-deprecated-yield-fixture/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.yield_fixture()\ndef my_fixture():\nobj = SomeClass()\nyield obj\nobj.cleanup()\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\ndef my_fixture():\nobj = SomeClass()\nyield obj\nobj.cleanup()\n</code></pre>","tags":["PT020"]},{"location":"rules/pytest-deprecated-yield-fixture/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>yield_fixture</code> functions</li> </ul>","tags":["PT020"]},{"location":"rules/pytest-duplicate-parametrize-test-cases/","title":"pytest-duplicate-parametrize-test-cases (PT014)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is sometimes available.</p>","tags":["PT014"]},{"location":"rules/pytest-duplicate-parametrize-test-cases/#what-it-does","title":"What it does","text":"<p>Checks for duplicate test cases in <code>pytest.mark.parametrize</code>.</p>","tags":["PT014"]},{"location":"rules/pytest-duplicate-parametrize-test-cases/#why-is-this-bad","title":"Why is this bad?","text":"<p>Duplicate test cases are redundant and should be removed.</p>","tags":["PT014"]},{"location":"rules/pytest-duplicate-parametrize-test-cases/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.mark.parametrize(\n(\"param1\", \"param2\"),\n[\n(1, 2),\n(1, 2),\n],\n)\ndef test_foo(param1, param2): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.mark.parametrize(\n(\"param1\", \"param2\"),\n[\n(1, 2),\n],\n)\ndef test_foo(param1, param2): ...\n</code></pre>","tags":["PT014"]},{"location":"rules/pytest-duplicate-parametrize-test-cases/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as tests that rely on mutable global state may be affected by removing duplicate test cases.</p>","tags":["PT014"]},{"location":"rules/pytest-duplicate-parametrize-test-cases/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: How to parametrize fixtures and test functions</li> </ul>","tags":["PT014"]},{"location":"rules/pytest-erroneous-use-fixtures-on-fixture/","title":"pytest-erroneous-use-fixtures-on-fixture (PT025)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is always available.</p>","tags":["PT025"]},{"location":"rules/pytest-erroneous-use-fixtures-on-fixture/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.mark.usefixtures</code> decorators applied to <code>pytest</code> fixtures.</p>","tags":["PT025"]},{"location":"rules/pytest-erroneous-use-fixtures-on-fixture/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>pytest.mark.usefixtures</code> decorator has no effect on <code>pytest</code> fixtures.</p>","tags":["PT025"]},{"location":"rules/pytest-erroneous-use-fixtures-on-fixture/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture()\ndef a():\npass\n@pytest.mark.usefixtures(\"a\")\n@pytest.fixture()\ndef b(a):\npass\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\ndef a():\npass\n@pytest.fixture()\ndef b(a):\npass\n</code></pre>","tags":["PT025"]},{"location":"rules/pytest-erroneous-use-fixtures-on-fixture/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.mark.usefixtures</code></li> </ul>","tags":["PT025"]},{"location":"rules/pytest-extraneous-scope-function/","title":"pytest-extraneous-scope-function (PT003)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is always available.</p>","tags":["PT003"]},{"location":"rules/pytest-extraneous-scope-function/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.fixture</code> calls with <code>scope=\"function\"</code>.</p>","tags":["PT003"]},{"location":"rules/pytest-extraneous-scope-function/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>scope=\"function\"</code> can be omitted, as it is the default.</p>","tags":["PT003"]},{"location":"rules/pytest-extraneous-scope-function/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture(scope=\"function\")\ndef my_fixture(): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\ndef my_fixture(): ...\n</code></pre>","tags":["PT003"]},{"location":"rules/pytest-extraneous-scope-function/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</li> </ul>","tags":["PT003"]},{"location":"rules/pytest-fail-without-message/","title":"pytest-fail-without-message (PT016)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT016"]},{"location":"rules/pytest-fail-without-message/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.fail</code> calls without a message.</p>","tags":["PT016"]},{"location":"rules/pytest-fail-without-message/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pytest.fail</code> calls without a message make it harder to understand and debug test failures.</p>","tags":["PT016"]},{"location":"rules/pytest-fail-without-message/#example","title":"Example","text":"<pre><code>import pytest\ndef test_foo():\npytest.fail()\ndef test_bar():\npytest.fail(\"\")\ndef test_baz():\npytest.fail(reason=\"\")\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\ndef test_foo():\npytest.fail(\"...\")\ndef test_bar():\npytest.fail(reason=\"...\")\n</code></pre>","tags":["PT016"]},{"location":"rules/pytest-fail-without-message/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.fail</code></li> </ul>","tags":["PT016"]},{"location":"rules/pytest-fixture-finalizer-callback/","title":"pytest-fixture-finalizer-callback (PT021)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT021"]},{"location":"rules/pytest-fixture-finalizer-callback/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>request.addfinalizer</code> usages in <code>pytest</code> fixtures.</p>","tags":["PT021"]},{"location":"rules/pytest-fixture-finalizer-callback/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pytest</code> offers two ways to perform cleanup in fixture code. The first is sequential (via the <code>yield</code> statement), the second callback-based (via <code>request.addfinalizer</code>).</p> <p>The sequential approach is more readable and should be preferred, unless the fixture uses the \"factory as fixture\" pattern.</p>","tags":["PT021"]},{"location":"rules/pytest-fixture-finalizer-callback/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture()\ndef my_fixture(request):\nresource = acquire_resource()\nrequest.addfinalizer(resource.release)\nreturn resource\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\ndef my_fixture():\nresource = acquire_resource()\nyield resource\nresource.release()\n# \"factory-as-fixture\" pattern\n@pytest.fixture()\ndef my_factory(request):\ndef create_resource(arg):\nresource = acquire_resource(arg)\nrequest.addfinalizer(resource.release)\nreturn resource\nreturn create_resource\n</code></pre>","tags":["PT021"]},{"location":"rules/pytest-fixture-finalizer-callback/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: Adding finalizers directly</li> <li><code>pytest</code> documentation: Factories as fixtures</li> </ul>","tags":["PT021"]},{"location":"rules/pytest-fixture-incorrect-parentheses-style/","title":"pytest-fixture-incorrect-parentheses-style (PT001)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is always available.</p>","tags":["PT001"]},{"location":"rules/pytest-fixture-incorrect-parentheses-style/#what-it-does","title":"What it does","text":"<p>Checks for argument-free <code>@pytest.fixture()</code> decorators with or without parentheses, depending on the <code>lint.flake8-pytest-style.fixture-parentheses</code> setting.</p>","tags":["PT001"]},{"location":"rules/pytest-fixture-incorrect-parentheses-style/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a <code>@pytest.fixture()</code> doesn't take any arguments, the parentheses are optional.</p> <p>Either removing those unnecessary parentheses or requiring them for all fixtures is fine, but it's best to be consistent. The rule defaults to removing unnecessary parentheses, to match the documentation of the official pytest projects.</p>","tags":["PT001"]},{"location":"rules/pytest-fixture-incorrect-parentheses-style/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture()\ndef my_fixture(): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture\ndef my_fixture(): ...\n</code></pre>","tags":["PT001"]},{"location":"rules/pytest-fixture-incorrect-parentheses-style/#options","title":"Options","text":"<ul> <li><code>lint.flake8-pytest-style.fixture-parentheses</code></li> </ul>","tags":["PT001"]},{"location":"rules/pytest-fixture-incorrect-parentheses-style/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: API Reference: Fixtures</li> </ul>","tags":["PT001"]},{"location":"rules/pytest-fixture-param-without-value/","title":"pytest-fixture-param-without-value (PT019)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT019"]},{"location":"rules/pytest-fixture-param-without-value/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest</code> test functions that should be decorated with <code>@pytest.mark.usefixtures</code>.</p>","tags":["PT019"]},{"location":"rules/pytest-fixture-param-without-value/#why-is-this-bad","title":"Why is this bad?","text":"<p>In <code>pytest</code>, fixture injection is used to activate fixtures in a test function.</p> <p>Fixtures can be injected either by passing them as parameters to the test function, or by using the <code>@pytest.mark.usefixtures</code> decorator.</p> <p>If the test function depends on the fixture being activated, but does not use it in the test body or otherwise rely on its return value, prefer the <code>@pytest.mark.usefixtures</code> decorator, to make the dependency explicit and avoid the confusion caused by unused arguments.</p>","tags":["PT019"]},{"location":"rules/pytest-fixture-param-without-value/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture\ndef _patch_something(): ...\ndef test_foo(_patch_something): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture\ndef _patch_something(): ...\n@pytest.mark.usefixtures(\"_patch_something\")\ndef test_foo(): ...\n</code></pre>","tags":["PT019"]},{"location":"rules/pytest-fixture-param-without-value/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.mark.usefixtures</code></li> </ul>","tags":["PT019"]},{"location":"rules/pytest-fixture-positional-args/","title":"pytest-fixture-positional-args (PT002)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT002"]},{"location":"rules/pytest-fixture-positional-args/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.fixture</code> calls with positional arguments.</p>","tags":["PT002"]},{"location":"rules/pytest-fixture-positional-args/#why-is-this-bad","title":"Why is this bad?","text":"<p>For clarity and consistency, prefer using keyword arguments to specify fixture configuration.</p>","tags":["PT002"]},{"location":"rules/pytest-fixture-positional-args/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture(\"module\")\ndef my_fixture(): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture(scope=\"module\")\ndef my_fixture(): ...\n</code></pre>","tags":["PT002"]},{"location":"rules/pytest-fixture-positional-args/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</li> </ul>","tags":["PT002"]},{"location":"rules/pytest-incorrect-fixture-name-underscore/","title":"pytest-incorrect-fixture-name-underscore (PT005)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["PT005"]},{"location":"rules/pytest-incorrect-fixture-name-underscore/#removal","title":"Removal","text":"<p>This rule has been removed because marking fixtures that do not return a value with an underscore isn't a practice recommended by the pytest community.</p>","tags":["PT005"]},{"location":"rules/pytest-incorrect-fixture-name-underscore/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest</code> fixtures that return a value, but are named with a leading underscore.</p>","tags":["PT005"]},{"location":"rules/pytest-incorrect-fixture-name-underscore/#why-is-this-bad","title":"Why is this bad?","text":"<p>By convention, fixtures that don't return a value should be named with a leading underscore, while fixtures that do return a value should not.</p> <p>This rule ignores abstract fixtures.</p>","tags":["PT005"]},{"location":"rules/pytest-incorrect-fixture-name-underscore/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture()\ndef _some_object():\nreturn SomeClass()\n@pytest.fixture()\ndef _some_object_with_cleanup():\nobj = SomeClass()\nyield obj\nobj.cleanup()\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\ndef some_object():\nreturn SomeClass()\n@pytest.fixture()\ndef some_object_with_cleanup():\nobj = SomeClass()\nyield obj\nobj.cleanup()\n</code></pre>","tags":["PT005"]},{"location":"rules/pytest-incorrect-fixture-name-underscore/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</li> </ul>","tags":["PT005"]},{"location":"rules/pytest-incorrect-mark-parentheses-style/","title":"pytest-incorrect-mark-parentheses-style (PT023)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is always available.</p>","tags":["PT023"]},{"location":"rules/pytest-incorrect-mark-parentheses-style/#what-it-does","title":"What it does","text":"<p>Checks for argument-free <code>@pytest.mark.&lt;marker&gt;()</code> decorators with or without parentheses, depending on the <code>lint.flake8-pytest-style.mark-parentheses</code> setting.</p> <p>The rule defaults to removing unnecessary parentheses, to match the documentation of the official pytest projects.</p>","tags":["PT023"]},{"location":"rules/pytest-incorrect-mark-parentheses-style/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a <code>@pytest.mark.&lt;marker&gt;()</code> doesn't take any arguments, the parentheses are optional.</p> <p>Either removing those unnecessary parentheses or requiring them for all fixtures is fine, but it's best to be consistent.</p>","tags":["PT023"]},{"location":"rules/pytest-incorrect-mark-parentheses-style/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.mark.foo\ndef test_something(): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.mark.foo()\ndef test_something(): ...\n</code></pre>","tags":["PT023"]},{"location":"rules/pytest-incorrect-mark-parentheses-style/#options","title":"Options","text":"<ul> <li><code>lint.flake8-pytest-style.mark-parentheses</code></li> </ul>","tags":["PT023"]},{"location":"rules/pytest-incorrect-mark-parentheses-style/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: Marks</li> </ul>","tags":["PT023"]},{"location":"rules/pytest-incorrect-pytest-import/","title":"pytest-incorrect-pytest-import (PT013)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT013"]},{"location":"rules/pytest-incorrect-pytest-import/#what-it-does","title":"What it does","text":"<p>Checks for incorrect import of pytest.</p>","tags":["PT013"]},{"location":"rules/pytest-incorrect-pytest-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>For consistency, <code>pytest</code> should be imported as <code>import pytest</code> and its members should be accessed in the form of <code>pytest.xxx.yyy</code> for consistency</p>","tags":["PT013"]},{"location":"rules/pytest-incorrect-pytest-import/#example","title":"Example","text":"<pre><code>import pytest as pt\nfrom pytest import fixture\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n</code></pre>","tags":["PT013"]},{"location":"rules/pytest-missing-fixture-name-underscore/","title":"pytest-missing-fixture-name-underscore (PT004)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["PT004"]},{"location":"rules/pytest-missing-fixture-name-underscore/#removal","title":"Removal","text":"<p>This rule has been removed because marking fixtures that do not return a value with an underscore isn't a practice recommended by the pytest community.</p>","tags":["PT004"]},{"location":"rules/pytest-missing-fixture-name-underscore/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest</code> fixtures that do not return a value, but are not named with a leading underscore.</p>","tags":["PT004"]},{"location":"rules/pytest-missing-fixture-name-underscore/#why-is-this-bad","title":"Why is this bad?","text":"<p>By convention, fixtures that don't return a value should be named with a leading underscore, while fixtures that do return a value should not.</p> <p>This rule ignores abstract fixtures and generators.</p>","tags":["PT004"]},{"location":"rules/pytest-missing-fixture-name-underscore/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture()\ndef patch_something(mocker):\nmocker.patch(\"module.object\")\n@pytest.fixture()\ndef use_context():\nwith create_context():\nyield\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\ndef _patch_something(mocker):\nmocker.patch(\"module.object\")\n@pytest.fixture()\ndef _use_context():\nwith create_context():\nyield\n</code></pre>","tags":["PT004"]},{"location":"rules/pytest-missing-fixture-name-underscore/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</li> </ul>","tags":["PT004"]},{"location":"rules/pytest-parametrize-names-wrong-type/","title":"pytest-parametrize-names-wrong-type (PT006)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is sometimes available.</p>","tags":["PT006"]},{"location":"rules/pytest-parametrize-names-wrong-type/#what-it-does","title":"What it does","text":"<p>Checks for the type of parameter names passed to <code>pytest.mark.parametrize</code>.</p>","tags":["PT006"]},{"location":"rules/pytest-parametrize-names-wrong-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>argnames</code> argument of <code>pytest.mark.parametrize</code> takes a string or a sequence of strings. For a single parameter, it's preferable to use a string. For multiple parameters, it's preferable to use the style configured via the <code>lint.flake8-pytest-style.parametrize-names-type</code> setting.</p>","tags":["PT006"]},{"location":"rules/pytest-parametrize-names-wrong-type/#example","title":"Example","text":"<pre><code>import pytest\n# single parameter, always expecting string\n@pytest.mark.parametrize((\"param\",), [1, 2, 3])\ndef test_foo(param): ...\n# multiple parameters, expecting tuple\n@pytest.mark.parametrize([\"param1\", \"param2\"], [(1, 2), (3, 4)])\ndef test_bar(param1, param2): ...\n# multiple parameters, expecting tuple\n@pytest.mark.parametrize(\"param1,param2\", [(1, 2), (3, 4)])\ndef test_baz(param1, param2): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.mark.parametrize(\"param\", [1, 2, 3])\ndef test_foo(param): ...\n@pytest.mark.parametrize((\"param1\", \"param2\"), [(1, 2), (3, 4)])\ndef test_bar(param1, param2): ...\n</code></pre>","tags":["PT006"]},{"location":"rules/pytest-parametrize-names-wrong-type/#options","title":"Options","text":"<ul> <li><code>lint.flake8-pytest-style.parametrize-names-type</code></li> </ul>","tags":["PT006"]},{"location":"rules/pytest-parametrize-names-wrong-type/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: How to parametrize fixtures and test functions</li> </ul>","tags":["PT006"]},{"location":"rules/pytest-parametrize-values-wrong-type/","title":"pytest-parametrize-values-wrong-type (PT007)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is sometimes available.</p>","tags":["PT007"]},{"location":"rules/pytest-parametrize-values-wrong-type/#what-it-does","title":"What it does","text":"<p>Checks for the type of parameter values passed to <code>pytest.mark.parametrize</code>.</p>","tags":["PT007"]},{"location":"rules/pytest-parametrize-values-wrong-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>argvalues</code> argument of <code>pytest.mark.parametrize</code> takes an iterator of parameter values, which can be provided as lists or tuples.</p> <p>To aid in readability, it's recommended to use a consistent style for the list of values rows, and, in the case of multiple parameters, for each row of values.</p> <p>The style for the list of values rows can be configured via the <code>lint.flake8-pytest-style.parametrize-values-type</code> setting, while the style for each row of values can be configured via the <code>lint.flake8-pytest-style.parametrize-values-row-type</code> setting.</p> <p>For example, <code>lint.flake8-pytest-style.parametrize-values-type</code> will lead to the following expectations:</p> <ul> <li><code>tuple</code>: <code>@pytest.mark.parametrize(\"value\", (\"a\", \"b\", \"c\"))</code></li> <li><code>list</code>: <code>@pytest.mark.parametrize(\"value\", [\"a\", \"b\", \"c\"])</code></li> </ul> <p>Similarly, <code>lint.flake8-pytest-style.parametrize-values-row-type</code> will lead to the following expectations:</p> <ul> <li><code>tuple</code>: <code>@pytest.mark.parametrize((\"key\", \"value\"), [(\"a\", \"b\"), (\"c\", \"d\")])</code></li> <li><code>list</code>: <code>@pytest.mark.parametrize((\"key\", \"value\"), [[\"a\", \"b\"], [\"c\", \"d\"]])</code></li> </ul>","tags":["PT007"]},{"location":"rules/pytest-parametrize-values-wrong-type/#example","title":"Example","text":"<pre><code>import pytest\n# expected list, got tuple\n@pytest.mark.parametrize(\"param\", (1, 2))\ndef test_foo(param): ...\n# expected top-level list, got tuple\n@pytest.mark.parametrize(\n(\"param1\", \"param2\"),\n(\n(1, 2),\n(3, 4),\n),\n)\ndef test_bar(param1, param2): ...\n# expected individual rows to be tuples, got lists\n@pytest.mark.parametrize(\n(\"param1\", \"param2\"),\n[\n[1, 2],\n[3, 4],\n],\n)\ndef test_baz(param1, param2): ...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.mark.parametrize(\"param\", [1, 2, 3])\ndef test_foo(param): ...\n@pytest.mark.parametrize((\"param1\", \"param2\"), [(1, 2), (3, 4)])\ndef test_bar(param1, param2): ...\n</code></pre>","tags":["PT007"]},{"location":"rules/pytest-parametrize-values-wrong-type/#options","title":"Options","text":"<ul> <li><code>lint.flake8-pytest-style.parametrize-values-type</code></li> <li><code>lint.flake8-pytest-style.parametrize-values-row-type</code></li> </ul>","tags":["PT007"]},{"location":"rules/pytest-parametrize-values-wrong-type/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: How to parametrize fixtures and test functions</li> </ul>","tags":["PT007"]},{"location":"rules/pytest-patch-with-lambda/","title":"pytest-patch-with-lambda (PT008)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT008"]},{"location":"rules/pytest-patch-with-lambda/#what-it-does","title":"What it does","text":"<p>Checks for mocked calls that use a dummy <code>lambda</code> function instead of <code>return_value</code>.</p>","tags":["PT008"]},{"location":"rules/pytest-patch-with-lambda/#why-is-this-bad","title":"Why is this bad?","text":"<p>When patching calls, an explicit <code>return_value</code> better conveys the intent than a <code>lambda</code> function, assuming the <code>lambda</code> does not use the arguments passed to it.</p> <p><code>return_value</code> is also robust to changes in the patched function's signature, and enables additional assertions to verify behavior. For example, <code>return_value</code> allows for verification of the number of calls or the arguments passed to the patched function via <code>assert_called_once_with</code> and related methods.</p>","tags":["PT008"]},{"location":"rules/pytest-patch-with-lambda/#example","title":"Example","text":"<pre><code>def test_foo(mocker):\nmocker.patch(\"module.target\", lambda x, y: 7)\n</code></pre> <p>Use instead:</p> <pre><code>def test_foo(mocker):\nmocker.patch(\"module.target\", return_value=7)\n# If the lambda makes use of the arguments, no diagnostic is emitted.\nmocker.patch(\"module.other_target\", lambda x, y: x)\n</code></pre>","tags":["PT008"]},{"location":"rules/pytest-patch-with-lambda/#references","title":"References","text":"<ul> <li>Python documentation: <code>unittest.mock.patch</code></li> <li>PyPI: <code>pytest-mock</code></li> </ul>","tags":["PT008"]},{"location":"rules/pytest-raises-too-broad/","title":"pytest-raises-too-broad (PT011)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT011"]},{"location":"rules/pytest-raises-too-broad/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.raises</code> calls without a <code>match</code> parameter.</p>","tags":["PT011"]},{"location":"rules/pytest-raises-too-broad/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pytest.raises(Error)</code> will catch any <code>Error</code> and may catch errors that are unrelated to the code under test. To avoid this, <code>pytest.raises</code> should be called with a <code>match</code> parameter. The exception names that require a <code>match</code> parameter can be configured via the <code>lint.flake8-pytest-style.raises-require-match-for</code> and <code>lint.flake8-pytest-style.raises-extend-require-match-for</code> settings.</p>","tags":["PT011"]},{"location":"rules/pytest-raises-too-broad/#example","title":"Example","text":"<pre><code>import pytest\ndef test_foo():\nwith pytest.raises(ValueError):\n...\n# empty string is also an error\nwith pytest.raises(ValueError, match=\"\"):\n...\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\ndef test_foo():\nwith pytest.raises(ValueError, match=\"expected message\"):\n...\n</code></pre>","tags":["PT011"]},{"location":"rules/pytest-raises-too-broad/#options","title":"Options","text":"<ul> <li><code>lint.flake8-pytest-style.raises-require-match-for</code></li> <li><code>lint.flake8-pytest-style.raises-extend-require-match-for</code></li> </ul>","tags":["PT011"]},{"location":"rules/pytest-raises-too-broad/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.raises</code></li> </ul>","tags":["PT011"]},{"location":"rules/pytest-raises-with-multiple-statements/","title":"pytest-raises-with-multiple-statements (PT012)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT012"]},{"location":"rules/pytest-raises-with-multiple-statements/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.raises</code> context managers with multiple statements.</p>","tags":["PT012"]},{"location":"rules/pytest-raises-with-multiple-statements/#why-is-this-bad","title":"Why is this bad?","text":"<p>When a <code>pytest.raises</code> is used as a context manager and contains multiple statements, it can lead to the test passing when it actually should fail. To avoid this, a <code>pytest.raises</code> context manager should only contain a single simple statement that raises the expected exception.</p>","tags":["PT012"]},{"location":"rules/pytest-raises-with-multiple-statements/#example","title":"Example","text":"<pre><code>import pytest\ndef test_foo():\nwith pytest.raises(MyError):\nsetup()\nfunc_to_test()  # not executed if `setup()` raises `MyError`\nassert foo()  # not executed\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\ndef test_foo():\nsetup()\nwith pytest.raises(MyError):\nfunc_to_test()\nassert foo()\n</code></pre>","tags":["PT012"]},{"location":"rules/pytest-raises-with-multiple-statements/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.raises</code></li> </ul>","tags":["PT012"]},{"location":"rules/pytest-raises-without-exception/","title":"pytest-raises-without-exception (PT010)","text":"<p>Derived from the flake8-pytest-style linter.</p>","tags":["PT010"]},{"location":"rules/pytest-raises-without-exception/#what-it-does","title":"What it does","text":"<p>Checks for <code>pytest.raises</code> calls without an expected exception.</p>","tags":["PT010"]},{"location":"rules/pytest-raises-without-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pytest.raises</code> expects to receive an expected exception as its first argument. If omitted, the <code>pytest.raises</code> call will fail at runtime.</p>","tags":["PT010"]},{"location":"rules/pytest-raises-without-exception/#example","title":"Example","text":"<pre><code>import pytest\ndef test_foo():\nwith pytest.raises():\ndo_something()\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\ndef test_foo():\nwith pytest.raises(SomeException):\ndo_something()\n</code></pre>","tags":["PT010"]},{"location":"rules/pytest-raises-without-exception/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.raises</code></li> </ul>","tags":["PT010"]},{"location":"rules/pytest-unittest-assertion/","title":"pytest-unittest-assertion (PT009)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is sometimes available.</p>","tags":["PT009"]},{"location":"rules/pytest-unittest-assertion/#what-it-does","title":"What it does","text":"<p>Checks for uses of assertion methods from the <code>unittest</code> module.</p>","tags":["PT009"]},{"location":"rules/pytest-unittest-assertion/#why-is-this-bad","title":"Why is this bad?","text":"<p>To make use of <code>pytest</code>'s assertion rewriting, a regular <code>assert</code> statement is preferred over <code>unittest</code>'s assertion methods.</p>","tags":["PT009"]},{"location":"rules/pytest-unittest-assertion/#example","title":"Example","text":"<pre><code>import unittest\nclass TestFoo(unittest.TestCase):\ndef test_foo(self):\nself.assertEqual(a, b)\n</code></pre> <p>Use instead:</p> <pre><code>import unittest\nclass TestFoo(unittest.TestCase):\ndef test_foo(self):\nassert a == b\n</code></pre>","tags":["PT009"]},{"location":"rules/pytest-unittest-assertion/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: Assertion introspection details</li> </ul>","tags":["PT009"]},{"location":"rules/pytest-unittest-raises-assertion/","title":"pytest-unittest-raises-assertion (PT027)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is sometimes available.</p>","tags":["PT027"]},{"location":"rules/pytest-unittest-raises-assertion/#what-it-does","title":"What it does","text":"<p>Checks for uses of exception-related assertion methods from the <code>unittest</code> module.</p>","tags":["PT027"]},{"location":"rules/pytest-unittest-raises-assertion/#why-is-this-bad","title":"Why is this bad?","text":"<p>To enforce the assertion style recommended by <code>pytest</code>, <code>pytest.raises</code> is preferred over the exception-related assertion methods in <code>unittest</code>, like <code>assertRaises</code>.</p>","tags":["PT027"]},{"location":"rules/pytest-unittest-raises-assertion/#example","title":"Example","text":"<pre><code>import unittest\nclass TestFoo(unittest.TestCase):\ndef test_foo(self):\nwith self.assertRaises(ValueError):\nraise ValueError(\"foo\")\n</code></pre> <p>Use instead:</p> <pre><code>import unittest\nimport pytest\nclass TestFoo(unittest.TestCase):\ndef test_foo(self):\nwith pytest.raises(ValueError):\nraise ValueError(\"foo\")\n</code></pre>","tags":["PT027"]},{"location":"rules/pytest-unittest-raises-assertion/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: Assertions about expected exceptions</li> </ul>","tags":["PT027"]},{"location":"rules/pytest-unnecessary-asyncio-mark-on-fixture/","title":"pytest-unnecessary-asyncio-mark-on-fixture (PT024)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is always available.</p>","tags":["PT024"]},{"location":"rules/pytest-unnecessary-asyncio-mark-on-fixture/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>@pytest.mark.asyncio</code> decorators applied to fixtures.</p>","tags":["PT024"]},{"location":"rules/pytest-unnecessary-asyncio-mark-on-fixture/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pytest.mark.asyncio</code> is unnecessary for fixtures.</p>","tags":["PT024"]},{"location":"rules/pytest-unnecessary-asyncio-mark-on-fixture/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.mark.asyncio()\n@pytest.fixture()\nasync def my_fixture():\nreturn 0\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\nasync def my_fixture():\nreturn 0\n</code></pre>","tags":["PT024"]},{"location":"rules/pytest-unnecessary-asyncio-mark-on-fixture/#references","title":"References","text":"<ul> <li>PyPI: <code>pytest-asyncio</code></li> </ul>","tags":["PT024"]},{"location":"rules/pytest-use-fixtures-without-parameters/","title":"pytest-use-fixtures-without-parameters (PT026)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is always available.</p>","tags":["PT026"]},{"location":"rules/pytest-use-fixtures-without-parameters/#what-it-does","title":"What it does","text":"<p>Checks for <code>@pytest.mark.usefixtures()</code> decorators that aren't passed any arguments.</p>","tags":["PT026"]},{"location":"rules/pytest-use-fixtures-without-parameters/#why-is-this-bad","title":"Why is this bad?","text":"<p>A <code>@pytest.mark.usefixtures()</code> decorator that isn't passed any arguments is useless and should be removed.</p>","tags":["PT026"]},{"location":"rules/pytest-use-fixtures-without-parameters/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.mark.usefixtures()\ndef test_something(): ...\n</code></pre> <p>Use instead:</p> <pre><code>def test_something(): ...\n</code></pre>","tags":["PT026"]},{"location":"rules/pytest-use-fixtures-without-parameters/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: <code>pytest.mark.usefixtures</code></li> </ul>","tags":["PT026"]},{"location":"rules/pytest-useless-yield-fixture/","title":"pytest-useless-yield-fixture (PT022)","text":"<p>Derived from the flake8-pytest-style linter.</p> <p>Fix is always available.</p>","tags":["PT022"]},{"location":"rules/pytest-useless-yield-fixture/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>yield</code> expressions in <code>pytest</code> fixtures.</p>","tags":["PT022"]},{"location":"rules/pytest-useless-yield-fixture/#why-is-this-bad","title":"Why is this bad?","text":"<p>In <code>pytest</code> fixtures, the <code>yield</code> expression should only be used for fixtures that include teardown code, to clean up the fixture after the test function has finished executing.</p>","tags":["PT022"]},{"location":"rules/pytest-useless-yield-fixture/#example","title":"Example","text":"<pre><code>import pytest\n@pytest.fixture()\ndef my_fixture():\nresource = acquire_resource()\nyield resource\n</code></pre> <p>Use instead:</p> <pre><code>import pytest\n@pytest.fixture()\ndef my_fixture_with_teardown():\nresource = acquire_resource()\nyield resource\nresource.release()\n@pytest.fixture()\ndef my_fixture_without_teardown():\nresource = acquire_resource()\nreturn resource\n</code></pre>","tags":["PT022"]},{"location":"rules/pytest-useless-yield-fixture/#references","title":"References","text":"<ul> <li><code>pytest</code> documentation: Teardown/Cleanup</li> </ul>","tags":["PT022"]},{"location":"rules/quadratic-list-summation/","title":"quadratic-list-summation (RUF017)","text":"<p>Fix is always available.</p>","tags":["RUF017"]},{"location":"rules/quadratic-list-summation/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>sum()</code> to flatten lists of lists, which has quadratic complexity.</p>","tags":["RUF017"]},{"location":"rules/quadratic-list-summation/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of <code>sum()</code> to flatten lists of lists is quadratic in the number of lists, as <code>sum()</code> creates a new list for each element in the summation.</p> <p>Instead, consider using another method of flattening lists to avoid quadratic complexity. The following methods are all linear in the number of lists:</p> <ul> <li><code>functools.reduce(operator.iadd, lists, [])</code></li> <li><code>list(itertools.chain.from_iterable(lists))</code></li> <li><code>[item for sublist in lists for item in sublist]</code></li> </ul> <p>When fixing relevant violations, Ruff defaults to the <code>functools.reduce</code> form, which outperforms the other methods in microbenchmarks.</p>","tags":["RUF017"]},{"location":"rules/quadratic-list-summation/#example","title":"Example","text":"<pre><code>lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\njoined = sum(lists, [])\n</code></pre> <p>Use instead:</p> <pre><code>import functools\nimport operator\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfunctools.reduce(operator.iadd, lists, [])\n</code></pre>","tags":["RUF017"]},{"location":"rules/quadratic-list-summation/#references","title":"References","text":"<ul> <li>How Not to Flatten a List of Lists in Python</li> <li>How do I make a flat list out of a list of lists?</li> </ul>","tags":["RUF017"]},{"location":"rules/quoted-annotation-in-stub/","title":"quoted-annotation-in-stub (PYI020)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI020"]},{"location":"rules/quoted-annotation-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for quoted type annotations in stub (<code>.pyi</code>) files, which should be avoided.</p>","tags":["PYI020"]},{"location":"rules/quoted-annotation-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files natively support forward references in all contexts, as stubs are never executed at runtime. (They should be thought of as \"data files\" for type checkers and IDEs.) As such, quotes are never required for type annotations in stub files, and should be omitted.</p>","tags":["PYI020"]},{"location":"rules/quoted-annotation-in-stub/#example","title":"Example","text":"<pre><code>def function() -&gt; \"int\": ...\n</code></pre> <p>Use instead:</p> <pre><code>def function() -&gt; int: ...\n</code></pre>","tags":["PYI020"]},{"location":"rules/quoted-annotation-in-stub/#references","title":"References","text":"<ul> <li>Typing documentation - Writing and Maintaining Stub Files</li> </ul>","tags":["PYI020"]},{"location":"rules/quoted-annotation/","title":"quoted-annotation (UP037)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP037"]},{"location":"rules/quoted-annotation/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unnecessary quotes in type annotations.</p>","tags":["UP037"]},{"location":"rules/quoted-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, type annotations can be quoted to avoid forward references.</p> <p>However, if <code>from __future__ import annotations</code> is present, Python will always evaluate type annotations in a deferred manner, making the quotes unnecessary.</p> <p>Similarly, if the annotation is located in a typing-only context and won't be evaluated by Python at runtime, the quotes will also be considered unnecessary. For example, Python does not evaluate type annotations on assignments in function bodies.</p>","tags":["UP037"]},{"location":"rules/quoted-annotation/#example","title":"Example","text":"<p>Given:</p> <pre><code>from __future__ import annotations\ndef foo(bar: \"Bar\") -&gt; \"Bar\": ...\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\ndef foo(bar: Bar) -&gt; Bar: ...\n</code></pre> <p>Given:</p> <pre><code>def foo() -&gt; None:\nbar: \"Bar\"\n</code></pre> <p>Use instead:</p> <pre><code>def foo() -&gt; None:\nbar: Bar\n</code></pre>","tags":["UP037"]},{"location":"rules/quoted-annotation/#references","title":"References","text":"<ul> <li>PEP 563 \u2013 Postponed Evaluation of Annotations</li> <li>Python documentation: <code>__future__</code></li> </ul>","tags":["UP037"]},{"location":"rules/raise-literal/","title":"raise-literal (B016)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B016"]},{"location":"rules/raise-literal/#what-it-does","title":"What it does","text":"<p>Checks for <code>raise</code> statements that raise a literal value.</p>","tags":["B016"]},{"location":"rules/raise-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>raise</code> must be followed by an exception instance or an exception class, and exceptions must be instances of <code>BaseException</code> or a subclass thereof. Raising a literal will raise a <code>TypeError</code> at runtime.</p>","tags":["B016"]},{"location":"rules/raise-literal/#example","title":"Example","text":"<pre><code>raise \"foo\"\n</code></pre> <p>Use instead:</p> <pre><code>raise Exception(\"foo\")\n</code></pre>","tags":["B016"]},{"location":"rules/raise-literal/#references","title":"References","text":"<ul> <li>Python documentation: <code>raise</code> statement</li> </ul>","tags":["B016"]},{"location":"rules/raise-not-implemented/","title":"raise-not-implemented (F901)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F901"]},{"location":"rules/raise-not-implemented/#what-it-does","title":"What it does","text":"<p>Checks for <code>raise</code> statements that raise <code>NotImplemented</code>.</p>","tags":["F901"]},{"location":"rules/raise-not-implemented/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>NotImplemented</code> is an exception used by binary special methods to indicate that an operation is not implemented with respect to a particular type.</p> <p><code>NotImplemented</code> should not be raised directly. Instead, raise <code>NotImplementedError</code>, which is used to indicate that the method is abstract or not implemented in the derived class.</p>","tags":["F901"]},{"location":"rules/raise-not-implemented/#example","title":"Example","text":"<pre><code>class Foo:\ndef bar(self):\nraise NotImplemented\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\ndef bar(self):\nraise NotImplementedError\n</code></pre>","tags":["F901"]},{"location":"rules/raise-not-implemented/#references","title":"References","text":"<ul> <li>Python documentation: <code>NotImplemented</code></li> <li>Python documentation: <code>NotImplementedError</code></li> </ul>","tags":["F901"]},{"location":"rules/raise-vanilla-args/","title":"raise-vanilla-args (TRY003)","text":"<p>Derived from the tryceratops linter.</p>","tags":["TRY003"]},{"location":"rules/raise-vanilla-args/#what-it-does","title":"What it does","text":"<p>Checks for long exception messages that are not defined in the exception class itself.</p>","tags":["TRY003"]},{"location":"rules/raise-vanilla-args/#why-is-this-bad","title":"Why is this bad?","text":"<p>By formatting an exception message at the <code>raise</code> site, the exception class becomes less reusable, and may now raise inconsistent messages depending on where it is raised.</p> <p>If the exception message is instead defined within the exception class, it will be consistent across all <code>raise</code> invocations.</p> <p>This rule is not enforced for some built-in exceptions that are commonly raised with a message and would be unusual to subclass, such as <code>NotImplementedError</code>.</p>","tags":["TRY003"]},{"location":"rules/raise-vanilla-args/#example","title":"Example","text":"<pre><code>class CantBeNegative(Exception):\npass\ndef foo(x):\nif x &lt; 0:\nraise CantBeNegative(f\"{x} is negative\")\n</code></pre> <p>Use instead:</p> <pre><code>class CantBeNegative(Exception):\ndef __init__(self, number):\nsuper().__init__(f\"{number} is negative\")\ndef foo(x):\nif x &lt; 0:\nraise CantBeNegative(x)\n</code></pre>","tags":["TRY003"]},{"location":"rules/raise-vanilla-class/","title":"raise-vanilla-class (TRY002)","text":"<p>Derived from the tryceratops linter.</p>","tags":["TRY002"]},{"location":"rules/raise-vanilla-class/#what-it-does","title":"What it does","text":"<p>Checks for code that raises <code>Exception</code> or <code>BaseException</code> directly.</p>","tags":["TRY002"]},{"location":"rules/raise-vanilla-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>Handling such exceptions requires the use of <code>except Exception</code> or <code>except BaseException</code>. These will capture almost any raised exception, including failed assertions, division by zero, and more.</p> <p>Prefer to raise your own exception, or a more specific built-in exception, so that you can avoid over-capturing exceptions that you don't intend to handle.</p>","tags":["TRY002"]},{"location":"rules/raise-vanilla-class/#example","title":"Example","text":"<pre><code>def main_function():\nif not cond:\nraise Exception()\ndef consumer_func():\ntry:\ndo_step()\nprepare()\nmain_function()\nexcept Exception:\nlogger.error(\"Oops\")\n</code></pre> <p>Use instead:</p> <pre><code>def main_function():\nif not cond:\nraise CustomException()\ndef consumer_func():\ntry:\ndo_step()\nprepare()\nmain_function()\nexcept CustomException:\nlogger.error(\"Main function failed\")\nexcept Exception:\nlogger.error(\"Oops\")\n</code></pre>","tags":["TRY002"]},{"location":"rules/raise-within-try/","title":"raise-within-try (TRY301)","text":"<p>Derived from the tryceratops linter.</p>","tags":["TRY301"]},{"location":"rules/raise-within-try/#what-it-does","title":"What it does","text":"<p>Checks for <code>raise</code> statements within <code>try</code> blocks. The only <code>raise</code>s caught are those that throw exceptions caught by the <code>try</code> statement itself.</p>","tags":["TRY301"]},{"location":"rules/raise-within-try/#why-is-this-bad","title":"Why is this bad?","text":"<p>Raising and catching exceptions within the same <code>try</code> block is redundant, as the code can be refactored to avoid the <code>try</code> block entirely.</p> <p>Alternatively, the <code>raise</code> can be moved within an inner function, making the exception reusable across multiple call sites.</p>","tags":["TRY301"]},{"location":"rules/raise-within-try/#example","title":"Example","text":"<pre><code>def bar():\npass\ndef foo():\ntry:\na = bar()\nif not a:\nraise ValueError\nexcept ValueError:\nraise\n</code></pre> <p>Use instead:</p> <pre><code>def bar():\nraise ValueError\ndef foo():\ntry:\na = bar()  # refactored `bar` to raise `ValueError`\nexcept ValueError:\nraise\n</code></pre>","tags":["TRY301"]},{"location":"rules/raise-without-from-inside-except/","title":"raise-without-from-inside-except (B904)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B904"]},{"location":"rules/raise-without-from-inside-except/#what-it-does","title":"What it does","text":"<p>Checks for <code>raise</code> statements in exception handlers that lack a <code>from</code> clause.</p>","tags":["B904"]},{"location":"rules/raise-without-from-inside-except/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, <code>raise</code> can be used with or without an exception from which the current exception is derived. This is known as exception chaining. When printing the stack trace, chained exceptions are displayed in such a way so as make it easier to trace the exception back to its root cause.</p> <p>When raising an exception from within an <code>except</code> clause, always include a <code>from</code> clause to facilitate exception chaining. If the exception is not chained, it will be difficult to trace the exception back to its root cause.</p>","tags":["B904"]},{"location":"rules/raise-without-from-inside-except/#example","title":"Example","text":"<pre><code>try:\n...\nexcept FileNotFoundError:\nif ...:\nraise RuntimeError(\"...\")\nelse:\nraise UserWarning(\"...\")\n</code></pre> <p>Use instead:</p> <pre><code>try:\n...\nexcept FileNotFoundError as exc:\nif ...:\nraise RuntimeError(\"...\") from None\nelse:\nraise UserWarning(\"...\") from exc\n</code></pre>","tags":["B904"]},{"location":"rules/raise-without-from-inside-except/#references","title":"References","text":"<ul> <li>Python documentation: <code>raise</code> statement</li> </ul>","tags":["B904"]},{"location":"rules/raw-string-in-exception/","title":"raw-string-in-exception (EM101)","text":"<p>Derived from the flake8-errmsg linter.</p> <p>Fix is sometimes available.</p>","tags":["EM101"]},{"location":"rules/raw-string-in-exception/#what-it-does","title":"What it does","text":"<p>Checks for the use of string literals in exception constructors.</p>","tags":["EM101"]},{"location":"rules/raw-string-in-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python includes the <code>raise</code> in the default traceback (and formatters like Rich and IPython do too).</p> <p>By using a string literal, the error message will be duplicated in the traceback, which can make the traceback less readable.</p>","tags":["EM101"]},{"location":"rules/raw-string-in-exception/#example","title":"Example","text":"<p>Given:</p> <pre><code>raise RuntimeError(\"'Some value' is incorrect\")\n</code></pre> <p>Python will produce a traceback like:</p> <pre><code>Traceback (most recent call last):\n  File \"tmp.py\", line 2, in &lt;module&gt;\n    raise RuntimeError(\"'Some value' is incorrect\")\nRuntimeError: 'Some value' is incorrect\n</code></pre> <p>Instead, assign the string to a variable:</p> <pre><code>msg = \"'Some value' is incorrect\"\nraise RuntimeError(msg)\n</code></pre> <p>Which will produce a traceback like:</p> <pre><code>Traceback (most recent call last):\n  File \"tmp.py\", line 3, in &lt;module&gt;\n    raise RuntimeError(msg)\nRuntimeError: 'Some value' is incorrect\n</code></pre>","tags":["EM101"]},{"location":"rules/re-sub-positional-args/","title":"re-sub-positional-args (B034)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B034"]},{"location":"rules/re-sub-positional-args/#what-it-does","title":"What it does","text":"<p>Checks for calls to <code>re.sub</code>, <code>re.subn</code>, and <code>re.split</code> that pass <code>count</code>, <code>maxsplit</code>, or <code>flags</code> as positional arguments.</p>","tags":["B034"]},{"location":"rules/re-sub-positional-args/#why-is-this-bad","title":"Why is this bad?","text":"<p>Passing <code>count</code>, <code>maxsplit</code>, or <code>flags</code> as positional arguments to <code>re.sub</code>, <code>re.subn</code>, or <code>re.split</code> can lead to confusion, as most methods in the <code>re</code> module accept <code>flags</code> as the third positional argument, while <code>re.sub</code>, <code>re.subn</code>, and <code>re.split</code> have different signatures.</p> <p>Instead, pass <code>count</code>, <code>maxsplit</code>, and <code>flags</code> as keyword arguments.</p>","tags":["B034"]},{"location":"rules/re-sub-positional-args/#example","title":"Example","text":"<pre><code>import re\nre.split(\"pattern\", \"replacement\", 1)\n</code></pre> <p>Use instead:</p> <pre><code>import re\nre.split(\"pattern\", \"replacement\", maxsplit=1)\n</code></pre>","tags":["B034"]},{"location":"rules/re-sub-positional-args/#references","title":"References","text":"<ul> <li>Python documentation: <code>re.sub</code></li> <li>Python documentation: <code>re.subn</code></li> <li>Python documentation: <code>re.split</code></li> </ul>","tags":["B034"]},{"location":"rules/read-whole-file/","title":"read-whole-file (FURB101)","text":"<p>Derived from the refurb linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB101"]},{"location":"rules/read-whole-file/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>open</code> and <code>read</code> that can be replaced by <code>pathlib</code> methods, like <code>Path.read_text</code> and <code>Path.read_bytes</code>.</p>","tags":["FURB101"]},{"location":"rules/read-whole-file/#why-is-this-bad","title":"Why is this bad?","text":"<p>When reading the entire contents of a file into a variable, it's simpler and more concise to use <code>pathlib</code> methods like <code>Path.read_text</code> and <code>Path.read_bytes</code> instead of <code>open</code> and <code>read</code> calls via <code>with</code> statements.</p>","tags":["FURB101"]},{"location":"rules/read-whole-file/#example","title":"Example","text":"<pre><code>with open(filename) as f:\ncontents = f.read()\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\ncontents = Path(filename).read_text()\n</code></pre>","tags":["FURB101"]},{"location":"rules/read-whole-file/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.read_bytes</code></li> <li>Python documentation: <code>Path.read_text</code></li> </ul>","tags":["FURB101"]},{"location":"rules/readlines-in-for/","title":"readlines-in-for (FURB129)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p>","tags":["FURB129"]},{"location":"rules/readlines-in-for/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>readlines()</code> when iterating over a file line-by-line.</p>","tags":["FURB129"]},{"location":"rules/readlines-in-for/#why-is-this-bad","title":"Why is this bad?","text":"<p>Rather than iterating over all lines in a file by calling <code>readlines()</code>, it's more convenient and performant to iterate over the file object directly.</p>","tags":["FURB129"]},{"location":"rules/readlines-in-for/#example","title":"Example","text":"<pre><code>with open(\"file.txt\") as fp:\nfor line in fp.readlines():\n...\n</code></pre> <p>Use instead:</p> <pre><code>with open(\"file.txt\") as fp:\nfor line in fp:\n...\n</code></pre>","tags":["FURB129"]},{"location":"rules/readlines-in-for/#references","title":"References","text":"<ul> <li>Python documentation: <code>io.IOBase.readlines</code></li> </ul>","tags":["FURB129"]},{"location":"rules/redeclared-assigned-name/","title":"redeclared-assigned-name (PLW0128)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0128"]},{"location":"rules/redeclared-assigned-name/#what-it-does","title":"What it does","text":"<p>Checks for declared assignments to the same variable multiple times in the same assignment.</p>","tags":["PLW0128"]},{"location":"rules/redeclared-assigned-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>Assigning a variable multiple times in the same assignment is redundant, as the final assignment to the variable is what the value will be.</p>","tags":["PLW0128"]},{"location":"rules/redeclared-assigned-name/#example","title":"Example","text":"<pre><code>a, b, a = (1, 2, 3)\nprint(a)  # 3\n</code></pre> <p>Use instead:</p> <pre><code># this is assuming you want to assign 3 to `a`\n_, b, a = (1, 2, 3)\nprint(a)  # 3\n</code></pre>","tags":["PLW0128"]},{"location":"rules/redefined-argument-from-local/","title":"redefined-argument-from-local (PLR1704)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR1704"]},{"location":"rules/redefined-argument-from-local/#what-it-does","title":"What it does","text":"<p>Checks for variables defined in <code>for</code>, <code>try</code>, <code>with</code> statements that redefine function parameters.</p>","tags":["PLR1704"]},{"location":"rules/redefined-argument-from-local/#why-is-this-bad","title":"Why is this bad?","text":"<p>Redefined variables can cause unexpected behavior because of overridden function parameters. If nested functions are declared, an inner function's body can override an outer function's parameters.</p>","tags":["PLR1704"]},{"location":"rules/redefined-argument-from-local/#example","title":"Example","text":"<pre><code>def show(host_id=10.11):\nfor host_id, host in [[12.13, \"Venus\"], [14.15, \"Mars\"]]:\nprint(host_id, host)\n</code></pre> <p>Use instead:</p> <pre><code>def show(host_id=10.11):\nfor inner_host_id, host in [[12.13, \"Venus\"], [14.15, \"Mars\"]]:\nprint(host_id, inner_host_id, host)\n</code></pre>","tags":["PLR1704"]},{"location":"rules/redefined-argument-from-local/#options","title":"Options","text":"<ul> <li><code>lint.dummy-variable-rgx</code></li> </ul>","tags":["PLR1704"]},{"location":"rules/redefined-argument-from-local/#references","title":"References","text":"<ul> <li>Pylint documentation</li> </ul>","tags":["PLR1704"]},{"location":"rules/redefined-loop-name/","title":"redefined-loop-name (PLW2901)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW2901"]},{"location":"rules/redefined-loop-name/#what-it-does","title":"What it does","text":"<p>Checks for variables defined in <code>for</code> loops and <code>with</code> statements that get overwritten within the body, for example by another <code>for</code> loop or <code>with</code> statement or by direct assignment.</p>","tags":["PLW2901"]},{"location":"rules/redefined-loop-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>Redefinition of a loop variable inside the loop's body causes its value to differ from the original loop iteration for the remainder of the block, in a way that will likely cause bugs.</p> <p>In Python, unlike many other languages, <code>for</code> loops and <code>with</code> statements don't define their own scopes. Therefore, a nested loop that uses the same target variable name as an outer loop will reuse the same actual variable, and the value from the last iteration will \"leak out\" into the remainder of the enclosing loop.</p> <p>While this mistake is easy to spot in small examples, it can be hidden in larger blocks of code, where the definition and redefinition of the variable may not be visible at the same time.</p>","tags":["PLW2901"]},{"location":"rules/redefined-loop-name/#example","title":"Example","text":"<pre><code>for i in range(10):\ni = 9\nprint(i)  # prints 9 every iteration\nfor i in range(10):\nfor i in range(10):  # original value overwritten\npass\nprint(i)  # also prints 9 every iteration\nwith path1.open() as f:\nwith path2.open() as f:\nf = path2.open()\nprint(f.readline())  # prints a line from path2\n</code></pre>","tags":["PLW2901"]},{"location":"rules/redefined-while-unused/","title":"redefined-while-unused (F811)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F811"]},{"location":"rules/redefined-while-unused/#what-it-does","title":"What it does","text":"<p>Checks for variable definitions that redefine (or \"shadow\") unused variables.</p>","tags":["F811"]},{"location":"rules/redefined-while-unused/#why-is-this-bad","title":"Why is this bad?","text":"<p>Redefinitions of unused names are unnecessary and often indicative of a mistake.</p>","tags":["F811"]},{"location":"rules/redefined-while-unused/#example","title":"Example","text":"<pre><code>import foo\nimport bar\nimport foo  # Redefinition of unused `foo` from line 1\n</code></pre> <p>Use instead:</p> <pre><code>import foo\nimport bar\n</code></pre>","tags":["F811"]},{"location":"rules/redirected-noqa/","title":"redirected-noqa (RUF101)","text":"<p>Fix is always available.</p>","tags":["RUF101"]},{"location":"rules/redirected-noqa/#what-it-does","title":"What it does","text":"<p>Checks for <code>noqa</code> directives that use redirected rule codes.</p>","tags":["RUF101"]},{"location":"rules/redirected-noqa/#why-is-this-bad","title":"Why is this bad?","text":"<p>When one of Ruff's rule codes has been redirected, the implication is that the rule has been deprecated in favor of another rule or code. To keep your codebase consistent and up-to-date, prefer the canonical rule code over the deprecated code.</p>","tags":["RUF101"]},{"location":"rules/redirected-noqa/#example","title":"Example","text":"<pre><code>x = eval(command)  # noqa: PGH001\n</code></pre> <p>Use instead:</p> <pre><code>x = eval(command)  # noqa: S307\n</code></pre>","tags":["RUF101"]},{"location":"rules/redundant-backslash/","title":"redundant-backslash (E502)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E502"]},{"location":"rules/redundant-backslash/#what-it-does","title":"What it does","text":"<p>Checks for redundant backslashes between brackets.</p>","tags":["E502"]},{"location":"rules/redundant-backslash/#why-is-this-bad","title":"Why is this bad?","text":"<p>Explicit line joins using a backslash are redundant between brackets.</p>","tags":["E502"]},{"location":"rules/redundant-backslash/#example","title":"Example","text":"<pre><code>x = (2 + \\\n    2)\n</code></pre> <p>Use instead:</p> <pre><code>x = (2 +\n2)\n</code></pre>","tags":["E502"]},{"location":"rules/redundant-bool-literal/","title":"redundant-bool-literal (RUF038)","text":"<p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF038"]},{"location":"rules/redundant-bool-literal/#what-it-does","title":"What it does","text":"<p>Checks for <code>Literal[True, False]</code> type annotations.</p>","tags":["RUF038"]},{"location":"rules/redundant-bool-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>Literal[True, False]</code> can be replaced with <code>bool</code> in type annotations, which has the same semantic meaning but is more concise and readable.</p> <p><code>bool</code> type has exactly two constant instances: <code>True</code> and <code>False</code>. Static type checkers such as mypy treat <code>Literal[True, False]</code> as equivalent to <code>bool</code> in a type annotation.</p>","tags":["RUF038"]},{"location":"rules/redundant-bool-literal/#example","title":"Example","text":"<pre><code>from typing import Literal\nx: Literal[True, False]\ny: Literal[True, False, \"hello\", \"world\"]\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Literal\nx: bool\ny: Literal[\"hello\", \"world\"] | bool\n</code></pre>","tags":["RUF038"]},{"location":"rules/redundant-bool-literal/#fix-safety","title":"Fix safety","text":"<p>The fix for this rule is marked as unsafe, as it may change the semantics of the code. Specifically:</p> <ul> <li>Type checkers may not treat <code>bool</code> as equivalent when overloading boolean arguments     with <code>Literal[True]</code> and <code>Literal[False]</code> (see, e.g., #14764 and #5421).</li> <li><code>bool</code> is not strictly equivalent to <code>Literal[True, False]</code>, as <code>bool</code> is     a subclass of <code>int</code>, and this rule may not apply if the type annotations are used     in a numeric context.</li> </ul> <p>Further, the <code>Literal</code> slice may contain trailing-line comments which the fix would remove.</p>","tags":["RUF038"]},{"location":"rules/redundant-bool-literal/#references","title":"References","text":"<ul> <li>Typing documentation: Legal parameters for <code>Literal</code> at type check time</li> <li>Python documentation: Boolean type - <code>bool</code></li> </ul>","tags":["RUF038"]},{"location":"rules/redundant-final-literal/","title":"redundant-final-literal (PYI064)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI064"]},{"location":"rules/redundant-final-literal/#what-it-does","title":"What it does","text":"<p>Checks for redundant <code>Final[Literal[...]]</code> annotations.</p>","tags":["PYI064"]},{"location":"rules/redundant-final-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p>All constant variables annotated as <code>Final</code> are understood as implicitly having <code>Literal</code> types by a type checker. As such, a <code>Final[Literal[...]]</code> annotation can often be replaced with a bare <code>Final</code>, annotation, which will have the same meaning to the type checker while being more concise and more readable.</p>","tags":["PYI064"]},{"location":"rules/redundant-final-literal/#example","title":"Example","text":"<pre><code>from typing import Final, Literal\nx: Final[Literal[42]]\ny: Final[Literal[42]] = 42\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Final, Literal\nx: Final = 42\ny: Final = 42\n</code></pre>","tags":["PYI064"]},{"location":"rules/redundant-literal-union/","title":"redundant-literal-union (PYI051)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI051"]},{"location":"rules/redundant-literal-union/#what-it-does","title":"What it does","text":"<p>Checks for redundant unions between a <code>Literal</code> and a builtin supertype of that <code>Literal</code>.</p>","tags":["PYI051"]},{"location":"rules/redundant-literal-union/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using a <code>Literal</code> type in a union with its builtin supertype is redundant, as the supertype will be strictly more general than the <code>Literal</code> type. For example, <code>Literal[\"A\"] | str</code> is equivalent to <code>str</code>, and <code>Literal[1] | int</code> is equivalent to <code>int</code>, as <code>str</code> and <code>int</code> are the supertypes of <code>\"A\"</code> and <code>1</code> respectively.</p>","tags":["PYI051"]},{"location":"rules/redundant-literal-union/#example","title":"Example","text":"<pre><code>from typing import Literal\nx: Literal[\"A\", b\"B\"] | str\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Literal\nx: Literal[b\"B\"] | str\n</code></pre>","tags":["PYI051"]},{"location":"rules/redundant-log-base/","title":"redundant-log-base (FURB163)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p>","tags":["FURB163"]},{"location":"rules/redundant-log-base/#what-it-does","title":"What it does","text":"<p>Checks for <code>math.log</code> calls with a redundant base.</p>","tags":["FURB163"]},{"location":"rules/redundant-log-base/#why-is-this-bad","title":"Why is this bad?","text":"<p>The default base of <code>math.log</code> is <code>e</code>, so specifying it explicitly is redundant.</p> <p>Instead of passing 2 or 10 as the base, use <code>math.log2</code> or <code>math.log10</code> respectively, as these dedicated variants are typically more accurate than <code>math.log</code>.</p>","tags":["FURB163"]},{"location":"rules/redundant-log-base/#example","title":"Example","text":"<pre><code>import math\nmath.log(4, math.e)\nmath.log(4, 2)\nmath.log(4, 10)\n</code></pre> <p>Use instead:</p> <pre><code>import math\nmath.log(4)\nmath.log2(4)\nmath.log10(4)\n</code></pre>","tags":["FURB163"]},{"location":"rules/redundant-log-base/#references","title":"References","text":"<ul> <li>Python documentation: <code>math.log</code></li> <li>Python documentation: <code>math.log2</code></li> <li>Python documentation: <code>math.log10</code></li> <li>Python documentation: <code>math.e</code></li> </ul>","tags":["FURB163"]},{"location":"rules/redundant-none-literal/","title":"redundant-none-literal (PYI061)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PYI061"]},{"location":"rules/redundant-none-literal/#what-it-does","title":"What it does","text":"<p>Checks for redundant <code>Literal[None]</code> annotations.</p>","tags":["PYI061"]},{"location":"rules/redundant-none-literal/#why-is-this-bad","title":"Why is this bad?","text":"<p>While <code>Literal[None]</code> is a valid type annotation, it is semantically equivalent to <code>None</code>. Prefer <code>None</code> over <code>Literal[None]</code> for both consistency and readability.</p>","tags":["PYI061"]},{"location":"rules/redundant-none-literal/#example","title":"Example","text":"<pre><code>from typing import Literal\nLiteral[None]\nLiteral[1, 2, 3, \"foo\", 5, None]\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Literal\nNone\nLiteral[1, 2, 3, \"foo\", 5] | None\n</code></pre>","tags":["PYI061"]},{"location":"rules/redundant-none-literal/#references","title":"References","text":"<ul> <li>Typing documentation: Legal parameters for <code>Literal</code> at type check time</li> </ul>","tags":["PYI061"]},{"location":"rules/redundant-numeric-union/","title":"redundant-numeric-union (PYI041)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI041"]},{"location":"rules/redundant-numeric-union/#what-it-does","title":"What it does","text":"<p>Checks for parameter annotations that contain redundant unions between builtin numeric types (e.g., <code>int | float</code>).</p>","tags":["PYI041"]},{"location":"rules/redundant-numeric-union/#why-is-this-bad","title":"Why is this bad?","text":"<p>The typing specification states:</p> <p>Python\u2019s numeric types <code>complex</code>, <code>float</code> and <code>int</code> are not subtypes of each other, but to support common use cases, the type system contains a straightforward shortcut: when an argument is annotated as having type <code>float</code>, an argument of type <code>int</code> is acceptable; similar, for an argument annotated as having type <code>complex</code>, arguments of type <code>float</code> or <code>int</code> are acceptable.</p> <p>As such, a union that includes both <code>int</code> and <code>float</code> is redundant in the specific context of a parameter annotation, as it is equivalent to a union that only includes <code>float</code>. For readability and clarity, unions should omit redundant elements.</p>","tags":["PYI041"]},{"location":"rules/redundant-numeric-union/#example","title":"Example","text":"<pre><code>def foo(x: float | int | str) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(x: float | str) -&gt; None: ...\n</code></pre>","tags":["PYI041"]},{"location":"rules/redundant-numeric-union/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as safe, unless the type annotation contains comments.</p> <p>Note that while the fix may flatten nested unions into a single top-level union, the semantics of the annotation will remain unchanged.</p>","tags":["PYI041"]},{"location":"rules/redundant-numeric-union/#references","title":"References","text":"<ul> <li>Python documentation: The numeric tower</li> <li>PEP 484: The numeric tower</li> </ul>","tags":["PYI041"]},{"location":"rules/redundant-open-modes/","title":"redundant-open-modes (UP015)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP015"]},{"location":"rules/redundant-open-modes/#what-it-does","title":"What it does","text":"<p>Checks for redundant <code>open</code> mode parameters.</p>","tags":["UP015"]},{"location":"rules/redundant-open-modes/#why-is-this-bad","title":"Why is this bad?","text":"<p>Redundant <code>open</code> mode parameters are unnecessary and should be removed to avoid confusion.</p>","tags":["UP015"]},{"location":"rules/redundant-open-modes/#example","title":"Example","text":"<pre><code>with open(\"foo.txt\", \"r\") as f:\n...\n</code></pre> <p>Use instead:</p> <pre><code>with open(\"foo.txt\") as f:\n...\n</code></pre>","tags":["UP015"]},{"location":"rules/redundant-open-modes/#references","title":"References","text":"<ul> <li>Python documentation: <code>open</code></li> </ul>","tags":["UP015"]},{"location":"rules/redundant-tuple-in-exception-handler/","title":"redundant-tuple-in-exception-handler (B013)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is always available.</p>","tags":["B013"]},{"location":"rules/redundant-tuple-in-exception-handler/#what-it-does","title":"What it does","text":"<p>Checks for single-element tuples in exception handlers (e.g., <code>except (ValueError,):</code>).</p> <p>Note: Single-element tuples consisting of a starred expression are allowed.</p>","tags":["B013"]},{"location":"rules/redundant-tuple-in-exception-handler/#why-is-this-bad","title":"Why is this bad?","text":"<p>A tuple with a single element can be more concisely and idiomatically expressed as a single value.</p>","tags":["B013"]},{"location":"rules/redundant-tuple-in-exception-handler/#example","title":"Example","text":"<pre><code>try:\n...\nexcept (ValueError,):\n...\n</code></pre> <p>Use instead:</p> <pre><code>try:\n...\nexcept ValueError:\n...\n</code></pre>","tags":["B013"]},{"location":"rules/redundant-tuple-in-exception-handler/#references","title":"References","text":"<ul> <li>Python documentation: <code>except</code> clause</li> </ul>","tags":["B013"]},{"location":"rules/regex-flag-alias/","title":"regex-flag-alias (FURB167)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p>","tags":["FURB167"]},{"location":"rules/regex-flag-alias/#what-it-does","title":"What it does","text":"<p>Checks for the use of shorthand aliases for regular expression flags (e.g., <code>re.I</code> instead of <code>re.IGNORECASE</code>).</p>","tags":["FURB167"]},{"location":"rules/regex-flag-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>The regular expression module provides descriptive names for each flag, along with single-letter aliases. Prefer the descriptive names, as they are more readable and self-documenting.</p>","tags":["FURB167"]},{"location":"rules/regex-flag-alias/#example","title":"Example","text":"<pre><code>import re\nif re.match(\"^hello\", \"hello world\", re.I):\n...\n</code></pre> <p>Use instead:</p> <pre><code>import re\nif re.match(\"^hello\", \"hello world\", re.IGNORECASE):\n...\n</code></pre>","tags":["FURB167"]},{"location":"rules/reimplemented-builtin/","title":"reimplemented-builtin (SIM110)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM110"]},{"location":"rules/reimplemented-builtin/#what-it-does","title":"What it does","text":"<p>Checks for <code>for</code> loops that can be replaced with a builtin function, like <code>any</code> or <code>all</code>.</p>","tags":["SIM110"]},{"location":"rules/reimplemented-builtin/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using a builtin function is more concise and readable.</p>","tags":["SIM110"]},{"location":"rules/reimplemented-builtin/#example","title":"Example","text":"<pre><code>for item in iterable:\nif predicate(item):\nreturn True\nreturn False\n</code></pre> <p>Use instead:</p> <pre><code>return any(predicate(item) for item in iterable)\n</code></pre>","tags":["SIM110"]},{"location":"rules/reimplemented-builtin/#references","title":"References","text":"<ul> <li>Python documentation: <code>any</code></li> <li>Python documentation: <code>all</code></li> </ul>","tags":["SIM110"]},{"location":"rules/reimplemented-container-builtin/","title":"reimplemented-container-builtin (PIE807)","text":"<p>Derived from the flake8-pie linter.</p> <p>Fix is sometimes available.</p>","tags":["PIE807"]},{"location":"rules/reimplemented-container-builtin/#what-it-does","title":"What it does","text":"<p>Checks for lambdas that can be replaced with the <code>list</code> or <code>dict</code> builtins.</p>","tags":["PIE807"]},{"location":"rules/reimplemented-container-builtin/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using container builtins are more succinct and idiomatic than wrapping the literal in a lambda.</p>","tags":["PIE807"]},{"location":"rules/reimplemented-container-builtin/#example","title":"Example","text":"<pre><code>from dataclasses import dataclass, field\n@dataclass\nclass Foo:\nbar: list[int] = field(default_factory=lambda: [])\n</code></pre> <p>Use instead:</p> <pre><code>from dataclasses import dataclass, field\n@dataclass\nclass Foo:\nbar: list[int] = field(default_factory=list)\nbaz: dict[str, int] = field(default_factory=dict)\n</code></pre>","tags":["PIE807"]},{"location":"rules/reimplemented-container-builtin/#references","title":"References","text":"<ul> <li>Python documentation: <code>list</code></li> </ul>","tags":["PIE807"]},{"location":"rules/reimplemented-operator/","title":"reimplemented-operator (FURB118)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB118"]},{"location":"rules/reimplemented-operator/#what-it-does","title":"What it does","text":"<p>Checks for lambda expressions and function definitions that can be replaced with a function from the <code>operator</code> module.</p>","tags":["FURB118"]},{"location":"rules/reimplemented-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>operator</code> module provides functions that implement the same functionality as the corresponding operators. For example, <code>operator.add</code> is equivalent to <code>lambda x, y: x + y</code>. Using the functions from the <code>operator</code> module is more concise and communicates the intent of the code more clearly.</p>","tags":["FURB118"]},{"location":"rules/reimplemented-operator/#example","title":"Example","text":"<pre><code>import functools\nnums = [1, 2, 3]\ntotal = functools.reduce(lambda x, y: x + y, nums)\n</code></pre> <p>Use instead:</p> <pre><code>import functools\nimport operator\nnums = [1, 2, 3]\ntotal = functools.reduce(operator.add, nums)\n</code></pre>","tags":["FURB118"]},{"location":"rules/reimplemented-operator/#fix-safety","title":"Fix safety","text":"<p>This fix is usually safe, but if the lambda is called with keyword arguments, e.g., <code>add = lambda x, y: x + y; add(x=1, y=2)</code>, replacing the lambda with an operator function, e.g., <code>operator.add</code>, will cause the call to raise a <code>TypeError</code>, as functions in <code>operator</code> do not allow keyword arguments.</p>","tags":["FURB118"]},{"location":"rules/reimplemented-starmap/","title":"reimplemented-starmap (FURB140)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB140"]},{"location":"rules/reimplemented-starmap/#what-it-does","title":"What it does","text":"<p>Checks for generator expressions, list and set comprehensions that can be replaced with <code>itertools.starmap</code>.</p>","tags":["FURB140"]},{"location":"rules/reimplemented-starmap/#why-is-this-bad","title":"Why is this bad?","text":"<p>When unpacking values from iterators to pass them directly to a function, prefer <code>itertools.starmap</code>.</p> <p>Using <code>itertools.starmap</code> is more concise and readable. Furthermore, it is more efficient than generator expressions, and in some versions of Python, it is more efficient than comprehensions.</p>","tags":["FURB140"]},{"location":"rules/reimplemented-starmap/#known-problems","title":"Known problems","text":"<p>Since Python 3.12, <code>itertools.starmap</code> is less efficient than comprehensions (#7771). This is due to PEP 709, which made comprehensions faster.</p>","tags":["FURB140"]},{"location":"rules/reimplemented-starmap/#example","title":"Example","text":"<pre><code>scores = [85, 100, 60]\npassing_scores = [60, 80, 70]\ndef passed_test(score: int, passing_score: int) -&gt; bool:\nreturn score &gt;= passing_score\npassed_all_tests = all(\npassed_test(score, passing_score)\nfor score, passing_score in zip(scores, passing_scores)\n)\n</code></pre> <p>Use instead:</p> <pre><code>from itertools import starmap\nscores = [85, 100, 60]\npassing_scores = [60, 80, 70]\ndef passed_test(score: int, passing_score: int) -&gt; bool:\nreturn score &gt;= passing_score\npassed_all_tests = all(starmap(passed_test, zip(scores, passing_scores)))\n</code></pre>","tags":["FURB140"]},{"location":"rules/reimplemented-starmap/#references","title":"References","text":"<ul> <li>Python documentation: <code>itertools.starmap</code></li> </ul>","tags":["FURB140"]},{"location":"rules/relative-imports/","title":"relative-imports (TID252)","text":"<p>Derived from the flake8-tidy-imports linter.</p> <p>Fix is sometimes available.</p>","tags":["TID252"]},{"location":"rules/relative-imports/#what-it-does","title":"What it does","text":"<p>Checks for relative imports.</p>","tags":["TID252"]},{"location":"rules/relative-imports/#why-is-this-bad","title":"Why is this bad?","text":"<p>Absolute imports, or relative imports from siblings, are recommended by PEP 8:</p> <p>Absolute imports are recommended, as they are usually more readable and tend to be better behaved...</p> <pre><code>import mypkg.sibling\nfrom mypkg import sibling\nfrom mypkg.sibling import example\n</code></pre> <p>However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose:</p> <pre><code>from . import sibling\nfrom .sibling import example\n</code></pre>","tags":["TID252"]},{"location":"rules/relative-imports/#example","title":"Example","text":"<pre><code>from .. import foo\n</code></pre> <p>Use instead:</p> <pre><code>from mypkg import foo\n</code></pre>","tags":["TID252"]},{"location":"rules/relative-imports/#options","title":"Options","text":"<ul> <li><code>lint.flake8-tidy-imports.ban-relative-imports</code></li> </ul>","tags":["TID252"]},{"location":"rules/repeated-append/","title":"repeated-append (FURB113)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB113"]},{"location":"rules/repeated-append/#what-it-does","title":"What it does","text":"<p>Checks for consecutive calls to <code>append</code>.</p>","tags":["FURB113"]},{"location":"rules/repeated-append/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consecutive calls to <code>append</code> can be less efficient than batching them into a single <code>extend</code>. Each <code>append</code> resizes the list individually, whereas an <code>extend</code> can resize the list once for all elements.</p>","tags":["FURB113"]},{"location":"rules/repeated-append/#known-problems","title":"Known problems","text":"<p>This rule is prone to false negatives due to type inference limitations, as it will only detect lists that are instantiated as literals or annotated with a type annotation.</p>","tags":["FURB113"]},{"location":"rules/repeated-append/#example","title":"Example","text":"<pre><code>nums = [1, 2, 3]\nnums.append(4)\nnums.append(5)\nnums.append(6)\n</code></pre> <p>Use instead:</p> <pre><code>nums = [1, 2, 3]\nnums.extend((4, 5, 6))\n</code></pre>","tags":["FURB113"]},{"location":"rules/repeated-append/#references","title":"References","text":"<ul> <li>Python documentation: More on Lists</li> </ul>","tags":["FURB113"]},{"location":"rules/repeated-equality-comparison/","title":"repeated-equality-comparison (PLR1714)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLR1714"]},{"location":"rules/repeated-equality-comparison/#what-it-does","title":"What it does","text":"<p>Checks for repeated equality comparisons that can rewritten as a membership test.</p>","tags":["PLR1714"]},{"location":"rules/repeated-equality-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>To check if a variable is equal to one of many values, it is common to write a series of equality comparisons (e.g., <code>foo == \"bar\" or foo == \"baz\"</code>).</p> <p>Instead, prefer to combine the values into a collection and use the <code>in</code> operator to check for membership, which is more performant and succinct. If the items are hashable, use a <code>set</code> for efficiency; otherwise, use a <code>tuple</code>.</p> <p>In preview, this rule will try to determine if the values are hashable and the fix will use a <code>set</code> if they are. If unable to determine, the fix will use a <code>tuple</code> and continue to suggest the use of a <code>set</code>.</p>","tags":["PLR1714"]},{"location":"rules/repeated-equality-comparison/#example","title":"Example","text":"<pre><code>foo == \"bar\" or foo == \"baz\" or foo == \"qux\"\n</code></pre> <p>Use instead:</p> <pre><code>foo in {\"bar\", \"baz\", \"qux\"}\n</code></pre>","tags":["PLR1714"]},{"location":"rules/repeated-equality-comparison/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> <li>Python documentation: Membership test operations</li> <li>Python documentation: <code>set</code></li> </ul>","tags":["PLR1714"]},{"location":"rules/repeated-global/","title":"repeated-global (FURB154)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB154"]},{"location":"rules/repeated-global/#what-it-does","title":"What it does","text":"<p>Checks for consecutive <code>global</code> (or <code>nonlocal</code>) statements.</p>","tags":["FURB154"]},{"location":"rules/repeated-global/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>global</code> and <code>nonlocal</code> keywords accepts multiple comma-separated names. Instead of using multiple <code>global</code> (or <code>nonlocal</code>) statements for separate variables, you can use a single statement to declare multiple variables at once.</p>","tags":["FURB154"]},{"location":"rules/repeated-global/#example","title":"Example","text":"<pre><code>def func():\nglobal x\nglobal y\nprint(x, y)\n</code></pre> <p>Use instead:</p> <pre><code>def func():\nglobal x, y\nprint(x, y)\n</code></pre>","tags":["FURB154"]},{"location":"rules/repeated-global/#references","title":"References","text":"<ul> <li>Python documentation: the <code>global</code> statement</li> <li>Python documentation: the <code>nonlocal</code> statement</li> </ul>","tags":["FURB154"]},{"location":"rules/repeated-isinstance-calls/","title":"repeated-isinstance-calls (PLR1701)","text":"<p>Derived from the Pylint linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p> <p>Fix is always available.</p>","tags":["PLR1701"]},{"location":"rules/repeated-isinstance-calls/#removed","title":"Removed","text":"<p>This rule is identical to SIM101 which should be used instead.</p>","tags":["PLR1701"]},{"location":"rules/repeated-isinstance-calls/#what-it-does","title":"What it does","text":"<p>Checks for repeated <code>isinstance</code> calls on the same object.</p>","tags":["PLR1701"]},{"location":"rules/repeated-isinstance-calls/#why-is-this-bad","title":"Why is this bad?","text":"<p>Repeated <code>isinstance</code> calls on the same object can be merged into a single call.</p>","tags":["PLR1701"]},{"location":"rules/repeated-isinstance-calls/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe on Python 3.10 and later, as combining multiple <code>isinstance</code> calls with a binary operator (<code>|</code>) will fail at runtime if any of the operands are themselves tuples.</p> <p>For example, given <code>TYPES = (dict, list)</code>, then <code>isinstance(None, TYPES | set | float)</code> will raise a <code>TypeError</code> at runtime, while <code>isinstance(None, set | float)</code> will not.</p>","tags":["PLR1701"]},{"location":"rules/repeated-isinstance-calls/#example","title":"Example","text":"<pre><code>def is_number(x):\nreturn isinstance(x, int) or isinstance(x, float) or isinstance(x, complex)\n</code></pre> <p>Use instead:</p> <pre><code>def is_number(x):\nreturn isinstance(x, (int, float, complex))\n</code></pre> <p>Or, for Python 3.10 and later:</p> <pre><code>def is_number(x):\nreturn isinstance(x, int | float | complex)\n</code></pre>","tags":["PLR1701"]},{"location":"rules/repeated-isinstance-calls/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["PLR1701"]},{"location":"rules/repeated-isinstance-calls/#references","title":"References","text":"<ul> <li>Python documentation: <code>isinstance</code></li> </ul>","tags":["PLR1701"]},{"location":"rules/repeated-keyword-argument/","title":"repeated-keyword-argument (PLE1132)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1132"]},{"location":"rules/repeated-keyword-argument/#what-it-does","title":"What it does","text":"<p>Checks for repeated keyword arguments in function calls.</p>","tags":["PLE1132"]},{"location":"rules/repeated-keyword-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python does not allow repeated keyword arguments in function calls. If a function is called with the same keyword argument multiple times, the interpreter will raise an exception.</p>","tags":["PLE1132"]},{"location":"rules/repeated-keyword-argument/#example","title":"Example","text":"<pre><code>func(1, 2, c=3, **{\"c\": 4})\n</code></pre>","tags":["PLE1132"]},{"location":"rules/repeated-keyword-argument/#references","title":"References","text":"<ul> <li>Python documentation: Argument</li> </ul>","tags":["PLE1132"]},{"location":"rules/replace-stdout-stderr/","title":"replace-stdout-stderr (UP022)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP022"]},{"location":"rules/replace-stdout-stderr/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>subprocess.run</code> that send <code>stdout</code> and <code>stderr</code> to a pipe.</p>","tags":["UP022"]},{"location":"rules/replace-stdout-stderr/#why-is-this-bad","title":"Why is this bad?","text":"<p>As of Python 3.7, <code>subprocess.run</code> has a <code>capture_output</code> keyword argument that can be set to <code>True</code> to capture <code>stdout</code> and <code>stderr</code> outputs. This is equivalent to setting <code>stdout</code> and <code>stderr</code> to <code>subprocess.PIPE</code>, but is more explicit and readable.</p>","tags":["UP022"]},{"location":"rules/replace-stdout-stderr/#example","title":"Example","text":"<pre><code>import subprocess\nsubprocess.run([\"foo\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n</code></pre> <p>Use instead:</p> <pre><code>import subprocess\nsubprocess.run([\"foo\"], capture_output=True)\n</code></pre>","tags":["UP022"]},{"location":"rules/replace-stdout-stderr/#references","title":"References","text":"<ul> <li>Python 3.7 release notes</li> <li>Python documentation: <code>subprocess.run</code></li> </ul>","tags":["UP022"]},{"location":"rules/replace-str-enum/","title":"replace-str-enum (UP042)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["UP042"]},{"location":"rules/replace-str-enum/#what-it-does","title":"What it does","text":"<p>Checks for classes that inherit from both <code>str</code> and <code>enum.Enum</code>.</p>","tags":["UP042"]},{"location":"rules/replace-str-enum/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python 3.11 introduced <code>enum.StrEnum</code>, which is preferred over inheriting from both <code>str</code> and <code>enum.Enum</code>.</p>","tags":["UP042"]},{"location":"rules/replace-str-enum/#example","title":"Example","text":"<pre><code>import enum\nclass Foo(str, enum.Enum): ...\n</code></pre> <p>Use instead:</p> <pre><code>import enum\nclass Foo(enum.StrEnum): ...\n</code></pre>","tags":["UP042"]},{"location":"rules/replace-str-enum/#fix-safety","title":"Fix safety","text":"<p>Python 3.11 introduced a breaking change for enums that inherit from both <code>str</code> and <code>enum.Enum</code>. Consider the following enum:</p> <pre><code>from enum import Enum\nclass Foo(str, Enum):\nBAR = \"bar\"\n</code></pre> <p>In Python 3.11, the formatted representation of <code>Foo.BAR</code> changed as follows:</p> <pre><code># Python 3.10\nf\"{Foo.BAR}\"  # &gt; bar\n# Python 3.11\nf\"{Foo.BAR}\"  # &gt; Foo.BAR\n</code></pre> <p>Migrating from <code>str</code> and <code>enum.Enum</code> to <code>enum.StrEnum</code> will restore the previous behavior, such that:</p> <pre><code>from enum import StrEnum\nclass Foo(StrEnum):\nBAR = \"bar\"\nf\"{Foo.BAR}\"  # &gt; bar\n</code></pre> <p>As such, migrating to <code>enum.StrEnum</code> will introduce a behavior change for code that relies on the Python 3.11 behavior.</p>","tags":["UP042"]},{"location":"rules/replace-str-enum/#references","title":"References","text":"<ul> <li>enum.StrEnum</li> </ul>","tags":["UP042"]},{"location":"rules/replace-universal-newlines/","title":"replace-universal-newlines (UP021)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP021"]},{"location":"rules/replace-universal-newlines/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>subprocess.run</code> that set the <code>universal_newlines</code> keyword argument.</p>","tags":["UP021"]},{"location":"rules/replace-universal-newlines/#why-is-this-bad","title":"Why is this bad?","text":"<p>As of Python 3.7, the <code>universal_newlines</code> keyword argument has been renamed to <code>text</code>, and now exists for backwards compatibility. The <code>universal_newlines</code> keyword argument may be removed in a future version of Python. Prefer <code>text</code>, which is more explicit and readable.</p>","tags":["UP021"]},{"location":"rules/replace-universal-newlines/#example","title":"Example","text":"<pre><code>import subprocess\nsubprocess.run([\"foo\"], universal_newlines=True)\n</code></pre> <p>Use instead:</p> <pre><code>import subprocess\nsubprocess.run([\"foo\"], text=True)\n</code></pre>","tags":["UP021"]},{"location":"rules/replace-universal-newlines/#references","title":"References","text":"<ul> <li>Python 3.7 release notes</li> <li>Python documentation: <code>subprocess.run</code></li> </ul>","tags":["UP021"]},{"location":"rules/request-with-no-cert-validation/","title":"request-with-no-cert-validation (S501)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S501"]},{"location":"rules/request-with-no-cert-validation/#what-it-does","title":"What it does","text":"<p>Checks for HTTPS requests that disable SSL certificate checks.</p>","tags":["S501"]},{"location":"rules/request-with-no-cert-validation/#why-is-this-bad","title":"Why is this bad?","text":"<p>If SSL certificates are not verified, an attacker could perform a \"man in the middle\" attack by intercepting and modifying traffic between the client and server.</p>","tags":["S501"]},{"location":"rules/request-with-no-cert-validation/#example","title":"Example","text":"<pre><code>import requests\nrequests.get(\"https://www.example.com\", verify=False)\n</code></pre> <p>Use instead:</p> <pre><code>import requests\nrequests.get(\"https://www.example.com\")  # By default, `verify=True`.\n</code></pre>","tags":["S501"]},{"location":"rules/request-with-no-cert-validation/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-295</li> </ul>","tags":["S501"]},{"location":"rules/request-without-timeout/","title":"request-without-timeout (S113)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S113"]},{"location":"rules/request-without-timeout/#what-it-does","title":"What it does","text":"<p>Checks for uses of the Python <code>requests</code> or <code>httpx</code> module that omit the <code>timeout</code> parameter.</p>","tags":["S113"]},{"location":"rules/request-without-timeout/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>timeout</code> parameter is used to set the maximum time to wait for a response from the server. By omitting the <code>timeout</code> parameter, the program may hang indefinitely while awaiting a response.</p>","tags":["S113"]},{"location":"rules/request-without-timeout/#example","title":"Example","text":"<pre><code>import requests\nrequests.get(\"https://www.example.com/\")\n</code></pre> <p>Use instead:</p> <pre><code>import requests\nrequests.get(\"https://www.example.com/\", timeout=10)\n</code></pre>","tags":["S113"]},{"location":"rules/request-without-timeout/#references","title":"References","text":"<ul> <li>Requests documentation: Timeouts</li> <li>httpx documentation: Timeouts</li> </ul>","tags":["S113"]},{"location":"rules/reraise-no-cause/","title":"reraise-no-cause (TRY200)","text":"<p>Derived from the tryceratops linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["TRY200"]},{"location":"rules/reraise-no-cause/#removed","title":"Removed","text":"<p>This rule is identical to B904 which should be used instead.</p>","tags":["TRY200"]},{"location":"rules/reraise-no-cause/#what-it-does","title":"What it does","text":"<p>Checks for exceptions that are re-raised without specifying the cause via the <code>from</code> keyword.</p>","tags":["TRY200"]},{"location":"rules/reraise-no-cause/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>from</code> keyword sets the <code>__cause__</code> attribute of the exception, which stores the \"cause\" of the exception. The availability of an exception \"cause\" is useful for debugging.</p>","tags":["TRY200"]},{"location":"rules/reraise-no-cause/#example","title":"Example","text":"<pre><code>def reciprocal(n):\ntry:\nreturn 1 / n\nexcept ZeroDivisionError:\nraise ValueError()\n</code></pre> <p>Use instead:</p> <pre><code>def reciprocal(n):\ntry:\nreturn 1 / n\nexcept ZeroDivisionError as exc:\nraise ValueError() from exc\n</code></pre>","tags":["TRY200"]},{"location":"rules/reraise-no-cause/#references","title":"References","text":"<ul> <li>Python documentation: Exception context</li> </ul>","tags":["TRY200"]},{"location":"rules/return-in-generator/","title":"return-in-generator (B901)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["B901"]},{"location":"rules/return-in-generator/#what-it-does","title":"What it does","text":"<p>Checks for <code>return {value}</code> statements in functions that also contain <code>yield</code> or <code>yield from</code> statements.</p>","tags":["B901"]},{"location":"rules/return-in-generator/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>return {value}</code> in a generator function was syntactically invalid in Python 2. In Python 3 <code>return {value}</code> can be used in a generator; however, the combination of <code>yield</code> and <code>return</code> can lead to confusing behavior, as the <code>return</code> statement will cause the generator to raise <code>StopIteration</code> with the value provided, rather than returning the value to the caller.</p> <p>For example, given:</p> <pre><code>from collections.abc import Iterable\nfrom pathlib import Path\ndef get_file_paths(file_types: Iterable[str] | None = None) -&gt; Iterable[Path]:\ndir_path = Path(\".\")\nif file_types is None:\nreturn dir_path.glob(\"*\")\nfor file_type in file_types:\nyield from dir_path.glob(f\"*.{file_type}\")\n</code></pre> <p>Readers might assume that <code>get_file_paths()</code> would return an iterable of <code>Path</code> objects in the directory; in reality, though, <code>list(get_file_paths())</code> evaluates to <code>[]</code>, since the <code>return</code> statement causes the generator to raise <code>StopIteration</code> with the value <code>dir_path.glob(\"*\")</code>:</p> <pre><code>&gt;&gt;&gt; list(get_file_paths(file_types=[\"cfg\", \"toml\"]))\n[PosixPath('setup.cfg'), PosixPath('pyproject.toml')]\n&gt;&gt;&gt; list(get_file_paths())\n[]\n</code></pre> <p>For intentional uses of <code>return</code> in a generator, consider suppressing this diagnostic.</p>","tags":["B901"]},{"location":"rules/return-in-generator/#example","title":"Example","text":"<pre><code>from collections.abc import Iterable\nfrom pathlib import Path\ndef get_file_paths(file_types: Iterable[str] | None = None) -&gt; Iterable[Path]:\ndir_path = Path(\".\")\nif file_types is None:\nreturn dir_path.glob(\"*\")\nfor file_type in file_types:\nyield from dir_path.glob(f\"*.{file_type}\")\n</code></pre> <p>Use instead:</p> <pre><code>from collections.abc import Iterable\nfrom pathlib import Path\ndef get_file_paths(file_types: Iterable[str] | None = None) -&gt; Iterable[Path]:\ndir_path = Path(\".\")\nif file_types is None:\nyield from dir_path.glob(\"*\")\nelse:\nfor file_type in file_types:\nyield from dir_path.glob(f\"*.{file_type}\")\n</code></pre>","tags":["B901"]},{"location":"rules/return-in-init/","title":"return-in-init (PLE0101)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0101"]},{"location":"rules/return-in-init/#what-it-does","title":"What it does","text":"<p>Checks for <code>__init__</code> methods that return values.</p>","tags":["PLE0101"]},{"location":"rules/return-in-init/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__init__</code> method is the constructor for a given Python class, responsible for initializing, rather than creating, new objects.</p> <p>The <code>__init__</code> method has to return <code>None</code>. Returning any value from an <code>__init__</code> method will result in a runtime error.</p>","tags":["PLE0101"]},{"location":"rules/return-in-init/#example","title":"Example","text":"<pre><code>class Example:\ndef __init__(self):\nreturn []\n</code></pre> <p>Use instead:</p> <pre><code>class Example:\ndef __init__(self):\nself.value = []\n</code></pre>","tags":["PLE0101"]},{"location":"rules/return-in-init/#references","title":"References","text":"<ul> <li>CodeQL: <code>py-explicit-return-in-init</code></li> </ul>","tags":["PLE0101"]},{"location":"rules/return-in-try-except-finally/","title":"return-in-try-except-finally (SIM107)","text":"<p>Derived from the flake8-simplify linter.</p>","tags":["SIM107"]},{"location":"rules/return-in-try-except-finally/#what-it-does","title":"What it does","text":"<p>Checks for <code>return</code> statements in <code>try</code>-<code>except</code> and <code>finally</code> blocks.</p>","tags":["SIM107"]},{"location":"rules/return-in-try-except-finally/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>return</code> statement in a <code>finally</code> block will always be executed, even if an exception is raised in the <code>try</code> or <code>except</code> block. This can lead to unexpected behavior.</p>","tags":["SIM107"]},{"location":"rules/return-in-try-except-finally/#example","title":"Example","text":"<pre><code>def squared(n):\ntry:\nsqr = n**2\nreturn sqr\nexcept Exception:\nreturn \"An exception occurred\"\nfinally:\nreturn -1  # Always returns -1.\n</code></pre> <p>Use instead:</p> <pre><code>def squared(n):\ntry:\nreturn_value = n**2\nexcept Exception:\nreturn_value = \"An exception occurred\"\nfinally:\nreturn_value = -1\nreturn return_value\n</code></pre>","tags":["SIM107"]},{"location":"rules/return-in-try-except-finally/#references","title":"References","text":"<ul> <li>Python documentation: Defining Clean-up Actions</li> </ul>","tags":["SIM107"]},{"location":"rules/return-outside-function/","title":"return-outside-function (F706)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F706"]},{"location":"rules/return-outside-function/#what-it-does","title":"What it does","text":"<p>Checks for <code>return</code> statements outside of functions.</p>","tags":["F706"]},{"location":"rules/return-outside-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of a <code>return</code> statement outside of a function will raise a <code>SyntaxError</code>.</p>","tags":["F706"]},{"location":"rules/return-outside-function/#example","title":"Example","text":"<pre><code>class Foo:\nreturn 1\n</code></pre>","tags":["F706"]},{"location":"rules/return-outside-function/#references","title":"References","text":"<ul> <li>Python documentation: <code>return</code></li> </ul>","tags":["F706"]},{"location":"rules/reuse-of-groupby-generator/","title":"reuse-of-groupby-generator (B031)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B031"]},{"location":"rules/reuse-of-groupby-generator/#what-it-does","title":"What it does","text":"<p>Checks for multiple usage of the generator returned from <code>itertools.groupby()</code>.</p>","tags":["B031"]},{"location":"rules/reuse-of-groupby-generator/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using the generator more than once will do nothing on the second usage. If that data is needed later, it should be stored as a list.</p>","tags":["B031"]},{"location":"rules/reuse-of-groupby-generator/#examples","title":"Examples:","text":"<pre><code>import itertools\nfor name, group in itertools.groupby(data):\nfor _ in range(5):\ndo_something_with_the_group(group)\n</code></pre> <p>Use instead:</p> <pre><code>import itertools\nfor name, group in itertools.groupby(data):\nvalues = list(group)\nfor _ in range(5):\ndo_something_with_the_group(values)\n</code></pre>","tags":["B031"]},{"location":"rules/root-logger-call/","title":"Root logger call","text":"<p>description: Checks for usages of the following <code>logging</code> top-level functions: tags: - LOG015</p>"},{"location":"rules/root-logger-call/#root-logger-call-log015","title":"root-logger-call (LOG015)","text":"<p>Derived from the flake8-logging linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>"},{"location":"rules/root-logger-call/#what-it-does","title":"What it does","text":"<p>Checks for usages of the following <code>logging</code> top-level functions: <code>debug</code>, <code>info</code>, <code>warn</code>, <code>warning</code>, <code>error</code>, <code>critical</code>, <code>log</code>, <code>exception</code>.</p>"},{"location":"rules/root-logger-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using the root logger causes the messages to have no source information, making them less useful for debugging.</p>"},{"location":"rules/root-logger-call/#example","title":"Example","text":"<pre><code>import logging\nlogging.info(\"Foobar\")\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogger = logging.getLogger(__name__)\nlogger.info(\"Foobar\")\n</code></pre>"},{"location":"rules/ruff-static-key-dict-comprehension/","title":"ruff-static-key-dict-comprehension (RUF011)","text":"<p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["RUF011"]},{"location":"rules/ruff-static-key-dict-comprehension/#removed","title":"Removed","text":"<p>This rule was implemented in <code>flake8-bugbear</code> and has been remapped to B035</p>","tags":["RUF011"]},{"location":"rules/ruff-static-key-dict-comprehension/#what-it-does","title":"What it does","text":"<p>Checks for dictionary comprehensions that use a static key, like a string literal or a variable defined outside the comprehension.</p>","tags":["RUF011"]},{"location":"rules/ruff-static-key-dict-comprehension/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using a static key (like a string literal) in a dictionary comprehension is usually a mistake, as it will result in a dictionary with only one key, despite the comprehension iterating over multiple values.</p>","tags":["RUF011"]},{"location":"rules/ruff-static-key-dict-comprehension/#example","title":"Example","text":"<pre><code>data = [\"some\", \"Data\"]\n{\"key\": value.upper() for value in data}\n</code></pre> <p>Use instead:</p> <pre><code>data = [\"some\", \"Data\"]\n{value: value.upper() for value in data}\n</code></pre>","tags":["RUF011"]},{"location":"rules/run-process-in-async-function/","title":"run-process-in-async-function (ASYNC221)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC221"]},{"location":"rules/run-process-in-async-function/#what-it-does","title":"What it does","text":"<p>Checks that async functions do not run processes with blocking methods.</p>","tags":["ASYNC221"]},{"location":"rules/run-process-in-async-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Blocking an async function via a blocking call will block the entire event loop, preventing it from executing other tasks while waiting for the call to complete, negating the benefits of asynchronous programming.</p> <p>Instead of making a blocking call, use an equivalent asynchronous library or function.</p>","tags":["ASYNC221"]},{"location":"rules/run-process-in-async-function/#example","title":"Example","text":"<pre><code>async def foo():\nsubprocess.run(cmd)\n</code></pre> <p>Use instead:</p> <pre><code>async def foo():\nasyncio.create_subprocess_shell(cmd)\n</code></pre>","tags":["ASYNC221"]},{"location":"rules/runtime-import-in-type-checking-block/","title":"runtime-import-in-type-checking-block (TC004)","text":"<p>Derived from the flake8-type-checking linter.</p> <p>Fix is sometimes available.</p>","tags":["TC004"]},{"location":"rules/runtime-import-in-type-checking-block/#what-it-does","title":"What it does","text":"<p>Checks for runtime imports defined in a type-checking block.</p>","tags":["TC004"]},{"location":"rules/runtime-import-in-type-checking-block/#why-is-this-bad","title":"Why is this bad?","text":"<p>The type-checking block is not executed at runtime, so the import will not be available at runtime.</p> <p>If <code>lint.flake8-type-checking.quote-annotations</code> is set to <code>true</code>, annotations will be wrapped in quotes if doing so would enable the corresponding import to remain in the type-checking block.</p>","tags":["TC004"]},{"location":"rules/runtime-import-in-type-checking-block/#example","title":"Example","text":"<pre><code>from typing import TYPE_CHECKING\nif TYPE_CHECKING:\nimport foo\ndef bar() -&gt; None:\nfoo.bar()  # raises NameError: name 'foo' is not defined\n</code></pre> <p>Use instead:</p> <pre><code>import foo\ndef bar() -&gt; None:\nfoo.bar()\n</code></pre>","tags":["TC004"]},{"location":"rules/runtime-import-in-type-checking-block/#options","title":"Options","text":"<ul> <li><code>lint.flake8-type-checking.quote-annotations</code></li> </ul>","tags":["TC004"]},{"location":"rules/runtime-import-in-type-checking-block/#references","title":"References","text":"<ul> <li>PEP 563: Runtime annotation resolution and <code>TYPE_CHECKING</code></li> </ul>","tags":["TC004"]},{"location":"rules/runtime-string-union/","title":"runtime-string-union (TC010)","text":"<p>Derived from the flake8-type-checking linter.</p>","tags":["TC010"]},{"location":"rules/runtime-string-union/#what-it-does","title":"What it does","text":"<p>Checks for the presence of string literals in <code>X | Y</code>-style union types.</p>","tags":["TC010"]},{"location":"rules/runtime-string-union/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 604 introduced a new syntax for union type annotations based on the <code>|</code> operator.</p> <p>While Python's type annotations can typically be wrapped in strings to avoid runtime evaluation, the use of a string member within an <code>X | Y</code>-style union type will cause a runtime error.</p> <p>Instead, remove the quotes, wrap the entire union in quotes, or use <code>from __future__ import annotations</code> to disable runtime evaluation of annotations entirely.</p>","tags":["TC010"]},{"location":"rules/runtime-string-union/#example","title":"Example","text":"<pre><code>var: str | \"int\"\n</code></pre> <p>Use instead:</p> <pre><code>var: str | int\n</code></pre> <p>Or, extend the quotes to include the entire union:</p> <pre><code>var: \"str | int\"\n</code></pre>","tags":["TC010"]},{"location":"rules/runtime-string-union/#references","title":"References","text":"<ul> <li>PEP 563 - Postponed Evaluation of Annotations</li> <li>PEP 604 \u2013 Allow writing union types as <code>X | Y</code></li> </ul>","tags":["TC010"]},{"location":"rules/section-name-ends-in-colon/","title":"section-name-ends-in-colon (D416)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D416"]},{"location":"rules/section-name-ends-in-colon/#what-it-does","title":"What it does","text":"<p>Checks for docstring section headers that do not end with a colon.</p>","tags":["D416"]},{"location":"rules/section-name-ends-in-colon/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline Google-style docstrings. If a multiline Google-style docstring consists of multiple sections, each section header should end with a colon.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body.</p> <p>This rule is enabled when using the <code>google</code> convention, and disabled when using the <code>pep257</code> and <code>numpy</code> conventions.</p>","tags":["D416"]},{"location":"rules/section-name-ends-in-colon/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns\n        Speed as distance divided by time.\n    Raises\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D416"]},{"location":"rules/section-name-ends-in-colon/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D416"]},{"location":"rules/section-name-ends-in-colon/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>Google Style Guide</li> </ul>","tags":["D416"]},{"location":"rules/section-not-over-indented/","title":"section-not-over-indented (D214)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D214"]},{"location":"rules/section-not-over-indented/#what-it-does","title":"What it does","text":"<p>Checks for over-indented sections in docstrings.</p>","tags":["D214"]},{"location":"rules/section-not-over-indented/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for docstrings with multiple sections.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body. The convention is that all sections should use consistent indentation. In each section, the header should match the indentation of the docstring's opening quotes, and the body should be indented one level further.</p> <p>This rule is enabled when using the <code>numpy</code> and <code>google</code> conventions, and disabled when using the <code>pep257</code> convention.</p>","tags":["D214"]},{"location":"rules/section-not-over-indented/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n        Args:\n            distance: Distance traveled.\n            time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D214"]},{"location":"rules/section-not-over-indented/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D214"]},{"location":"rules/section-not-over-indented/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D214"]},{"location":"rules/section-underline-after-name/","title":"section-underline-after-name (D408)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D408"]},{"location":"rules/section-underline-after-name/#what-it-does","title":"What it does","text":"<p>Checks for section underlines in docstrings that are not on the line immediately following the section name.</p>","tags":["D408"]},{"location":"rules/section-underline-after-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline numpy-style docstrings, and helps prevent incorrect syntax in docstrings using reStructuredText.</p> <p>Multiline numpy-style docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections. Each section has a header and a body. There should be a series of underline characters in the line immediately below the header.</p> <p>This rule enforces a consistent style for multiline numpy-style docstrings with sections. If your docstring uses reStructuredText, the rule also helps protect against incorrect reStructuredText syntax, which would cause errors if you tried to use a tool such as Sphinx to generate documentation from the docstring.</p> <p>This rule is enabled when using the <code>numpy</code> convention, and disabled when using the <code>google</code> or <code>pep257</code> conventions.</p>","tags":["D408"]},{"location":"rules/section-underline-after-name/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D408"]},{"location":"rules/section-underline-after-name/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D408"]},{"location":"rules/section-underline-after-name/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> </ul>","tags":["D408"]},{"location":"rules/section-underline-matches-section-length/","title":"section-underline-matches-section-length (D409)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D409"]},{"location":"rules/section-underline-matches-section-length/#what-it-does","title":"What it does","text":"<p>Checks for section underlines in docstrings that do not match the length of the corresponding section header.</p>","tags":["D409"]},{"location":"rules/section-underline-matches-section-length/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline numpy-style docstrings, and helps prevent incorrect syntax in docstrings using reStructuredText.</p> <p>Multiline numpy-style docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections. Each section has a section header and a section body, and there should be a series of underline characters in the line following the header. The length of the underline should exactly match the length of the section header.</p> <p>This rule enforces a consistent style for multiline numpy-style docstrings with sections. If your docstring uses reStructuredText, the rule also helps protect against incorrect reStructuredText syntax, which would cause errors if you tried to use a tool such as Sphinx to generate documentation from the docstring.</p> <p>This rule is enabled when using the <code>numpy</code> convention, and disabled when using the <code>google</code> or <code>pep257</code> conventions.</p>","tags":["D409"]},{"location":"rules/section-underline-matches-section-length/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ---\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    ---\n    float\n        Speed as distance divided by time.\n    Raises\n    ---\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D409"]},{"location":"rules/section-underline-matches-section-length/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D409"]},{"location":"rules/section-underline-matches-section-length/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> </ul>","tags":["D409"]},{"location":"rules/section-underline-not-over-indented/","title":"section-underline-not-over-indented (D215)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D215"]},{"location":"rules/section-underline-not-over-indented/#what-it-does","title":"What it does","text":"<p>Checks for over-indented section underlines in docstrings.</p>","tags":["D215"]},{"location":"rules/section-underline-not-over-indented/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule enforces a consistent style for multiline numpy-style docstrings, and helps prevent incorrect syntax in docstrings using reStructuredText.</p> <p>Multiline numpy-style docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections. Each section has a section header and a section body, and there should be a series of underline characters in the line following the header. The underline should have the same indentation as the header.</p> <p>This rule enforces a consistent style for multiline numpy-style docstrings with sections. If your docstring uses reStructuredText, the rule also helps protect against incorrect reStructuredText syntax, which would cause errors if you tried to use a tool such as Sphinx to generate documentation from the docstring.</p> <p>This rule is enabled when using the <code>numpy</code> convention, and disabled when using the <code>google</code> or <code>pep257</code> conventions.</p>","tags":["D215"]},{"location":"rules/section-underline-not-over-indented/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n        ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n          -------\n    float\n        Speed as distance divided by time.\n    Raises\n      ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D215"]},{"location":"rules/section-underline-not-over-indented/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D215"]},{"location":"rules/section-underline-not-over-indented/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> </ul>","tags":["D215"]},{"location":"rules/self-assigning-variable/","title":"self-assigning-variable (PLW0127)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0127"]},{"location":"rules/self-assigning-variable/#what-it-does","title":"What it does","text":"<p>Checks for self-assignment of variables.</p>","tags":["PLW0127"]},{"location":"rules/self-assigning-variable/#why-is-this-bad","title":"Why is this bad?","text":"<p>Self-assignment of variables is redundant and likely a mistake.</p>","tags":["PLW0127"]},{"location":"rules/self-assigning-variable/#example","title":"Example","text":"<pre><code>country = \"Poland\"\ncountry = country\n</code></pre> <p>Use instead:</p> <pre><code>country = \"Poland\"\n</code></pre>","tags":["PLW0127"]},{"location":"rules/self-or-cls-assignment/","title":"self-or-cls-assignment (PLW0642)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW0642"]},{"location":"rules/self-or-cls-assignment/#what-it-does","title":"What it does","text":"<p>Checks for assignment of <code>self</code> and <code>cls</code> in instance and class methods respectively.</p>","tags":["PLW0642"]},{"location":"rules/self-or-cls-assignment/#why-is-this-bad","title":"Why is this bad?","text":"<p>The identifiers <code>self</code> and <code>cls</code> are conventional in Python for the first parameter of instance methods and class methods, respectively. Assigning new values to these variables can be confusing for others reading your code; using a different variable name can lead to clearer code.</p>","tags":["PLW0642"]},{"location":"rules/self-or-cls-assignment/#example","title":"Example","text":"<pre><code>class Version:\ndef add(self, other):\nself = self + other\nreturn self\n@classmethod\ndef superclass(cls):\ncls = cls.__mro__[-1]\nreturn cls\n</code></pre> <p>Use instead:</p> <pre><code>class Version:\ndef add(self, other):\nnew_version = self + other\nreturn new_version\n@classmethod\ndef superclass(cls):\nsupercls = cls.__mro__[-1]\nreturn supercls\n</code></pre>","tags":["PLW0642"]},{"location":"rules/set-attr-with-constant/","title":"set-attr-with-constant (B010)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is always available.</p>","tags":["B010"]},{"location":"rules/set-attr-with-constant/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>setattr</code> that take a constant attribute value as an argument (e.g., <code>setattr(obj, \"foo\", 42)</code>).</p>","tags":["B010"]},{"location":"rules/set-attr-with-constant/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>setattr</code> is used to set attributes dynamically. If the attribute is defined as a constant, it is no safer than a typical property access. When possible, prefer property access over <code>setattr</code> calls, as the former is more concise and idiomatic.</p>","tags":["B010"]},{"location":"rules/set-attr-with-constant/#example","title":"Example","text":"<pre><code>setattr(obj, \"foo\", 42)\n</code></pre> <p>Use instead:</p> <pre><code>obj.foo = 42\n</code></pre>","tags":["B010"]},{"location":"rules/set-attr-with-constant/#references","title":"References","text":"<ul> <li>Python documentation: <code>setattr</code></li> </ul>","tags":["B010"]},{"location":"rules/shallow-copy-environ/","title":"shallow-copy-environ (PLW1507)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLW1507"]},{"location":"rules/shallow-copy-environ/#what-it-does","title":"What it does","text":"<p>Check for shallow <code>os.environ</code> copies.</p>","tags":["PLW1507"]},{"location":"rules/shallow-copy-environ/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>os.environ</code> is not a <code>dict</code> object, but rather, a proxy object. As such, mutating a shallow copy of <code>os.environ</code> will also mutate the original object.</p> <p>See: #15373 for more information.</p>","tags":["PLW1507"]},{"location":"rules/shallow-copy-environ/#example","title":"Example","text":"<pre><code>import copy\nimport os\nenv = copy.copy(os.environ)\n</code></pre> <p>Use instead:</p> <pre><code>import os\nenv = os.environ.copy()\n</code></pre>","tags":["PLW1507"]},{"location":"rules/shallow-copy-environ/#references","title":"References","text":"<ul> <li>Python documentation: <code>copy</code> \u2014 Shallow and deep copy operations</li> <li>Python documentation: <code>os.environ</code></li> </ul>","tags":["PLW1507"]},{"location":"rules/shebang-leading-whitespace/","title":"shebang-leading-whitespace (EXE004)","text":"<p>Derived from the flake8-executable linter.</p> <p>Fix is always available.</p>","tags":["EXE004"]},{"location":"rules/shebang-leading-whitespace/#what-it-does","title":"What it does","text":"<p>Checks for whitespace before a shebang directive.</p>","tags":["EXE004"]},{"location":"rules/shebang-leading-whitespace/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, a shebang (also known as a hashbang) is the first line of a script, which specifies the interpreter that should be used to run the script.</p> <p>The shebang's <code>#!</code> prefix must be the first two characters of a file. The presence of whitespace before the shebang will cause the shebang to be ignored, which is likely a mistake.</p>","tags":["EXE004"]},{"location":"rules/shebang-leading-whitespace/#example","title":"Example","text":"<pre><code> #!/usr/bin/env python3\n</code></pre> <p>Use instead:</p> <pre><code>#!/usr/bin/env python3\n</code></pre>","tags":["EXE004"]},{"location":"rules/shebang-leading-whitespace/#references","title":"References","text":"<ul> <li>Python documentation: Executable Python Scripts</li> </ul>","tags":["EXE004"]},{"location":"rules/shebang-missing-executable-file/","title":"shebang-missing-executable-file (EXE002)","text":"<p>Derived from the flake8-executable linter.</p>","tags":["EXE002"]},{"location":"rules/shebang-missing-executable-file/#what-it-does","title":"What it does","text":"<p>Checks for executable <code>.py</code> files that do not have a shebang.</p>","tags":["EXE002"]},{"location":"rules/shebang-missing-executable-file/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, a shebang (also known as a hashbang) is the first line of a script, which specifies the interpreter that should be used to run the script.</p> <p>If a <code>.py</code> file is executable, but does not have a shebang, it may be run with the wrong interpreter, or fail to run at all.</p> <p>If the file is meant to be executable, add a shebang, as in:</p> <pre><code>#!/usr/bin/env python\n</code></pre> <p>Otherwise, remove the executable bit from the file (e.g., <code>chmod -x __main__.py</code>).</p> <p>A file is considered executable if it has the executable bit set (i.e., its permissions mode intersects with <code>0o111</code>). As such, this rule is only available on Unix-like systems, and is not enforced on Windows or WSL.</p>","tags":["EXE002"]},{"location":"rules/shebang-missing-executable-file/#references","title":"References","text":"<ul> <li>Python documentation: Executable Python Scripts</li> </ul>","tags":["EXE002"]},{"location":"rules/shebang-missing-python/","title":"shebang-missing-python (EXE003)","text":"<p>Derived from the flake8-executable linter.</p>","tags":["EXE003"]},{"location":"rules/shebang-missing-python/#what-it-does","title":"What it does","text":"<p>Checks for a shebang directive in <code>.py</code> files that does not contain <code>python</code>.</p>","tags":["EXE003"]},{"location":"rules/shebang-missing-python/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, a shebang (also known as a hashbang) is the first line of a script, which specifies the interpreter that should be used to run the script.</p> <p>For Python scripts, the shebang must contain <code>python</code> to indicate that the script should be executed as a Python script. If the shebang does not contain <code>python</code>, then the file will be executed with the default interpreter, which is likely a mistake.</p>","tags":["EXE003"]},{"location":"rules/shebang-missing-python/#example","title":"Example","text":"<pre><code>#!/usr/bin/env bash\n</code></pre> <p>Use instead:</p> <pre><code>#!/usr/bin/env python3\n</code></pre>","tags":["EXE003"]},{"location":"rules/shebang-missing-python/#references","title":"References","text":"<ul> <li>Python documentation: Executable Python Scripts</li> </ul>","tags":["EXE003"]},{"location":"rules/shebang-not-executable/","title":"shebang-not-executable (EXE001)","text":"<p>Derived from the flake8-executable linter.</p>","tags":["EXE001"]},{"location":"rules/shebang-not-executable/#what-it-does","title":"What it does","text":"<p>Checks for a shebang directive in a file that is not executable.</p>","tags":["EXE001"]},{"location":"rules/shebang-not-executable/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, a shebang (also known as a hashbang) is the first line of a script, which specifies the interpreter that should be used to run the script.</p> <p>The presence of a shebang suggests that a file is intended to be executable. If a file contains a shebang but is not executable, then the shebang is misleading, or the file is missing the executable bit.</p> <p>If the file is meant to be executable, add a shebang, as in:</p> <pre><code>#!/usr/bin/env python\n</code></pre> <p>Otherwise, remove the executable bit from the file (e.g., <code>chmod -x __main__.py</code>).</p> <p>A file is considered executable if it has the executable bit set (i.e., its permissions mode intersects with <code>0o111</code>). As such, this rule is only available on Unix-like systems, and is not enforced on Windows or WSL.</p>","tags":["EXE001"]},{"location":"rules/shebang-not-executable/#example","title":"Example","text":"<pre><code>#!/usr/bin/env python\n</code></pre>","tags":["EXE001"]},{"location":"rules/shebang-not-executable/#references","title":"References","text":"<ul> <li>Python documentation: Executable Python Scripts</li> </ul>","tags":["EXE001"]},{"location":"rules/shebang-not-first-line/","title":"shebang-not-first-line (EXE005)","text":"<p>Derived from the flake8-executable linter.</p>","tags":["EXE005"]},{"location":"rules/shebang-not-first-line/#what-it-does","title":"What it does","text":"<p>Checks for a shebang directive that is not at the beginning of the file.</p>","tags":["EXE005"]},{"location":"rules/shebang-not-first-line/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, a shebang (also known as a hashbang) is the first line of a script, which specifies the interpreter that should be used to run the script.</p> <p>The shebang's <code>#!</code> prefix must be the first two characters of a file. If the shebang is not at the beginning of the file, it will be ignored, which is likely a mistake.</p>","tags":["EXE005"]},{"location":"rules/shebang-not-first-line/#example","title":"Example","text":"<pre><code>foo = 1\n#!/usr/bin/env python3\n</code></pre> <p>Use instead:</p> <pre><code>#!/usr/bin/env python3\nfoo = 1\n</code></pre>","tags":["EXE005"]},{"location":"rules/shebang-not-first-line/#references","title":"References","text":"<ul> <li>Python documentation: Executable Python Scripts</li> </ul>","tags":["EXE005"]},{"location":"rules/single-item-membership-test/","title":"single-item-membership-test (FURB171)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB171"]},{"location":"rules/single-item-membership-test/#what-it-does","title":"What it does","text":"<p>Checks for membership tests against single-item containers.</p>","tags":["FURB171"]},{"location":"rules/single-item-membership-test/#why-is-this-bad","title":"Why is this bad?","text":"<p>Performing a membership test against a container (like a <code>list</code> or <code>set</code>) with a single item is less readable and less efficient than comparing against the item directly.</p>","tags":["FURB171"]},{"location":"rules/single-item-membership-test/#example","title":"Example","text":"<pre><code>1 in [1]\n</code></pre> <p>Use instead:</p> <pre><code>1 == 1\n</code></pre>","tags":["FURB171"]},{"location":"rules/single-item-membership-test/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> <li>Python documentation: Membership test operations</li> </ul>","tags":["FURB171"]},{"location":"rules/single-line-implicit-string-concatenation/","title":"single-line-implicit-string-concatenation (ISC001)","text":"<p>Derived from the flake8-implicit-str-concat linter.</p> <p>Fix is sometimes available.</p>","tags":["ISC001"]},{"location":"rules/single-line-implicit-string-concatenation/#what-it-does","title":"What it does","text":"<p>Checks for implicitly concatenated strings on a single line.</p>","tags":["ISC001"]},{"location":"rules/single-line-implicit-string-concatenation/#why-is-this-bad","title":"Why is this bad?","text":"<p>While it is valid Python syntax to concatenate multiple string or byte literals implicitly (via whitespace delimiters), it is unnecessary and negatively affects code readability.</p> <p>In some cases, the implicit concatenation may also be unintentional, as code formatters are capable of introducing single-line implicit concatenations when collapsing long lines.</p>","tags":["ISC001"]},{"location":"rules/single-line-implicit-string-concatenation/#example","title":"Example","text":"<pre><code>z = \"The quick \" \"brown fox.\"\n</code></pre> <p>Use instead:</p> <pre><code>z = \"The quick brown fox.\"\n</code></pre>","tags":["ISC001"]},{"location":"rules/single-line-implicit-string-concatenation/#formatter-compatibility","title":"Formatter compatibility","text":"<p>Use of this rule alongside the formatter must be handled with care. Currently, the formatter can introduce new single-line implicitly concatenated strings, therefore we suggest rerunning the linter and formatter in the following order:</p> <ol> <li>Run the linter with this rule (<code>ISC001</code>) disabled</li> <li>Run the formatter</li> <li>Rerun the linter with this rule (<code>ISC001</code>) enabled     This is one of very few cases where the formatter can produce code that     contains lint violations. It is a known issue that should be resolved by the     new 2025 style guide.</li> </ol>","tags":["ISC001"]},{"location":"rules/single-string-slots/","title":"single-string-slots (PLC0205)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC0205"]},{"location":"rules/single-string-slots/#what-it-does","title":"What it does","text":"<p>Checks for single strings assigned to <code>__slots__</code>.</p>","tags":["PLC0205"]},{"location":"rules/single-string-slots/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the <code>__slots__</code> attribute allows you to explicitly define the attributes (instance variables) that a class can have. By default, Python uses a dictionary to store an object's attributes, which incurs some memory overhead. However, when <code>__slots__</code> is defined, Python uses a more compact internal structure to store the object's attributes, resulting in memory savings.</p> <p>Any string iterable may be assigned to <code>__slots__</code> (most commonly, a <code>tuple</code> of strings). If a string is assigned to <code>__slots__</code>, it is interpreted as a single attribute name, rather than an iterable of attribute names. This can cause confusion, as users that iterate over the <code>__slots__</code> value may expect to iterate over a sequence of attributes, but would instead iterate over the characters of the string.</p> <p>To use a single string attribute in <code>__slots__</code>, wrap the string in an iterable container type, like a <code>tuple</code>.</p>","tags":["PLC0205"]},{"location":"rules/single-string-slots/#example","title":"Example","text":"<pre><code>class Person:\n__slots__: str = \"name\"\ndef __init__(self, name: str) -&gt; None:\nself.name = name\n</code></pre> <p>Use instead:</p> <pre><code>class Person:\n__slots__: tuple[str, ...] = (\"name\",)\ndef __init__(self, name: str) -&gt; None:\nself.name = name\n</code></pre>","tags":["PLC0205"]},{"location":"rules/single-string-slots/#references","title":"References","text":"<ul> <li>Python documentation: <code>__slots__</code></li> </ul>","tags":["PLC0205"]},{"location":"rules/singledispatch-method/","title":"singledispatch-method (PLE1519)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLE1519"]},{"location":"rules/singledispatch-method/#what-it-does","title":"What it does","text":"<p>Checks for methods decorated with <code>@singledispatch</code>.</p>","tags":["PLE1519"]},{"location":"rules/singledispatch-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>@singledispatch</code> decorator is intended for use with functions, not methods.</p> <p>Instead, use the <code>@singledispatchmethod</code> decorator, or migrate the method to a standalone function.</p>","tags":["PLE1519"]},{"location":"rules/singledispatch-method/#example","title":"Example","text":"<pre><code>from functools import singledispatch\nclass Class:\n@singledispatch\ndef method(self, arg): ...\n</code></pre> <p>Use instead:</p> <pre><code>from functools import singledispatchmethod\nclass Class:\n@singledispatchmethod\ndef method(self, arg): ...\n</code></pre>","tags":["PLE1519"]},{"location":"rules/singledispatch-method/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as migrating from <code>@singledispatch</code> to <code>@singledispatchmethod</code> may change the behavior of the code.</p>","tags":["PLE1519"]},{"location":"rules/singledispatchmethod-function/","title":"singledispatchmethod-function (PLE1520)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLE1520"]},{"location":"rules/singledispatchmethod-function/#what-it-does","title":"What it does","text":"<p>Checks for non-method functions decorated with <code>@singledispatchmethod</code>.</p>","tags":["PLE1520"]},{"location":"rules/singledispatchmethod-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>@singledispatchmethod</code> decorator is intended for use with methods, not functions.</p> <p>Instead, use the <code>@singledispatch</code> decorator.</p>","tags":["PLE1520"]},{"location":"rules/singledispatchmethod-function/#example","title":"Example","text":"<pre><code>from functools import singledispatchmethod\n@singledispatchmethod\ndef func(arg): ...\n</code></pre> <p>Use instead:</p> <pre><code>from functools import singledispatch\n@singledispatch\ndef func(arg): ...\n</code></pre>","tags":["PLE1520"]},{"location":"rules/singledispatchmethod-function/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as migrating from <code>@singledispatchmethod</code> to <code>@singledispatch</code> may change the behavior of the code.</p>","tags":["PLE1520"]},{"location":"rules/six-py3/","title":"six-py3 (YTT202)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT202"]},{"location":"rules/six-py3/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>six.PY3</code>.</p>","tags":["YTT202"]},{"location":"rules/six-py3/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>six.PY3</code> will evaluate to <code>False</code> on Python 4 and greater. This is likely unintended, and may cause code intended to run on Python 2 to run on Python 4 too.</p> <p>Instead, use <code>not six.PY2</code> to validate that the current Python major version is not equal to 2, to future-proof the code.</p>","tags":["YTT202"]},{"location":"rules/six-py3/#example","title":"Example","text":"<pre><code>import six\nsix.PY3  # `False` on Python 4.\n</code></pre> <p>Use instead:</p> <pre><code>import six\nnot six.PY2  # `True` on Python 4.\n</code></pre>","tags":["YTT202"]},{"location":"rules/six-py3/#references","title":"References","text":"<ul> <li>PyPI: <code>six</code></li> <li>Six documentation: <code>six.PY2</code></li> <li>Six documentation: <code>six.PY3</code></li> </ul>","tags":["YTT202"]},{"location":"rules/slice-copy/","title":"slice-copy (FURB145)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB145"]},{"location":"rules/slice-copy/#what-it-does","title":"What it does","text":"<p>Checks for unbounded slice expressions to copy a list.</p>","tags":["FURB145"]},{"location":"rules/slice-copy/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>list.copy</code> method is more readable and consistent with copying other types.</p>","tags":["FURB145"]},{"location":"rules/slice-copy/#known-problems","title":"Known problems","text":"<p>This rule is prone to false negatives due to type inference limitations, as it will only detect lists that are instantiated as literals or annotated with a type annotation.</p>","tags":["FURB145"]},{"location":"rules/slice-copy/#example","title":"Example","text":"<pre><code>a = [1, 2, 3]\nb = a[:]\n</code></pre> <p>Use instead:</p> <pre><code>a = [1, 2, 3]\nb = a.copy()\n</code></pre>","tags":["FURB145"]},{"location":"rules/slice-copy/#references","title":"References","text":"<ul> <li>Python documentation: Mutable Sequence Types</li> </ul>","tags":["FURB145"]},{"location":"rules/slice-to-remove-prefix-or-suffix/","title":"slice-to-remove-prefix-or-suffix (FURB188)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB188"]},{"location":"rules/slice-to-remove-prefix-or-suffix/#what-it-does","title":"What it does","text":"<p>Checks for the removal of a prefix or suffix from a string by assigning the string to a slice after checking <code>.startswith()</code> or <code>.endswith()</code>, respectively.</p>","tags":["FURB188"]},{"location":"rules/slice-to-remove-prefix-or-suffix/#why-is-this-bad","title":"Why is this bad?","text":"<p>The methods <code>str.removeprefix</code> and <code>str.removesuffix</code>, introduced in Python 3.9, have the same behavior and are more readable and efficient.</p>","tags":["FURB188"]},{"location":"rules/slice-to-remove-prefix-or-suffix/#example","title":"Example","text":"<pre><code>filename[:-4] if filename.endswith(\".txt\") else filename\n</code></pre> <pre><code>if text.startswith(\"pre\"):\ntext = text[3:]\n</code></pre> <p>Use instead:</p> <pre><code>filename = filename.removesuffix(\".txt\")\n</code></pre> <pre><code>text = text.removeprefix(\"pre\")\n</code></pre>","tags":["FURB188"]},{"location":"rules/snake-case-type-alias/","title":"snake-case-type-alias (PYI042)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI042"]},{"location":"rules/snake-case-type-alias/#what-it-does","title":"What it does","text":"<p>Checks for type aliases that do not use the CamelCase naming convention.</p>","tags":["PYI042"]},{"location":"rules/snake-case-type-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's conventional to use the CamelCase naming convention for type aliases, to distinguish them from other variables.</p>","tags":["PYI042"]},{"location":"rules/snake-case-type-alias/#example","title":"Example","text":"<pre><code>type_alias_name: TypeAlias = int\n</code></pre> <p>Use instead:</p> <pre><code>TypeAliasName: TypeAlias = int\n</code></pre>","tags":["PYI042"]},{"location":"rules/snmp-insecure-version/","title":"snmp-insecure-version (S508)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S508"]},{"location":"rules/snmp-insecure-version/#what-it-does","title":"What it does","text":"<p>Checks for uses of SNMPv1 or SNMPv2.</p>","tags":["S508"]},{"location":"rules/snmp-insecure-version/#why-is-this-bad","title":"Why is this bad?","text":"<p>The SNMPv1 and SNMPv2 protocols are considered insecure as they do not support encryption. Instead, prefer SNMPv3, which supports encryption.</p>","tags":["S508"]},{"location":"rules/snmp-insecure-version/#example","title":"Example","text":"<pre><code>from pysnmp.hlapi import CommunityData\nCommunityData(\"public\", mpModel=0)\n</code></pre> <p>Use instead:</p> <pre><code>from pysnmp.hlapi import CommunityData\nCommunityData(\"public\", mpModel=2)\n</code></pre>","tags":["S508"]},{"location":"rules/snmp-insecure-version/#references","title":"References","text":"<ul> <li>Cybersecurity and Infrastructure Security Agency (CISA): Alert TA17-156A</li> <li>Common Weakness Enumeration: CWE-319</li> </ul>","tags":["S508"]},{"location":"rules/snmp-weak-cryptography/","title":"snmp-weak-cryptography (S509)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S509"]},{"location":"rules/snmp-weak-cryptography/#what-it-does","title":"What it does","text":"<p>Checks for uses of the SNMPv3 protocol without encryption.</p>","tags":["S509"]},{"location":"rules/snmp-weak-cryptography/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unencrypted SNMPv3 communication can be intercepted and read by unauthorized parties. Instead, enable encryption when using SNMPv3.</p>","tags":["S509"]},{"location":"rules/snmp-weak-cryptography/#example","title":"Example","text":"<pre><code>from pysnmp.hlapi import UsmUserData\nUsmUserData(\"user\")\n</code></pre> <p>Use instead:</p> <pre><code>from pysnmp.hlapi import UsmUserData\nUsmUserData(\"user\", \"authkey\", \"privkey\")\n</code></pre>","tags":["S509"]},{"location":"rules/snmp-weak-cryptography/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-319</li> </ul>","tags":["S509"]},{"location":"rules/sorted-min-max/","title":"sorted-min-max (FURB192)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB192"]},{"location":"rules/sorted-min-max/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>sorted()</code> to retrieve the minimum or maximum value in a sequence.</p>","tags":["FURB192"]},{"location":"rules/sorted-min-max/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>sorted()</code> to compute the minimum or maximum value in a sequence is inefficient and less readable than using <code>min()</code> or <code>max()</code> directly.</p>","tags":["FURB192"]},{"location":"rules/sorted-min-max/#example","title":"Example","text":"<pre><code>nums = [3, 1, 4, 1, 5]\nlowest = sorted(nums)[0]\nhighest = sorted(nums)[-1]\nhighest = sorted(nums, reverse=True)[0]\n</code></pre> <p>Use instead:</p> <pre><code>nums = [3, 1, 4, 1, 5]\nlowest = min(nums)\nhighest = max(nums)\n</code></pre>","tags":["FURB192"]},{"location":"rules/sorted-min-max/#fix-safety","title":"Fix safety","text":"<p>In some cases, migrating to <code>min</code> or <code>max</code> can lead to a change in behavior, notably when breaking ties.</p> <p>As an example, <code>sorted(data, key=itemgetter(0), reverse=True)[0]</code> will return the last \"minimum\" element in the list, if there are multiple elements with the same key. However, <code>min(data, key=itemgetter(0))</code> will return the first \"minimum\" element in the list in the same scenario.</p> <p>As such, this rule's fix is marked as unsafe when the <code>reverse</code> keyword is used.</p>","tags":["FURB192"]},{"location":"rules/sorted-min-max/#references","title":"References","text":"<ul> <li>Python documentation: <code>min</code></li> <li>Python documentation: <code>max</code></li> </ul>","tags":["FURB192"]},{"location":"rules/split-static-string/","title":"split-static-string (SIM905)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["SIM905"]},{"location":"rules/split-static-string/#what-it-does","title":"What it does","text":"<p>Checks for static <code>str.split</code> calls that can be replaced with list literals.</p>","tags":["SIM905"]},{"location":"rules/split-static-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>List literals are more readable and do not require the overhead of calling <code>str.split</code>.</p>","tags":["SIM905"]},{"location":"rules/split-static-string/#example","title":"Example","text":"<pre><code>\"a,b,c,d\".split(\",\")\n</code></pre> <p>Use instead:</p> <pre><code>[\"a\", \"b\", \"c\", \"d\"]\n</code></pre>","tags":["SIM905"]},{"location":"rules/split-static-string/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe for implicit string concatenations with comments interleaved between segments, as comments may be removed.</p> <p>For example, the fix would be marked as unsafe in the following case:</p> <pre><code>(\n\"a\"  # comment\n\",\"  # comment\n\"b\"  # comment\n).split(\",\")\n</code></pre>","tags":["SIM905"]},{"location":"rules/split-static-string/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.split</code></li> </ul> <pre><code>\n</code></pre>","tags":["SIM905"]},{"location":"rules/ssh-no-host-key-verification/","title":"ssh-no-host-key-verification (S507)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S507"]},{"location":"rules/ssh-no-host-key-verification/#what-it-does","title":"What it does","text":"<p>Checks for uses of policies disabling SSH verification in Paramiko.</p>","tags":["S507"]},{"location":"rules/ssh-no-host-key-verification/#why-is-this-bad","title":"Why is this bad?","text":"<p>By default, Paramiko checks the identity of the remote host when establishing an SSH connection. Disabling the verification might lead to the client connecting to a malicious host, without the client knowing.</p>","tags":["S507"]},{"location":"rules/ssh-no-host-key-verification/#example","title":"Example","text":"<pre><code>from paramiko import client\nssh_client = client.SSHClient()\nssh_client.set_missing_host_key_policy(client.AutoAddPolicy)\n</code></pre> <p>Use instead:</p> <pre><code>from paramiko import client\nssh_client = client.SSHClient()\nssh_client.set_missing_host_key_policy(client.RejectPolicy)\n</code></pre>","tags":["S507"]},{"location":"rules/ssh-no-host-key-verification/#references","title":"References","text":"<ul> <li>Paramiko documentation: set_missing_host_key_policy</li> </ul>","tags":["S507"]},{"location":"rules/ssl-insecure-version/","title":"ssl-insecure-version (S502)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S502"]},{"location":"rules/ssl-insecure-version/#what-it-does","title":"What it does","text":"<p>Checks for function calls with parameters that indicate the use of insecure SSL and TLS protocol versions.</p>","tags":["S502"]},{"location":"rules/ssl-insecure-version/#why-is-this-bad","title":"Why is this bad?","text":"<p>Several highly publicized exploitable flaws have been discovered in all versions of SSL and early versions of TLS. The following versions are considered insecure, and should be avoided:</p> <ul> <li>SSL v2</li> <li>SSL v3</li> <li>TLS v1</li> <li>TLS v1.1</li> </ul> <p>This method supports detection on the Python's built-in <code>ssl</code> module and the <code>pyOpenSSL</code> module.</p>","tags":["S502"]},{"location":"rules/ssl-insecure-version/#example","title":"Example","text":"<pre><code>import ssl\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1)\n</code></pre> <p>Use instead:</p> <pre><code>import ssl\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1_2)\n</code></pre>","tags":["S502"]},{"location":"rules/ssl-with-bad-defaults/","title":"ssl-with-bad-defaults (S503)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S503"]},{"location":"rules/ssl-with-bad-defaults/#what-it-does","title":"What it does","text":"<p>Checks for function definitions with default arguments set to insecure SSL and TLS protocol versions.</p>","tags":["S503"]},{"location":"rules/ssl-with-bad-defaults/#why-is-this-bad","title":"Why is this bad?","text":"<p>Several highly publicized exploitable flaws have been discovered in all versions of SSL and early versions of TLS. The following versions are considered insecure, and should be avoided:</p> <ul> <li>SSL v2</li> <li>SSL v3</li> <li>TLS v1</li> <li>TLS v1.1</li> </ul>","tags":["S503"]},{"location":"rules/ssl-with-bad-defaults/#example","title":"Example","text":"<pre><code>import ssl\ndef func(version=ssl.PROTOCOL_TLSv1): ...\n</code></pre> <p>Use instead:</p> <pre><code>import ssl\ndef func(version=ssl.PROTOCOL_TLSv1_2): ...\n</code></pre>","tags":["S503"]},{"location":"rules/ssl-with-no-version/","title":"ssl-with-no-version (S504)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S504"]},{"location":"rules/ssl-with-no-version/#what-it-does","title":"What it does","text":"<p>Checks for calls to <code>ssl.wrap_socket()</code> without an <code>ssl_version</code>.</p>","tags":["S504"]},{"location":"rules/ssl-with-no-version/#why-is-this-bad","title":"Why is this bad?","text":"<p>This method is known to provide a default value that maximizes compatibility, but permits use of insecure protocols.</p>","tags":["S504"]},{"location":"rules/ssl-with-no-version/#example","title":"Example","text":"<pre><code>import ssl\nssl.wrap_socket()\n</code></pre> <p>Use instead:</p> <pre><code>import ssl\nssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1_2)\n</code></pre>","tags":["S504"]},{"location":"rules/star-arg-unpacking-after-keyword-arg/","title":"star-arg-unpacking-after-keyword-arg (B026)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B026"]},{"location":"rules/star-arg-unpacking-after-keyword-arg/#what-it-does","title":"What it does","text":"<p>Checks for function calls that use star-argument unpacking after providing a keyword argument</p>","tags":["B026"]},{"location":"rules/star-arg-unpacking-after-keyword-arg/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, you can use star-argument unpacking to pass a list or tuple of arguments to a function.</p> <p>Providing a star-argument after a keyword argument can lead to confusing behavior, and is only supported for backwards compatibility.</p>","tags":["B026"]},{"location":"rules/star-arg-unpacking-after-keyword-arg/#example","title":"Example","text":"<pre><code>def foo(x, y, z):\nreturn x, y, z\nfoo(1, 2, 3)  # (1, 2, 3)\nfoo(1, *[2, 3])  # (1, 2, 3)\n# foo(x=1, *[2, 3])  # TypeError\n# foo(y=2, *[1, 3])  # TypeError\nfoo(z=3, *[1, 2])  # (1, 2, 3)  # No error, but confusing!\n</code></pre> <p>Use instead:</p> <pre><code>def foo(x, y, z):\nreturn x, y, z\nfoo(1, 2, 3)  # (1, 2, 3)\nfoo(x=1, y=2, z=3)  # (1, 2, 3)\nfoo(*[1, 2, 3])  # (1, 2, 3)\nfoo(*[1, 2], 3)  # (1, 2, 3)\n</code></pre>","tags":["B026"]},{"location":"rules/star-arg-unpacking-after-keyword-arg/#references","title":"References","text":"<ul> <li>Python documentation: Calls</li> <li>Disallow iterable argument unpacking after a keyword argument?</li> </ul>","tags":["B026"]},{"location":"rules/start-process-with-a-shell/","title":"start-process-with-a-shell (S605)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S605"]},{"location":"rules/start-process-with-a-shell/#what-it-does","title":"What it does","text":"<p>Checks for calls that start a process with a shell, providing guidance on whether the usage is safe or not.</p>","tags":["S605"]},{"location":"rules/start-process-with-a-shell/#why-is-this-bad","title":"Why is this bad?","text":"<p>Starting a process with a shell can introduce security risks, such as code injection vulnerabilities. It's important to be aware of whether the usage of the shell is safe or not.</p> <p>This rule triggers on functions like <code>os.system</code>, <code>popen</code>, etc., which start processes with a shell. It evaluates whether the provided command is a literal string or an expression. If the command is a literal string, it's considered safe. If the command is an expression, it's considered (potentially) unsafe.</p>","tags":["S605"]},{"location":"rules/start-process-with-a-shell/#example","title":"Example","text":"<pre><code>import os\n# Safe usage (literal string)\ncommand = \"ls -l\"\nos.system(command)\n# Potentially unsafe usage (expression)\ncmd = get_user_input()\nos.system(cmd)\n</code></pre>","tags":["S605"]},{"location":"rules/start-process-with-a-shell/#note","title":"Note","text":"<p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results, and using that module is preferable to using <code>os.system</code> or similar functions. Consider replacing such usages with <code>subprocess.call</code> or related functions.</p>","tags":["S605"]},{"location":"rules/start-process-with-a-shell/#references","title":"References","text":"<ul> <li>Python documentation: <code>subprocess</code></li> </ul>","tags":["S605"]},{"location":"rules/start-process-with-no-shell/","title":"start-process-with-no-shell (S606)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S606"]},{"location":"rules/start-process-with-no-shell/#what-it-does","title":"What it does","text":"<p>Checks for functions that start a process without a shell.</p>","tags":["S606"]},{"location":"rules/start-process-with-no-shell/#why-is-this-bad","title":"Why is this bad?","text":"<p>Invoking any kind of external executable via a function call can pose security risks if arbitrary variables are passed to the executable, or if the input is otherwise unsanitised or unvalidated.</p> <p>This rule specifically flags functions in the <code>os</code> module that spawn subprocesses without the use of a shell. Note that these typically pose a much smaller security risk than subprocesses that are started with a shell, which are flagged by <code>start-process-with-a-shell</code> (<code>S605</code>). This gives you the option of enabling one rule while disabling the other if you decide that the security risk from these functions is acceptable for your use case.</p>","tags":["S606"]},{"location":"rules/start-process-with-no-shell/#example","title":"Example","text":"<pre><code>import os\ndef insecure_function(arbitrary_user_input: str):\nos.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", arbitrary_user_input)\n</code></pre>","tags":["S606"]},{"location":"rules/start-process-with-partial-path/","title":"start-process-with-partial-path (S607)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S607"]},{"location":"rules/start-process-with-partial-path/#what-it-does","title":"What it does","text":"<p>Checks for the starting of a process with a partial executable path.</p>","tags":["S607"]},{"location":"rules/start-process-with-partial-path/#why-is-this-bad","title":"Why is this bad?","text":"<p>Starting a process with a partial executable path can allow attackers to execute an arbitrary executable by adjusting the <code>PATH</code> environment variable. Consider using a full path to the executable instead.</p>","tags":["S607"]},{"location":"rules/start-process-with-partial-path/#example","title":"Example","text":"<pre><code>import subprocess\nsubprocess.Popen([\"ruff\", \"check\", \"file.py\"])\n</code></pre> <p>Use instead:</p> <pre><code>import subprocess\nsubprocess.Popen([\"/usr/bin/ruff\", \"check\", \"file.py\"])\n</code></pre>","tags":["S607"]},{"location":"rules/start-process-with-partial-path/#references","title":"References","text":"<ul> <li>Python documentation: <code>subprocess.Popen()</code></li> <li>Common Weakness Enumeration: CWE-426</li> </ul>","tags":["S607"]},{"location":"rules/static-join-to-f-string/","title":"static-join-to-f-string (FLY002)","text":"<p>Derived from the flynt linter.</p> <p>Fix is always available.</p>","tags":["FLY002"]},{"location":"rules/static-join-to-f-string/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.join</code> calls that can be replaced with f-strings.</p>","tags":["FLY002"]},{"location":"rules/static-join-to-f-string/#why-is-this-bad","title":"Why is this bad?","text":"<p>f-strings are more readable and generally preferred over <code>str.join</code> calls.</p>","tags":["FLY002"]},{"location":"rules/static-join-to-f-string/#example","title":"Example","text":"<pre><code>\" \".join((foo, bar))\n</code></pre> <p>Use instead:</p> <pre><code>f\"{foo} {bar}\"\n</code></pre>","tags":["FLY002"]},{"location":"rules/static-join-to-f-string/#references","title":"References","text":"<ul> <li>Python documentation: f-strings</li> </ul>","tags":["FLY002"]},{"location":"rules/static-key-dict-comprehension/","title":"static-key-dict-comprehension (B035)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B035"]},{"location":"rules/static-key-dict-comprehension/#what-it-does","title":"What it does","text":"<p>Checks for dictionary comprehensions that use a static key, like a string literal or a variable defined outside the comprehension.</p>","tags":["B035"]},{"location":"rules/static-key-dict-comprehension/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using a static key (like a string literal) in a dictionary comprehension is usually a mistake, as it will result in a dictionary with only one key, despite the comprehension iterating over multiple values.</p>","tags":["B035"]},{"location":"rules/static-key-dict-comprehension/#example","title":"Example","text":"<pre><code>data = [\"some\", \"Data\"]\n{\"key\": value.upper() for value in data}\n</code></pre> <p>Use instead:</p> <pre><code>data = [\"some\", \"Data\"]\n{value: value.upper() for value in data}\n</code></pre>","tags":["B035"]},{"location":"rules/str-or-repr-defined-in-stub/","title":"str-or-repr-defined-in-stub (PYI029)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI029"]},{"location":"rules/str-or-repr-defined-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for redundant definitions of <code>__str__</code> or <code>__repr__</code> in stubs.</p>","tags":["PYI029"]},{"location":"rules/str-or-repr-defined-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Defining <code>__str__</code> or <code>__repr__</code> in a stub is almost always redundant, as the signatures are almost always identical to those of the default equivalent, <code>object.__str__</code> and <code>object.__repr__</code>, respectively.</p>","tags":["PYI029"]},{"location":"rules/str-or-repr-defined-in-stub/#example","title":"Example","text":"<pre><code>class Foo:\ndef __repr__(self) -&gt; str: ...\n</code></pre>","tags":["PYI029"]},{"location":"rules/string-dot-format-extra-named-arguments/","title":"string-dot-format-extra-named-arguments (F522)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F522"]},{"location":"rules/string-dot-format-extra-named-arguments/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.format</code> calls with unused keyword arguments.</p>","tags":["F522"]},{"location":"rules/string-dot-format-extra-named-arguments/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused keyword arguments are redundant, and often indicative of a mistake. They should be removed.</p>","tags":["F522"]},{"location":"rules/string-dot-format-extra-named-arguments/#example","title":"Example","text":"<pre><code>\"Hello, {name}\".format(greeting=\"Hello\", name=\"World\")\n</code></pre> <p>Use instead:</p> <pre><code>\"Hello, {name}\".format(name=\"World\")\n</code></pre>","tags":["F522"]},{"location":"rules/string-dot-format-extra-named-arguments/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.format</code></li> </ul>","tags":["F522"]},{"location":"rules/string-dot-format-extra-positional-arguments/","title":"string-dot-format-extra-positional-arguments (F523)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F523"]},{"location":"rules/string-dot-format-extra-positional-arguments/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.format</code> calls with unused positional arguments.</p>","tags":["F523"]},{"location":"rules/string-dot-format-extra-positional-arguments/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused positional arguments are redundant, and often indicative of a mistake. They should be removed.</p>","tags":["F523"]},{"location":"rules/string-dot-format-extra-positional-arguments/#example","title":"Example","text":"<pre><code>\"Hello, {0}\".format(\"world\", \"!\")\n</code></pre> <p>Use instead:</p> <pre><code>\"Hello, {0}\".format(\"world\")\n</code></pre>","tags":["F523"]},{"location":"rules/string-dot-format-extra-positional-arguments/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.format</code></li> </ul>","tags":["F523"]},{"location":"rules/string-dot-format-invalid-format/","title":"string-dot-format-invalid-format (F521)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F521"]},{"location":"rules/string-dot-format-invalid-format/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.format</code> calls with invalid format strings.</p>","tags":["F521"]},{"location":"rules/string-dot-format-invalid-format/#why-is-this-bad","title":"Why is this bad?","text":"<p>Invalid format strings will raise a <code>ValueError</code>.</p>","tags":["F521"]},{"location":"rules/string-dot-format-invalid-format/#example","title":"Example","text":"<pre><code>\"{\".format(foo)\n</code></pre> <p>Use instead:</p> <pre><code>\"{}\".format(foo)\n</code></pre>","tags":["F521"]},{"location":"rules/string-dot-format-invalid-format/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.format</code></li> </ul>","tags":["F521"]},{"location":"rules/string-dot-format-missing-arguments/","title":"string-dot-format-missing-arguments (F524)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F524"]},{"location":"rules/string-dot-format-missing-arguments/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.format</code> calls with placeholders that are missing arguments.</p>","tags":["F524"]},{"location":"rules/string-dot-format-missing-arguments/#why-is-this-bad","title":"Why is this bad?","text":"<p>In <code>str.format</code> calls, omitting arguments for placeholders will raise a <code>KeyError</code> at runtime.</p>","tags":["F524"]},{"location":"rules/string-dot-format-missing-arguments/#example","title":"Example","text":"<pre><code>\"{greeting}, {name}\".format(name=\"World\")\n</code></pre> <p>Use instead:</p> <pre><code>\"{greeting}, {name}\".format(greeting=\"Hello\", name=\"World\")\n</code></pre>","tags":["F524"]},{"location":"rules/string-dot-format-missing-arguments/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.format</code></li> </ul>","tags":["F524"]},{"location":"rules/string-dot-format-mixing-automatic/","title":"string-dot-format-mixing-automatic (F525)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F525"]},{"location":"rules/string-dot-format-mixing-automatic/#what-it-does","title":"What it does","text":"<p>Checks for <code>str.format</code> calls that mix automatic and manual numbering.</p>","tags":["F525"]},{"location":"rules/string-dot-format-mixing-automatic/#why-is-this-bad","title":"Why is this bad?","text":"<p>In <code>str.format</code> calls, mixing automatic and manual numbering will raise a <code>ValueError</code> at runtime.</p>","tags":["F525"]},{"location":"rules/string-dot-format-mixing-automatic/#example","title":"Example","text":"<pre><code>\"{0}, {}\".format(\"Hello\", \"World\")\n</code></pre> <p>Use instead:</p> <pre><code>\"{0}, {1}\".format(\"Hello\", \"World\")\n</code></pre> <p>Or:</p> <pre><code>\"{}, {}\".format(\"Hello\", \"World\")\n</code></pre>","tags":["F525"]},{"location":"rules/string-dot-format-mixing-automatic/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.format</code></li> </ul>","tags":["F525"]},{"location":"rules/string-or-bytes-too-long/","title":"string-or-bytes-too-long (PYI053)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI053"]},{"location":"rules/string-or-bytes-too-long/#what-it-does","title":"What it does","text":"<p>Checks for the use of string and bytes literals longer than 50 characters in stub (<code>.pyi</code>) files.</p>","tags":["PYI053"]},{"location":"rules/string-or-bytes-too-long/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a function or variable has a default value where the string or bytes representation is greater than 50 characters long, it is likely to be an implementation detail or a constant that varies depending on the system you're running on.</p> <p>Although IDEs may find them useful, default values are ignored by type checkers, the primary consumers of stub files. Replace very long constants with ellipses (<code>...</code>) to simplify the stub.</p>","tags":["PYI053"]},{"location":"rules/string-or-bytes-too-long/#example","title":"Example","text":"<pre><code>def foo(arg: str = \"51 character stringgggggggggggggggggggggggggggggggg\") -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(arg: str = ...) -&gt; None: ...\n</code></pre>","tags":["PYI053"]},{"location":"rules/strip-with-multi-characters/","title":"strip-with-multi-characters (B005)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B005"]},{"location":"rules/strip-with-multi-characters/#what-it-does","title":"What it does","text":"<p>Checks for uses of multi-character strings in <code>.strip()</code>, <code>.lstrip()</code>, and <code>.rstrip()</code> calls.</p>","tags":["B005"]},{"location":"rules/strip-with-multi-characters/#why-is-this-bad","title":"Why is this bad?","text":"<p>All characters in the call to <code>.strip()</code>, <code>.lstrip()</code>, or <code>.rstrip()</code> are removed from the leading and trailing ends of the string. If the string contains multiple characters, the reader may be misled into thinking that a prefix or suffix is being removed, rather than a set of characters.</p> <p>In Python 3.9 and later, you can use <code>str.removeprefix</code> and <code>str.removesuffix</code> to remove an exact prefix or suffix from a string, respectively, which should be preferred when possible.</p>","tags":["B005"]},{"location":"rules/strip-with-multi-characters/#known-problems","title":"Known problems","text":"<p>As a heuristic, this rule only flags multi-character strings that contain duplicate characters. This allows usages like <code>.strip(\"xyz\")</code>, which removes all occurrences of the characters <code>x</code>, <code>y</code>, and <code>z</code> from the leading and trailing ends of the string, but not <code>.strip(\"foo\")</code>.</p> <p>The use of unique, multi-character strings may be intentional and consistent with the intent of <code>.strip()</code>, <code>.lstrip()</code>, or <code>.rstrip()</code>, while the use of duplicate-character strings is very likely to be a mistake.</p>","tags":["B005"]},{"location":"rules/strip-with-multi-characters/#example","title":"Example","text":"<pre><code>\"text.txt\".strip(\".txt\")  # \"e\"\n</code></pre> <p>Use instead:</p> <pre><code>\"text.txt\".removesuffix(\".txt\")  # \"text\"\n</code></pre>","tags":["B005"]},{"location":"rules/strip-with-multi-characters/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.strip</code></li> </ul>","tags":["B005"]},{"location":"rules/stub-body-multiple-statements/","title":"stub-body-multiple-statements (PYI048)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI048"]},{"location":"rules/stub-body-multiple-statements/#what-it-does","title":"What it does","text":"<p>Checks for functions in stub (<code>.pyi</code>) files that contain multiple statements.</p>","tags":["PYI048"]},{"location":"rules/stub-body-multiple-statements/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files are never executed, and are only intended to define type hints. As such, functions in stub files should not contain functional code, and should instead contain only a single statement (e.g., <code>...</code>).</p>","tags":["PYI048"]},{"location":"rules/stub-body-multiple-statements/#example","title":"Example","text":"<pre><code>def function():\nx = 1\ny = 2\nreturn x + y\n</code></pre> <p>Use instead:</p> <pre><code>def function(): ...\n</code></pre>","tags":["PYI048"]},{"location":"rules/subclass-builtin/","title":"subclass-builtin (FURB189)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB189"]},{"location":"rules/subclass-builtin/#what-it-does","title":"What it does","text":"<p>Checks for subclasses of <code>dict</code>, <code>list</code> or <code>str</code>.</p>","tags":["FURB189"]},{"location":"rules/subclass-builtin/#why-is-this-bad","title":"Why is this bad?","text":"<p>Subclassing <code>dict</code>, <code>list</code>, or <code>str</code> objects can be error prone, use the <code>UserDict</code>, <code>UserList</code>, and <code>UserString</code> objects from the <code>collections</code> module instead.</p>","tags":["FURB189"]},{"location":"rules/subclass-builtin/#example","title":"Example","text":"<pre><code>class CaseInsensitiveDict(dict): ...\n</code></pre> <p>Use instead:</p> <pre><code>from collections import UserDict\nclass CaseInsensitiveDict(UserDict): ...\n</code></pre>","tags":["FURB189"]},{"location":"rules/subclass-builtin/#fix-safety","title":"Fix safety","text":"<p>This fix is marked as unsafe because <code>isinstance()</code> checks for <code>dict</code>, <code>list</code>, and <code>str</code> types will fail when using the corresponding User class. If you need to pass custom <code>dict</code> or <code>list</code> objects to code you don't control, ignore this check. If you do control the code, consider using the following type checks instead:</p> <ul> <li><code>dict</code> -&gt; <code>collections.abc.MutableMapping</code></li> <li><code>list</code> -&gt; <code>collections.abc.MutableSequence</code></li> <li><code>str</code> -&gt; No such conversion exists</li> </ul>","tags":["FURB189"]},{"location":"rules/subclass-builtin/#references","title":"References","text":"<ul> <li>Python documentation: <code>collections</code></li> </ul>","tags":["FURB189"]},{"location":"rules/subprocess-popen-preexec-fn/","title":"subprocess-popen-preexec-fn (PLW1509)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW1509"]},{"location":"rules/subprocess-popen-preexec-fn/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>subprocess.Popen</code> with a <code>preexec_fn</code> argument.</p>","tags":["PLW1509"]},{"location":"rules/subprocess-popen-preexec-fn/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>preexec_fn</code> argument is unsafe within threads as it can lead to deadlocks. Furthermore, <code>preexec_fn</code> is targeted for deprecation.</p> <p>Instead, consider using task-specific arguments such as <code>env</code>, <code>start_new_session</code>, and <code>process_group</code>. These are not prone to deadlocks and are more explicit.</p>","tags":["PLW1509"]},{"location":"rules/subprocess-popen-preexec-fn/#example","title":"Example","text":"<pre><code>import os, subprocess\nsubprocess.Popen(foo, preexec_fn=os.setsid)\nsubprocess.Popen(bar, preexec_fn=os.setpgid(0, 0))\n</code></pre> <p>Use instead:</p> <pre><code>import subprocess\nsubprocess.Popen(foo, start_new_session=True)\nsubprocess.Popen(bar, process_group=0)  # Introduced in Python 3.11\n</code></pre>","tags":["PLW1509"]},{"location":"rules/subprocess-popen-preexec-fn/#references","title":"References","text":"<ul> <li>Python documentation: <code>subprocess.Popen</code></li> <li>Why <code>preexec_fn</code> in <code>subprocess.Popen</code> may lead to deadlock?</li> </ul>","tags":["PLW1509"]},{"location":"rules/subprocess-popen-with-shell-equals-true/","title":"subprocess-popen-with-shell-equals-true (S602)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S602"]},{"location":"rules/subprocess-popen-with-shell-equals-true/#what-it-does","title":"What it does","text":"<p>Check for method calls that initiate a subprocess with a shell.</p>","tags":["S602"]},{"location":"rules/subprocess-popen-with-shell-equals-true/#why-is-this-bad","title":"Why is this bad?","text":"<p>Starting a subprocess with a shell can allow attackers to execute arbitrary shell commands. Consider starting the process without a shell call and sanitize the input to mitigate the risk of shell injection.</p>","tags":["S602"]},{"location":"rules/subprocess-popen-with-shell-equals-true/#example","title":"Example","text":"<pre><code>import subprocess\nsubprocess.run(\"ls -l\", shell=True)\n</code></pre> <p>Use instead:</p> <pre><code>import subprocess\nsubprocess.run([\"ls\", \"-l\"])\n</code></pre>","tags":["S602"]},{"location":"rules/subprocess-popen-with-shell-equals-true/#references","title":"References","text":"<ul> <li>Python documentation: <code>subprocess</code> \u2014 Subprocess management</li> <li>Common Weakness Enumeration: CWE-78</li> </ul>","tags":["S602"]},{"location":"rules/subprocess-run-without-check/","title":"subprocess-run-without-check (PLW1510)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLW1510"]},{"location":"rules/subprocess-run-without-check/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>subprocess.run</code> without an explicit <code>check</code> argument.</p>","tags":["PLW1510"]},{"location":"rules/subprocess-run-without-check/#why-is-this-bad","title":"Why is this bad?","text":"<p>By default, <code>subprocess.run</code> does not check the return code of the process it runs. This can lead to silent failures.</p> <p>Instead, consider using <code>check=True</code> to raise an exception if the process fails, or set <code>check=False</code> explicitly to mark the behavior as intentional.</p>","tags":["PLW1510"]},{"location":"rules/subprocess-run-without-check/#example","title":"Example","text":"<pre><code>import subprocess\nsubprocess.run([\"ls\", \"nonexistent\"])  # No exception raised.\n</code></pre> <p>Use instead:</p> <pre><code>import subprocess\nsubprocess.run([\"ls\", \"nonexistent\"], check=True)  # Raises exception.\n</code></pre> <p>Or:</p> <pre><code>import subprocess\nsubprocess.run([\"ls\", \"nonexistent\"], check=False)  # Explicitly no check.\n</code></pre>","tags":["PLW1510"]},{"location":"rules/subprocess-run-without-check/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe for function calls that contain <code>**kwargs</code>, as adding a <code>check</code> keyword argument to such a call may lead to a duplicate keyword argument error.</p>","tags":["PLW1510"]},{"location":"rules/subprocess-run-without-check/#references","title":"References","text":"<ul> <li>Python documentation: <code>subprocess.run</code></li> </ul>","tags":["PLW1510"]},{"location":"rules/subprocess-without-shell-equals-true/","title":"subprocess-without-shell-equals-true (S603)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S603"]},{"location":"rules/subprocess-without-shell-equals-true/#what-it-does","title":"What it does","text":"<p>Check for method calls that initiate a subprocess without a shell.</p>","tags":["S603"]},{"location":"rules/subprocess-without-shell-equals-true/#why-is-this-bad","title":"Why is this bad?","text":"<p>Starting a subprocess without a shell can prevent attackers from executing arbitrary shell commands; however, it is still error-prone. Consider validating the input.</p>","tags":["S603"]},{"location":"rules/subprocess-without-shell-equals-true/#known-problems","title":"Known problems","text":"<p>Prone to false positives as it is difficult to determine whether the passed arguments have been validated (#4045).</p>","tags":["S603"]},{"location":"rules/subprocess-without-shell-equals-true/#example","title":"Example","text":"<pre><code>import subprocess\ncmd = input(\"Enter a command: \").split()\nsubprocess.run(cmd)\n</code></pre>","tags":["S603"]},{"location":"rules/subprocess-without-shell-equals-true/#references","title":"References","text":"<ul> <li>Python documentation: <code>subprocess</code> \u2014 Subprocess management</li> </ul>","tags":["S603"]},{"location":"rules/super-call-with-parameters/","title":"super-call-with-parameters (UP008)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP008"]},{"location":"rules/super-call-with-parameters/#what-it-does","title":"What it does","text":"<p>Checks for <code>super</code> calls that pass redundant arguments.</p>","tags":["UP008"]},{"location":"rules/super-call-with-parameters/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 3, <code>super</code> can be invoked without any arguments when: (1) the first argument is <code>__class__</code>, and (2) the second argument is equivalent to the first argument of the enclosing method.</p> <p>When possible, omit the arguments to <code>super</code> to make the code more concise and maintainable.</p>","tags":["UP008"]},{"location":"rules/super-call-with-parameters/#example","title":"Example","text":"<pre><code>class A:\ndef foo(self):\npass\nclass B(A):\ndef bar(self):\nsuper(B, self).foo()\n</code></pre> <p>Use instead:</p> <pre><code>class A:\ndef foo(self):\npass\nclass B(A):\ndef bar(self):\nsuper().foo()\n</code></pre>","tags":["UP008"]},{"location":"rules/super-call-with-parameters/#references","title":"References","text":"<ul> <li>Python documentation: <code>super</code></li> <li>super/MRO, Python's most misunderstood feature.</li> </ul>","tags":["UP008"]},{"location":"rules/super-without-brackets/","title":"super-without-brackets (PLW0245)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLW0245"]},{"location":"rules/super-without-brackets/#what-it-does","title":"What it does","text":"<p>Detects attempts to use <code>super</code> without parentheses.</p>","tags":["PLW0245"]},{"location":"rules/super-without-brackets/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>super()</code> callable can be used inside method definitions to create a proxy object that delegates attribute access to a superclass of the current class. Attempting to access attributes on <code>super</code> itself, however, instead of the object returned by a call to <code>super()</code>, will raise <code>AttributeError</code>.</p>","tags":["PLW0245"]},{"location":"rules/super-without-brackets/#example","title":"Example","text":"<pre><code>class Animal:\n@staticmethod\ndef speak():\nreturn \"This animal says something.\"\nclass Dog(Animal):\n@staticmethod\ndef speak():\noriginal_speak = super.speak()  # ERROR: `super.speak()`\nreturn f\"{original_speak} But as a dog, it barks!\"\n</code></pre> <p>Use instead:</p> <pre><code>class Animal:\n@staticmethod\ndef speak():\nreturn \"This animal says something.\"\nclass Dog(Animal):\n@staticmethod\ndef speak():\noriginal_speak = super().speak()  # Correct: `super().speak()`\nreturn f\"{original_speak} But as a dog, it barks!\"\n</code></pre>","tags":["PLW0245"]},{"location":"rules/superfluous-else-break/","title":"superfluous-else-break (RET508)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is sometimes available.</p>","tags":["RET508"]},{"location":"rules/superfluous-else-break/#what-it-does","title":"What it does","text":"<p>Checks for <code>else</code> statements with a <code>break</code> statement in the preceding <code>if</code> block.</p>","tags":["RET508"]},{"location":"rules/superfluous-else-break/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>else</code> statement is not needed, as the <code>break</code> statement will always break out of the loop. Removing the <code>else</code> will reduce nesting and make the code more readable.</p>","tags":["RET508"]},{"location":"rules/superfluous-else-break/#example","title":"Example","text":"<pre><code>def foo(bar, baz):\nfor i in bar:\nif i &gt; baz:\nbreak\nelse:\nx = 0\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar, baz):\nfor i in bar:\nif i &gt; baz:\nbreak\nx = 0\n</code></pre>","tags":["RET508"]},{"location":"rules/superfluous-else-continue/","title":"superfluous-else-continue (RET507)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is sometimes available.</p>","tags":["RET507"]},{"location":"rules/superfluous-else-continue/#what-it-does","title":"What it does","text":"<p>Checks for <code>else</code> statements with a <code>continue</code> statement in the preceding <code>if</code> block.</p>","tags":["RET507"]},{"location":"rules/superfluous-else-continue/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>else</code> statement is not needed, as the <code>continue</code> statement will always continue onto the next iteration of a loop. Removing the <code>else</code> will reduce nesting and make the code more readable.</p>","tags":["RET507"]},{"location":"rules/superfluous-else-continue/#example","title":"Example","text":"<pre><code>def foo(bar, baz):\nfor i in bar:\nif i &lt; baz:\ncontinue\nelse:\nx = 0\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar, baz):\nfor i in bar:\nif i &lt; baz:\ncontinue\nx = 0\n</code></pre>","tags":["RET507"]},{"location":"rules/superfluous-else-raise/","title":"superfluous-else-raise (RET506)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is sometimes available.</p>","tags":["RET506"]},{"location":"rules/superfluous-else-raise/#what-it-does","title":"What it does","text":"<p>Checks for <code>else</code> statements with a <code>raise</code> statement in the preceding <code>if</code> block.</p>","tags":["RET506"]},{"location":"rules/superfluous-else-raise/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>else</code> statement is not needed as the <code>raise</code> statement will always break out of the current scope. Removing the <code>else</code> will reduce nesting and make the code more readable.</p>","tags":["RET506"]},{"location":"rules/superfluous-else-raise/#example","title":"Example","text":"<pre><code>def foo(bar, baz):\nif bar == \"Specific Error\":\nraise Exception(bar)\nelse:\nraise Exception(baz)\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar, baz):\nif bar == \"Specific Error\":\nraise Exception(bar)\nraise Exception(baz)\n</code></pre>","tags":["RET506"]},{"location":"rules/superfluous-else-return/","title":"superfluous-else-return (RET505)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is sometimes available.</p>","tags":["RET505"]},{"location":"rules/superfluous-else-return/#what-it-does","title":"What it does","text":"<p>Checks for <code>else</code> statements with a <code>return</code> statement in the preceding <code>if</code> block.</p>","tags":["RET505"]},{"location":"rules/superfluous-else-return/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>else</code> statement is not needed as the <code>return</code> statement will always break out of the enclosing function. Removing the <code>else</code> will reduce nesting and make the code more readable.</p>","tags":["RET505"]},{"location":"rules/superfluous-else-return/#example","title":"Example","text":"<pre><code>def foo(bar, baz):\nif bar:\nreturn 1\nelse:\nreturn baz\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar, baz):\nif bar:\nreturn 1\nreturn baz\n</code></pre>","tags":["RET505"]},{"location":"rules/suppressible-exception/","title":"suppressible-exception (SIM105)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM105"]},{"location":"rules/suppressible-exception/#what-it-does","title":"What it does","text":"<p>Checks for <code>try</code>-<code>except</code>-<code>pass</code> blocks that can be replaced with the <code>contextlib.suppress</code> context manager.</p>","tags":["SIM105"]},{"location":"rules/suppressible-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>contextlib.suppress</code> is more concise and directly communicates the intent of the code: to suppress a given exception.</p> <p>Note that <code>contextlib.suppress</code> is slower than using <code>try</code>-<code>except</code>-<code>pass</code> directly. For performance-critical code, consider retaining the <code>try</code>-<code>except</code>-<code>pass</code> pattern.</p>","tags":["SIM105"]},{"location":"rules/suppressible-exception/#example","title":"Example","text":"<pre><code>try:\n1 / 0\nexcept ZeroDivisionError:\npass\n</code></pre> <p>Use instead:</p> <pre><code>import contextlib\nwith contextlib.suppress(ZeroDivisionError):\n1 / 0\n</code></pre>","tags":["SIM105"]},{"location":"rules/suppressible-exception/#references","title":"References","text":"<ul> <li>Python documentation: <code>contextlib.suppress</code></li> <li>Python documentation: <code>try</code> statement</li> <li>a simpler <code>try</code>/<code>except</code> (and why maybe shouldn't)</li> </ul>","tags":["SIM105"]},{"location":"rules/surrounding-whitespace/","title":"surrounding-whitespace (D210)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is sometimes available.</p>","tags":["D210"]},{"location":"rules/surrounding-whitespace/#what-it-does","title":"What it does","text":"<p>Checks for surrounding whitespace in docstrings.</p>","tags":["D210"]},{"location":"rules/surrounding-whitespace/#why-is-this-bad","title":"Why is this bad?","text":"<p>Remove surrounding whitespace from the docstring, for consistency.</p>","tags":["D210"]},{"location":"rules/surrounding-whitespace/#example","title":"Example","text":"<pre><code>def factorial(n: int) -&gt; int:\n\"\"\" Return the factorial of n. \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def factorial(n: int) -&gt; int:\n\"\"\"Return the factorial of n.\"\"\"\n</code></pre>","tags":["D210"]},{"location":"rules/surrounding-whitespace/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D210"]},{"location":"rules/suspicious-eval-usage/","title":"suspicious-eval-usage (S307)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S307"]},{"location":"rules/suspicious-eval-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of the builtin <code>eval()</code> function.</p>","tags":["S307"]},{"location":"rules/suspicious-eval-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>eval()</code> function is insecure as it enables arbitrary code execution.</p> <p>If you need to evaluate an expression from a string, consider using <code>ast.literal_eval()</code> instead, which will raise an exception if the expression is not a valid Python literal.</p>","tags":["S307"]},{"location":"rules/suspicious-eval-usage/#example","title":"Example","text":"<pre><code>x = eval(input(\"Enter a number: \"))\n</code></pre> <p>Use instead:</p> <pre><code>from ast import literal_eval\nx = literal_eval(input(\"Enter a number: \"))\n</code></pre>","tags":["S307"]},{"location":"rules/suspicious-eval-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>eval</code></li> <li>Python documentation: <code>literal_eval</code></li> <li>Eval really is dangerous by Ned Batchelder</li> </ul>","tags":["S307"]},{"location":"rules/suspicious-ftp-lib-usage/","title":"suspicious-ftp-lib-usage (S321)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S321"]},{"location":"rules/suspicious-ftp-lib-usage/#what-it-does","title":"What it does","text":"<p>Checks for the use of FTP-related functions.</p>","tags":["S321"]},{"location":"rules/suspicious-ftp-lib-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>FTP is considered insecure as it does not encrypt data sent over the connection and is thus vulnerable to numerous attacks.</p> <p>Instead, consider using FTPS (which secures FTP using SSL/TLS) or SFTP.</p>","tags":["S321"]},{"location":"rules/suspicious-ftp-lib-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>ftplib</code> \u2014 FTP protocol client</li> </ul>","tags":["S321"]},{"location":"rules/suspicious-ftplib-import/","title":"suspicious-ftplib-import (S402)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S402"]},{"location":"rules/suspicious-ftplib-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>ftplib</code> module.</p>","tags":["S402"]},{"location":"rules/suspicious-ftplib-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>FTP is considered insecure. Instead, use SSH, SFTP, SCP, or another encrypted protocol.</p>","tags":["S402"]},{"location":"rules/suspicious-ftplib-import/#example","title":"Example","text":"<pre><code>import ftplib\n</code></pre>","tags":["S402"]},{"location":"rules/suspicious-ftplib-import/#references","title":"References","text":"<ul> <li>Python documentation: <code>ftplib</code> - FTP protocol client</li> </ul>","tags":["S402"]},{"location":"rules/suspicious-httpoxy-import/","title":"suspicious-httpoxy-import (S412)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S412"]},{"location":"rules/suspicious-httpoxy-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of <code>wsgiref.handlers.CGIHandler</code> and <code>twisted.web.twcgi.CGIScript</code>.</p>","tags":["S412"]},{"location":"rules/suspicious-httpoxy-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>httpoxy is a set of vulnerabilities that affect application code running in CGI or CGI-like environments. The use of CGI for web applications should be avoided to prevent this class of attack.</p>","tags":["S412"]},{"location":"rules/suspicious-httpoxy-import/#example","title":"Example","text":"<pre><code>import wsgiref.handlers.CGIHandler\n</code></pre>","tags":["S412"]},{"location":"rules/suspicious-httpoxy-import/#references","title":"References","text":"<ul> <li>httpoxy website</li> </ul>","tags":["S412"]},{"location":"rules/suspicious-insecure-cipher-mode-usage/","title":"suspicious-insecure-cipher-mode-usage (S305)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S305"]},{"location":"rules/suspicious-insecure-cipher-mode-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of weak or broken cryptographic cipher modes.</p>","tags":["S305"]},{"location":"rules/suspicious-insecure-cipher-mode-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Weak or broken cryptographic ciphers may be susceptible to attacks that allow an attacker to decrypt ciphertext without knowing the key or otherwise compromise the security of the cipher, such as forgeries.</p> <p>Use strong, modern cryptographic ciphers instead of weak or broken ones.</p>","tags":["S305"]},{"location":"rules/suspicious-insecure-cipher-mode-usage/#example","title":"Example","text":"<pre><code>from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nalgorithm = algorithms.ARC4(key)\ncipher = Cipher(algorithm, mode=modes.ECB(iv))\nencryptor = cipher.encryptor()\n</code></pre> <p>Use instead:</p> <pre><code>from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nalgorithm = algorithms.ARC4(key)\ncipher = Cipher(algorithm, mode=modes.CTR(iv))\nencryptor = cipher.encryptor()\n</code></pre>","tags":["S305"]},{"location":"rules/suspicious-insecure-cipher-mode-usage/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-327</li> </ul>","tags":["S305"]},{"location":"rules/suspicious-insecure-cipher-usage/","title":"suspicious-insecure-cipher-usage (S304)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S304"]},{"location":"rules/suspicious-insecure-cipher-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of weak or broken cryptographic ciphers.</p>","tags":["S304"]},{"location":"rules/suspicious-insecure-cipher-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Weak or broken cryptographic ciphers may be susceptible to attacks that allow an attacker to decrypt ciphertext without knowing the key or otherwise compromise the security of the cipher, such as forgeries.</p> <p>Use strong, modern cryptographic ciphers instead of weak or broken ones.</p>","tags":["S304"]},{"location":"rules/suspicious-insecure-cipher-usage/#example","title":"Example","text":"<pre><code>from cryptography.hazmat.primitives.ciphers import Cipher, algorithms\nalgorithm = algorithms.ARC4(key)\ncipher = Cipher(algorithm, mode=None)\nencryptor = cipher.encryptor()\n</code></pre> <p>Use instead:</p> <pre><code>from cryptography.fernet import Fernet\nfernet = Fernet(key)\n</code></pre>","tags":["S304"]},{"location":"rules/suspicious-insecure-cipher-usage/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-327</li> </ul>","tags":["S304"]},{"location":"rules/suspicious-insecure-hash-usage/","title":"suspicious-insecure-hash-usage (S303)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S303"]},{"location":"rules/suspicious-insecure-hash-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of weak or broken cryptographic hash functions.</p>","tags":["S303"]},{"location":"rules/suspicious-insecure-hash-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Weak or broken cryptographic hash functions may be susceptible to collision attacks (where two different inputs produce the same hash) or pre-image attacks (where an attacker can find an input that produces a given hash). This can lead to security vulnerabilities in applications that rely on these hash functions.</p> <p>Avoid using weak or broken cryptographic hash functions in security contexts. Instead, use a known secure hash function such as SHA-256.</p>","tags":["S303"]},{"location":"rules/suspicious-insecure-hash-usage/#example","title":"Example","text":"<pre><code>from cryptography.hazmat.primitives import hashes\ndigest = hashes.Hash(hashes.MD5())\ndigest.update(b\"Hello, world!\")\ndigest.finalize()\n</code></pre> <p>Use instead:</p> <pre><code>from cryptography.hazmat.primitives import hashes\ndigest = hashes.Hash(hashes.SHA256())\ndigest.update(b\"Hello, world!\")\ndigest.finalize()\n</code></pre>","tags":["S303"]},{"location":"rules/suspicious-insecure-hash-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>hashlib</code> \u2014 Secure hashes and message digests</li> <li>Common Weakness Enumeration: CWE-327</li> <li>Common Weakness Enumeration: CWE-328</li> <li>Common Weakness Enumeration: CWE-916</li> </ul>","tags":["S303"]},{"location":"rules/suspicious-lxml-import/","title":"suspicious-lxml-import (S410)","text":"<p>Derived from the flake8-bandit linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["S410"]},{"location":"rules/suspicious-lxml-import/#removed","title":"Removed","text":"<p>This rule was removed as the <code>lxml</code> library has been modified to address known vulnerabilities and unsafe defaults. As such, the <code>defusedxml</code> library is no longer necessary, <code>defusedxml</code> has deprecated its <code>lxml</code> module.</p>","tags":["S410"]},{"location":"rules/suspicious-lxml-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>lxml</code> module.</p>","tags":["S410"]},{"location":"rules/suspicious-lxml-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using various methods from the <code>lxml</code> module to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent <code>defusedxml</code> package.</p>","tags":["S410"]},{"location":"rules/suspicious-lxml-import/#example","title":"Example","text":"<pre><code>import lxml\n</code></pre>","tags":["S410"]},{"location":"rules/suspicious-mark-safe-usage/","title":"suspicious-mark-safe-usage (S308)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S308"]},{"location":"rules/suspicious-mark-safe-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of calls to <code>django.utils.safestring.mark_safe</code>.</p>","tags":["S308"]},{"location":"rules/suspicious-mark-safe-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Cross-site scripting (XSS) vulnerabilities allow attackers to execute arbitrary JavaScript. To guard against XSS attacks, Django templates assumes that data is unsafe and automatically escapes malicious strings before rending them.</p> <p><code>django.utils.safestring.mark_safe</code> marks a string as safe for use in HTML templates, bypassing XSS protection. This is dangerous because it may allow cross-site scripting attacks if the string is not properly escaped.</p>","tags":["S308"]},{"location":"rules/suspicious-mark-safe-usage/#example","title":"Example","text":"<pre><code>from django.utils.safestring import mark_safe\ncontent = mark_safe(\"&lt;script&gt;alert('Hello, world!')&lt;/script&gt;\")  # XSS.\n</code></pre> <p>Use instead:</p> <pre><code>content = \"&lt;script&gt;alert('Hello, world!')&lt;/script&gt;\"  # Safe if rendered.\n</code></pre>","tags":["S308"]},{"location":"rules/suspicious-mark-safe-usage/#references","title":"References","text":"<ul> <li>Django documentation: <code>mark_safe</code></li> <li>Django documentation: Cross Site Scripting (XSS) protection</li> <li>Common Weakness Enumeration: CWE-80</li> </ul>","tags":["S308"]},{"location":"rules/suspicious-marshal-usage/","title":"suspicious-marshal-usage (S302)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S302"]},{"location":"rules/suspicious-marshal-usage/#what-it-does","title":"What it does","text":"<p>Checks for calls to <code>marshal</code> functions.</p>","tags":["S302"]},{"location":"rules/suspicious-marshal-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Deserializing untrusted data with <code>marshal</code> is insecure, as it can allow for the creation of arbitrary objects, which can then be used to achieve arbitrary code execution and otherwise unexpected behavior.</p> <p>Avoid deserializing untrusted data with <code>marshal</code>. Instead, consider safer formats, such as JSON.</p> <p>If you must deserialize untrusted data with <code>marshal</code>, consider signing the data with a secret key and verifying the signature before deserializing the payload. This will prevent an attacker from injecting arbitrary objects into the serialized data.</p>","tags":["S302"]},{"location":"rules/suspicious-marshal-usage/#example","title":"Example","text":"<pre><code>import marshal\nwith open(\"foo.marshal\", \"rb\") as file:\nfoo = marshal.load(file)\n</code></pre> <p>Use instead:</p> <pre><code>import json\nwith open(\"foo.json\", \"rb\") as file:\nfoo = json.load(file)\n</code></pre>","tags":["S302"]},{"location":"rules/suspicious-marshal-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>marshal</code> \u2014 Internal Python object serialization</li> <li>Common Weakness Enumeration: CWE-502</li> </ul>","tags":["S302"]},{"location":"rules/suspicious-mktemp-usage/","title":"suspicious-mktemp-usage (S306)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S306"]},{"location":"rules/suspicious-mktemp-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>tempfile.mktemp</code>.</p>","tags":["S306"]},{"location":"rules/suspicious-mktemp-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>tempfile.mktemp</code> returns a pathname of a file that does not exist at the time the call is made; then, the caller is responsible for creating the file and subsequently using it. This is insecure because another process could create a file with the same name between the time the function returns and the time the caller creates the file.</p> <p><code>tempfile.mktemp</code> is deprecated in favor of <code>tempfile.mkstemp</code> which creates the file when it is called. Consider using <code>tempfile.mkstemp</code> instead, either directly or via a context manager such as <code>tempfile.TemporaryFile</code>.</p>","tags":["S306"]},{"location":"rules/suspicious-mktemp-usage/#example","title":"Example","text":"<pre><code>import tempfile\ntmp_file = tempfile.mktemp()\nwith open(tmp_file, \"w\") as file:\nfile.write(\"Hello, world!\")\n</code></pre> <p>Use instead:</p> <pre><code>import tempfile\nwith tempfile.TemporaryFile() as file:\nfile.write(\"Hello, world!\")\n</code></pre>","tags":["S306"]},{"location":"rules/suspicious-mktemp-usage/#references","title":"References","text":"<ul> <li>Python documentation:<code>mktemp</code></li> </ul>","tags":["S306"]},{"location":"rules/suspicious-non-cryptographic-random-usage/","title":"suspicious-non-cryptographic-random-usage (S311)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S311"]},{"location":"rules/suspicious-non-cryptographic-random-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of cryptographically weak pseudo-random number generators.</p>","tags":["S311"]},{"location":"rules/suspicious-non-cryptographic-random-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Cryptographically weak pseudo-random number generators are insecure, as they are easily predictable. This can allow an attacker to guess the generated numbers and compromise the security of the system.</p> <p>Instead, use a cryptographically secure pseudo-random number generator (such as using the <code>secrets</code> module) when generating random numbers for security purposes.</p>","tags":["S311"]},{"location":"rules/suspicious-non-cryptographic-random-usage/#example","title":"Example","text":"<pre><code>import random\nrandom.randrange(10)\n</code></pre> <p>Use instead:</p> <pre><code>import secrets\nsecrets.randbelow(10)\n</code></pre>","tags":["S311"]},{"location":"rules/suspicious-non-cryptographic-random-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>random</code> \u2014 Generate pseudo-random numbers</li> </ul>","tags":["S311"]},{"location":"rules/suspicious-pickle-import/","title":"suspicious-pickle-import (S403)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S403"]},{"location":"rules/suspicious-pickle-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>pickle</code>, <code>cPickle</code>, <code>dill</code>, and <code>shelve</code> modules.</p>","tags":["S403"]},{"location":"rules/suspicious-pickle-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is possible to construct malicious pickle data which will execute arbitrary code during unpickling. Consider possible security implications associated with these modules.</p>","tags":["S403"]},{"location":"rules/suspicious-pickle-import/#example","title":"Example","text":"<pre><code>import pickle\n</code></pre>","tags":["S403"]},{"location":"rules/suspicious-pickle-import/#references","title":"References","text":"<ul> <li>Python documentation: <code>pickle</code> \u2014 Python object serialization</li> </ul>","tags":["S403"]},{"location":"rules/suspicious-pickle-usage/","title":"suspicious-pickle-usage (S301)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S301"]},{"location":"rules/suspicious-pickle-usage/#what-it-does","title":"What it does","text":"<p>Checks for calls to <code>pickle</code> functions or modules that wrap them.</p>","tags":["S301"]},{"location":"rules/suspicious-pickle-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Deserializing untrusted data with <code>pickle</code> and other deserialization modules is insecure as it can allow for the creation of arbitrary objects, which can then be used to achieve arbitrary code execution and otherwise unexpected behavior.</p> <p>Avoid deserializing untrusted data with <code>pickle</code> and other deserialization modules. Instead, consider safer formats, such as JSON.</p> <p>If you must deserialize untrusted data with <code>pickle</code>, consider signing the data with a secret key and verifying the signature before deserializing the payload, This will prevent an attacker from injecting arbitrary objects into the serialized data.</p>","tags":["S301"]},{"location":"rules/suspicious-pickle-usage/#example","title":"Example","text":"<pre><code>import pickle\nwith open(\"foo.pickle\", \"rb\") as file:\nfoo = pickle.load(file)\n</code></pre> <p>Use instead:</p> <pre><code>import json\nwith open(\"foo.json\", \"rb\") as file:\nfoo = json.load(file)\n</code></pre>","tags":["S301"]},{"location":"rules/suspicious-pickle-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>pickle</code> \u2014 Python object serialization</li> <li>Common Weakness Enumeration: CWE-502</li> </ul>","tags":["S301"]},{"location":"rules/suspicious-pycrypto-import/","title":"suspicious-pycrypto-import (S413)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S413"]},{"location":"rules/suspicious-pycrypto-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of several unsafe cryptography modules.</p>","tags":["S413"]},{"location":"rules/suspicious-pycrypto-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>pycrypto</code> library is known to have a publicly disclosed buffer overflow vulnerability. It is no longer actively maintained and has been deprecated in favor of the <code>pyca/cryptography</code> library.</p>","tags":["S413"]},{"location":"rules/suspicious-pycrypto-import/#example","title":"Example","text":"<pre><code>import Crypto.Random\n</code></pre>","tags":["S413"]},{"location":"rules/suspicious-pycrypto-import/#references","title":"References","text":"<ul> <li>Buffer Overflow Issue</li> </ul>","tags":["S413"]},{"location":"rules/suspicious-pyghmi-import/","title":"suspicious-pyghmi-import (S415)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S415"]},{"location":"rules/suspicious-pyghmi-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>pyghmi</code> module.</p>","tags":["S415"]},{"location":"rules/suspicious-pyghmi-import/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>pyghmi</code> is an IPMI-related module, but IPMI is considered insecure. Instead, use an encrypted protocol.</p>","tags":["S415"]},{"location":"rules/suspicious-pyghmi-import/#example","title":"Example","text":"<pre><code>import pyghmi\n</code></pre>","tags":["S415"]},{"location":"rules/suspicious-pyghmi-import/#references","title":"References","text":"<ul> <li>Buffer Overflow Issue</li> </ul>","tags":["S415"]},{"location":"rules/suspicious-subprocess-import/","title":"suspicious-subprocess-import (S404)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S404"]},{"location":"rules/suspicious-subprocess-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>subprocess</code> module.</p>","tags":["S404"]},{"location":"rules/suspicious-subprocess-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is possible to inject malicious commands into subprocess calls. Consider possible security implications associated with this module.</p>","tags":["S404"]},{"location":"rules/suspicious-subprocess-import/#example","title":"Example","text":"<pre><code>import subprocess\n</code></pre>","tags":["S404"]},{"location":"rules/suspicious-telnet-usage/","title":"suspicious-telnet-usage (S312)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S312"]},{"location":"rules/suspicious-telnet-usage/#what-it-does","title":"What it does","text":"<p>Checks for the use of Telnet-related functions.</p>","tags":["S312"]},{"location":"rules/suspicious-telnet-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Telnet is considered insecure because it does not encrypt data sent over the connection and is vulnerable to numerous attacks.</p> <p>Instead, consider using a more secure protocol such as SSH.</p>","tags":["S312"]},{"location":"rules/suspicious-telnet-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>telnetlib</code> \u2014 Telnet client</li> </ul>","tags":["S312"]},{"location":"rules/suspicious-telnetlib-import/","title":"suspicious-telnetlib-import (S401)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S401"]},{"location":"rules/suspicious-telnetlib-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>telnetlib</code> module.</p>","tags":["S401"]},{"location":"rules/suspicious-telnetlib-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Telnet is considered insecure. It is deprecated since version 3.11, and was removed in version 3.13. Instead, use SSH or another encrypted protocol.</p>","tags":["S401"]},{"location":"rules/suspicious-telnetlib-import/#example","title":"Example","text":"<pre><code>import telnetlib\n</code></pre>","tags":["S401"]},{"location":"rules/suspicious-telnetlib-import/#references","title":"References","text":"<ul> <li>Python documentation: <code>telnetlib</code> - Telnet client</li> <li>PEP 594: <code>telnetlib</code></li> </ul>","tags":["S401"]},{"location":"rules/suspicious-unverified-context-usage/","title":"suspicious-unverified-context-usage (S323)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S323"]},{"location":"rules/suspicious-unverified-context-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>ssl._create_unverified_context</code>.</p>","tags":["S323"]},{"location":"rules/suspicious-unverified-context-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 476 enabled certificate and hostname validation by default in Python standard library HTTP clients. Previously, Python did not validate certificates by default, which could allow an attacker to perform a \"man in the middle\" attack by intercepting and modifying traffic between client and server.</p> <p>To support legacy environments, <code>ssl._create_unverified_context</code> reverts to the previous behavior that does perform verification. Otherwise, use <code>ssl.create_default_context</code> to create a secure context.</p>","tags":["S323"]},{"location":"rules/suspicious-unverified-context-usage/#example","title":"Example","text":"<pre><code>import ssl\ncontext = ssl._create_unverified_context()\n</code></pre> <p>Use instead:</p> <pre><code>import ssl\ncontext = ssl.create_default_context()\n</code></pre>","tags":["S323"]},{"location":"rules/suspicious-unverified-context-usage/#references","title":"References","text":"<ul> <li>PEP 476 \u2013 Enabling certificate verification by default for stdlib http clients: Opting out</li> <li>Python documentation: <code>ssl</code> \u2014 TLS/SSL wrapper for socket objects</li> </ul>","tags":["S323"]},{"location":"rules/suspicious-url-open-usage/","title":"suspicious-url-open-usage (S310)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S310"]},{"location":"rules/suspicious-url-open-usage/#what-it-does","title":"What it does","text":"<p>Checks for instances where URL open functions are used with unexpected schemes.</p>","tags":["S310"]},{"location":"rules/suspicious-url-open-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some URL open functions allow the use of <code>file:</code> or custom schemes (for use instead of <code>http:</code> or <code>https:</code>). An attacker may be able to use these schemes to access or modify unauthorized resources, and cause unexpected behavior.</p> <p>To mitigate this risk, audit all uses of URL open functions and ensure that only permitted schemes are used (e.g., allowing <code>http:</code> and <code>https:</code>, and disallowing <code>file:</code> and <code>ftp:</code>).</p>","tags":["S310"]},{"location":"rules/suspicious-url-open-usage/#example","title":"Example","text":"<pre><code>from urllib.request import urlopen\nurl = input(\"Enter a URL: \")\nwith urlopen(url) as response:\n...\n</code></pre> <p>Use instead:</p> <pre><code>from urllib.request import urlopen\nurl = input(\"Enter a URL: \")\nif not url.startswith((\"http:\", \"https:\")):\nraise ValueError(\"URL must start with 'http:' or 'https:'\")\nwith urlopen(url) as response:\n...\n</code></pre>","tags":["S310"]},{"location":"rules/suspicious-url-open-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>urlopen</code></li> </ul>","tags":["S310"]},{"location":"rules/suspicious-xml-element-tree-usage/","title":"suspicious-xml-element-tree-usage (S314)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S314"]},{"location":"rules/suspicious-xml-element-tree-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S314"]},{"location":"rules/suspicious-xml-element-tree-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p> <p>Consider using the <code>defusedxml</code> package when parsing untrusted XML data, to protect against XML attacks.</p>","tags":["S314"]},{"location":"rules/suspicious-xml-element-tree-usage/#example","title":"Example","text":"<pre><code>from xml.etree.ElementTree import parse\ntree = parse(\"untrusted.xml\")  # Vulnerable to XML attacks.\n</code></pre> <p>Use instead:</p> <pre><code>from defusedxml.ElementTree import parse\ntree = parse(\"untrusted.xml\")\n</code></pre>","tags":["S314"]},{"location":"rules/suspicious-xml-element-tree-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml</code> \u2014 XML processing modules</li> <li>PyPI: <code>defusedxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S314"]},{"location":"rules/suspicious-xml-etree-import/","title":"suspicious-xml-etree-import (S405)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S405"]},{"location":"rules/suspicious-xml-etree-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>xml.etree.cElementTree</code> and <code>xml.etree.ElementTree</code> modules</p>","tags":["S405"]},{"location":"rules/suspicious-xml-etree-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using various methods from these modules to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent <code>defusedxml</code> package, or make sure <code>defusedxml.defuse_stdlib()</code> is called before parsing XML data.</p>","tags":["S405"]},{"location":"rules/suspicious-xml-etree-import/#example","title":"Example","text":"<pre><code>import xml.etree.cElementTree\n</code></pre>","tags":["S405"]},{"location":"rules/suspicious-xml-expat-builder-usage/","title":"suspicious-xml-expat-builder-usage (S316)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S316"]},{"location":"rules/suspicious-xml-expat-builder-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S316"]},{"location":"rules/suspicious-xml-expat-builder-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p> <p>Consider using the <code>defusedxml</code> package when parsing untrusted XML data, to protect against XML attacks.</p>","tags":["S316"]},{"location":"rules/suspicious-xml-expat-builder-usage/#example","title":"Example","text":"<pre><code>from xml.dom.expatbuilder import parse\nparse(\"untrusted.xml\")\n</code></pre> <p>Use instead:</p> <pre><code>from defusedxml.expatbuilder import parse\ntree = parse(\"untrusted.xml\")\n</code></pre>","tags":["S316"]},{"location":"rules/suspicious-xml-expat-builder-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml</code> \u2014 XML processing modules</li> <li>PyPI: <code>defusedxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S316"]},{"location":"rules/suspicious-xml-expat-import/","title":"suspicious-xml-expat-import (S407)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S407"]},{"location":"rules/suspicious-xml-expat-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>xml.dom.expatbuilder</code> module.</p>","tags":["S407"]},{"location":"rules/suspicious-xml-expat-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using various methods from these modules to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent <code>defusedxml</code> package, or make sure <code>defusedxml.defuse_stdlib()</code> is called before parsing XML data.</p>","tags":["S407"]},{"location":"rules/suspicious-xml-expat-import/#example","title":"Example","text":"<pre><code>import xml.dom.expatbuilder\n</code></pre>","tags":["S407"]},{"location":"rules/suspicious-xml-expat-reader-usage/","title":"suspicious-xml-expat-reader-usage (S315)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S315"]},{"location":"rules/suspicious-xml-expat-reader-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S315"]},{"location":"rules/suspicious-xml-expat-reader-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p> <p>Consider using the <code>defusedxml</code> package when parsing untrusted XML data, to protect against XML attacks.</p>","tags":["S315"]},{"location":"rules/suspicious-xml-expat-reader-usage/#example","title":"Example","text":"<pre><code>from xml.sax.expatreader import create_parser\nparser = create_parser()\n</code></pre> <p>Use instead:</p> <pre><code>from defusedxml.sax import create_parser\nparser = create_parser()\n</code></pre>","tags":["S315"]},{"location":"rules/suspicious-xml-expat-reader-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml</code> \u2014 XML processing modules</li> <li>PyPI: <code>defusedxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S315"]},{"location":"rules/suspicious-xml-mini-dom-usage/","title":"suspicious-xml-mini-dom-usage (S318)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S318"]},{"location":"rules/suspicious-xml-mini-dom-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S318"]},{"location":"rules/suspicious-xml-mini-dom-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p> <p>Consider using the <code>defusedxml</code> package when parsing untrusted XML data, to protect against XML attacks.</p>","tags":["S318"]},{"location":"rules/suspicious-xml-mini-dom-usage/#example","title":"Example","text":"<pre><code>from xml.dom.minidom import parse\ncontent = parse(\"untrusted.xml\")\n</code></pre> <p>Use instead:</p> <pre><code>from defusedxml.minidom import parse\ncontent = parse(\"untrusted.xml\")\n</code></pre>","tags":["S318"]},{"location":"rules/suspicious-xml-mini-dom-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml</code> \u2014 XML processing modules</li> <li>PyPI: <code>defusedxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S318"]},{"location":"rules/suspicious-xml-minidom-import/","title":"suspicious-xml-minidom-import (S408)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S408"]},{"location":"rules/suspicious-xml-minidom-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>xml.dom.minidom</code> module.</p>","tags":["S408"]},{"location":"rules/suspicious-xml-minidom-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using various methods from these modules to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent <code>defusedxml</code> package, or make sure <code>defusedxml.defuse_stdlib()</code> is called before parsing XML data.</p>","tags":["S408"]},{"location":"rules/suspicious-xml-minidom-import/#example","title":"Example","text":"<pre><code>import xml.dom.minidom\n</code></pre>","tags":["S408"]},{"location":"rules/suspicious-xml-pull-dom-usage/","title":"suspicious-xml-pull-dom-usage (S319)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S319"]},{"location":"rules/suspicious-xml-pull-dom-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S319"]},{"location":"rules/suspicious-xml-pull-dom-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p> <p>Consider using the <code>defusedxml</code> package when parsing untrusted XML data, to protect against XML attacks.</p>","tags":["S319"]},{"location":"rules/suspicious-xml-pull-dom-usage/#example","title":"Example","text":"<pre><code>from xml.dom.pulldom import parse\ncontent = parse(\"untrusted.xml\")\n</code></pre> <p>Use instead:</p> <pre><code>from defusedxml.pulldom import parse\ncontent = parse(\"untrusted.xml\")\n</code></pre>","tags":["S319"]},{"location":"rules/suspicious-xml-pull-dom-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml</code> \u2014 XML processing modules</li> <li>PyPI: <code>defusedxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S319"]},{"location":"rules/suspicious-xml-pulldom-import/","title":"suspicious-xml-pulldom-import (S409)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S409"]},{"location":"rules/suspicious-xml-pulldom-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>xml.dom.pulldom</code> module.</p>","tags":["S409"]},{"location":"rules/suspicious-xml-pulldom-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using various methods from these modules to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent <code>defusedxml</code> package, or make sure <code>defusedxml.defuse_stdlib()</code> is called before parsing XML data.</p>","tags":["S409"]},{"location":"rules/suspicious-xml-pulldom-import/#example","title":"Example","text":"<pre><code>import xml.dom.pulldom\n</code></pre>","tags":["S409"]},{"location":"rules/suspicious-xml-sax-import/","title":"suspicious-xml-sax-import (S406)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S406"]},{"location":"rules/suspicious-xml-sax-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>xml.sax</code> module.</p>","tags":["S406"]},{"location":"rules/suspicious-xml-sax-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using various methods from these modules to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent <code>defusedxml</code> package, or make sure <code>defusedxml.defuse_stdlib()</code> is called before parsing XML data.</p>","tags":["S406"]},{"location":"rules/suspicious-xml-sax-import/#example","title":"Example","text":"<pre><code>import xml.sax\n</code></pre>","tags":["S406"]},{"location":"rules/suspicious-xml-sax-usage/","title":"suspicious-xml-sax-usage (S317)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S317"]},{"location":"rules/suspicious-xml-sax-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S317"]},{"location":"rules/suspicious-xml-sax-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p> <p>Consider using the <code>defusedxml</code> package when parsing untrusted XML data, to protect against XML attacks.</p>","tags":["S317"]},{"location":"rules/suspicious-xml-sax-usage/#example","title":"Example","text":"<pre><code>from xml.sax import make_parser\nmake_parser()\n</code></pre> <p>Use instead:</p> <pre><code>from defusedxml.sax import make_parser\nmake_parser()\n</code></pre>","tags":["S317"]},{"location":"rules/suspicious-xml-sax-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml</code> \u2014 XML processing modules</li> <li>PyPI: <code>defusedxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S317"]},{"location":"rules/suspicious-xmlc-element-tree-usage/","title":"suspicious-xmlc-element-tree-usage (S313)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S313"]},{"location":"rules/suspicious-xmlc-element-tree-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S313"]},{"location":"rules/suspicious-xmlc-element-tree-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p> <p>Consider using the <code>defusedxml</code> package when parsing untrusted XML data, to protect against XML attacks.</p>","tags":["S313"]},{"location":"rules/suspicious-xmlc-element-tree-usage/#example","title":"Example","text":"<pre><code>from xml.etree.cElementTree import parse\ntree = parse(\"untrusted.xml\")  # Vulnerable to XML attacks.\n</code></pre> <p>Use instead:</p> <pre><code>from defusedxml.cElementTree import parse\ntree = parse(\"untrusted.xml\")\n</code></pre>","tags":["S313"]},{"location":"rules/suspicious-xmlc-element-tree-usage/#references","title":"References","text":"<ul> <li>Python documentation: <code>xml</code> \u2014 XML processing modules</li> <li>PyPI: <code>defusedxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S313"]},{"location":"rules/suspicious-xmle-tree-usage/","title":"suspicious-xmle-tree-usage (S320)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S320"]},{"location":"rules/suspicious-xmle-tree-usage/#what-it-does","title":"What it does","text":"<p>Checks for uses of insecure XML parsers.</p>","tags":["S320"]},{"location":"rules/suspicious-xmle-tree-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many XML parsers are vulnerable to XML attacks (such as entity expansion), which cause excessive memory and CPU usage by exploiting recursion. An attacker could use such methods to access unauthorized resources.</p>","tags":["S320"]},{"location":"rules/suspicious-xmle-tree-usage/#example","title":"Example","text":"<pre><code>from lxml import etree\ncontent = etree.parse(\"untrusted.xml\")\n</code></pre>","tags":["S320"]},{"location":"rules/suspicious-xmle-tree-usage/#references","title":"References","text":"<ul> <li>PyPI: <code>lxml</code></li> <li>Common Weakness Enumeration: CWE-400</li> <li>Common Weakness Enumeration: CWE-776</li> </ul>","tags":["S320"]},{"location":"rules/suspicious-xmlrpc-import/","title":"suspicious-xmlrpc-import (S411)","text":"<p>Derived from the flake8-bandit linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["S411"]},{"location":"rules/suspicious-xmlrpc-import/#what-it-does","title":"What it does","text":"<p>Checks for imports of the <code>xmlrpc</code> module.</p>","tags":["S411"]},{"location":"rules/suspicious-xmlrpc-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>XMLRPC is a particularly dangerous XML module, as it is also concerned with communicating data over a network. Use the <code>defused.xmlrpc.monkey_patch()</code> function to monkey-patch the <code>xmlrpclib</code> module and mitigate remote XML attacks.</p>","tags":["S411"]},{"location":"rules/suspicious-xmlrpc-import/#example","title":"Example","text":"<pre><code>import xmlrpc\n</code></pre>","tags":["S411"]},{"location":"rules/syntax-error/","title":"syntax-error (E999)","text":"<p>Derived from the pycodestyle linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["E999"]},{"location":"rules/syntax-error/#removed","title":"Removed","text":"<p>This rule has been removed. Syntax errors will always be shown regardless of whether this rule is selected or not.</p>","tags":["E999"]},{"location":"rules/syntax-error/#what-it-does","title":"What it does","text":"<p>Checks for code that contains syntax errors.</p>","tags":["E999"]},{"location":"rules/syntax-error/#why-is-this-bad","title":"Why is this bad?","text":"<p>Code with syntax errors cannot be executed. Such errors are likely a mistake.</p>","tags":["E999"]},{"location":"rules/syntax-error/#example","title":"Example","text":"<pre><code>x =\n</code></pre> <p>Use instead:</p> <pre><code>x = 1\n</code></pre>","tags":["E999"]},{"location":"rules/syntax-error/#references","title":"References","text":"<ul> <li>Python documentation: Syntax Errors</li> </ul>","tags":["E999"]},{"location":"rules/sys-exit-alias/","title":"sys-exit-alias (PLR1722)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLR1722"]},{"location":"rules/sys-exit-alias/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>exit()</code> and <code>quit()</code>.</p>","tags":["PLR1722"]},{"location":"rules/sys-exit-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>exit</code> and <code>quit</code> come from the <code>site</code> module, which is typically imported automatically during startup. However, it is not guaranteed to be imported, and so using these functions may result in a <code>NameError</code> at runtime. Generally, these constants are intended to be used in an interactive interpreter, and not in programs.</p> <p>Prefer <code>sys.exit()</code>, as the <code>sys</code> module is guaranteed to exist in all contexts.</p>","tags":["PLR1722"]},{"location":"rules/sys-exit-alias/#example","title":"Example","text":"<pre><code>if __name__ == \"__main__\":\nexit()\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif __name__ == \"__main__\":\nsys.exit()\n</code></pre>","tags":["PLR1722"]},{"location":"rules/sys-exit-alias/#references","title":"References","text":"<ul> <li>Python documentation: Constants added by the <code>site</code> module</li> </ul>","tags":["PLR1722"]},{"location":"rules/sys-version-cmp-str10/","title":"sys-version-cmp-str10 (YTT302)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT302"]},{"location":"rules/sys-version-cmp-str10/#what-it-does","title":"What it does","text":"<p>Checks for comparisons that test <code>sys.version</code> against string literals, such that the comparison would fail if the major version number were ever incremented to Python 10 or higher.</p>","tags":["YTT302"]},{"location":"rules/sys-version-cmp-str10/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparing <code>sys.version</code> to a string is error-prone and may cause subtle bugs, as the comparison will be performed lexicographically, not semantically.</p> <p>Instead, use <code>sys.version_info</code> to access the current major and minor version numbers as a tuple, which can be compared to other tuples without issue.</p>","tags":["YTT302"]},{"location":"rules/sys-version-cmp-str10/#example","title":"Example","text":"<pre><code>import sys\nsys.version &gt;= \"3\"  # `False` on Python 10.\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nsys.version_info &gt;= (3,)  # `True` on Python 10.\n</code></pre>","tags":["YTT302"]},{"location":"rules/sys-version-cmp-str10/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT302"]},{"location":"rules/sys-version-cmp-str3/","title":"sys-version-cmp-str3 (YTT103)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT103"]},{"location":"rules/sys-version-cmp-str3/#what-it-does","title":"What it does","text":"<p>Checks for comparisons that test <code>sys.version</code> against string literals, such that the comparison will evaluate to <code>False</code> on Python 3.10 or later.</p>","tags":["YTT103"]},{"location":"rules/sys-version-cmp-str3/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparing <code>sys.version</code> to a string is error-prone and may cause subtle bugs, as the comparison will be performed lexicographically, not semantically. For example, <code>sys.version &gt; \"3.9\"</code> will evaluate to <code>False</code> when using Python 3.10, as <code>\"3.10\"</code> is lexicographically \"less\" than <code>\"3.9\"</code>.</p> <p>Instead, use <code>sys.version_info</code> to access the current major and minor version numbers as a tuple, which can be compared to other tuples without issue.</p>","tags":["YTT103"]},{"location":"rules/sys-version-cmp-str3/#example","title":"Example","text":"<pre><code>import sys\nsys.version &gt; \"3.9\"  # `False` on Python 3.10.\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nsys.version_info &gt; (3, 9)  # `True` on Python 3.10.\n</code></pre>","tags":["YTT103"]},{"location":"rules/sys-version-cmp-str3/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT103"]},{"location":"rules/sys-version-info-minor-cmp-int/","title":"sys-version-info-minor-cmp-int (YTT204)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT204"]},{"location":"rules/sys-version-info-minor-cmp-int/#what-it-does","title":"What it does","text":"<p>Checks for comparisons that test <code>sys.version_info.minor</code> against an integer.</p>","tags":["YTT204"]},{"location":"rules/sys-version-info-minor-cmp-int/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparisons based on the current minor version number alone can cause subtle bugs and would likely lead to unintended effects if the Python major version number were ever incremented (e.g., to Python 4).</p> <p>Instead, compare <code>sys.version_info</code> to a tuple, including the major and minor version numbers, to future-proof the code.</p>","tags":["YTT204"]},{"location":"rules/sys-version-info-minor-cmp-int/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info.minor &lt; 7:\nprint(\"Python 3.6 or earlier.\")  # This will be printed on Python 4.0.\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info &lt; (3, 7):\nprint(\"Python 3.6 or earlier.\")\n</code></pre>","tags":["YTT204"]},{"location":"rules/sys-version-info-minor-cmp-int/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT204"]},{"location":"rules/sys-version-info0-eq3/","title":"sys-version-info0-eq3 (YTT201)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT201"]},{"location":"rules/sys-version-info0-eq3/#what-it-does","title":"What it does","text":"<p>Checks for equality comparisons against the major version returned by <code>sys.version_info</code> (e.g., <code>sys.version_info[0] == 3</code>).</p>","tags":["YTT201"]},{"location":"rules/sys-version-info0-eq3/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>sys.version_info[0] == 3</code> to verify that the major version is Python 3 or greater will fail if the major version number is ever incremented (e.g., to Python 4). This is likely unintended, as code that uses this comparison is likely intended to be run on Python 2, but would now run on Python 4 too.</p> <p>Instead, use <code>&gt;=</code> to check if the major version number is 3 or greater, to future-proof the code.</p>","tags":["YTT201"]},{"location":"rules/sys-version-info0-eq3/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info[0] == 3:\n...\nelse:\nprint(\"Python 2\")  # This will be printed on Python 4.\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info &gt;= (3,):\n...\nelse:\nprint(\"Python 2\")  # This will not be printed on Python 4.\n</code></pre>","tags":["YTT201"]},{"location":"rules/sys-version-info0-eq3/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT201"]},{"location":"rules/sys-version-info1-cmp-int/","title":"sys-version-info1-cmp-int (YTT203)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT203"]},{"location":"rules/sys-version-info1-cmp-int/#what-it-does","title":"What it does","text":"<p>Checks for comparisons that test <code>sys.version_info[1]</code> against an integer.</p>","tags":["YTT203"]},{"location":"rules/sys-version-info1-cmp-int/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comparisons based on the current minor version number alone can cause subtle bugs and would likely lead to unintended effects if the Python major version number were ever incremented (e.g., to Python 4).</p> <p>Instead, compare <code>sys.version_info</code> to a tuple, including the major and minor version numbers, to future-proof the code.</p>","tags":["YTT203"]},{"location":"rules/sys-version-info1-cmp-int/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info[1] &lt; 7:\nprint(\"Python 3.6 or earlier.\")  # This will be printed on Python 4.0.\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info &lt; (3, 7):\nprint(\"Python 3.6 or earlier.\")\n</code></pre>","tags":["YTT203"]},{"location":"rules/sys-version-info1-cmp-int/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT203"]},{"location":"rules/sys-version-slice1/","title":"sys-version-slice1 (YTT303)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT303"]},{"location":"rules/sys-version-slice1/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>sys.version[:1]</code>.</p>","tags":["YTT303"]},{"location":"rules/sys-version-slice1/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the major version number consists of more than one digit, this will select the first digit of the major version number only (e.g., <code>\"10.0\"</code> would evaluate to <code>\"1\"</code>). This is likely unintended, and can lead to subtle bugs in future versions of Python if the version string is used to test against a specific major version number.</p> <p>Instead, use <code>sys.version_info.major</code> to access the current major version number.</p>","tags":["YTT303"]},{"location":"rules/sys-version-slice1/#example","title":"Example","text":"<pre><code>import sys\nsys.version[:1]  # If using Python 10, this evaluates to \"1\".\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nf\"{sys.version_info.major}\"  # If using Python 10, this evaluates to \"10\".\n</code></pre>","tags":["YTT303"]},{"location":"rules/sys-version-slice1/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT303"]},{"location":"rules/sys-version-slice3/","title":"sys-version-slice3 (YTT101)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT101"]},{"location":"rules/sys-version-slice3/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>sys.version[:3]</code>.</p>","tags":["YTT101"]},{"location":"rules/sys-version-slice3/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the current major or minor version consists of multiple digits, <code>sys.version[:3]</code> will truncate the version number (e.g., <code>\"3.10\"</code> would become <code>\"3.1\"</code>). This is likely unintended, and can lead to subtle bugs if the version string is used to test against a specific Python version.</p> <p>Instead, use <code>sys.version_info</code> to access the current major and minor version numbers as a tuple, which can be compared to other tuples without issue.</p>","tags":["YTT101"]},{"location":"rules/sys-version-slice3/#example","title":"Example","text":"<pre><code>import sys\nsys.version[:3]  # Evaluates to \"3.1\" on Python 3.10.\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nsys.version_info[:2]  # Evaluates to (3, 10) on Python 3.10.\n</code></pre>","tags":["YTT101"]},{"location":"rules/sys-version-slice3/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT101"]},{"location":"rules/sys-version0/","title":"sys-version0 (YTT301)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT301"]},{"location":"rules/sys-version0/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>sys.version[0]</code>.</p>","tags":["YTT301"]},{"location":"rules/sys-version0/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the current major or minor version consists of multiple digits, <code>sys.version[0]</code> will select the first digit of the major version number only (e.g., <code>\"10.2\"</code> would evaluate to <code>\"1\"</code>). This is likely unintended, and can lead to subtle bugs if the version string is used to test against a major version number.</p> <p>Instead, use <code>sys.version_info.major</code> to access the current major version number.</p>","tags":["YTT301"]},{"location":"rules/sys-version0/#example","title":"Example","text":"<pre><code>import sys\nsys.version[0]  # If using Python 10, this evaluates to \"1\".\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nf\"{sys.version_info.major}\"  # If using Python 10, this evaluates to \"10\".\n</code></pre>","tags":["YTT301"]},{"location":"rules/sys-version0/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT301"]},{"location":"rules/sys-version2/","title":"sys-version2 (YTT102)","text":"<p>Derived from the flake8-2020 linter.</p>","tags":["YTT102"]},{"location":"rules/sys-version2/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>sys.version[2]</code>.</p>","tags":["YTT102"]},{"location":"rules/sys-version2/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the current major or minor version consists of multiple digits, <code>sys.version[2]</code> will select the first digit of the minor number only (e.g., <code>\"3.10\"</code> would evaluate to <code>\"1\"</code>). This is likely unintended, and can lead to subtle bugs if the version is used to test against a minor version number.</p> <p>Instead, use <code>sys.version_info.minor</code> to access the current minor version number.</p>","tags":["YTT102"]},{"location":"rules/sys-version2/#example","title":"Example","text":"<pre><code>import sys\nsys.version[2]  # Evaluates to \"1\" on Python 3.10.\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nf\"{sys.version_info.minor}\"  # Evaluates to \"10\" on Python 3.10.\n</code></pre>","tags":["YTT102"]},{"location":"rules/sys-version2/#references","title":"References","text":"<ul> <li>Python documentation: <code>sys.version</code></li> <li>Python documentation: <code>sys.version_info</code></li> </ul>","tags":["YTT102"]},{"location":"rules/t-suffixed-type-alias/","title":"t-suffixed-type-alias (PYI043)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI043"]},{"location":"rules/t-suffixed-type-alias/#what-it-does","title":"What it does","text":"<p>Checks for private type alias definitions suffixed with 'T'.</p>","tags":["PYI043"]},{"location":"rules/t-suffixed-type-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's conventional to use the 'T' suffix for type variables; the use of such a suffix implies that the object is a <code>TypeVar</code>.</p> <p>Adding the 'T' suffix to a non-<code>TypeVar</code>, it can be misleading and should be avoided.</p>","tags":["PYI043"]},{"location":"rules/t-suffixed-type-alias/#example","title":"Example","text":"<pre><code>from typing import TypeAlias\n_MyTypeT: TypeAlias = int\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypeAlias\n_MyType: TypeAlias = int\n</code></pre>","tags":["PYI043"]},{"location":"rules/t-suffixed-type-alias/#references","title":"References","text":"<ul> <li>PEP 484: Type Aliases</li> </ul>","tags":["PYI043"]},{"location":"rules/tab-after-comma/","title":"tab-after-comma (E242)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E242"]},{"location":"rules/tab-after-comma/#what-it-does","title":"What it does","text":"<p>Checks for extraneous tabs after a comma.</p>","tags":["E242"]},{"location":"rules/tab-after-comma/#why-is-this-bad","title":"Why is this bad?","text":"<p>Commas should be followed by one space, never tabs.</p>","tags":["E242"]},{"location":"rules/tab-after-comma/#example","title":"Example","text":"<pre><code>a = 4,\\t5\n</code></pre> <p>Use instead:</p> <pre><code>a = 4, 5\n</code></pre>","tags":["E242"]},{"location":"rules/tab-after-keyword/","title":"tab-after-keyword (E273)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E273"]},{"location":"rules/tab-after-keyword/#what-it-does","title":"What it does","text":"<p>Checks for extraneous tabs after keywords.</p>","tags":["E273"]},{"location":"rules/tab-after-keyword/#why-is-this-bad","title":"Why is this bad?","text":"","tags":["E273"]},{"location":"rules/tab-after-keyword/#example","title":"Example","text":"<pre><code>True and\\tFalse\n</code></pre> <p>Use instead:</p> <pre><code>True and False\n</code></pre>","tags":["E273"]},{"location":"rules/tab-after-operator/","title":"tab-after-operator (E224)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E224"]},{"location":"rules/tab-after-operator/#what-it-does","title":"What it does","text":"<p>Checks for extraneous tabs after an operator.</p>","tags":["E224"]},{"location":"rules/tab-after-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, operators should be surrounded by at most a single space on either side.</p>","tags":["E224"]},{"location":"rules/tab-after-operator/#example","title":"Example","text":"<pre><code>a = 4 +\\t5\n</code></pre> <p>Use instead:</p> <pre><code>a = 4 + 5\n</code></pre>","tags":["E224"]},{"location":"rules/tab-before-keyword/","title":"tab-before-keyword (E274)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E274"]},{"location":"rules/tab-before-keyword/#what-it-does","title":"What it does","text":"<p>Checks for extraneous tabs before keywords.</p>","tags":["E274"]},{"location":"rules/tab-before-keyword/#why-is-this-bad","title":"Why is this bad?","text":"","tags":["E274"]},{"location":"rules/tab-before-keyword/#example","title":"Example","text":"<pre><code>True\\tand False\n</code></pre> <p>Use instead:</p> <pre><code>True and False\n</code></pre>","tags":["E274"]},{"location":"rules/tab-before-operator/","title":"tab-before-operator (E223)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E223"]},{"location":"rules/tab-before-operator/#what-it-does","title":"What it does","text":"<p>Checks for extraneous tabs before an operator.</p>","tags":["E223"]},{"location":"rules/tab-before-operator/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, operators should be surrounded by at most a single space on either side.</p>","tags":["E223"]},{"location":"rules/tab-before-operator/#example","title":"Example","text":"<pre><code>a = 4\\t+ 5\n</code></pre> <p>Use instead:</p> <pre><code>a = 4 + 5\n</code></pre>","tags":["E223"]},{"location":"rules/tab-indentation/","title":"tab-indentation (W191)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["W191"]},{"location":"rules/tab-indentation/#what-it-does","title":"What it does","text":"<p>Checks for indentation that uses tabs.</p>","tags":["W191"]},{"location":"rules/tab-indentation/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, spaces are preferred over tabs (unless used to remain consistent with code that is already indented with tabs).</p>","tags":["W191"]},{"location":"rules/tab-indentation/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent indentation, making the rule redundant.</p> <p>The rule is also incompatible with the formatter when using <code>format.indent-style=\"tab\"</code>.</p>","tags":["W191"]},{"location":"rules/tarfile-unsafe-members/","title":"tarfile-unsafe-members (S202)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S202"]},{"location":"rules/tarfile-unsafe-members/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>tarfile.extractall</code>.</p>","tags":["S202"]},{"location":"rules/tarfile-unsafe-members/#why-is-this-bad","title":"Why is this bad?","text":"<p>Extracting archives from untrusted sources without prior inspection is a security risk, as maliciously crafted archives may contain files that will be written outside of the target directory. For example, the archive could include files with absolute paths (e.g., <code>/etc/passwd</code>), or relative paths with parent directory references (e.g., <code>../etc/passwd</code>).</p> <p>On Python 3.12 and later, use <code>filter='data'</code> to prevent the most dangerous security issues (see: PEP 706). On earlier versions, set the <code>members</code> argument to a trusted subset of the archive's members.</p>","tags":["S202"]},{"location":"rules/tarfile-unsafe-members/#example","title":"Example","text":"<pre><code>import tarfile\nimport tempfile\ntar = tarfile.open(filename)\ntar.extractall(path=tempfile.mkdtemp())\ntar.close()\n</code></pre>","tags":["S202"]},{"location":"rules/tarfile-unsafe-members/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-22</li> <li>Python documentation: <code>TarFile.extractall</code></li> <li>Python documentation: Extraction filters</li> </ul>","tags":["S202"]},{"location":"rules/timeout-error-alias/","title":"timeout-error-alias (UP041)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP041"]},{"location":"rules/timeout-error-alias/#what-it-does","title":"What it does","text":"<p>Checks for uses of exceptions that alias <code>TimeoutError</code>.</p>","tags":["UP041"]},{"location":"rules/timeout-error-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>TimeoutError</code> is the builtin error type used for exceptions when a system function timed out at the system level.</p> <p>In Python 3.10, <code>socket.timeout</code> was aliased to <code>TimeoutError</code>. In Python 3.11, <code>asyncio.TimeoutError</code> was aliased to <code>TimeoutError</code>.</p> <p>These aliases remain in place for compatibility with older versions of Python, but may be removed in future versions.</p> <p>Prefer using <code>TimeoutError</code> directly, as it is more idiomatic and future-proof.</p>","tags":["UP041"]},{"location":"rules/timeout-error-alias/#example","title":"Example","text":"<pre><code>raise asyncio.TimeoutError\n</code></pre> <p>Use instead:</p> <pre><code>raise TimeoutError\n</code></pre>","tags":["UP041"]},{"location":"rules/timeout-error-alias/#references","title":"References","text":"<ul> <li>Python documentation: <code>TimeoutError</code></li> </ul>","tags":["UP041"]},{"location":"rules/too-few-spaces-before-inline-comment/","title":"too-few-spaces-before-inline-comment (E261)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E261"]},{"location":"rules/too-few-spaces-before-inline-comment/#what-it-does","title":"What it does","text":"<p>Checks if inline comments are separated by at least two spaces.</p>","tags":["E261"]},{"location":"rules/too-few-spaces-before-inline-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>An inline comment is a comment on the same line as a statement.</p> <p>Per PEP 8, inline comments should be separated by at least two spaces from the preceding statement.</p>","tags":["E261"]},{"location":"rules/too-few-spaces-before-inline-comment/#example","title":"Example","text":"<pre><code>x = x + 1 # Increment x\n</code></pre> <p>Use instead:</p> <pre><code>x = x + 1  # Increment x\nx = x + 1    # Increment x\n</code></pre>","tags":["E261"]},{"location":"rules/too-many-arguments/","title":"too-many-arguments (PLR0913)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR0913"]},{"location":"rules/too-many-arguments/#what-it-does","title":"What it does","text":"<p>Checks for function definitions that include too many arguments.</p> <p>By default, this rule allows up to five arguments, as configured by the <code>lint.pylint.max-args</code> option.</p>","tags":["PLR0913"]},{"location":"rules/too-many-arguments/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions with many arguments are harder to understand, maintain, and call. Consider refactoring functions with many arguments into smaller functions with fewer arguments, or using objects to group related arguments.</p>","tags":["PLR0913"]},{"location":"rules/too-many-arguments/#example","title":"Example","text":"<pre><code>def calculate_position(x_pos, y_pos, z_pos, x_vel, y_vel, z_vel, time):\nnew_x = x_pos + x_vel * time\nnew_y = y_pos + y_vel * time\nnew_z = z_pos + z_vel * time\nreturn new_x, new_y, new_z\n</code></pre> <p>Use instead:</p> <pre><code>from typing import NamedTuple\nclass Vector(NamedTuple):\nx: float\ny: float\nz: float\ndef calculate_position(pos: Vector, vel: Vector, time: float) -&gt; Vector:\nreturn Vector(*(p + v * time for p, v in zip(pos, vel)))\n</code></pre>","tags":["PLR0913"]},{"location":"rules/too-many-arguments/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-args</code></li> </ul>","tags":["PLR0913"]},{"location":"rules/too-many-blank-lines/","title":"too-many-blank-lines (E303)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E303"]},{"location":"rules/too-many-blank-lines/#what-it-does","title":"What it does","text":"<p>Checks for extraneous blank lines.</p>","tags":["E303"]},{"location":"rules/too-many-blank-lines/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends using blank lines as follows:</p> <ul> <li>No more than two blank lines between top-level statements.</li> <li>No more than one blank line between non-top-level statements.</li> </ul>","tags":["E303"]},{"location":"rules/too-many-blank-lines/#example","title":"Example","text":"<pre><code>def func1():\npass\ndef func2():\npass\n</code></pre> <p>Use instead:</p> <pre><code>def func1():\npass\ndef func2():\npass\n</code></pre>","tags":["E303"]},{"location":"rules/too-many-blank-lines/#typing-stub-files-pyi","title":"Typing stub files (<code>.pyi</code>)","text":"<p>The rule allows at most one blank line in typing stub files in accordance to the typing style guide recommendation.</p> <p>Note: The rule respects the following <code>isort</code> settings when determining the maximum number of blank lines allowed between two statements:</p> <ul> <li><code>lint.isort.lines-after-imports</code>: For top-level statements directly following an import statement.</li> <li><code>lint.isort.lines-between-types</code>: For <code>import</code> statements directly following a <code>from ... import ...</code> statement or vice versa.</li> </ul>","tags":["E303"]},{"location":"rules/too-many-blank-lines/#options","title":"Options","text":"<ul> <li><code>lint.isort.lines-after-imports</code></li> <li><code>lint.isort.lines-between-types</code></li> </ul>","tags":["E303"]},{"location":"rules/too-many-blank-lines/#references","title":"References","text":"<ul> <li>PEP 8: Blank Lines</li> <li>Flake 8 rule</li> <li>Typing Style Guide</li> </ul>","tags":["E303"]},{"location":"rules/too-many-boolean-expressions/","title":"too-many-boolean-expressions (PLR0916)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR0916"]},{"location":"rules/too-many-boolean-expressions/#what-it-does","title":"What it does","text":"<p>Checks for too many Boolean expressions in an <code>if</code> statement.</p> <p>By default, this rule allows up to 5 expressions. This can be configured using the <code>lint.pylint.max-bool-expr</code> option.</p>","tags":["PLR0916"]},{"location":"rules/too-many-boolean-expressions/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>if</code> statements with many Boolean expressions are harder to understand and maintain. Consider assigning the result of the Boolean expression, or any of its sub-expressions, to a variable.</p>","tags":["PLR0916"]},{"location":"rules/too-many-boolean-expressions/#example","title":"Example","text":"<pre><code>if a and b and c and d and e and f and g and h:\n...\n</code></pre>","tags":["PLR0916"]},{"location":"rules/too-many-boolean-expressions/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-bool-expr</code></li> </ul>","tags":["PLR0916"]},{"location":"rules/too-many-branches/","title":"too-many-branches (PLR0912)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR0912"]},{"location":"rules/too-many-branches/#what-it-does","title":"What it does","text":"<p>Checks for functions or methods with too many branches, including (nested) <code>if</code>, <code>elif</code>, and <code>else</code> branches, <code>for</code> loops, <code>try</code>-<code>except</code> clauses, and <code>match</code> and <code>case</code> statements.</p> <p>By default, this rule allows up to 12 branches. This can be configured using the <code>lint.pylint.max-branches</code> option.</p>","tags":["PLR0912"]},{"location":"rules/too-many-branches/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions or methods with many branches are harder to understand and maintain than functions or methods with fewer branches.</p>","tags":["PLR0912"]},{"location":"rules/too-many-branches/#example","title":"Example","text":"<p>Given:</p> <pre><code>def capital(country):\nif country == \"Australia\":\nreturn \"Canberra\"\nelif country == \"Brazil\":\nreturn \"Brasilia\"\nelif country == \"Canada\":\nreturn \"Ottawa\"\nelif country == \"England\":\nreturn \"London\"\nelif country == \"France\":\nreturn \"Paris\"\nelif country == \"Germany\":\nreturn \"Berlin\"\nelif country == \"Poland\":\nreturn \"Warsaw\"\nelif country == \"Romania\":\nreturn \"Bucharest\"\nelif country == \"Spain\":\nreturn \"Madrid\"\nelif country == \"Thailand\":\nreturn \"Bangkok\"\nelif country == \"Turkey\":\nreturn \"Ankara\"\nelif country == \"United States\":\nreturn \"Washington\"\nelse:\nreturn \"Unknown\"  # 13th branch\n</code></pre> <p>Use instead:</p> <pre><code>def capital(country):\ncapitals = {\n\"Australia\": \"Canberra\",\n\"Brazil\": \"Brasilia\",\n\"Canada\": \"Ottawa\",\n\"England\": \"London\",\n\"France\": \"Paris\",\n\"Germany\": \"Berlin\",\n\"Poland\": \"Warsaw\",\n\"Romania\": \"Bucharest\",\n\"Spain\": \"Madrid\",\n\"Thailand\": \"Bangkok\",\n\"Turkey\": \"Ankara\",\n\"United States\": \"Washington\",\n}\ncity = capitals.get(country, \"Unknown\")\nreturn city\n</code></pre> <p>Given:</p> <pre><code>def grades_to_average_number(grades):\nnumbers = []\nfor grade in grades:  # 1st branch\nif len(grade) not in {1, 2}:\nraise ValueError(f\"Invalid grade: {grade}\")\nif len(grade) == 2 and grade[1] not in {\"+\", \"-\"}:\nraise ValueError(f\"Invalid grade: {grade}\")\nletter = grade[0]\nif letter in {\"F\", \"E\"}:\nnumber = 0.0\nelif letter == \"D\":\nnumber = 1.0\nelif letter == \"C\":\nnumber = 2.0\nelif letter == \"B\":\nnumber = 3.0\nelif letter == \"A\":\nnumber = 4.0\nelse:\nraise ValueError(f\"Invalid grade: {grade}\")\nmodifier = 0.0\nif letter != \"F\" and grade[-1] == \"+\":\nmodifier = 0.3\nelif letter != \"F\" and grade[-1] == \"-\":\nmodifier = -0.3\nnumbers.append(max(0.0, min(number + modifier, 4.0)))\ntry:\nreturn sum(numbers) / len(numbers)\nexcept ZeroDivisionError:  # 13th branch\nreturn 0\n</code></pre> <p>Use instead:</p> <pre><code>def grades_to_average_number(grades):\ngrade_values = {\"F\": 0.0, \"E\": 0.0, \"D\": 1.0, \"C\": 2.0, \"B\": 3.0, \"A\": 4.0}\nmodifier_values = {\"+\": 0.3, \"-\": -0.3}\nnumbers = []\nfor grade in grades:\nif len(grade) not in {1, 2}:\nraise ValueError(f\"Invalid grade: {grade}\")\nletter = grade[0]\nif letter not in grade_values:\nraise ValueError(f\"Invalid grade: {grade}\")\nnumber = grade_values[letter]\nif len(grade) == 2 and grade[1] not in modifier_values:\nraise ValueError(f\"Invalid grade: {grade}\")\nmodifier = modifier_values.get(grade[-1], 0.0)\nif letter == \"F\":\nnumbers.append(0.0)\nelse:\nnumbers.append(max(0.0, min(number + modifier, 4.0)))\ntry:\nreturn sum(numbers) / len(numbers)\nexcept ZeroDivisionError:\nreturn 0\n</code></pre>","tags":["PLR0912"]},{"location":"rules/too-many-branches/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-branches</code></li> </ul>","tags":["PLR0912"]},{"location":"rules/too-many-locals/","title":"too-many-locals (PLR0914)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR0914"]},{"location":"rules/too-many-locals/#what-it-does","title":"What it does","text":"<p>Checks for functions that include too many local variables.</p> <p>By default, this rule allows up to fifteen locals, as configured by the <code>lint.pylint.max-locals</code> option.</p>","tags":["PLR0914"]},{"location":"rules/too-many-locals/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions with many local variables are harder to understand and maintain.</p> <p>Consider refactoring functions with many local variables into smaller functions with fewer assignments.</p>","tags":["PLR0914"]},{"location":"rules/too-many-locals/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-locals</code></li> </ul>","tags":["PLR0914"]},{"location":"rules/too-many-nested-blocks/","title":"too-many-nested-blocks (PLR1702)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR1702"]},{"location":"rules/too-many-nested-blocks/#what-it-does","title":"What it does","text":"<p>Checks for functions or methods with too many nested blocks.</p> <p>By default, this rule allows up to five nested blocks. This can be configured using the <code>lint.pylint.max-nested-blocks</code> option.</p>","tags":["PLR1702"]},{"location":"rules/too-many-nested-blocks/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions or methods with too many nested blocks are harder to understand and maintain.</p>","tags":["PLR1702"]},{"location":"rules/too-many-nested-blocks/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-nested-blocks</code></li> </ul>","tags":["PLR1702"]},{"location":"rules/too-many-newlines-at-end-of-file/","title":"too-many-newlines-at-end-of-file (W391)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["W391"]},{"location":"rules/too-many-newlines-at-end-of-file/#what-it-does","title":"What it does","text":"<p>Checks for files with multiple trailing blank lines.</p>","tags":["W391"]},{"location":"rules/too-many-newlines-at-end-of-file/#why-is-this-bad","title":"Why is this bad?","text":"<p>Trailing blank lines in a file are superfluous.</p> <p>However, the last line of the file should end with a newline.</p>","tags":["W391"]},{"location":"rules/too-many-newlines-at-end-of-file/#example","title":"Example","text":"<pre><code>spam(1)\\n\\n\\n\n</code></pre> <p>Use instead:</p> <pre><code>spam(1)\\n\n</code></pre>","tags":["W391"]},{"location":"rules/too-many-positional-arguments/","title":"too-many-positional-arguments (PLR0917)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR0917"]},{"location":"rules/too-many-positional-arguments/#what-it-does","title":"What it does","text":"<p>Checks for function definitions that include too many positional arguments.</p> <p>By default, this rule allows up to five arguments, as configured by the <code>lint.pylint.max-positional-args</code> option.</p>","tags":["PLR0917"]},{"location":"rules/too-many-positional-arguments/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions with many arguments are harder to understand, maintain, and call. This is especially true for functions with many positional arguments, as providing arguments positionally is more error-prone and less clear to readers than providing arguments by name.</p> <p>Consider refactoring functions with many arguments into smaller functions with fewer arguments, using objects to group related arguments, or migrating to keyword-only arguments.</p>","tags":["PLR0917"]},{"location":"rules/too-many-positional-arguments/#example","title":"Example","text":"<pre><code>def plot(x, y, z, color, mark, add_trendline): ...\nplot(1, 2, 3, \"r\", \"*\", True)\n</code></pre> <p>Use instead:</p> <pre><code>def plot(x, y, z, *, color, mark, add_trendline): ...\nplot(1, 2, 3, color=\"r\", mark=\"*\", add_trendline=True)\n</code></pre>","tags":["PLR0917"]},{"location":"rules/too-many-positional-arguments/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-positional-args</code></li> </ul>","tags":["PLR0917"]},{"location":"rules/too-many-public-methods/","title":"too-many-public-methods (PLR0904)","text":"<p>Derived from the Pylint linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR0904"]},{"location":"rules/too-many-public-methods/#what-it-does","title":"What it does","text":"<p>Checks for classes with too many public methods</p> <p>By default, this rule allows up to 20 public methods, as configured by the <code>lint.pylint.max-public-methods</code> option.</p>","tags":["PLR0904"]},{"location":"rules/too-many-public-methods/#why-is-this-bad","title":"Why is this bad?","text":"<p>Classes with many public methods are harder to understand and maintain.</p> <p>Instead, consider refactoring the class into separate classes.</p>","tags":["PLR0904"]},{"location":"rules/too-many-public-methods/#example","title":"Example","text":"<p>Assuming that <code>lint.pylint.max-public-methods</code> is set to 5:</p> <pre><code>class Linter:\ndef __init__(self):\npass\ndef pylint(self):\npass\ndef pylint_settings(self):\npass\ndef flake8(self):\npass\ndef flake8_settings(self):\npass\ndef pydocstyle(self):\npass\ndef pydocstyle_settings(self):\npass\n</code></pre> <p>Use instead:</p> <pre><code>class Linter:\ndef __init__(self):\nself.pylint = Pylint()\nself.flake8 = Flake8()\nself.pydocstyle = Pydocstyle()\ndef lint(self):\npass\nclass Pylint:\ndef lint(self):\npass\ndef settings(self):\npass\nclass Flake8:\ndef lint(self):\npass\ndef settings(self):\npass\nclass Pydocstyle:\ndef lint(self):\npass\ndef settings(self):\npass\n</code></pre>","tags":["PLR0904"]},{"location":"rules/too-many-public-methods/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-public-methods</code></li> </ul>","tags":["PLR0904"]},{"location":"rules/too-many-return-statements/","title":"too-many-return-statements (PLR0911)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR0911"]},{"location":"rules/too-many-return-statements/#what-it-does","title":"What it does","text":"<p>Checks for functions or methods with too many return statements.</p> <p>By default, this rule allows up to six return statements, as configured by the <code>lint.pylint.max-returns</code> option.</p>","tags":["PLR0911"]},{"location":"rules/too-many-return-statements/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions or methods with many return statements are harder to understand and maintain, and often indicative of complex logic.</p>","tags":["PLR0911"]},{"location":"rules/too-many-return-statements/#example","title":"Example","text":"<pre><code>def capital(country: str) -&gt; str | None:\nif country == \"England\":\nreturn \"London\"\nelif country == \"France\":\nreturn \"Paris\"\nelif country == \"Poland\":\nreturn \"Warsaw\"\nelif country == \"Romania\":\nreturn \"Bucharest\"\nelif country == \"Spain\":\nreturn \"Madrid\"\nelif country == \"Thailand\":\nreturn \"Bangkok\"\nelse:\nreturn None\n</code></pre> <p>Use instead:</p> <pre><code>def capital(country: str) -&gt; str | None:\ncapitals = {\n\"England\": \"London\",\n\"France\": \"Paris\",\n\"Poland\": \"Warsaw\",\n\"Romania\": \"Bucharest\",\n\"Spain\": \"Madrid\",\n\"Thailand\": \"Bangkok\",\n}\nreturn capitals.get(country)\n</code></pre>","tags":["PLR0911"]},{"location":"rules/too-many-return-statements/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-returns</code></li> </ul>","tags":["PLR0911"]},{"location":"rules/too-many-statements/","title":"too-many-statements (PLR0915)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLR0915"]},{"location":"rules/too-many-statements/#what-it-does","title":"What it does","text":"<p>Checks for functions or methods with too many statements.</p> <p>By default, this rule allows up to 50 statements, as configured by the <code>lint.pylint.max-statements</code> option.</p>","tags":["PLR0915"]},{"location":"rules/too-many-statements/#why-is-this-bad","title":"Why is this bad?","text":"<p>Functions or methods with many statements are harder to understand and maintain.</p> <p>Instead, consider refactoring the function or method into smaller functions or methods, or identifying generalizable patterns and replacing them with generic logic or abstractions.</p>","tags":["PLR0915"]},{"location":"rules/too-many-statements/#example","title":"Example","text":"<pre><code>def is_even(number: int) -&gt; bool:\nif number == 0:\nreturn True\nelif number == 1:\nreturn False\nelif number == 2:\nreturn True\nelif number == 3:\nreturn False\nelif number == 4:\nreturn True\nelif number == 5:\nreturn False\nelse:\n...\n</code></pre> <p>Use instead:</p> <pre><code>def is_even(number: int) -&gt; bool:\nreturn number % 2 == 0\n</code></pre>","tags":["PLR0915"]},{"location":"rules/too-many-statements/#options","title":"Options","text":"<ul> <li><code>lint.pylint.max-statements</code></li> </ul>","tags":["PLR0915"]},{"location":"rules/trailing-comma-on-bare-tuple/","title":"trailing-comma-on-bare-tuple (COM818)","text":"<p>Derived from the flake8-commas linter.</p>","tags":["COM818"]},{"location":"rules/trailing-comma-on-bare-tuple/#what-it-does","title":"What it does","text":"<p>Checks for the presence of trailing commas on bare (i.e., unparenthesized) tuples.</p>","tags":["COM818"]},{"location":"rules/trailing-comma-on-bare-tuple/#why-is-this-bad","title":"Why is this bad?","text":"<p>The presence of a misplaced comma will cause Python to interpret the value as a tuple, which can lead to unexpected behaviour.</p>","tags":["COM818"]},{"location":"rules/trailing-comma-on-bare-tuple/#example","title":"Example","text":"<pre><code>import json\nfoo = json.dumps({\"bar\": 1}),\n</code></pre> <p>Use instead:</p> <pre><code>import json\nfoo = json.dumps({\"bar\": 1})\n</code></pre> <p>In the event that a tuple is intended, then use instead:</p> <pre><code>import json\nfoo = (json.dumps({\"bar\": 1}))\n</code></pre>","tags":["COM818"]},{"location":"rules/trailing-whitespace/","title":"trailing-whitespace (W291)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["W291"]},{"location":"rules/trailing-whitespace/#what-it-does","title":"What it does","text":"<p>Checks for superfluous trailing whitespace.</p>","tags":["W291"]},{"location":"rules/trailing-whitespace/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, \"avoid trailing whitespace anywhere. Because it\u2019s usually invisible, it can be confusing\"</p>","tags":["W291"]},{"location":"rules/trailing-whitespace/#example","title":"Example","text":"<pre><code>spam(1) \\n#\n</code></pre> <p>Use instead:</p> <pre><code>spam(1)\\n#\n</code></pre>","tags":["W291"]},{"location":"rules/trio-sync-call/","title":"trio-sync-call (ASYNC105)","text":"<p>Derived from the flake8-async linter.</p> <p>Fix is sometimes available.</p>","tags":["ASYNC105"]},{"location":"rules/trio-sync-call/#what-it-does","title":"What it does","text":"<p>Checks for calls to trio functions that are not immediately awaited.</p>","tags":["ASYNC105"]},{"location":"rules/trio-sync-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many of the functions exposed by trio are asynchronous, and must be awaited to take effect. Calling a trio function without an <code>await</code> can lead to <code>RuntimeWarning</code> diagnostics and unexpected behaviour.</p>","tags":["ASYNC105"]},{"location":"rules/trio-sync-call/#example","title":"Example","text":"<pre><code>async def double_sleep(x):\ntrio.sleep(2 * x)\n</code></pre> <p>Use instead:</p> <pre><code>async def double_sleep(x):\nawait trio.sleep(2 * x)\n</code></pre>","tags":["ASYNC105"]},{"location":"rules/trio-sync-call/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as adding an <code>await</code> to a function call changes its semantics and runtime behavior.</p>","tags":["ASYNC105"]},{"location":"rules/triple-single-quotes/","title":"triple-single-quotes (D300)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is sometimes available.</p>","tags":["D300"]},{"location":"rules/triple-single-quotes/#what-it-does","title":"What it does","text":"<p>Checks for docstrings that use <code>'''triple single quotes'''</code> instead of <code>\"\"\"triple double quotes\"\"\"</code>.</p>","tags":["D300"]},{"location":"rules/triple-single-quotes/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends the use of <code>\"\"\"triple double quotes\"\"\"</code> for docstrings, to ensure consistency.</p>","tags":["D300"]},{"location":"rules/triple-single-quotes/#example","title":"Example","text":"<pre><code>def kos_root():\n'''Return the pathname of the KOS root directory.'''\n</code></pre> <p>Use instead:</p> <pre><code>def kos_root():\n\"\"\"Return the pathname of the KOS root directory.\"\"\"\n</code></pre>","tags":["D300"]},{"location":"rules/triple-single-quotes/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent quotes, making the rule redundant.</p>","tags":["D300"]},{"location":"rules/triple-single-quotes/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D300"]},{"location":"rules/true-false-comparison/","title":"true-false-comparison (E712)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["E712"]},{"location":"rules/true-false-comparison/#what-it-does","title":"What it does","text":"<p>Checks for equality comparisons to boolean literals.</p>","tags":["E712"]},{"location":"rules/true-false-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends against using the equality operators <code>==</code> and <code>!=</code> to compare values to <code>True</code> or <code>False</code>.</p> <p>Instead, use <code>if cond:</code> or <code>if not cond:</code> to check for truth values.</p> <p>If you intend to check if a value is the boolean literal <code>True</code> or <code>False</code>, consider using <code>is</code> or <code>is not</code> to check for identity instead.</p>","tags":["E712"]},{"location":"rules/true-false-comparison/#example","title":"Example","text":"<pre><code>if foo == True:\n...\nif bar == False:\n...\n</code></pre> <p>Use instead:</p> <pre><code>if foo:\n...\nif not bar:\n...\n</code></pre>","tags":["E712"]},{"location":"rules/true-false-comparison/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may alter runtime behavior when used with libraries that override the <code>==</code>/<code>__eq__</code> or <code>!=</code>/<code>__ne__</code> operators. In these cases, <code>is</code>/<code>is not</code> may not be equivalent to <code>==</code>/<code>!=</code>. For more information, see this issue.</p>","tags":["E712"]},{"location":"rules/try-consider-else/","title":"try-consider-else (TRY300)","text":"<p>Derived from the tryceratops linter.</p>","tags":["TRY300"]},{"location":"rules/try-consider-else/#what-it-does","title":"What it does","text":"<p>Checks for <code>return</code> statements in <code>try</code> blocks.</p>","tags":["TRY300"]},{"location":"rules/try-consider-else/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>try</code>-<code>except</code> statement has an <code>else</code> clause for code that should run only if no exceptions were raised. Using the <code>else</code> clause is more explicit than using a <code>return</code> statement inside of a <code>try</code> block.</p>","tags":["TRY300"]},{"location":"rules/try-consider-else/#example","title":"Example","text":"<pre><code>import logging\ndef reciprocal(n):\ntry:\nrec = 1 / n\nprint(f\"reciprocal of {n} is {rec}\")\nreturn rec\nexcept ZeroDivisionError:\nlogging.exception(\"Exception occurred\")\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ndef reciprocal(n):\ntry:\nrec = 1 / n\nexcept ZeroDivisionError:\nlogging.exception(\"Exception occurred\")\nelse:\nprint(f\"reciprocal of {n} is {rec}\")\nreturn rec\n</code></pre>","tags":["TRY300"]},{"location":"rules/try-consider-else/#references","title":"References","text":"<ul> <li>Python documentation: Errors and Exceptions</li> </ul>","tags":["TRY300"]},{"location":"rules/try-except-continue/","title":"try-except-continue (S112)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S112"]},{"location":"rules/try-except-continue/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>try</code>-<code>except</code>-<code>continue</code> pattern.</p>","tags":["S112"]},{"location":"rules/try-except-continue/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>try</code>-<code>except</code>-<code>continue</code> pattern suppresses all exceptions. Suppressing exceptions may hide errors that could otherwise reveal unexpected behavior, security vulnerabilities, or malicious activity. Instead, consider logging the exception.</p>","tags":["S112"]},{"location":"rules/try-except-continue/#example","title":"Example","text":"<pre><code>import logging\nwhile predicate:\ntry:\n...\nexcept Exception:\ncontinue\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nwhile predicate:\ntry:\n...\nexcept Exception as exc:\nlogging.exception(\"Error occurred\")\n</code></pre>","tags":["S112"]},{"location":"rules/try-except-continue/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-703</li> <li>Python documentation: <code>logging</code></li> </ul>","tags":["S112"]},{"location":"rules/try-except-in-loop/","title":"try-except-in-loop (PERF203)","text":"<p>Derived from the Perflint linter.</p>","tags":["PERF203"]},{"location":"rules/try-except-in-loop/#what-it-does","title":"What it does","text":"<p>Checks for uses of except handling via <code>try</code>-<code>except</code> within <code>for</code> and <code>while</code> loops.</p>","tags":["PERF203"]},{"location":"rules/try-except-in-loop/#why-is-this-bad","title":"Why is this bad?","text":"<p>Exception handling via <code>try</code>-<code>except</code> blocks incurs some performance overhead, regardless of whether an exception is raised.</p> <p>To optimize your code, two techniques are possible:</p> <ol> <li>Refactor your code to put the entire loop into the <code>try</code>-<code>except</code> block,     rather than wrapping each iteration in a separate <code>try</code>-<code>except</code> block.</li> <li>Use \"Look Before You Leap\" idioms that attempt to avoid exceptions     being raised in the first place, avoiding the need to use <code>try</code>-<code>except</code>     blocks in the first place.</li> </ol> <p>This rule is only enforced for Python versions prior to 3.11, which introduced \"zero-cost\" exception handling. However, note that even on Python 3.11 and newer, refactoring your code to avoid exception handling in tight loops can provide a significant speedup in some cases, as zero-cost exception handling is only zero-cost in the \"happy path\" where no exception is raised in the <code>try</code>-<code>except</code> block.</p> <p>As with all <code>perflint</code> rules, this is only intended as a micro-optimization. In many cases, it will have a negligible impact on performance.</p>","tags":["PERF203"]},{"location":"rules/try-except-in-loop/#example","title":"Example","text":"<pre><code>string_numbers: list[str] = [\"1\", \"2\", \"three\", \"4\", \"5\"]\n# `try`/`except` that could be moved out of the loop:\nint_numbers: list[int] = []\nfor num in string_numbers:\ntry:\nint_numbers.append(int(num))\nexcept ValueError as e:\nprint(f\"Couldn't convert to integer: {e}\")\nbreak\n# `try`/`except` used when \"look before you leap\" idioms could be used:\nnumber_names: dict[int, str] = {1: \"one\", 3: \"three\", 4: \"four\"}\nfor number in range(5):\ntry:\nname = number_names[number]\nexcept KeyError:\ncontinue\nelse:\nprint(f\"The name of {number} is {name}\")\n</code></pre> <p>Use instead:</p> <pre><code>string_numbers: list[str] = [\"1\", \"2\", \"three\", \"4\", \"5\"]\nint_numbers: list[int] = []\ntry:\nfor num in string_numbers:\nint_numbers.append(int(num))\nexcept ValueError as e:\nprint(f\"Couldn't convert to integer: {e}\")\nnumber_names: dict[int, str] = {1: \"one\", 3: \"three\", 4: \"four\"}\nfor number in range(5):\nname = number_names.get(number)\nif name is not None:\nprint(f\"The name of {number} is {name}\")\n</code></pre>","tags":["PERF203"]},{"location":"rules/try-except-in-loop/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["PERF203"]},{"location":"rules/try-except-pass/","title":"try-except-pass (S110)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S110"]},{"location":"rules/try-except-pass/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>try</code>-<code>except</code>-<code>pass</code> pattern.</p>","tags":["S110"]},{"location":"rules/try-except-pass/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>try</code>-<code>except</code>-<code>pass</code> pattern suppresses all exceptions. Suppressing exceptions may hide errors that could otherwise reveal unexpected behavior, security vulnerabilities, or malicious activity. Instead, consider logging the exception.</p>","tags":["S110"]},{"location":"rules/try-except-pass/#example","title":"Example","text":"<pre><code>try:\n...\nexcept Exception:\npass\n</code></pre> <p>Use instead:</p> <pre><code>import logging\ntry:\n...\nexcept Exception as exc:\nlogging.exception(\"Exception occurred\")\n</code></pre>","tags":["S110"]},{"location":"rules/try-except-pass/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-703</li> <li>Python documentation: <code>logging</code></li> </ul>","tags":["S110"]},{"location":"rules/type-alias-without-annotation/","title":"type-alias-without-annotation (PYI026)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI026"]},{"location":"rules/type-alias-without-annotation/#what-it-does","title":"What it does","text":"<p>Checks for type alias definitions that are not annotated with <code>typing.TypeAlias</code>.</p>","tags":["PYI026"]},{"location":"rules/type-alias-without-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, a type alias is defined by assigning a type to a variable (e.g., <code>Vector = list[float]</code>).</p> <p>It's best to annotate type aliases with the <code>typing.TypeAlias</code> type to make it clear that the statement is a type alias declaration, as opposed to a normal variable assignment.</p>","tags":["PYI026"]},{"location":"rules/type-alias-without-annotation/#example","title":"Example","text":"<pre><code>Vector = list[float]\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypeAlias\nVector: TypeAlias = list[float]\n</code></pre>","tags":["PYI026"]},{"location":"rules/type-bivariance/","title":"type-bivariance (PLC0131)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC0131"]},{"location":"rules/type-bivariance/#what-it-does","title":"What it does","text":"<p>Checks for <code>TypeVar</code> and <code>ParamSpec</code> definitions in which the type is both covariant and contravariant.</p>","tags":["PLC0131"]},{"location":"rules/type-bivariance/#why-is-this-bad","title":"Why is this bad?","text":"<p>By default, Python's generic types are invariant, but can be marked as either covariant or contravariant via the <code>covariant</code> and <code>contravariant</code> keyword arguments. While the API does allow you to mark a type as both covariant and contravariant, this is not supported by the type system, and should be avoided.</p> <p>Instead, change the variance of the type to be either covariant, contravariant, or invariant. If you want to describe both covariance and contravariance, consider using two separate type parameters.</p> <p>For context: an \"invariant\" generic type only accepts values that exactly match the type parameter; for example, <code>list[Dog]</code> accepts only <code>list[Dog]</code>, not <code>list[Animal]</code> (superclass) or <code>list[Bulldog]</code> (subclass). This is the default behavior for Python's generic types.</p> <p>A \"covariant\" generic type accepts subclasses of the type parameter; for example, <code>Sequence[Animal]</code> accepts <code>Sequence[Dog]</code>. A \"contravariant\" generic type accepts superclasses of the type parameter; for example, <code>Callable[Dog]</code> accepts <code>Callable[Animal]</code>.</p>","tags":["PLC0131"]},{"location":"rules/type-bivariance/#example","title":"Example","text":"<pre><code>from typing import TypeVar\nT = TypeVar(\"T\", covariant=True, contravariant=True)\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypeVar\nT_co = TypeVar(\"T_co\", covariant=True)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\n</code></pre>","tags":["PLC0131"]},{"location":"rules/type-bivariance/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing</code> \u2014 Support for type hints</li> <li>PEP 483 \u2013 The Theory of Type Hints: Covariance and Contravariance</li> <li>PEP 484 \u2013 Type Hints: Covariance and contravariance</li> </ul>","tags":["PLC0131"]},{"location":"rules/type-check-without-type-error/","title":"type-check-without-type-error (TRY004)","text":"<p>Derived from the tryceratops linter.</p>","tags":["TRY004"]},{"location":"rules/type-check-without-type-error/#what-it-does","title":"What it does","text":"<p>Checks for type checks that do not raise <code>TypeError</code>.</p>","tags":["TRY004"]},{"location":"rules/type-check-without-type-error/#why-is-this-bad","title":"Why is this bad?","text":"<p>The Python documentation states that <code>TypeError</code> should be raised upon encountering an inappropriate type.</p>","tags":["TRY004"]},{"location":"rules/type-check-without-type-error/#example","title":"Example","text":"<pre><code>def foo(n: int):\nif isinstance(n, int):\npass\nelse:\nraise ValueError(\"n must be an integer\")\n</code></pre> <p>Use instead:</p> <pre><code>def foo(n: int):\nif isinstance(n, int):\npass\nelse:\nraise TypeError(\"n must be an integer\")\n</code></pre>","tags":["TRY004"]},{"location":"rules/type-check-without-type-error/#references","title":"References","text":"<ul> <li>Python documentation: <code>TypeError</code></li> </ul>","tags":["TRY004"]},{"location":"rules/type-comment-in-stub/","title":"type-comment-in-stub (PYI033)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI033"]},{"location":"rules/type-comment-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for the use of type comments (e.g., <code>x = 1  # type: int</code>) in stub files.</p>","tags":["PYI033"]},{"location":"rules/type-comment-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub (<code>.pyi</code>) files should use type annotations directly, rather than type comments, even if they're intended to support Python 2, since stub files are not executed at runtime. The one exception is <code># type: ignore</code>.</p>","tags":["PYI033"]},{"location":"rules/type-comment-in-stub/#example","title":"Example","text":"<pre><code>x = 1  # type: int\n</code></pre> <p>Use instead:</p> <pre><code>x: int = 1\n</code></pre>","tags":["PYI033"]},{"location":"rules/type-comparison/","title":"type-comparison (E721)","text":"<p>Derived from the pycodestyle linter.</p>","tags":["E721"]},{"location":"rules/type-comparison/#what-it-does","title":"What it does","text":"<p>Checks for object type comparisons using <code>==</code> and other comparison operators.</p>","tags":["E721"]},{"location":"rules/type-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unlike a direct type comparison, <code>isinstance</code> will also check if an object is an instance of a class or a subclass thereof.</p> <p>If you want to check for an exact type match, use <code>is</code> or <code>is not</code>.</p>","tags":["E721"]},{"location":"rules/type-comparison/#known-problems","title":"Known problems","text":"<p>When using libraries that override the <code>==</code> (<code>__eq__</code>) operator (such as NumPy, Pandas, and SQLAlchemy), this rule may produce false positives, as converting from <code>==</code> to <code>is</code> or <code>is not</code> will change the behavior of the code.</p> <p>For example, the following operations are not equivalent:</p> <pre><code>import numpy as np\nnp.array([True, False]) == False\n# array([False,  True])\nnp.array([True, False]) is False\n# False\n</code></pre>","tags":["E721"]},{"location":"rules/type-comparison/#example","title":"Example","text":"<pre><code>if type(obj) == type(1):\npass\nif type(obj) == int:\npass\n</code></pre> <p>Use instead:</p> <pre><code>if isinstance(obj, int):\npass\n</code></pre>","tags":["E721"]},{"location":"rules/type-name-incorrect-variance/","title":"type-name-incorrect-variance (PLC0105)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC0105"]},{"location":"rules/type-name-incorrect-variance/#what-it-does","title":"What it does","text":"<p>Checks for type names that do not match the variance of their associated type parameter.</p>","tags":["PLC0105"]},{"location":"rules/type-name-incorrect-variance/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 484 recommends the use of the <code>_co</code> and <code>_contra</code> suffixes for covariant and contravariant type parameters, respectively (while invariant type parameters should not have any such suffix).</p>","tags":["PLC0105"]},{"location":"rules/type-name-incorrect-variance/#example","title":"Example","text":"<pre><code>from typing import TypeVar\nT = TypeVar(\"T\", covariant=True)\nU = TypeVar(\"U\", contravariant=True)\nV_co = TypeVar(\"V_co\")\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypeVar\nT_co = TypeVar(\"T_co\", covariant=True)\nU_contra = TypeVar(\"U_contra\", contravariant=True)\nV = TypeVar(\"V\")\n</code></pre>","tags":["PLC0105"]},{"location":"rules/type-name-incorrect-variance/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing</code> \u2014 Support for type hints</li> <li>PEP 483 \u2013 The Theory of Type Hints: Covariance and Contravariance</li> <li>PEP 484 \u2013 Type Hints: Covariance and contravariance</li> </ul>","tags":["PLC0105"]},{"location":"rules/type-none-comparison/","title":"type-none-comparison (FURB169)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p>","tags":["FURB169"]},{"location":"rules/type-none-comparison/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>type</code> that compare the type of an object to the type of <code>None</code>.</p>","tags":["FURB169"]},{"location":"rules/type-none-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>There is only ever one instance of <code>None</code>, so it is more efficient and readable to use the <code>is</code> operator to check if an object is <code>None</code>.</p>","tags":["FURB169"]},{"location":"rules/type-none-comparison/#example","title":"Example","text":"<pre><code>type(obj) is type(None)\n</code></pre> <p>Use instead:</p> <pre><code>obj is None\n</code></pre>","tags":["FURB169"]},{"location":"rules/type-none-comparison/#references","title":"References","text":"<ul> <li>Python documentation: <code>isinstance</code></li> <li>Python documentation: <code>None</code></li> <li>Python documentation: <code>type</code></li> <li>Python documentation: Identity comparisons</li> </ul>","tags":["FURB169"]},{"location":"rules/type-of-primitive/","title":"type-of-primitive (UP003)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP003"]},{"location":"rules/type-of-primitive/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>type</code> that take a primitive as an argument.</p>","tags":["UP003"]},{"location":"rules/type-of-primitive/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>type()</code> returns the type of a given object. A type of a primitive can always be known in advance and accessed directly, which is more concise and explicit than using <code>type()</code>.</p>","tags":["UP003"]},{"location":"rules/type-of-primitive/#example","title":"Example","text":"<pre><code>type(1)\n</code></pre> <p>Use instead:</p> <pre><code>int\n</code></pre>","tags":["UP003"]},{"location":"rules/type-of-primitive/#references","title":"References","text":"<ul> <li>Python documentation: <code>type()</code></li> <li>Python documentation: Built-in types</li> </ul>","tags":["UP003"]},{"location":"rules/type-param-name-mismatch/","title":"type-param-name-mismatch (PLC0132)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC0132"]},{"location":"rules/type-param-name-mismatch/#what-it-does","title":"What it does","text":"<p>Checks for <code>TypeVar</code>, <code>TypeVarTuple</code>, <code>ParamSpec</code>, and <code>NewType</code> definitions in which the name of the type parameter does not match the name of the variable to which it is assigned.</p>","tags":["PLC0132"]},{"location":"rules/type-param-name-mismatch/#why-is-this-bad","title":"Why is this bad?","text":"<p>When defining a <code>TypeVar</code> or a related type parameter, Python allows you to provide a name for the type parameter. According to PEP 484, the name provided to the <code>TypeVar</code> constructor must be equal to the name of the variable to which it is assigned.</p>","tags":["PLC0132"]},{"location":"rules/type-param-name-mismatch/#example","title":"Example","text":"<pre><code>from typing import TypeVar\nT = TypeVar(\"U\")\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypeVar\nT = TypeVar(\"T\")\n</code></pre>","tags":["PLC0132"]},{"location":"rules/type-param-name-mismatch/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing</code> \u2014 Support for type hints</li> <li>PEP 484 \u2013 Type Hints: Generics</li> </ul>","tags":["PLC0132"]},{"location":"rules/typed-argument-default-in-stub/","title":"typed-argument-default-in-stub (PYI011)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is always available.</p>","tags":["PYI011"]},{"location":"rules/typed-argument-default-in-stub/#what-it-does","title":"What it does","text":"<p>Checks for typed function arguments in stubs with complex default values.</p>","tags":["PYI011"]},{"location":"rules/typed-argument-default-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub (<code>.pyi</code>) files exist as \"data files\" for static analysis tools, and are not evaluated at runtime. While simple default values may be useful for some tools that consume stubs, such as IDEs, they are ignored by type checkers.</p> <p>Instead of including and reproducing a complex value, use <code>...</code> to indicate that the assignment has a default value, but that the value is \"complex\" or varies according to the current platform or Python version. For the purposes of this rule, any default value counts as \"complex\" unless it is a literal <code>int</code>, <code>float</code>, <code>complex</code>, <code>bytes</code>, <code>str</code>, <code>bool</code>, <code>None</code>, <code>...</code>, or a simple container literal.</p>","tags":["PYI011"]},{"location":"rules/typed-argument-default-in-stub/#example","title":"Example","text":"<pre><code>def foo(arg: list[int] = list(range(10_000))) -&gt; None: ...\n</code></pre> <p>Use instead:</p> <pre><code>def foo(arg: list[int] = ...) -&gt; None: ...\n</code></pre>","tags":["PYI011"]},{"location":"rules/typed-argument-default-in-stub/#references","title":"References","text":"<ul> <li><code>flake8-pyi</code></li> </ul>","tags":["PYI011"]},{"location":"rules/typing-only-first-party-import/","title":"typing-only-first-party-import (TC001)","text":"<p>Derived from the flake8-type-checking linter.</p> <p>Fix is sometimes available.</p>","tags":["TC001"]},{"location":"rules/typing-only-first-party-import/#what-it-does","title":"What it does","text":"<p>Checks for first-party imports that are only used for type annotations, but aren't defined in a type-checking block.</p>","tags":["TC001"]},{"location":"rules/typing-only-first-party-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused imports add a performance overhead at runtime, and risk creating import cycles. If an import is only used in typing-only contexts, it can instead be imported conditionally under an <code>if TYPE_CHECKING:</code> block to minimize runtime overhead.</p> <p>If <code>lint.flake8-type-checking.quote-annotations</code> is set to <code>true</code>, annotations will be wrapped in quotes if doing so would enable the corresponding import to be moved into an <code>if TYPE_CHECKING:</code> block.</p> <p>If a class requires that type annotations be available at runtime (as is the case for Pydantic, SQLAlchemy, and other libraries), consider using the <code>lint.flake8-type-checking.runtime-evaluated-base-classes</code> and <code>lint.flake8-type-checking.runtime-evaluated-decorators</code> settings to mark them as such.</p>","tags":["TC001"]},{"location":"rules/typing-only-first-party-import/#example","title":"Example","text":"<pre><code>from __future__ import annotations\nimport local_module\ndef func(sized: local_module.Container) -&gt; int:\nreturn len(sized)\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\nfrom typing import TYPE_CHECKING\nif TYPE_CHECKING:\nimport local_module\ndef func(sized: local_module.Container) -&gt; int:\nreturn len(sized)\n</code></pre>","tags":["TC001"]},{"location":"rules/typing-only-first-party-import/#options","title":"Options","text":"<ul> <li><code>lint.flake8-type-checking.quote-annotations</code></li> <li><code>lint.flake8-type-checking.runtime-evaluated-base-classes</code></li> <li><code>lint.flake8-type-checking.runtime-evaluated-decorators</code></li> <li><code>lint.flake8-type-checking.strict</code></li> <li><code>lint.typing-modules</code></li> </ul>","tags":["TC001"]},{"location":"rules/typing-only-first-party-import/#references","title":"References","text":"<ul> <li>PEP 563: Runtime annotation resolution and <code>TYPE_CHECKING</code></li> </ul>","tags":["TC001"]},{"location":"rules/typing-only-standard-library-import/","title":"typing-only-standard-library-import (TC003)","text":"<p>Derived from the flake8-type-checking linter.</p> <p>Fix is sometimes available.</p>","tags":["TC003"]},{"location":"rules/typing-only-standard-library-import/#what-it-does","title":"What it does","text":"<p>Checks for standard library imports that are only used for type annotations, but aren't defined in a type-checking block.</p>","tags":["TC003"]},{"location":"rules/typing-only-standard-library-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused imports add a performance overhead at runtime, and risk creating import cycles. If an import is only used in typing-only contexts, it can instead be imported conditionally under an <code>if TYPE_CHECKING:</code> block to minimize runtime overhead.</p> <p>If <code>lint.flake8-type-checking.quote-annotations</code> is set to <code>true</code>, annotations will be wrapped in quotes if doing so would enable the corresponding import to be moved into an <code>if TYPE_CHECKING:</code> block.</p> <p>If a class requires that type annotations be available at runtime (as is the case for Pydantic, SQLAlchemy, and other libraries), consider using the <code>lint.flake8-type-checking.runtime-evaluated-base-classes</code> and <code>lint.flake8-type-checking.runtime-evaluated-decorators</code> settings to mark them as such.</p>","tags":["TC003"]},{"location":"rules/typing-only-standard-library-import/#example","title":"Example","text":"<pre><code>from __future__ import annotations\nfrom pathlib import Path\ndef func(path: Path) -&gt; str:\nreturn str(path)\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\nfrom typing import TYPE_CHECKING\nif TYPE_CHECKING:\nfrom pathlib import Path\ndef func(path: Path) -&gt; str:\nreturn str(path)\n</code></pre>","tags":["TC003"]},{"location":"rules/typing-only-standard-library-import/#options","title":"Options","text":"<ul> <li><code>lint.flake8-type-checking.quote-annotations</code></li> <li><code>lint.flake8-type-checking.runtime-evaluated-base-classes</code></li> <li><code>lint.flake8-type-checking.runtime-evaluated-decorators</code></li> <li><code>lint.flake8-type-checking.strict</code></li> <li><code>lint.typing-modules</code></li> </ul>","tags":["TC003"]},{"location":"rules/typing-only-standard-library-import/#references","title":"References","text":"<ul> <li>PEP 563: Runtime annotation resolution and <code>TYPE_CHECKING</code></li> </ul>","tags":["TC003"]},{"location":"rules/typing-only-third-party-import/","title":"typing-only-third-party-import (TC002)","text":"<p>Derived from the flake8-type-checking linter.</p> <p>Fix is sometimes available.</p>","tags":["TC002"]},{"location":"rules/typing-only-third-party-import/#what-it-does","title":"What it does","text":"<p>Checks for third-party imports that are only used for type annotations, but aren't defined in a type-checking block.</p>","tags":["TC002"]},{"location":"rules/typing-only-third-party-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused imports add a performance overhead at runtime, and risk creating import cycles. If an import is only used in typing-only contexts, it can instead be imported conditionally under an <code>if TYPE_CHECKING:</code> block to minimize runtime overhead.</p> <p>If <code>lint.flake8-type-checking.quote-annotations</code> is set to <code>true</code>, annotations will be wrapped in quotes if doing so would enable the corresponding import to be moved into an <code>if TYPE_CHECKING:</code> block.</p> <p>If a class requires that type annotations be available at runtime (as is the case for Pydantic, SQLAlchemy, and other libraries), consider using the <code>lint.flake8-type-checking.runtime-evaluated-base-classes</code> and <code>lint.flake8-type-checking.runtime-evaluated-decorators</code> settings to mark them as such.</p>","tags":["TC002"]},{"location":"rules/typing-only-third-party-import/#example","title":"Example","text":"<pre><code>from __future__ import annotations\nimport pandas as pd\ndef func(df: pd.DataFrame) -&gt; int:\nreturn len(df)\n</code></pre> <p>Use instead:</p> <pre><code>from __future__ import annotations\nfrom typing import TYPE_CHECKING\nif TYPE_CHECKING:\nimport pandas as pd\ndef func(df: pd.DataFrame) -&gt; int:\nreturn len(df)\n</code></pre>","tags":["TC002"]},{"location":"rules/typing-only-third-party-import/#options","title":"Options","text":"<ul> <li><code>lint.flake8-type-checking.quote-annotations</code></li> <li><code>lint.flake8-type-checking.runtime-evaluated-base-classes</code></li> <li><code>lint.flake8-type-checking.runtime-evaluated-decorators</code></li> <li><code>lint.flake8-type-checking.strict</code></li> <li><code>lint.typing-modules</code></li> </ul>","tags":["TC002"]},{"location":"rules/typing-only-third-party-import/#references","title":"References","text":"<ul> <li>PEP 563: Runtime annotation resolution and <code>TYPE_CHECKING</code></li> </ul>","tags":["TC002"]},{"location":"rules/typing-text-str-alias/","title":"typing-text-str-alias (UP019)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is sometimes available.</p>","tags":["UP019"]},{"location":"rules/typing-text-str-alias/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>typing.Text</code>.</p>","tags":["UP019"]},{"location":"rules/typing-text-str-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>typing.Text</code> is an alias for <code>str</code>, and only exists for Python 2 compatibility. As of Python 3.11, <code>typing.Text</code> is deprecated. Use <code>str</code> instead.</p>","tags":["UP019"]},{"location":"rules/typing-text-str-alias/#example","title":"Example","text":"<pre><code>from typing import Text\nfoo: Text = \"bar\"\n</code></pre> <p>Use instead:</p> <pre><code>foo: str = \"bar\"\n</code></pre>","tags":["UP019"]},{"location":"rules/typing-text-str-alias/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.Text</code></li> </ul>","tags":["UP019"]},{"location":"rules/unaliased-collections-abc-set-import/","title":"unaliased-collections-abc-set-import (PYI025)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI025"]},{"location":"rules/unaliased-collections-abc-set-import/#what-it-does","title":"What it does","text":"<p>Checks for <code>from collections.abc import Set</code> imports that do not alias <code>Set</code> to <code>AbstractSet</code>.</p>","tags":["PYI025"]},{"location":"rules/unaliased-collections-abc-set-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>Set</code> type in <code>collections.abc</code> is an abstract base class for set-like types. It is easily confused with, and not equivalent to, the <code>set</code> builtin.</p> <p>To avoid confusion, <code>Set</code> should be aliased to <code>AbstractSet</code> when imported. This makes it clear that the imported type is an abstract base class, and not the <code>set</code> builtin.</p>","tags":["PYI025"]},{"location":"rules/unaliased-collections-abc-set-import/#example","title":"Example","text":"<pre><code>from collections.abc import Set\n</code></pre> <p>Use instead:</p> <pre><code>from collections.abc import Set as AbstractSet\n</code></pre>","tags":["PYI025"]},{"location":"rules/unaliased-collections-abc-set-import/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe for <code>Set</code> imports defined at the top-level of a <code>.py</code> module. Top-level symbols are implicitly exported by the module, and so renaming a top-level symbol may break downstream modules that import it.</p> <p>The same is not true for <code>.pyi</code> files, where imported symbols are only re-exported if they are included in <code>__all__</code>, use a \"redundant\" <code>import foo as foo</code> alias, or are imported via a <code>*</code> import. As such, the fix is marked as safe in more cases for <code>.pyi</code> files.</p>","tags":["PYI025"]},{"location":"rules/unannotated-assignment-in-stub/","title":"unannotated-assignment-in-stub (PYI052)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI052"]},{"location":"rules/unannotated-assignment-in-stub/#what-it-does","title":"What it does?","text":"<p>Checks for unannotated assignments in stub (<code>.pyi</code>) files.</p>","tags":["PYI052"]},{"location":"rules/unannotated-assignment-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files exist to provide type hints, and are never executed. As such, all assignments in stub files should be annotated with a type.</p>","tags":["PYI052"]},{"location":"rules/unary-prefix-increment-decrement/","title":"unary-prefix-increment-decrement (B002)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B002"]},{"location":"rules/unary-prefix-increment-decrement/#what-it-does","title":"What it does","text":"<p>Checks for the attempted use of the unary prefix increment (<code>++</code>) or decrement operator (<code>--</code>).</p>","tags":["B002"]},{"location":"rules/unary-prefix-increment-decrement/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python does not support the unary prefix increment or decrement operator. Writing <code>++n</code> is equivalent to <code>+(+(n))</code> and writing <code>--n</code> is equivalent to <code>-(-(n))</code>. In both cases, it is equivalent to <code>n</code>.</p>","tags":["B002"]},{"location":"rules/unary-prefix-increment-decrement/#example","title":"Example","text":"<pre><code>++x\n--y\n</code></pre> <p>Use instead:</p> <pre><code>x += 1\ny -= 1\n</code></pre>","tags":["B002"]},{"location":"rules/unary-prefix-increment-decrement/#references","title":"References","text":"<ul> <li>Python documentation: Unary arithmetic and bitwise operations</li> <li>Python documentation: Augmented assignment statements</li> </ul>","tags":["B002"]},{"location":"rules/unassigned-special-variable-in-stub/","title":"unassigned-special-variable-in-stub (PYI035)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI035"]},{"location":"rules/unassigned-special-variable-in-stub/#what-it-does","title":"What it does","text":"<p>Checks that <code>__all__</code>, <code>__match_args__</code>, and <code>__slots__</code> variables are assigned to values when defined in stub files.</p>","tags":["PYI035"]},{"location":"rules/unassigned-special-variable-in-stub/#why-is-this-bad","title":"Why is this bad?","text":"<p>Special variables like <code>__all__</code> have the same semantics in stub files as they do in Python modules, and so should be consistent with their runtime counterparts.</p>","tags":["PYI035"]},{"location":"rules/unassigned-special-variable-in-stub/#example","title":"Example","text":"<pre><code>__all__: list[str]\n</code></pre> <p>Use instead:</p> <pre><code>__all__: list[str] = [\"foo\", \"bar\"]\n</code></pre>","tags":["PYI035"]},{"location":"rules/uncapitalized-environment-variables/","title":"uncapitalized-environment-variables (SIM112)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM112"]},{"location":"rules/uncapitalized-environment-variables/#what-it-does","title":"What it does","text":"<p>Check for environment variables that are not capitalized.</p>","tags":["SIM112"]},{"location":"rules/uncapitalized-environment-variables/#why-is-this-bad","title":"Why is this bad?","text":"<p>By convention, environment variables should be capitalized.</p> <p>On Windows, environment variables are case-insensitive and are converted to uppercase, so using lowercase environment variables can lead to subtle bugs.</p>","tags":["SIM112"]},{"location":"rules/uncapitalized-environment-variables/#example","title":"Example","text":"<pre><code>import os\nos.environ[\"foo\"]\n</code></pre> <p>Use instead:</p> <pre><code>import os\nos.environ[\"FOO\"]\n</code></pre>","tags":["SIM112"]},{"location":"rules/uncapitalized-environment-variables/#references","title":"References","text":"<ul> <li>Python documentation: <code>os.environ</code></li> </ul>","tags":["SIM112"]},{"location":"rules/unconventional-import-alias/","title":"unconventional-import-alias (ICN001)","text":"<p>Derived from the flake8-import-conventions linter.</p> <p>Fix is sometimes available.</p>","tags":["ICN001"]},{"location":"rules/unconventional-import-alias/#what-it-does","title":"What it does","text":"<p>Checks for imports that are typically imported using a common convention, like <code>import pandas as pd</code>, and enforces that convention.</p>","tags":["ICN001"]},{"location":"rules/unconventional-import-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use a common convention for imports to make your code more readable and idiomatic.</p> <p>For example, <code>import pandas as pd</code> is a common convention for importing the <code>pandas</code> library, and users typically expect Pandas to be aliased as <code>pd</code>.</p>","tags":["ICN001"]},{"location":"rules/unconventional-import-alias/#example","title":"Example","text":"<pre><code>import pandas\n</code></pre> <p>Use instead:</p> <pre><code>import pandas as pd\n</code></pre>","tags":["ICN001"]},{"location":"rules/unconventional-import-alias/#options","title":"Options","text":"<ul> <li><code>lint.flake8-import-conventions.aliases</code></li> <li><code>lint.flake8-import-conventions.extend-aliases</code></li> </ul>","tags":["ICN001"]},{"location":"rules/undefined-export/","title":"undefined-export (F822)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F822"]},{"location":"rules/undefined-export/#what-it-does","title":"What it does","text":"<p>Checks for undefined names in <code>__all__</code>.</p>","tags":["F822"]},{"location":"rules/undefined-export/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the <code>__all__</code> variable is used to define the names that are exported when a module is imported as a wildcard (e.g., <code>from foo import *</code>). The names in <code>__all__</code> must be defined in the module, but are included as strings.</p> <p>Including an undefined name in <code>__all__</code> is likely to raise <code>NameError</code> at runtime, when the module is imported.</p> <p>In preview, this rule will flag undefined names in <code>__init__.py</code> file, even if those names implicitly refer to other modules in the package. Users that rely on implicit exports should disable this rule in <code>__init__.py</code> files via <code>lint.per-file-ignores</code>.</p>","tags":["F822"]},{"location":"rules/undefined-export/#example","title":"Example","text":"<pre><code>from foo import bar\n__all__ = [\"bar\", \"baz\"]  # undefined name `baz` in `__all__`\n</code></pre> <p>Use instead:</p> <pre><code>from foo import bar, baz\n__all__ = [\"bar\", \"baz\"]\n</code></pre>","tags":["F822"]},{"location":"rules/undefined-export/#references","title":"References","text":"<ul> <li>Python documentation: <code>__all__</code></li> </ul>","tags":["F822"]},{"location":"rules/undefined-local-with-import-star-usage/","title":"undefined-local-with-import-star-usage (F405)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F405"]},{"location":"rules/undefined-local-with-import-star-usage/#what-it-does","title":"What it does","text":"<p>Checks for names that might be undefined, but may also be defined in a wildcard import.</p>","tags":["F405"]},{"location":"rules/undefined-local-with-import-star-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>Wildcard imports (e.g., <code>from module import *</code>) make it hard to determine which symbols are available in the current namespace. If a module contains a wildcard import, and a name in the current namespace has not been explicitly defined or imported, then it's unclear whether the name is undefined or was imported by the wildcard import.</p> <p>If the name is defined in via a wildcard import, that member should be imported explicitly to avoid confusion.</p> <p>If the name is not defined in a wildcard import, it should be defined or imported.</p>","tags":["F405"]},{"location":"rules/undefined-local-with-import-star-usage/#example","title":"Example","text":"<pre><code>from math import *\ndef area(radius):\nreturn pi * radius**2\n</code></pre> <p>Use instead:</p> <pre><code>from math import pi\ndef area(radius):\nreturn pi * radius**2\n</code></pre>","tags":["F405"]},{"location":"rules/undefined-local-with-import-star/","title":"undefined-local-with-import-star (F403)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F403"]},{"location":"rules/undefined-local-with-import-star/#what-it-does","title":"What it does","text":"<p>Checks for the use of wildcard imports.</p>","tags":["F403"]},{"location":"rules/undefined-local-with-import-star/#why-is-this-bad","title":"Why is this bad?","text":"<p>Wildcard imports (e.g., <code>from module import *</code>) make it hard to determine which symbols are available in the current namespace, and from which module they were imported. They're also discouraged by PEP 8.</p>","tags":["F403"]},{"location":"rules/undefined-local-with-import-star/#example","title":"Example","text":"<pre><code>from math import *\ndef area(radius):\nreturn pi * radius**2\n</code></pre> <p>Use instead:</p> <pre><code>from math import pi\ndef area(radius):\nreturn pi * radius**2\n</code></pre>","tags":["F403"]},{"location":"rules/undefined-local-with-nested-import-star-usage/","title":"undefined-local-with-nested-import-star-usage (F406)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F406"]},{"location":"rules/undefined-local-with-nested-import-star-usage/#what-it-does","title":"What it does","text":"<p>Check for the use of wildcard imports outside of the module namespace.</p>","tags":["F406"]},{"location":"rules/undefined-local-with-nested-import-star-usage/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of wildcard imports outside of the module namespace (e.g., within functions) can lead to confusion, as the import can shadow local variables.</p> <p>Though wildcard imports are discouraged by PEP 8, when necessary, they should be placed in the module namespace (i.e., at the top-level of a module).</p>","tags":["F406"]},{"location":"rules/undefined-local-with-nested-import-star-usage/#example","title":"Example","text":"<pre><code>def foo():\nfrom math import *\n</code></pre> <p>Use instead:</p> <pre><code>from math import *\ndef foo(): ...\n</code></pre>","tags":["F406"]},{"location":"rules/undefined-local/","title":"undefined-local (F823)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F823"]},{"location":"rules/undefined-local/#what-it-does","title":"What it does","text":"<p>Checks for undefined local variables.</p>","tags":["F823"]},{"location":"rules/undefined-local/#why-is-this-bad","title":"Why is this bad?","text":"<p>Referencing a local variable before it has been assigned will raise an <code>UnboundLocalError</code> at runtime.</p>","tags":["F823"]},{"location":"rules/undefined-local/#example","title":"Example","text":"<pre><code>x = 1\ndef foo():\nx += 1\n</code></pre> <p>Use instead:</p> <pre><code>x = 1\ndef foo():\nglobal x\nx += 1\n</code></pre>","tags":["F823"]},{"location":"rules/undefined-name/","title":"undefined-name (F821)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F821"]},{"location":"rules/undefined-name/#what-it-does","title":"What it does","text":"<p>Checks for uses of undefined names.</p>","tags":["F821"]},{"location":"rules/undefined-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>An undefined name is likely to raise <code>NameError</code> at runtime.</p>","tags":["F821"]},{"location":"rules/undefined-name/#example","title":"Example","text":"<pre><code>def double():\nreturn n * 2  # raises `NameError` if `n` is undefined when `double` is called\n</code></pre> <p>Use instead:</p> <pre><code>def double(n):\nreturn n * 2\n</code></pre>","tags":["F821"]},{"location":"rules/undefined-name/#options","title":"Options","text":"<ul> <li><code>target-version</code>: Can be used to configure which symbols Ruff will understand     as being available in the <code>builtins</code> namespace.</li> </ul>","tags":["F821"]},{"location":"rules/undefined-name/#references","title":"References","text":"<ul> <li>Python documentation: Naming and binding</li> </ul>","tags":["F821"]},{"location":"rules/under-indentation/","title":"under-indentation (D207)","text":"<p>Derived from the pydocstyle linter.</p> <p>Fix is always available.</p>","tags":["D207"]},{"location":"rules/under-indentation/#what-it-does","title":"What it does","text":"<p>Checks for under-indented docstrings.</p>","tags":["D207"]},{"location":"rules/under-indentation/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 257 recommends that docstrings be indented to the same level as their opening quotes. Avoid under-indenting docstrings, for consistency.</p>","tags":["D207"]},{"location":"rules/under-indentation/#example","title":"Example","text":"<pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\nSort the list in ascending order and return a copy of the result using the bubble sort\nalgorithm.\n    \"\"\"\n</code></pre> <p>Use instead:</p> <pre><code>def sort_list(l: list[int]) -&gt; list[int]:\n\"\"\"Return a sorted copy of the list.\n    Sort the list in ascending order and return a copy of the result using the bubble\n    sort algorithm.\n    \"\"\"\n</code></pre>","tags":["D207"]},{"location":"rules/under-indentation/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter enforces consistent indentation, making the rule redundant.</p>","tags":["D207"]},{"location":"rules/under-indentation/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D207"]},{"location":"rules/undocumented-magic-method/","title":"undocumented-magic-method (D105)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D105"]},{"location":"rules/undocumented-magic-method/#what-it-does","title":"What it does","text":"<p>Checks for undocumented magic method definitions.</p>","tags":["D105"]},{"location":"rules/undocumented-magic-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Magic methods (methods with names that start and end with double underscores) are used to implement operator overloading and other special behavior. Such methods should be documented via docstrings to outline their behavior.</p> <p>Generally, magic method docstrings should describe the method's behavior, arguments, side effects, exceptions, return values, and any other information that may be relevant to the user.</p> <p>If the codebase adheres to a standard format for method docstrings, follow that format for consistency.</p>","tags":["D105"]},{"location":"rules/undocumented-magic-method/#example","title":"Example","text":"<pre><code>class Cat(Animal):\ndef __str__(self) -&gt; str:\nreturn f\"Cat: {self.name}\"\ncat = Cat(\"Dusty\")\nprint(cat)  # \"Cat: Dusty\"\n</code></pre> <p>Use instead:</p> <pre><code>class Cat(Animal):\ndef __str__(self) -&gt; str:\n\"\"\"Return a string representation of the cat.\"\"\"\nreturn f\"Cat: {self.name}\"\ncat = Cat(\"Dusty\")\nprint(cat)  # \"Cat: Dusty\"\n</code></pre>","tags":["D105"]},{"location":"rules/undocumented-magic-method/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.ignore-decorators</code></li> </ul>","tags":["D105"]},{"location":"rules/undocumented-magic-method/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Style Python Docstrings</li> </ul>","tags":["D105"]},{"location":"rules/undocumented-param/","title":"undocumented-param (D417)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D417"]},{"location":"rules/undocumented-param/#what-it-does","title":"What it does","text":"<p>Checks for function docstrings that do not include documentation for all parameters in the function.</p>","tags":["D417"]},{"location":"rules/undocumented-param/#why-is-this-bad","title":"Why is this bad?","text":"<p>This rule helps prevent you from leaving Google-style docstrings unfinished or incomplete. Multiline Google-style docstrings should describe all parameters for the function they are documenting.</p> <p>Multiline docstrings are typically composed of a summary line, followed by a blank line, followed by a series of sections, each with a section header and a section body. Function docstrings often include a section for function arguments; this rule is concerned with that section only.</p> <p>This rule is enabled when using the <code>google</code> convention, and disabled when using the <code>pep257</code> and <code>numpy</code> conventions.</p>","tags":["D417"]},{"location":"rules/undocumented-param/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D417"]},{"location":"rules/undocumented-param/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.convention</code></li> </ul>","tags":["D417"]},{"location":"rules/undocumented-param/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D417"]},{"location":"rules/undocumented-public-class/","title":"undocumented-public-class (D101)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D101"]},{"location":"rules/undocumented-public-class/#what-it-does","title":"What it does","text":"<p>Checks for undocumented public class definitions.</p>","tags":["D101"]},{"location":"rules/undocumented-public-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>Public classes should be documented via docstrings to outline their purpose and behavior.</p> <p>Generally, a class docstring should describe the class's purpose and list its public attributes and methods.</p> <p>If the codebase adheres to a standard format for class docstrings, follow that format for consistency.</p>","tags":["D101"]},{"location":"rules/undocumented-public-class/#example","title":"Example","text":"<pre><code>class Player:\ndef __init__(self, name: str, points: int = 0) -&gt; None:\nself.name: str = name\nself.points: int = points\ndef add_points(self, points: int) -&gt; None:\nself.points += points\n</code></pre> <p>Use instead (in the NumPy docstring format):</p> <pre><code>class Player:\n\"\"\"A player in the game.\n    Attributes\n    ----------\n    name : str\n        The name of the player.\n    points : int\n        The number of points the player has.\n    Methods\n    -------\n    add_points(points: int) -&gt; None\n        Add points to the player's score.\n    \"\"\"\ndef __init__(self, name: str, points: int = 0) -&gt; None:\nself.name: str = name\nself.points: int = points\ndef add_points(self, points: int) -&gt; None:\nself.points += points\n</code></pre> <p>Or (in the Google docstring format):</p> <pre><code>class Player:\n\"\"\"A player in the game.\n    Attributes:\n        name: The name of the player.\n        points: The number of points the player has.\n    \"\"\"\ndef __init__(self, name: str, points: int = 0) -&gt; None:\nself.name: str = name\nself.points: int = points\ndef add_points(self, points: int) -&gt; None:\nself.points += points\n</code></pre>","tags":["D101"]},{"location":"rules/undocumented-public-class/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D101"]},{"location":"rules/undocumented-public-function/","title":"undocumented-public-function (D103)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D103"]},{"location":"rules/undocumented-public-function/#what-it-does","title":"What it does","text":"<p>Checks for undocumented public function definitions.</p>","tags":["D103"]},{"location":"rules/undocumented-public-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Public functions should be documented via docstrings to outline their purpose and behavior.</p> <p>Generally, a function docstring should describe the function's behavior, arguments, side effects, exceptions, return values, and any other information that may be relevant to the user.</p> <p>If the codebase adheres to a standard format for function docstrings, follow that format for consistency.</p>","tags":["D103"]},{"location":"rules/undocumented-public-function/#example","title":"Example","text":"<pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Use instead (using the NumPy docstring format):</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Parameters\n    ----------\n    distance : float\n        Distance traveled.\n    time : float\n        Time spent traveling.\n    Returns\n    -------\n    float\n        Speed as distance divided by time.\n    Raises\n    ------\n    FasterThanLightError\n        If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre> <p>Or, using the Google docstring format:</p> <pre><code>def calculate_speed(distance: float, time: float) -&gt; float:\n\"\"\"Calculate speed as distance divided by time.\n    Args:\n        distance: Distance traveled.\n        time: Time spent traveling.\n    Returns:\n        Speed as distance divided by time.\n    Raises:\n        FasterThanLightError: If speed is greater than the speed of light.\n    \"\"\"\ntry:\nreturn distance / time\nexcept ZeroDivisionError as exc:\nraise FasterThanLightError from exc\n</code></pre>","tags":["D103"]},{"location":"rules/undocumented-public-function/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.ignore-decorators</code></li> </ul>","tags":["D103"]},{"location":"rules/undocumented-public-function/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Style Python Docstrings</li> </ul>","tags":["D103"]},{"location":"rules/undocumented-public-init/","title":"undocumented-public-init (D107)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D107"]},{"location":"rules/undocumented-public-init/#what-it-does","title":"What it does","text":"<p>Checks for public <code>__init__</code> method definitions that are missing docstrings.</p>","tags":["D107"]},{"location":"rules/undocumented-public-init/#why-is-this-bad","title":"Why is this bad?","text":"<p>Public <code>__init__</code> methods are used to initialize objects. <code>__init__</code> methods should be documented via docstrings to describe the method's behavior, arguments, side effects, exceptions, and any other information that may be relevant to the user.</p> <p>If the codebase adheres to a standard format for <code>__init__</code> method docstrings, follow that format for consistency.</p>","tags":["D107"]},{"location":"rules/undocumented-public-init/#example","title":"Example","text":"<pre><code>class City:\ndef __init__(self, name: str, population: int) -&gt; None:\nself.name: str = name\nself.population: int = population\n</code></pre> <p>Use instead:</p> <pre><code>class City:\ndef __init__(self, name: str, population: int) -&gt; None:\n\"\"\"Initialize a city with a name and population.\"\"\"\nself.name: str = name\nself.population: int = population\n</code></pre>","tags":["D107"]},{"location":"rules/undocumented-public-init/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.ignore-decorators</code></li> </ul>","tags":["D107"]},{"location":"rules/undocumented-public-init/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Style Python Docstrings</li> </ul>","tags":["D107"]},{"location":"rules/undocumented-public-method/","title":"undocumented-public-method (D102)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D102"]},{"location":"rules/undocumented-public-method/#what-it-does","title":"What it does","text":"<p>Checks for undocumented public method definitions.</p>","tags":["D102"]},{"location":"rules/undocumented-public-method/#why-is-this-bad","title":"Why is this bad?","text":"<p>Public methods should be documented via docstrings to outline their purpose and behavior.</p> <p>Generally, a method docstring should describe the method's behavior, arguments, side effects, exceptions, return values, and any other information that may be relevant to the user.</p> <p>If the codebase adheres to a standard format for method docstrings, follow that format for consistency.</p>","tags":["D102"]},{"location":"rules/undocumented-public-method/#example","title":"Example","text":"<pre><code>class Cat(Animal):\ndef greet(self, happy: bool = True):\nif happy:\nprint(\"Meow!\")\nelse:\nraise ValueError(\"Tried to greet an unhappy cat.\")\n</code></pre> <p>Use instead (in the NumPy docstring format):</p> <pre><code>class Cat(Animal):\ndef greet(self, happy: bool = True):\n\"\"\"Print a greeting from the cat.\n        Parameters\n        ----------\n        happy : bool, optional\n            Whether the cat is happy, is True by default.\n        Raises\n        ------\n        ValueError\n            If the cat is not happy.\n        \"\"\"\nif happy:\nprint(\"Meow!\")\nelse:\nraise ValueError(\"Tried to greet an unhappy cat.\")\n</code></pre> <p>Or (in the Google docstring format):</p> <pre><code>class Cat(Animal):\ndef greet(self, happy: bool = True):\n\"\"\"Print a greeting from the cat.\n        Args:\n            happy: Whether the cat is happy, is True by default.\n        Raises:\n            ValueError: If the cat is not happy.\n        \"\"\"\nif happy:\nprint(\"Meow!\")\nelse:\nraise ValueError(\"Tried to greet an unhappy cat.\")\n</code></pre>","tags":["D102"]},{"location":"rules/undocumented-public-method/#options","title":"Options","text":"<ul> <li><code>lint.pydocstyle.ignore-decorators</code></li> </ul>","tags":["D102"]},{"location":"rules/undocumented-public-method/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D102"]},{"location":"rules/undocumented-public-module/","title":"undocumented-public-module (D100)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D100"]},{"location":"rules/undocumented-public-module/#what-it-does","title":"What it does","text":"<p>Checks for undocumented public module definitions.</p>","tags":["D100"]},{"location":"rules/undocumented-public-module/#why-is-this-bad","title":"Why is this bad?","text":"<p>Public modules should be documented via docstrings to outline their purpose and contents.</p> <p>Generally, module docstrings should describe the purpose of the module and list the classes, exceptions, functions, and other objects that are exported by the module, alongside a one-line summary of each.</p> <p>If the module is a script, the docstring should be usable as its \"usage\" message.</p> <p>If the codebase adheres to a standard format for module docstrings, follow that format for consistency.</p>","tags":["D100"]},{"location":"rules/undocumented-public-module/#example","title":"Example","text":"<pre><code>class FasterThanLightError(ZeroDivisionError): ...\ndef calculate_speed(distance: float, time: float) -&gt; float: ...\n</code></pre> <p>Use instead:</p> <pre><code>\"\"\"Utility functions and classes for calculating speed.\nThis module provides:\n- FasterThanLightError: exception when FTL speed is calculated;\n- calculate_speed: calculate speed given distance and time.\n\"\"\"\nclass FasterThanLightError(ZeroDivisionError): ...\ndef calculate_speed(distance: float, time: float) -&gt; float: ...\n</code></pre>","tags":["D100"]},{"location":"rules/undocumented-public-module/#notebook-behavior","title":"Notebook behavior","text":"<p>This rule is ignored for Jupyter Notebooks.</p>","tags":["D100"]},{"location":"rules/undocumented-public-module/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Python Style Guide - Docstrings</li> </ul>","tags":["D100"]},{"location":"rules/undocumented-public-nested-class/","title":"undocumented-public-nested-class (D106)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D106"]},{"location":"rules/undocumented-public-nested-class/#what-it-does","title":"What it does","text":"<p>Checks for undocumented public class definitions, for nested classes.</p>","tags":["D106"]},{"location":"rules/undocumented-public-nested-class/#why-is-this-bad","title":"Why is this bad?","text":"<p>Public classes should be documented via docstrings to outline their purpose and behavior.</p> <p>Nested classes do not inherit the docstring of their enclosing class, so they should have their own docstrings.</p> <p>If the codebase adheres to a standard format for class docstrings, follow that format for consistency.</p>","tags":["D106"]},{"location":"rules/undocumented-public-nested-class/#example","title":"Example","text":"<pre><code>class Foo:\n\"\"\"Class Foo.\"\"\"\nclass Bar: ...\nbar = Foo.Bar()\nbar.__doc__  # None\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\n\"\"\"Class Foo.\"\"\"\nclass Bar:\n\"\"\"Class Bar.\"\"\"\nbar = Foo.Bar()\nbar.__doc__  # \"Class Bar.\"\n</code></pre>","tags":["D106"]},{"location":"rules/undocumented-public-nested-class/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Style Python Docstrings</li> </ul>","tags":["D106"]},{"location":"rules/undocumented-public-package/","title":"undocumented-public-package (D104)","text":"<p>Derived from the pydocstyle linter.</p>","tags":["D104"]},{"location":"rules/undocumented-public-package/#what-it-does","title":"What it does","text":"<p>Checks for undocumented public package definitions.</p>","tags":["D104"]},{"location":"rules/undocumented-public-package/#why-is-this-bad","title":"Why is this bad?","text":"<p>Public packages should be documented via docstrings to outline their purpose and contents.</p> <p>Generally, package docstrings should list the modules and subpackages that are exported by the package.</p> <p>If the codebase adheres to a standard format for package docstrings, follow that format for consistency.</p>","tags":["D104"]},{"location":"rules/undocumented-public-package/#example","title":"Example","text":"<pre><code>__all__ = [\"Player\", \"Game\"]\n</code></pre> <p>Use instead:</p> <pre><code>\"\"\"Game and player management package.\nThis package provides classes for managing players and games.\n\"\"\"\n__all__ = [\"player\", \"game\"]\n</code></pre>","tags":["D104"]},{"location":"rules/undocumented-public-package/#references","title":"References","text":"<ul> <li>PEP 257 \u2013 Docstring Conventions</li> <li>PEP 287 \u2013 reStructuredText Docstring Format</li> <li>NumPy Style Guide</li> <li>Google Style Python Docstrings</li> </ul>","tags":["D104"]},{"location":"rules/undocumented-warn/","title":"undocumented-warn (LOG009)","text":"<p>Derived from the flake8-logging linter.</p> <p>Fix is sometimes available.</p>","tags":["LOG009"]},{"location":"rules/undocumented-warn/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>logging.WARN</code>.</p>","tags":["LOG009"]},{"location":"rules/undocumented-warn/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>logging.WARN</code> constant is an undocumented alias for <code>logging.WARNING</code>.</p> <p>Although it\u2019s not explicitly deprecated, <code>logging.WARN</code> is not mentioned in the <code>logging</code> documentation. Prefer <code>logging.WARNING</code> instead.</p>","tags":["LOG009"]},{"location":"rules/undocumented-warn/#example","title":"Example","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.WARN)\n</code></pre> <p>Use instead:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.WARNING)\n</code></pre>","tags":["LOG009"]},{"location":"rules/unexpected-indentation-comment/","title":"unexpected-indentation-comment (E116)","text":"<p>Derived from the pycodestyle linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E116"]},{"location":"rules/unexpected-indentation-comment/#what-it-does","title":"What it does","text":"<p>Checks for unexpected indentation of comment.</p>","tags":["E116"]},{"location":"rules/unexpected-indentation-comment/#why-is-this-bad","title":"Why is this bad?","text":"<p>Comments should match the indentation of the containing code block.</p>","tags":["E116"]},{"location":"rules/unexpected-indentation-comment/#example","title":"Example","text":"<pre><code>a = 1\n# b = 2\n</code></pre> <p>Use instead:</p> <pre><code>a = 1\n# b = 2\n</code></pre>","tags":["E116"]},{"location":"rules/unexpected-indentation/","title":"unexpected-indentation (E113)","text":"<p>Derived from the pycodestyle linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E113"]},{"location":"rules/unexpected-indentation/#what-it-does","title":"What it does","text":"<p>Checks for unexpected indentation.</p>","tags":["E113"]},{"location":"rules/unexpected-indentation/#why-is-this-bad","title":"Why is this bad?","text":"<p>Indentation outside of a code block is not valid Python syntax.</p>","tags":["E113"]},{"location":"rules/unexpected-indentation/#example","title":"Example","text":"<pre><code>a = 1\nb = 2\n</code></pre> <p>Use instead:</p> <pre><code>a = 1\nb = 2\n</code></pre>","tags":["E113"]},{"location":"rules/unexpected-spaces-around-keyword-parameter-equals/","title":"unexpected-spaces-around-keyword-parameter-equals (E251)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E251"]},{"location":"rules/unexpected-spaces-around-keyword-parameter-equals/#what-it-does","title":"What it does","text":"<p>Checks for missing whitespace around the equals sign in an unannotated function keyword parameter.</p>","tags":["E251"]},{"location":"rules/unexpected-spaces-around-keyword-parameter-equals/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, there should be no spaces around the equals sign in a keyword parameter, if it is unannotated:</p> <p>Don\u2019t use spaces around the = sign when used to indicate a keyword argument, or when used to indicate a default value for an unannotated function parameter.</p>","tags":["E251"]},{"location":"rules/unexpected-spaces-around-keyword-parameter-equals/#example","title":"Example","text":"<pre><code>def add(a = 0) -&gt; int:\nreturn a + 1\n</code></pre> <p>Use instead:</p> <pre><code>def add(a=0) -&gt; int:\nreturn a + 1\n</code></pre>","tags":["E251"]},{"location":"rules/unexpected-special-method-signature/","title":"unexpected-special-method-signature (PLE0302)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0302"]},{"location":"rules/unexpected-special-method-signature/#what-it-does","title":"What it does","text":"<p>Checks for \"special\" methods that have an unexpected method signature.</p>","tags":["PLE0302"]},{"location":"rules/unexpected-special-method-signature/#why-is-this-bad","title":"Why is this bad?","text":"<p>\"Special\" methods, like <code>__len__</code>, are expected to adhere to a specific, standard function signature. Implementing a \"special\" method using a non-standard function signature can lead to unexpected and surprising behavior for users of a given class.</p>","tags":["PLE0302"]},{"location":"rules/unexpected-special-method-signature/#example","title":"Example","text":"<pre><code>class Bookshelf:\ndef __init__(self):\nself._books = [\"Foo\", \"Bar\", \"Baz\"]\ndef __len__(self, index):  # __len__ does not except an index parameter\nreturn len(self._books)\ndef __getitem__(self, index):\nreturn self._books[index]\n</code></pre> <p>Use instead:</p> <pre><code>class Bookshelf:\ndef __init__(self):\nself._books = [\"Foo\", \"Bar\", \"Baz\"]\ndef __len__(self):\nreturn len(self._books)\ndef __getitem__(self, index):\nreturn self._books[index]\n</code></pre>","tags":["PLE0302"]},{"location":"rules/unexpected-special-method-signature/#references","title":"References","text":"<ul> <li>Python documentation: Data model</li> </ul>","tags":["PLE0302"]},{"location":"rules/unicode-kind-prefix/","title":"unicode-kind-prefix (UP025)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP025"]},{"location":"rules/unicode-kind-prefix/#what-it-does","title":"What it does","text":"<p>Checks for uses of the Unicode kind prefix (<code>u</code>) in strings.</p>","tags":["UP025"]},{"location":"rules/unicode-kind-prefix/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python 3, all strings are Unicode by default. The Unicode kind prefix is unnecessary and should be removed to avoid confusion.</p>","tags":["UP025"]},{"location":"rules/unicode-kind-prefix/#example","title":"Example","text":"<pre><code>u\"foo\"\n</code></pre> <p>Use instead:</p> <pre><code>\"foo\"\n</code></pre>","tags":["UP025"]},{"location":"rules/unicode-kind-prefix/#references","title":"References","text":"<ul> <li>Python documentation: Unicode HOWTO</li> </ul>","tags":["UP025"]},{"location":"rules/unintentional-type-annotation/","title":"unintentional-type-annotation (B032)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B032"]},{"location":"rules/unintentional-type-annotation/#what-it-does","title":"What it does","text":"<p>Checks for the unintentional use of type annotations.</p>","tags":["B032"]},{"location":"rules/unintentional-type-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of a colon (<code>:</code>) in lieu of an assignment (<code>=</code>) can be syntactically valid, but is almost certainly a mistake when used in a subscript or attribute assignment.</p>","tags":["B032"]},{"location":"rules/unintentional-type-annotation/#example","title":"Example","text":"<pre><code>a[\"b\"]: 1\n</code></pre> <p>Use instead:</p> <pre><code>a[\"b\"] = 1\n</code></pre>","tags":["B032"]},{"location":"rules/unix-command-wildcard-injection/","title":"unix-command-wildcard-injection (S609)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S609"]},{"location":"rules/unix-command-wildcard-injection/#what-it-does","title":"What it does","text":"<p>Checks for possible wildcard injections in calls to <code>subprocess.Popen()</code>.</p>","tags":["S609"]},{"location":"rules/unix-command-wildcard-injection/#why-is-this-bad","title":"Why is this bad?","text":"<p>Wildcard injections can lead to unexpected behavior if unintended files are matched by the wildcard. Consider using a more specific path instead.</p>","tags":["S609"]},{"location":"rules/unix-command-wildcard-injection/#example","title":"Example","text":"<pre><code>import subprocess\nsubprocess.Popen([\"chmod\", \"777\", \"*.py\"])\n</code></pre> <p>Use instead:</p> <pre><code>import subprocess\nsubprocess.Popen([\"chmod\", \"777\", \"main.py\"])\n</code></pre>","tags":["S609"]},{"location":"rules/unix-command-wildcard-injection/#references","title":"References","text":"<ul> <li>Common Weakness Enumeration: CWE-78</li> </ul>","tags":["S609"]},{"location":"rules/unnecessary-assign/","title":"unnecessary-assign (RET504)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is always available.</p>","tags":["RET504"]},{"location":"rules/unnecessary-assign/#what-it-does","title":"What it does","text":"<p>Checks for variable assignments that immediately precede a <code>return</code> of the assigned variable.</p>","tags":["RET504"]},{"location":"rules/unnecessary-assign/#why-is-this-bad","title":"Why is this bad?","text":"<p>The variable assignment is not necessary, as the value can be returned directly.</p>","tags":["RET504"]},{"location":"rules/unnecessary-assign/#example","title":"Example","text":"<pre><code>def foo():\nbar = 1\nreturn bar\n</code></pre> <p>Use instead:</p> <pre><code>def foo():\nreturn 1\n</code></pre>","tags":["RET504"]},{"location":"rules/unnecessary-builtin-import/","title":"unnecessary-builtin-import (UP029)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP029"]},{"location":"rules/unnecessary-builtin-import/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary imports of builtins.</p>","tags":["UP029"]},{"location":"rules/unnecessary-builtin-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Builtins are always available. Importing them is unnecessary and should be removed to avoid confusion.</p>","tags":["UP029"]},{"location":"rules/unnecessary-builtin-import/#example","title":"Example","text":"<pre><code>from builtins import str\nstr(1)\n</code></pre> <p>Use instead:</p> <pre><code>str(1)\n</code></pre>","tags":["UP029"]},{"location":"rules/unnecessary-builtin-import/#references","title":"References","text":"<ul> <li>Python documentation: The Python Standard Library</li> </ul>","tags":["UP029"]},{"location":"rules/unnecessary-call-around-sorted/","title":"unnecessary-call-around-sorted (C413)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C413"]},{"location":"rules/unnecessary-call-around-sorted/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>list</code> or <code>reversed</code> calls around <code>sorted</code> calls.</p>","tags":["C413"]},{"location":"rules/unnecessary-call-around-sorted/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is unnecessary to use <code>list</code> around <code>sorted</code>, as the latter already returns a list.</p> <p>It is also unnecessary to use <code>reversed</code> around <code>sorted</code>, as the latter has a <code>reverse</code> argument that can be used in lieu of an additional <code>reversed</code> call.</p> <p>In both cases, it's clearer to avoid the redundant call.</p>","tags":["C413"]},{"location":"rules/unnecessary-call-around-sorted/#examples","title":"Examples","text":"<pre><code>reversed(sorted(iterable))\n</code></pre> <p>Use instead:</p> <pre><code>sorted(iterable, reverse=True)\n</code></pre>","tags":["C413"]},{"location":"rules/unnecessary-call-around-sorted/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as <code>reversed</code> and <code>reverse=True</code> will yield different results in the event of custom sort keys or equality functions. Specifically, <code>reversed</code> will reverse the order of the collection, while <code>sorted</code> with <code>reverse=True</code> will perform a stable reverse sort, which will preserve the order of elements that compare as equal.</p>","tags":["C413"]},{"location":"rules/unnecessary-class-parentheses/","title":"unnecessary-class-parentheses (UP039)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP039"]},{"location":"rules/unnecessary-class-parentheses/#what-it-does","title":"What it does","text":"<p>Checks for class definitions that include unnecessary parentheses after the class name.</p>","tags":["UP039"]},{"location":"rules/unnecessary-class-parentheses/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a class definition doesn't have any bases, the parentheses are unnecessary.</p>","tags":["UP039"]},{"location":"rules/unnecessary-class-parentheses/#examples","title":"Examples","text":"<pre><code>class Foo():\n...\n</code></pre> <p>Use instead:</p> <pre><code>class Foo:\n...\n</code></pre>","tags":["UP039"]},{"location":"rules/unnecessary-collection-call/","title":"unnecessary-collection-call (C408)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C408"]},{"location":"rules/unnecessary-collection-call/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>dict</code>, <code>list</code> or <code>tuple</code> calls that can be rewritten as empty literals.</p>","tags":["C408"]},{"location":"rules/unnecessary-collection-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to call, e.g., <code>dict()</code> as opposed to using an empty literal (<code>{}</code>). The former is slower because the name <code>dict</code> must be looked up in the global scope in case it has been rebound.</p>","tags":["C408"]},{"location":"rules/unnecessary-collection-call/#examples","title":"Examples","text":"<pre><code>dict()\ndict(a=1, b=2)\nlist()\ntuple()\n</code></pre> <p>Use instead:</p> <pre><code>{}\n{\"a\": 1, \"b\": 2}\n[]\n()\n</code></pre>","tags":["C408"]},{"location":"rules/unnecessary-collection-call/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C408"]},{"location":"rules/unnecessary-collection-call/#options","title":"Options","text":"<ul> <li><code>lint.flake8-comprehensions.allow-dict-calls-with-keyword-arguments</code></li> </ul>","tags":["C408"]},{"location":"rules/unnecessary-comprehension-in-call/","title":"unnecessary-comprehension-in-call (C419)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is sometimes available.</p>","tags":["C419"]},{"location":"rules/unnecessary-comprehension-in-call/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary list or set comprehensions passed to builtin functions that take an iterable.</p> <p>Set comprehensions are only a violation in the case where the builtin function does not care about duplication of elements in the passed iterable.</p>","tags":["C419"]},{"location":"rules/unnecessary-comprehension-in-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>Many builtin functions (this rule currently covers <code>any</code> and <code>all</code> in stable, along with <code>min</code>, <code>max</code>, and <code>sum</code> in preview) accept any iterable, including a generator. Constructing a temporary list via list comprehension is unnecessary and wastes memory for large iterables.</p> <p><code>any</code> and <code>all</code> can also short-circuit iteration, saving a lot of time. The unnecessary comprehension forces a full iteration of the input iterable, giving up the benefits of short-circuiting. For example, compare the performance of <code>all</code> with a list comprehension against that of a generator in a case where an early short-circuit is possible (almost 40x faster):</p> <pre><code>In [1]: %timeit all([i for i in range(1000)])\n8.14 \u00b5s \u00b1 25.4 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\nIn [2]: %timeit all(i for i in range(1000))\n212 ns \u00b1 0.892 ns per loop (mean \u00b1 std. dev. of 7 runs, 1,000,000 loops each)\n</code></pre> <p>This performance improvement is due to short-circuiting. If the entire iterable has to be traversed, the comprehension version may even be a bit faster: list allocation overhead is not necessarily greater than generator overhead.</p> <p>Applying this rule simplifies the code and will usually save memory, but in the absence of short-circuiting it may not improve performance. (It may even slightly regress performance, though the difference will usually be small.)</p>","tags":["C419"]},{"location":"rules/unnecessary-comprehension-in-call/#examples","title":"Examples","text":"<pre><code>any([x.id for x in bar])\nall([x.id for x in bar])\nsum([x.val for x in bar])\nmin([x.val for x in bar])\nmax([x.val for x in bar])\n</code></pre> <p>Use instead:</p> <pre><code>any(x.id for x in bar)\nall(x.id for x in bar)\nsum(x.val for x in bar)\nmin(x.val for x in bar)\nmax(x.val for x in bar)\n</code></pre>","tags":["C419"]},{"location":"rules/unnecessary-comprehension-in-call/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it can change the behavior of the code if the iteration has side effects (due to laziness and short-circuiting). The fix may also drop comments when rewriting some comprehensions.</p>","tags":["C419"]},{"location":"rules/unnecessary-comprehension/","title":"unnecessary-comprehension (C416)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C416"]},{"location":"rules/unnecessary-comprehension/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>dict</code>, <code>list</code>, and <code>set</code> comprehension.</p>","tags":["C416"]},{"location":"rules/unnecessary-comprehension/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a <code>dict</code>/<code>list</code>/<code>set</code> comprehension to build a data structure if the elements are unchanged. Wrap the iterable with <code>dict()</code>, <code>list()</code>, or <code>set()</code> instead.</p>","tags":["C416"]},{"location":"rules/unnecessary-comprehension/#examples","title":"Examples","text":"<pre><code>{a: b for a, b in iterable}\n[x for x in iterable]\n{x for x in iterable}\n</code></pre> <p>Use instead:</p> <pre><code>dict(iterable)\nlist(iterable)\nset(iterable)\n</code></pre>","tags":["C416"]},{"location":"rules/unnecessary-comprehension/#known-problems","title":"Known problems","text":"<p>This rule may produce false positives for dictionary comprehensions that iterate over a mapping. The <code>dict</code> constructor behaves differently depending on if it receives a sequence (e.g., a <code>list</code>) or a mapping (e.g., a <code>dict</code>). When a comprehension iterates over the keys of a mapping, replacing it with a <code>dict</code> constructor call will give a different result.</p> <p>For example:</p> <pre><code>&gt;&gt;&gt; d1 = {(1, 2): 3, (4, 5): 6}\n&gt;&gt;&gt; {x: y for x, y in d1}  # Iterates over the keys of a mapping\n{1: 2, 4: 5}\n&gt;&gt;&gt; dict(d1)               # Ruff's incorrect suggested fix\n(1, 2): 3, (4, 5): 6}\n&gt;&gt;&gt; dict(d1.keys())        # Correct fix\n{1: 2, 4: 5}\n</code></pre> <p>When the comprehension iterates over a sequence, Ruff's suggested fix is correct. However, Ruff cannot consistently infer if the iterable type is a sequence or a mapping and cannot suggest the correct fix for mappings.</p>","tags":["C416"]},{"location":"rules/unnecessary-comprehension/#fix-safety","title":"Fix safety","text":"<p>Due to the known problem with dictionary comprehensions, this fix is marked as unsafe.</p> <p>Additionally, this fix may drop comments when rewriting the comprehension.</p>","tags":["C416"]},{"location":"rules/unnecessary-default-type-args/","title":"unnecessary-default-type-args (UP043)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP043"]},{"location":"rules/unnecessary-default-type-args/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary default type arguments for <code>Generator</code> and <code>AsyncGenerator</code> on Python 3.13+.</p>","tags":["UP043"]},{"location":"rules/unnecessary-default-type-args/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python 3.13 introduced the ability for type parameters to specify default values. Following this change, several standard-library classes were updated to add default values for some of their type parameters. For example, <code>Generator[int]</code> is now equivalent to <code>Generator[int, None, None]</code>, as the second and third type parameters of <code>Generator</code> now default to <code>None</code>.</p> <p>Omitting type arguments that match the default values can make the code more concise and easier to read.</p>","tags":["UP043"]},{"location":"rules/unnecessary-default-type-args/#examples","title":"Examples","text":"<pre><code>from collections.abc import Generator, AsyncGenerator\ndef sync_gen() -&gt; Generator[int, None, None]:\nyield 42\nasync def async_gen() -&gt; AsyncGenerator[int, None]:\nyield 42\n</code></pre> <p>Use instead:</p> <pre><code>from collections.abc import Generator, AsyncGenerator\ndef sync_gen() -&gt; Generator[int]:\nyield 42\nasync def async_gen() -&gt; AsyncGenerator[int]:\nyield 42\n</code></pre>","tags":["UP043"]},{"location":"rules/unnecessary-default-type-args/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as safe, unless the type annotation contains comments.</p>","tags":["UP043"]},{"location":"rules/unnecessary-default-type-args/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["UP043"]},{"location":"rules/unnecessary-default-type-args/#references","title":"References","text":"<ul> <li>PEP 696 \u2013 Type Defaults for Type Parameters</li> <li>Annotating generators and coroutines</li> <li>Python documentation: <code>typing.Generator</code></li> <li>Python documentation: <code>typing.AsyncGenerator</code></li> </ul>","tags":["UP043"]},{"location":"rules/unnecessary-dict-comprehension-for-iterable/","title":"unnecessary-dict-comprehension-for-iterable (C420)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["C420"]},{"location":"rules/unnecessary-dict-comprehension-for-iterable/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>dict</code> comprehension when creating a dictionary from an iterable.</p>","tags":["C420"]},{"location":"rules/unnecessary-dict-comprehension-for-iterable/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a <code>dict</code> comprehension to build a dictionary from an iterable when the value is static.</p> <p>Prefer <code>dict.fromkeys(iterable)</code> over <code>{value: None for value in iterable}</code>, as <code>dict.fromkeys</code> is more readable and efficient.</p>","tags":["C420"]},{"location":"rules/unnecessary-dict-comprehension-for-iterable/#examples","title":"Examples","text":"<pre><code>{a: None for a in iterable}\n{a: 1 for a in iterable}\n</code></pre> <p>Use instead:</p> <pre><code>dict.fromkeys(iterable)\ndict.fromkeys(iterable, 1)\n</code></pre>","tags":["C420"]},{"location":"rules/unnecessary-dict-comprehension-for-iterable/#references","title":"References","text":"<ul> <li>Python documentation: <code>dict.fromkeys</code></li> </ul>","tags":["C420"]},{"location":"rules/unnecessary-dict-index-lookup/","title":"unnecessary-dict-index-lookup (PLR1733)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLR1733"]},{"location":"rules/unnecessary-dict-index-lookup/#what-it-does","title":"What it does","text":"<p>Checks for key-based dict accesses during <code>.items()</code> iterations.</p>","tags":["PLR1733"]},{"location":"rules/unnecessary-dict-index-lookup/#why-is-this-bad","title":"Why is this bad?","text":"<p>When iterating over a dict via <code>.items()</code>, the current value is already available alongside its key. Using the key to look up the value is unnecessary.</p>","tags":["PLR1733"]},{"location":"rules/unnecessary-dict-index-lookup/#example","title":"Example","text":"<pre><code>FRUITS = {\"apple\": 1, \"orange\": 10, \"berry\": 22}\nfor fruit_name, fruit_count in FRUITS.items():\nprint(FRUITS[fruit_name])\n</code></pre> <p>Use instead:</p> <pre><code>FRUITS = {\"apple\": 1, \"orange\": 10, \"berry\": 22}\nfor fruit_name, fruit_count in FRUITS.items():\nprint(fruit_count)\n</code></pre>","tags":["PLR1733"]},{"location":"rules/unnecessary-dict-kwargs/","title":"unnecessary-dict-kwargs (PIE804)","text":"<p>Derived from the flake8-pie linter.</p> <p>Fix is sometimes available.</p>","tags":["PIE804"]},{"location":"rules/unnecessary-dict-kwargs/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>dict</code> kwargs.</p>","tags":["PIE804"]},{"location":"rules/unnecessary-dict-kwargs/#why-is-this-bad","title":"Why is this bad?","text":"<p>If the <code>dict</code> keys are valid identifiers, they can be passed as keyword arguments directly.</p>","tags":["PIE804"]},{"location":"rules/unnecessary-dict-kwargs/#example","title":"Example","text":"<pre><code>def foo(bar):\nreturn bar + 1\nprint(foo(**{\"bar\": 2}))  # prints 3\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar):\nreturn bar + 1\nprint(foo(bar=2))  # prints 3\n</code></pre>","tags":["PIE804"]},{"location":"rules/unnecessary-dict-kwargs/#references","title":"References","text":"<ul> <li>Python documentation: Dictionary displays</li> <li>Python documentation: Calls</li> </ul>","tags":["PIE804"]},{"location":"rules/unnecessary-direct-lambda-call/","title":"unnecessary-direct-lambda-call (PLC3002)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLC3002"]},{"location":"rules/unnecessary-direct-lambda-call/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary direct calls to lambda expressions.</p>","tags":["PLC3002"]},{"location":"rules/unnecessary-direct-lambda-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>Calling a lambda expression directly is unnecessary. The expression can be executed inline instead to improve readability.</p>","tags":["PLC3002"]},{"location":"rules/unnecessary-direct-lambda-call/#example","title":"Example","text":"<pre><code>area = (lambda r: 3.14 * r**2)(radius)\n</code></pre> <p>Use instead:</p> <pre><code>area = 3.14 * radius**2\n</code></pre>","tags":["PLC3002"]},{"location":"rules/unnecessary-direct-lambda-call/#references","title":"References","text":"<ul> <li>Python documentation: Lambdas</li> </ul>","tags":["PLC3002"]},{"location":"rules/unnecessary-double-cast-or-process/","title":"unnecessary-double-cast-or-process (C414)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C414"]},{"location":"rules/unnecessary-double-cast-or-process/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>list</code>, <code>reversed</code>, <code>set</code>, <code>sorted</code>, and <code>tuple</code> call within <code>list</code>, <code>set</code>, <code>sorted</code>, and <code>tuple</code> calls.</p>","tags":["C414"]},{"location":"rules/unnecessary-double-cast-or-process/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to double-cast or double-process iterables by wrapping the listed functions within an additional <code>list</code>, <code>set</code>, <code>sorted</code>, or <code>tuple</code> call. Doing so is redundant and can be confusing for readers.</p>","tags":["C414"]},{"location":"rules/unnecessary-double-cast-or-process/#examples","title":"Examples","text":"<pre><code>list(tuple(iterable))\n</code></pre> <p>Use instead:</p> <pre><code>list(iterable)\n</code></pre> <p>This rule applies to a variety of functions, including <code>list</code>, <code>reversed</code>, <code>set</code>, <code>sorted</code>, and <code>tuple</code>. For example:</p> <ul> <li>Instead of <code>list(list(iterable))</code>, use <code>list(iterable)</code>.</li> <li>Instead of <code>list(tuple(iterable))</code>, use <code>list(iterable)</code>.</li> <li>Instead of <code>tuple(list(iterable))</code>, use <code>tuple(iterable)</code>.</li> <li>Instead of <code>tuple(tuple(iterable))</code>, use <code>tuple(iterable)</code>.</li> <li>Instead of <code>set(set(iterable))</code>, use <code>set(iterable)</code>.</li> <li>Instead of <code>set(list(iterable))</code>, use <code>set(iterable)</code>.</li> <li>Instead of <code>set(tuple(iterable))</code>, use <code>set(iterable)</code>.</li> <li>Instead of <code>set(sorted(iterable))</code>, use <code>set(iterable)</code>.</li> <li>Instead of <code>set(reversed(iterable))</code>, use <code>set(iterable)</code>.</li> <li>Instead of <code>sorted(list(iterable))</code>, use <code>sorted(iterable)</code>.</li> <li>Instead of <code>sorted(tuple(iterable))</code>, use <code>sorted(iterable)</code>.</li> <li>Instead of <code>sorted(sorted(iterable))</code>, use <code>sorted(iterable)</code>.</li> <li>Instead of <code>sorted(reversed(iterable))</code>, use <code>sorted(iterable)</code>.</li> </ul>","tags":["C414"]},{"location":"rules/unnecessary-double-cast-or-process/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C414"]},{"location":"rules/unnecessary-dunder-call/","title":"unnecessary-dunder-call (PLC2801)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLC2801"]},{"location":"rules/unnecessary-dunder-call/#what-it-does","title":"What it does","text":"<p>Checks for explicit use of dunder methods, like <code>__str__</code> and <code>__add__</code>.</p>","tags":["PLC2801"]},{"location":"rules/unnecessary-dunder-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>Dunder names are not meant to be called explicitly and, in most cases, can be replaced with builtins or operators.</p>","tags":["PLC2801"]},{"location":"rules/unnecessary-dunder-call/#example","title":"Example","text":"<pre><code>three = (3.0).__str__()\ntwelve = \"1\".__add__(\"2\")\ndef is_greater_than_two(x: int) -&gt; bool:\nreturn x.__gt__(2)\n</code></pre> <p>Use instead:</p> <pre><code>three = str(3.0)\ntwelve = \"1\" + \"2\"\ndef is_greater_than_two(x: int) -&gt; bool:\nreturn x &gt; 2\n</code></pre>","tags":["PLC2801"]},{"location":"rules/unnecessary-encode-utf8/","title":"unnecessary-encode-utf8 (UP012)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP012"]},{"location":"rules/unnecessary-encode-utf8/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary calls to <code>encode</code> as UTF-8.</p>","tags":["UP012"]},{"location":"rules/unnecessary-encode-utf8/#why-is-this-bad","title":"Why is this bad?","text":"<p>UTF-8 is the default encoding in Python, so there is no need to call <code>encode</code> when UTF-8 is the desired encoding. Instead, use a bytes literal.</p>","tags":["UP012"]},{"location":"rules/unnecessary-encode-utf8/#example","title":"Example","text":"<pre><code>\"foo\".encode(\"utf-8\")\n</code></pre> <p>Use instead:</p> <pre><code>b\"foo\"\n</code></pre>","tags":["UP012"]},{"location":"rules/unnecessary-encode-utf8/#references","title":"References","text":"<ul> <li>Python documentation: <code>str.encode</code></li> </ul>","tags":["UP012"]},{"location":"rules/unnecessary-enumerate/","title":"unnecessary-enumerate (FURB148)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB148"]},{"location":"rules/unnecessary-enumerate/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>enumerate</code> that discard either the index or the value when iterating over a sequence.</p>","tags":["FURB148"]},{"location":"rules/unnecessary-enumerate/#why-is-this-bad","title":"Why is this bad?","text":"<p>The built-in <code>enumerate</code> function is useful when you need both the index and value of a sequence.</p> <p>If you only need the index or values of a sequence, you should iterate over <code>range(len(...))</code> or the sequence itself, respectively, instead. This is more efficient and communicates the intent of the code more clearly.</p>","tags":["FURB148"]},{"location":"rules/unnecessary-enumerate/#known-problems","title":"Known problems","text":"<p>This rule is prone to false negatives due to type inference limitations; namely, it will only suggest a fix using the <code>len</code> builtin function if the sequence passed to <code>enumerate</code> is an instantiated as a list, set, dict, or tuple literal, or annotated as such with a type annotation.</p> <p>The <code>len</code> builtin function is not defined for all object types (such as generators), and so refactoring to use <code>len</code> over <code>enumerate</code> is not always safe.</p>","tags":["FURB148"]},{"location":"rules/unnecessary-enumerate/#example","title":"Example","text":"<pre><code>for index, _ in enumerate(sequence):\nprint(index)\nfor _, value in enumerate(sequence):\nprint(value)\n</code></pre> <p>Use instead:</p> <pre><code>for index in range(len(sequence)):\nprint(index)\nfor value in sequence:\nprint(value)\n</code></pre>","tags":["FURB148"]},{"location":"rules/unnecessary-enumerate/#references","title":"References","text":"<ul> <li>Python documentation: <code>enumerate</code></li> <li>Python documentation: <code>range</code></li> <li>Python documentation: <code>len</code></li> </ul>","tags":["FURB148"]},{"location":"rules/unnecessary-escaped-quote/","title":"unnecessary-escaped-quote (Q004)","text":"<p>Derived from the flake8-quotes linter.</p> <p>Fix is always available.</p>","tags":["Q004"]},{"location":"rules/unnecessary-escaped-quote/#what-it-does","title":"What it does","text":"<p>Checks for strings that include unnecessarily escaped quotes.</p>","tags":["Q004"]},{"location":"rules/unnecessary-escaped-quote/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a string contains an escaped quote that doesn't match the quote character used for the string, it's unnecessary and can be removed.</p>","tags":["Q004"]},{"location":"rules/unnecessary-escaped-quote/#example","title":"Example","text":"<pre><code>foo = \"bar\\'s\"\n</code></pre> <p>Use instead:</p> <pre><code>foo = \"bar's\"\n</code></pre>","tags":["Q004"]},{"location":"rules/unnecessary-escaped-quote/#formatter-compatibility","title":"Formatter compatibility","text":"<p>We recommend against using this rule alongside the formatter. The formatter automatically removes unnecessary escapes, making the rule redundant.</p>","tags":["Q004"]},{"location":"rules/unnecessary-from-float/","title":"unnecessary-from-float (FURB164)","text":"<p>Derived from the refurb linter.</p> <p>Fix is sometimes available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB164"]},{"location":"rules/unnecessary-from-float/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>from_float</code> and <code>from_decimal</code> usages to construct <code>Decimal</code> and <code>Fraction</code> instances.</p>","tags":["FURB164"]},{"location":"rules/unnecessary-from-float/#why-is-this-bad","title":"Why is this bad?","text":"<p>Since Python 3.2, the <code>Fraction</code> and <code>Decimal</code> classes can be constructed by passing float or decimal instances to the constructor directly. As such, the use of <code>from_float</code> and <code>from_decimal</code> methods is unnecessary, and should be avoided in favor of the more concise constructor syntax.</p>","tags":["FURB164"]},{"location":"rules/unnecessary-from-float/#examples","title":"Examples","text":"<pre><code>Decimal.from_float(4.2)\nDecimal.from_float(float(\"inf\"))\nFraction.from_float(4.2)\nFraction.from_decimal(Decimal(\"4.2\"))\n</code></pre> <p>Use instead:</p> <pre><code>Decimal(4.2)\nDecimal(\"inf\")\nFraction(4.2)\nFraction(Decimal(4.2))\n</code></pre>","tags":["FURB164"]},{"location":"rules/unnecessary-from-float/#references","title":"References","text":"<ul> <li>Python documentation: <code>decimal</code></li> <li>Python documentation: <code>fractions</code></li> </ul>","tags":["FURB164"]},{"location":"rules/unnecessary-future-import/","title":"unnecessary-future-import (UP010)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP010"]},{"location":"rules/unnecessary-future-import/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>__future__</code> imports.</p>","tags":["UP010"]},{"location":"rules/unnecessary-future-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__future__</code> module is used to enable features that are not yet available in the current Python version. If a feature is already available in the minimum supported Python version, importing it from <code>__future__</code> is unnecessary and should be removed to avoid confusion.</p>","tags":["UP010"]},{"location":"rules/unnecessary-future-import/#example","title":"Example","text":"<pre><code>from __future__ import print_function\nprint(\"Hello, world!\")\n</code></pre> <p>Use instead:</p> <pre><code>print(\"Hello, world!\")\n</code></pre>","tags":["UP010"]},{"location":"rules/unnecessary-future-import/#options","title":"Options","text":"<ul> <li><code>target-version</code></li> </ul>","tags":["UP010"]},{"location":"rules/unnecessary-future-import/#references","title":"References","text":"<ul> <li>Python documentation: <code>__future__</code> \u2014 Future statement definitions</li> </ul>","tags":["UP010"]},{"location":"rules/unnecessary-generator-dict/","title":"unnecessary-generator-dict (C402)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C402"]},{"location":"rules/unnecessary-generator-dict/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary generators that can be rewritten as <code>dict</code> comprehensions.</p>","tags":["C402"]},{"location":"rules/unnecessary-generator-dict/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is unnecessary to use <code>dict</code> around a generator expression, since there are equivalent comprehensions for these types. Using a comprehension is clearer and more idiomatic.</p>","tags":["C402"]},{"location":"rules/unnecessary-generator-dict/#examples","title":"Examples","text":"<pre><code>dict((x, f(x)) for x in foo)\n</code></pre> <p>Use instead:</p> <pre><code>{x: f(x) for x in foo}\n</code></pre>","tags":["C402"]},{"location":"rules/unnecessary-generator-dict/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C402"]},{"location":"rules/unnecessary-generator-list/","title":"unnecessary-generator-list (C400)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C400"]},{"location":"rules/unnecessary-generator-list/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary generators that can be rewritten as <code>list</code> comprehensions (or with <code>list</code> directly).</p>","tags":["C400"]},{"location":"rules/unnecessary-generator-list/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is unnecessary to use <code>list</code> around a generator expression, since there are equivalent comprehensions for these types. Using a comprehension is clearer and more idiomatic.</p> <p>Further, if the comprehension can be removed entirely, as in the case of <code>list(x for x in foo)</code>, it's better to use <code>list(foo)</code> directly, since it's even more direct.</p>","tags":["C400"]},{"location":"rules/unnecessary-generator-list/#examples","title":"Examples","text":"<pre><code>list(f(x) for x in foo)\nlist(x for x in foo)\nlist((x for x in foo))\n</code></pre> <p>Use instead:</p> <pre><code>[f(x) for x in foo]\nlist(foo)\nlist(foo)\n</code></pre>","tags":["C400"]},{"location":"rules/unnecessary-generator-list/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C400"]},{"location":"rules/unnecessary-generator-set/","title":"unnecessary-generator-set (C401)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C401"]},{"location":"rules/unnecessary-generator-set/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary generators that can be rewritten as <code>set</code> comprehensions (or with <code>set</code> directly).</p>","tags":["C401"]},{"location":"rules/unnecessary-generator-set/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is unnecessary to use <code>set</code> around a generator expression, since there are equivalent comprehensions for these types. Using a comprehension is clearer and more idiomatic.</p> <p>Further, if the comprehension can be removed entirely, as in the case of <code>set(x for x in foo)</code>, it's better to use <code>set(foo)</code> directly, since it's even more direct.</p>","tags":["C401"]},{"location":"rules/unnecessary-generator-set/#examples","title":"Examples","text":"<pre><code>set(f(x) for x in foo)\nset(x for x in foo)\n</code></pre> <p>Use instead:</p> <pre><code>{f(x) for x in foo}\nset(foo)\n</code></pre>","tags":["C401"]},{"location":"rules/unnecessary-generator-set/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C401"]},{"location":"rules/unnecessary-iterable-allocation-for-first-element/","title":"unnecessary-iterable-allocation-for-first-element (RUF015)","text":"<p>Fix is always available.</p>","tags":["RUF015"]},{"location":"rules/unnecessary-iterable-allocation-for-first-element/#what-it-does","title":"What it does","text":"<p>Checks the following constructs, all of which can be replaced by <code>next(iter(...))</code>:</p> <ul> <li><code>list(...)[0]</code></li> <li><code>tuple(...)[0]</code></li> <li><code>list(i for i in ...)[0]</code></li> <li><code>[i for i in ...][0]</code></li> <li><code>list(...).pop(0)</code></li> </ul>","tags":["RUF015"]},{"location":"rules/unnecessary-iterable-allocation-for-first-element/#why-is-this-bad","title":"Why is this bad?","text":"<p>Calling e.g. <code>list(...)</code> will create a new list of the entire collection, which can be very expensive for large collections. If you only need the first element of the collection, you can use <code>next(...)</code> or <code>next(iter(...)</code> to lazily fetch the first element. The same is true for the other constructs.</p>","tags":["RUF015"]},{"location":"rules/unnecessary-iterable-allocation-for-first-element/#example","title":"Example","text":"<pre><code>head = list(x)[0]\nhead = [x * x for x in range(10)][0]\n</code></pre> <p>Use instead:</p> <pre><code>head = next(iter(x))\nhead = next(x * x for x in range(10))\n</code></pre>","tags":["RUF015"]},{"location":"rules/unnecessary-iterable-allocation-for-first-element/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as migrating from (e.g.) <code>list(...)[0]</code> to <code>next(iter(...))</code> can change the behavior of your program in two ways:</p> <ol> <li>First, all above-mentioned constructs will eagerly evaluate the entire     collection, while <code>next(iter(...))</code> will only evaluate the first     element. As such, any side effects that occur during iteration will be     delayed.</li> <li>Second, accessing members of a collection via square bracket notation     <code>[0]</code> of the <code>pop()</code> function will raise <code>IndexError</code> if the collection     is empty, while <code>next(iter(...))</code> will raise <code>StopIteration</code>.</li> </ol>","tags":["RUF015"]},{"location":"rules/unnecessary-iterable-allocation-for-first-element/#references","title":"References","text":"<ul> <li>Iterators and Iterables in Python: Run Efficient Iterations</li> </ul>","tags":["RUF015"]},{"location":"rules/unnecessary-key-check/","title":"unnecessary-key-check (RUF019)","text":"<p>Fix is always available.</p>","tags":["RUF019"]},{"location":"rules/unnecessary-key-check/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary key checks prior to accessing a dictionary.</p>","tags":["RUF019"]},{"location":"rules/unnecessary-key-check/#why-is-this-bad","title":"Why is this bad?","text":"<p>When working with dictionaries, the <code>get</code> can be used to access a value without having to check if the dictionary contains the relevant key, returning <code>None</code> if the key is not present.</p>","tags":["RUF019"]},{"location":"rules/unnecessary-key-check/#examples","title":"Examples","text":"<pre><code>if \"key\" in dct and dct[\"key\"]:\n...\n</code></pre> <p>Use instead:</p> <pre><code>if dct.get(\"key\"):\n...\n</code></pre>","tags":["RUF019"]},{"location":"rules/unnecessary-lambda/","title":"unnecessary-lambda (PLW0108)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLW0108"]},{"location":"rules/unnecessary-lambda/#what-it-does","title":"What it does","text":"<p>Checks for <code>lambda</code> definitions that consist of a single function call with the same arguments as the <code>lambda</code> itself.</p>","tags":["PLW0108"]},{"location":"rules/unnecessary-lambda/#why-is-this-bad","title":"Why is this bad?","text":"<p>When a <code>lambda</code> is used to wrap a function call, and merely propagates the <code>lambda</code> arguments to that function, it can typically be replaced with the function itself, removing a level of indirection.</p>","tags":["PLW0108"]},{"location":"rules/unnecessary-lambda/#example","title":"Example","text":"<pre><code>df.apply(lambda x: str(x))\n</code></pre> <p>Use instead:</p> <pre><code>df.apply(str)\n</code></pre>","tags":["PLW0108"]},{"location":"rules/unnecessary-lambda/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe for two primary reasons.</p> <p>First, the lambda body itself could contain an effect.</p> <p>For example, replacing <code>lambda x, y: (func()(x, y))</code> with <code>func()</code> would lead to a change in behavior, as <code>func()</code> would be evaluated eagerly when defining the lambda, rather than when the lambda is called.</p> <p>However, even when the lambda body itself is pure, the lambda may change the argument names, which can lead to a change in behavior when callers pass arguments by name.</p> <p>For example, replacing <code>foo = lambda x, y: func(x, y)</code> with <code>foo = func</code>, where <code>func</code> is defined as <code>def func(a, b): return a + b</code>, would be a breaking change for callers that execute the lambda by passing arguments by name, as in: <code>foo(x=1, y=2)</code>. Since <code>func</code> does not define the arguments <code>x</code> and <code>y</code>, unlike the lambda, the call would raise a <code>TypeError</code>.</p>","tags":["PLW0108"]},{"location":"rules/unnecessary-list-call/","title":"unnecessary-list-call (C411)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C411"]},{"location":"rules/unnecessary-list-call/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>list</code> calls around list comprehensions.</p>","tags":["C411"]},{"location":"rules/unnecessary-list-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>It is redundant to use a <code>list</code> call around a list comprehension.</p>","tags":["C411"]},{"location":"rules/unnecessary-list-call/#examples","title":"Examples","text":"<pre><code>list([f(x) for x in foo])\n</code></pre> <p>Use instead</p> <pre><code>[f(x) for x in foo]\n</code></pre>","tags":["C411"]},{"location":"rules/unnecessary-list-call/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C411"]},{"location":"rules/unnecessary-list-cast/","title":"unnecessary-list-cast (PERF101)","text":"<p>Derived from the Perflint linter.</p> <p>Fix is always available.</p>","tags":["PERF101"]},{"location":"rules/unnecessary-list-cast/#what-it-does","title":"What it does","text":"<p>Checks for explicit casts to <code>list</code> on for-loop iterables.</p>","tags":["PERF101"]},{"location":"rules/unnecessary-list-cast/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using a <code>list()</code> call to eagerly iterate over an already-iterable type (like a tuple, list, or set) is inefficient, as it forces Python to create a new list unnecessarily.</p> <p>Removing the <code>list()</code> call will not change the behavior of the code, but may improve performance.</p> <p>Note that, as with all <code>perflint</code> rules, this is only intended as a micro-optimization, and will have a negligible impact on performance in most cases.</p>","tags":["PERF101"]},{"location":"rules/unnecessary-list-cast/#example","title":"Example","text":"<pre><code>items = (1, 2, 3)\nfor i in list(items):\nprint(i)\n</code></pre> <p>Use instead:</p> <pre><code>items = (1, 2, 3)\nfor i in items:\nprint(i)\n</code></pre>","tags":["PERF101"]},{"location":"rules/unnecessary-list-comprehension-dict/","title":"unnecessary-list-comprehension-dict (C404)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C404"]},{"location":"rules/unnecessary-list-comprehension-dict/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary list comprehensions.</p>","tags":["C404"]},{"location":"rules/unnecessary-list-comprehension-dict/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a list comprehension inside a call to <code>dict</code>, since there is an equivalent comprehension for this type.</p>","tags":["C404"]},{"location":"rules/unnecessary-list-comprehension-dict/#examples","title":"Examples","text":"<pre><code>dict([(x, f(x)) for x in foo])\n</code></pre> <p>Use instead:</p> <pre><code>{x: f(x) for x in foo}\n</code></pre>","tags":["C404"]},{"location":"rules/unnecessary-list-comprehension-dict/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C404"]},{"location":"rules/unnecessary-list-comprehension-set/","title":"unnecessary-list-comprehension-set (C403)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C403"]},{"location":"rules/unnecessary-list-comprehension-set/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary list comprehensions.</p>","tags":["C403"]},{"location":"rules/unnecessary-list-comprehension-set/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a list comprehension inside a call to <code>set</code>, since there is an equivalent comprehension for this type.</p>","tags":["C403"]},{"location":"rules/unnecessary-list-comprehension-set/#examples","title":"Examples","text":"<pre><code>set([f(x) for x in foo])\n</code></pre> <p>Use instead:</p> <pre><code>{f(x) for x in foo}\n</code></pre>","tags":["C403"]},{"location":"rules/unnecessary-list-comprehension-set/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C403"]},{"location":"rules/unnecessary-list-index-lookup/","title":"unnecessary-list-index-lookup (PLR1736)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLR1736"]},{"location":"rules/unnecessary-list-index-lookup/#what-it-does","title":"What it does","text":"<p>Checks for index-based list accesses during <code>enumerate</code> iterations.</p>","tags":["PLR1736"]},{"location":"rules/unnecessary-list-index-lookup/#why-is-this-bad","title":"Why is this bad?","text":"<p>When iterating over a list with <code>enumerate</code>, the current item is already available alongside its index. Using the index to look up the item is unnecessary.</p>","tags":["PLR1736"]},{"location":"rules/unnecessary-list-index-lookup/#example","title":"Example","text":"<pre><code>letters = [\"a\", \"b\", \"c\"]\nfor index, letter in enumerate(letters):\nprint(letters[index])\n</code></pre> <p>Use instead:</p> <pre><code>letters = [\"a\", \"b\", \"c\"]\nfor index, letter in enumerate(letters):\nprint(letter)\n</code></pre>","tags":["PLR1736"]},{"location":"rules/unnecessary-literal-dict/","title":"unnecessary-literal-dict (C406)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C406"]},{"location":"rules/unnecessary-literal-dict/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>list</code> or <code>tuple</code> literals.</p>","tags":["C406"]},{"location":"rules/unnecessary-literal-dict/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a list or tuple literal within a call to <code>dict</code>. It can be rewritten as a dict literal (<code>{}</code>).</p>","tags":["C406"]},{"location":"rules/unnecessary-literal-dict/#examples","title":"Examples","text":"<pre><code>dict([(1, 2), (3, 4)])\ndict(((1, 2), (3, 4)))\ndict([])\n</code></pre> <p>Use instead:</p> <pre><code>{1: 2, 3: 4}\n{1: 2, 3: 4}\n{}\n</code></pre>","tags":["C406"]},{"location":"rules/unnecessary-literal-dict/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C406"]},{"location":"rules/unnecessary-literal-set/","title":"unnecessary-literal-set (C405)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C405"]},{"location":"rules/unnecessary-literal-set/#what-it-does","title":"What it does","text":"<p>Checks for <code>set</code> calls that take unnecessary <code>list</code> or <code>tuple</code> literals as arguments.</p>","tags":["C405"]},{"location":"rules/unnecessary-literal-set/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a list or tuple literal within a call to <code>set</code>. Instead, the expression can be rewritten as a set literal.</p>","tags":["C405"]},{"location":"rules/unnecessary-literal-set/#examples","title":"Examples","text":"<pre><code>set([1, 2])\nset((1, 2))\nset([])\n</code></pre> <p>Use instead:</p> <pre><code>{1, 2}\n{1, 2}\nset()\n</code></pre>","tags":["C405"]},{"location":"rules/unnecessary-literal-set/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C405"]},{"location":"rules/unnecessary-literal-union/","title":"unnecessary-literal-union (PYI030)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI030"]},{"location":"rules/unnecessary-literal-union/#what-it-does","title":"What it does","text":"<p>Checks for the presence of multiple literal types in a union.</p>","tags":["PYI030"]},{"location":"rules/unnecessary-literal-union/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>Literal[\"foo\", 42]</code> has identical semantics to <code>Literal[\"foo\"] | Literal[42]</code>, but is clearer and more concise.</p>","tags":["PYI030"]},{"location":"rules/unnecessary-literal-union/#example","title":"Example","text":"<pre><code>from typing import Literal\nfield: Literal[1] | Literal[2] | str\n</code></pre> <p>Use instead:</p> <pre><code>from typing import Literal\nfield: Literal[1, 2] | str\n</code></pre>","tags":["PYI030"]},{"location":"rules/unnecessary-literal-union/#references","title":"References","text":"<ul> <li>Python documentation: <code>typing.Literal</code></li> </ul>","tags":["PYI030"]},{"location":"rules/unnecessary-literal-within-dict-call/","title":"unnecessary-literal-within-dict-call (C418)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C418"]},{"location":"rules/unnecessary-literal-within-dict-call/#what-it-does","title":"What it does","text":"<p>Checks for <code>dict</code> calls that take unnecessary <code>dict</code> literals or <code>dict</code> comprehensions as arguments.</p>","tags":["C418"]},{"location":"rules/unnecessary-literal-within-dict-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to wrap a <code>dict</code> literal or comprehension within a <code>dict</code> call, since the literal or comprehension syntax already returns a <code>dict</code>.</p>","tags":["C418"]},{"location":"rules/unnecessary-literal-within-dict-call/#examples","title":"Examples","text":"<pre><code>dict({})\ndict({\"a\": 1})\n</code></pre> <p>Use instead:</p> <pre><code>{}\n{\"a\": 1}\n</code></pre>","tags":["C418"]},{"location":"rules/unnecessary-literal-within-dict-call/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C418"]},{"location":"rules/unnecessary-literal-within-list-call/","title":"unnecessary-literal-within-list-call (C410)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C410"]},{"location":"rules/unnecessary-literal-within-list-call/#what-it-does","title":"What it does","text":"<p>Checks for <code>list</code> calls that take unnecessary list or tuple literals as arguments.</p>","tags":["C410"]},{"location":"rules/unnecessary-literal-within-list-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a list or tuple literal within a <code>list()</code> call, since there is a literal syntax for these types.</p> <p>If a list literal is passed in, then the outer call to <code>list()</code> should be removed. Otherwise, if a tuple literal is passed in, then it should be rewritten as a <code>list</code> literal.</p>","tags":["C410"]},{"location":"rules/unnecessary-literal-within-list-call/#examples","title":"Examples","text":"<pre><code>list([1, 2])\nlist((1, 2))\n</code></pre> <p>Use instead:</p> <pre><code>[1, 2]\n[1, 2]\n</code></pre>","tags":["C410"]},{"location":"rules/unnecessary-literal-within-list-call/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C410"]},{"location":"rules/unnecessary-literal-within-tuple-call/","title":"unnecessary-literal-within-tuple-call (C409)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is always available.</p>","tags":["C409"]},{"location":"rules/unnecessary-literal-within-tuple-call/#what-it-does","title":"What it does","text":"<p>Checks for <code>tuple</code> calls that take unnecessary list or tuple literals as arguments. In preview, this also includes unnecessary list comprehensions within tuple calls.</p>","tags":["C409"]},{"location":"rules/unnecessary-literal-within-tuple-call/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to use a list or tuple literal within a <code>tuple()</code> call, since there is a literal syntax for these types.</p> <p>If a list literal was passed, then it should be rewritten as a <code>tuple</code> literal. Otherwise, if a tuple literal was passed, then the outer call to <code>tuple()</code> should be removed.</p> <p>In preview, this rule also checks for list comprehensions within <code>tuple()</code> calls. If a list comprehension is found, it should be rewritten as a generator expression.</p>","tags":["C409"]},{"location":"rules/unnecessary-literal-within-tuple-call/#examples","title":"Examples","text":"<pre><code>tuple([1, 2])\ntuple((1, 2))\ntuple([x for x in range(10)])\n</code></pre> <p>Use instead:</p> <pre><code>(1, 2)\n(1, 2)\ntuple(x for x in range(10))\n</code></pre>","tags":["C409"]},{"location":"rules/unnecessary-literal-within-tuple-call/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C409"]},{"location":"rules/unnecessary-map/","title":"unnecessary-map (C417)","text":"<p>Derived from the flake8-comprehensions linter.</p> <p>Fix is sometimes available.</p>","tags":["C417"]},{"location":"rules/unnecessary-map/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>map</code> calls with <code>lambda</code> functions.</p>","tags":["C417"]},{"location":"rules/unnecessary-map/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>map(func, iterable)</code> when <code>func</code> is a <code>lambda</code> is slower than using a generator expression or a comprehension, as the latter approach avoids the function call overhead, in addition to being more readable.</p> <p>This rule also applies to <code>map</code> calls within <code>list</code>, <code>set</code>, and <code>dict</code> calls. For example:</p> <ul> <li>Instead of <code>list(map(lambda num: num * 2, nums))</code>, use     <code>[num * 2 for num in nums]</code>.</li> <li>Instead of <code>set(map(lambda num: num % 2 == 0, nums))</code>, use     <code>{num % 2 == 0 for num in nums}</code>.</li> <li>Instead of <code>dict(map(lambda v: (v, v ** 2), values))</code>, use     <code>{v: v ** 2 for v in values}</code>.</li> </ul>","tags":["C417"]},{"location":"rules/unnecessary-map/#examples","title":"Examples","text":"<pre><code>map(lambda x: x + 1, iterable)\n</code></pre> <p>Use instead:</p> <pre><code>(x + 1 for x in iterable)\n</code></pre>","tags":["C417"]},{"location":"rules/unnecessary-map/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it may occasionally drop comments when rewriting the call. In most cases, though, comments will be preserved.</p>","tags":["C417"]},{"location":"rules/unnecessary-paren-on-raise-exception/","title":"unnecessary-paren-on-raise-exception (RSE102)","text":"<p>Derived from the flake8-raise linter.</p> <p>Fix is always available.</p>","tags":["RSE102"]},{"location":"rules/unnecessary-paren-on-raise-exception/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary parentheses on raised exceptions.</p>","tags":["RSE102"]},{"location":"rules/unnecessary-paren-on-raise-exception/#why-is-this-bad","title":"Why is this bad?","text":"<p>If an exception is raised without any arguments, parentheses are not required, as the <code>raise</code> statement accepts either an exception instance or an exception class (which is then implicitly instantiated).</p> <p>Removing the parentheses makes the code more concise.</p>","tags":["RSE102"]},{"location":"rules/unnecessary-paren-on-raise-exception/#known-problems","title":"Known problems","text":"<p>Parentheses can only be omitted if the exception is a class, as opposed to a function call. This rule isn't always capable of distinguishing between the two.</p> <p>For example, if you import a function <code>module.get_exception</code> from another module, and <code>module.get_exception</code> returns an exception object, this rule will incorrectly mark the parentheses in <code>raise module.get_exception()</code> as unnecessary.</p>","tags":["RSE102"]},{"location":"rules/unnecessary-paren-on-raise-exception/#example","title":"Example","text":"<pre><code>raise TypeError()\n</code></pre> <p>Use instead:</p> <pre><code>raise TypeError\n</code></pre>","tags":["RSE102"]},{"location":"rules/unnecessary-paren-on-raise-exception/#references","title":"References","text":"<ul> <li>Python documentation: The <code>raise</code> statement</li> </ul>","tags":["RSE102"]},{"location":"rules/unnecessary-placeholder/","title":"unnecessary-placeholder (PIE790)","text":"<p>Derived from the flake8-pie linter.</p> <p>Fix is always available.</p>","tags":["PIE790"]},{"location":"rules/unnecessary-placeholder/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary <code>pass</code> statements and ellipsis (<code>...</code>) literals in functions, classes, and other blocks.</p>","tags":["PIE790"]},{"location":"rules/unnecessary-placeholder/#why-is-this-bad","title":"Why is this bad?","text":"<p>In Python, the <code>pass</code> statement and ellipsis (<code>...</code>) literal serve as placeholders, allowing for syntactically correct empty code blocks. The primary purpose of these nodes is to avoid syntax errors in situations where a statement or expression is syntactically required, but no code needs to be executed.</p> <p>If a <code>pass</code> or ellipsis is present in a code block that includes at least one other statement (even, e.g., a docstring), it is unnecessary and should be removed.</p>","tags":["PIE790"]},{"location":"rules/unnecessary-placeholder/#example","title":"Example","text":"<pre><code>def func():\n\"\"\"Placeholder docstring.\"\"\"\npass\n</code></pre> <p>Use instead:</p> <pre><code>def func():\n\"\"\"Placeholder docstring.\"\"\"\n</code></pre> <p>Or, given:</p> <pre><code>def func():\n\"\"\"Placeholder docstring.\"\"\"\n...\n</code></pre> <p>Use instead:</p> <pre><code>def func():\n\"\"\"Placeholder docstring.\"\"\"\n</code></pre>","tags":["PIE790"]},{"location":"rules/unnecessary-placeholder/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe in the rare case that the <code>pass</code> or ellipsis is followed by a string literal, since removal of the placeholder would convert the subsequent string literal into a docstring.</p>","tags":["PIE790"]},{"location":"rules/unnecessary-placeholder/#references","title":"References","text":"<ul> <li>Python documentation: The <code>pass</code> statement</li> </ul>","tags":["PIE790"]},{"location":"rules/unnecessary-range-start/","title":"unnecessary-range-start (PIE808)","text":"<p>Derived from the flake8-pie linter.</p> <p>Fix is always available.</p>","tags":["PIE808"]},{"location":"rules/unnecessary-range-start/#what-it-does","title":"What it does","text":"<p>Checks for <code>range</code> calls with an unnecessary <code>start</code> argument.</p>","tags":["PIE808"]},{"location":"rules/unnecessary-range-start/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>range(0, x)</code> is equivalent to <code>range(x)</code>, as <code>0</code> is the default value for the <code>start</code> argument. Omitting the <code>start</code> argument makes the code more concise and idiomatic.</p>","tags":["PIE808"]},{"location":"rules/unnecessary-range-start/#example","title":"Example","text":"<pre><code>range(0, 3)\n</code></pre> <p>Use instead:</p> <pre><code>range(3)\n</code></pre>","tags":["PIE808"]},{"location":"rules/unnecessary-range-start/#references","title":"References","text":"<ul> <li>Python documentation: <code>range</code></li> </ul>","tags":["PIE808"]},{"location":"rules/unnecessary-return-none/","title":"unnecessary-return-none (RET501)","text":"<p>Derived from the flake8-return linter.</p> <p>Fix is always available.</p>","tags":["RET501"]},{"location":"rules/unnecessary-return-none/#what-it-does","title":"What it does","text":"<p>Checks for the presence of a <code>return None</code> statement when <code>None</code> is the only possible return value.</p>","tags":["RET501"]},{"location":"rules/unnecessary-return-none/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python implicitly assumes <code>return None</code> if an explicit <code>return</code> value is omitted. Therefore, explicitly returning <code>None</code> is redundant and should be avoided when it is the only possible <code>return</code> value across all code paths in a given function.</p>","tags":["RET501"]},{"location":"rules/unnecessary-return-none/#example","title":"Example","text":"<pre><code>def foo(bar):\nif not bar:\nreturn\nreturn None\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar):\nif not bar:\nreturn\nreturn\n</code></pre>","tags":["RET501"]},{"location":"rules/unnecessary-spread/","title":"unnecessary-spread (PIE800)","text":"<p>Derived from the flake8-pie linter.</p> <p>Fix is sometimes available.</p>","tags":["PIE800"]},{"location":"rules/unnecessary-spread/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary dictionary unpacking operators (<code>**</code>).</p>","tags":["PIE800"]},{"location":"rules/unnecessary-spread/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unpacking a dictionary into another dictionary is redundant. The unpacking operator can be removed, making the code more readable.</p>","tags":["PIE800"]},{"location":"rules/unnecessary-spread/#example","title":"Example","text":"<pre><code>foo = {\"A\": 1, \"B\": 2}\nbar = {**foo, **{\"C\": 3}}\n</code></pre> <p>Use instead:</p> <pre><code>foo = {\"A\": 1, \"B\": 2}\nbar = {**foo, \"C\": 3}\n</code></pre>","tags":["PIE800"]},{"location":"rules/unnecessary-spread/#references","title":"References","text":"<ul> <li>Python documentation: Dictionary displays</li> </ul>","tags":["PIE800"]},{"location":"rules/unnecessary-subscript-reversal/","title":"unnecessary-subscript-reversal (C415)","text":"<p>Derived from the flake8-comprehensions linter.</p>","tags":["C415"]},{"location":"rules/unnecessary-subscript-reversal/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary subscript reversal of iterable.</p>","tags":["C415"]},{"location":"rules/unnecessary-subscript-reversal/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to reverse the order of an iterable when passing it into <code>reversed()</code>, <code>set()</code> or <code>sorted()</code> functions as they will change the order of the elements again.</p>","tags":["C415"]},{"location":"rules/unnecessary-subscript-reversal/#examples","title":"Examples","text":"<pre><code>sorted(iterable[::-1])\nset(iterable[::-1])\nreversed(iterable[::-1])\n</code></pre> <p>Use instead:</p> <pre><code>sorted(iterable)\nset(iterable)\niterable\n</code></pre>","tags":["C415"]},{"location":"rules/unnecessary-type-union/","title":"unnecessary-type-union (PYI055)","text":"<p>Derived from the flake8-pyi linter.</p> <p>Fix is sometimes available.</p>","tags":["PYI055"]},{"location":"rules/unnecessary-type-union/#what-it-does","title":"What it does","text":"<p>Checks for the presence of multiple <code>type</code>s in a union.</p>","tags":["PYI055"]},{"location":"rules/unnecessary-type-union/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>type[T | S]</code> has identical semantics to <code>type[T] | type[S]</code> in a type annotation, but is cleaner and more concise.</p>","tags":["PYI055"]},{"location":"rules/unnecessary-type-union/#example","title":"Example","text":"<pre><code>field: type[int] | type[float] | str\n</code></pre> <p>Use instead:</p> <pre><code>field: type[int | float] | str\n</code></pre>","tags":["PYI055"]},{"location":"rules/unnecessary-type-union/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as safe, unless the type annotation contains comments.</p> <p>Note that while the fix may flatten nested unions into a single top-level union, the semantics of the annotation will remain unchanged.</p>","tags":["PYI055"]},{"location":"rules/unpacked-list-comprehension/","title":"unpacked-list-comprehension (UP027)","text":"<p>Derived from the pyupgrade linter.</p> <p>Warning: This rule has been removed and its documentation is only available for historical reasons.</p>","tags":["UP027"]},{"location":"rules/unpacked-list-comprehension/#removed","title":"Removed","text":"<p>There's no evidence that generators are meaningfully faster than list comprehensions when combined with unpacking.</p>","tags":["UP027"]},{"location":"rules/unpacked-list-comprehension/#what-it-does","title":"What it does","text":"<p>Checks for list comprehensions that are immediately unpacked.</p>","tags":["UP027"]},{"location":"rules/unpacked-list-comprehension/#why-is-this-bad","title":"Why is this bad?","text":"<p>There is no reason to use a list comprehension if the result is immediately unpacked. Instead, use a generator expression, which avoids allocating an intermediary list.</p>","tags":["UP027"]},{"location":"rules/unpacked-list-comprehension/#example","title":"Example","text":"<pre><code>a, b, c = [foo(x) for x in items]\n</code></pre> <p>Use instead:</p> <pre><code>a, b, c = (foo(x) for x in items)\n</code></pre>","tags":["UP027"]},{"location":"rules/unpacked-list-comprehension/#references","title":"References","text":"<ul> <li>Python documentation: Generator expressions</li> <li>Python documentation: List comprehensions</li> </ul>","tags":["UP027"]},{"location":"rules/unprefixed-type-param/","title":"unprefixed-type-param (PYI001)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI001"]},{"location":"rules/unprefixed-type-param/#what-it-does","title":"What it does","text":"<p>Checks that type <code>TypeVar</code>s, <code>ParamSpec</code>s, and <code>TypeVarTuple</code>s in stubs have names prefixed with <code>_</code>.</p>","tags":["PYI001"]},{"location":"rules/unprefixed-type-param/#why-is-this-bad","title":"Why is this bad?","text":"<p>Prefixing type parameters with <code>_</code> avoids accidentally exposing names internal to the stub.</p>","tags":["PYI001"]},{"location":"rules/unprefixed-type-param/#example","title":"Example","text":"<pre><code>from typing import TypeVar\nT = TypeVar(\"T\")\n</code></pre> <p>Use instead:</p> <pre><code>from typing import TypeVar\n_T = TypeVar(\"_T\")\n</code></pre>","tags":["PYI001"]},{"location":"rules/unraw-re-pattern/","title":"unraw-re-pattern (RUF039)","text":"<p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF039"]},{"location":"rules/unraw-re-pattern/#what-it-does","title":"What it does","text":"<p>Reports the following <code>re</code> and <code>regex</code> calls when their first arguments are not raw strings:</p> <ul> <li>For <code>regex</code> and <code>re</code>: <code>compile</code>, <code>findall</code>, <code>finditer</code>,     <code>fullmatch</code>, <code>match</code>, <code>search</code>, <code>split</code>, <code>sub</code>, <code>subn</code>.</li> <li><code>regex</code>-specific: <code>splititer</code>, <code>subf</code>, <code>subfn</code>, <code>template</code>.</li> </ul>","tags":["RUF039"]},{"location":"rules/unraw-re-pattern/#why-is-this-bad","title":"Why is this bad?","text":"<p>Regular expressions should be written using raw strings to avoid double escaping.</p>","tags":["RUF039"]},{"location":"rules/unraw-re-pattern/#example","title":"Example","text":"<pre><code>re.compile(\"foo\\\\bar\")\n</code></pre> <p>Use instead:</p> <pre><code>re.compile(r\"foo\\bar\")\n</code></pre>","tags":["RUF039"]},{"location":"rules/unrecognized-platform-check/","title":"unrecognized-platform-check (PYI007)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI007"]},{"location":"rules/unrecognized-platform-check/#what-it-does","title":"What it does","text":"<p>Check for unrecognized <code>sys.platform</code> checks. Platform checks should be simple string comparisons.</p> <p>Note: this rule is only enabled in <code>.pyi</code> stub files.</p>","tags":["PYI007"]},{"location":"rules/unrecognized-platform-check/#why-is-this-bad","title":"Why is this bad?","text":"<p>Some <code>sys.platform</code> checks are too complex for type checkers to understand, and thus result in incorrect inferences by these tools. <code>sys.platform</code> checks should be simple string comparisons, like <code>if sys.platform == \"linux\"</code>.</p>","tags":["PYI007"]},{"location":"rules/unrecognized-platform-check/#example","title":"Example","text":"<pre><code>if sys.platform.startswith(\"linux\"):\n# Linux specific definitions\n...\nelse:\n# Posix specific definitions\n...\n</code></pre> <p>Instead, use a simple string comparison, such as <code>==</code> or <code>!=</code>:</p> <pre><code>if sys.platform == \"linux\":\n# Linux specific definitions\n...\nelse:\n# Posix specific definitions\n...\n</code></pre>","tags":["PYI007"]},{"location":"rules/unrecognized-platform-check/#references","title":"References","text":"<ul> <li>Typing documentation: Version and Platform checking</li> </ul>","tags":["PYI007"]},{"location":"rules/unrecognized-platform-name/","title":"unrecognized-platform-name (PYI008)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI008"]},{"location":"rules/unrecognized-platform-name/#what-it-does","title":"What it does","text":"<p>Check for unrecognized platform names in <code>sys.platform</code> checks.</p> <p>Note: this rule is only enabled in <code>.pyi</code> stub files.</p>","tags":["PYI008"]},{"location":"rules/unrecognized-platform-name/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a <code>sys.platform</code> check compares to a platform name outside of a small set of known platforms (e.g. \"linux\", \"win32\", etc.), it's likely a typo or a platform name that is not recognized by type checkers.</p> <p>The list of known platforms is: \"linux\", \"win32\", \"cygwin\", \"darwin\".</p>","tags":["PYI008"]},{"location":"rules/unrecognized-platform-name/#example","title":"Example","text":"<pre><code>if sys.platform == \"linus\": ...\n</code></pre> <p>Use instead:</p> <pre><code>if sys.platform == \"linux\": ...\n</code></pre>","tags":["PYI008"]},{"location":"rules/unrecognized-platform-name/#references","title":"References","text":"<ul> <li>Typing documentation: Version and Platform checking</li> </ul>","tags":["PYI008"]},{"location":"rules/unrecognized-version-info-check/","title":"unrecognized-version-info-check (PYI003)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI003"]},{"location":"rules/unrecognized-version-info-check/#what-it-does","title":"What it does","text":"<p>Checks for problematic <code>sys.version_info</code>-related conditions in stubs.</p>","tags":["PYI003"]},{"location":"rules/unrecognized-version-info-check/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files support simple conditionals to test for differences in Python versions using <code>sys.version_info</code>. However, there are a number of common mistakes involving <code>sys.version_info</code> comparisons that should be avoided. For example, comparing against a string can lead to unexpected behavior.</p>","tags":["PYI003"]},{"location":"rules/unrecognized-version-info-check/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info[0] == \"2\": ...\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info[0] == 2: ...\n</code></pre>","tags":["PYI003"]},{"location":"rules/unrecognized-version-info-check/#references","title":"References","text":"<ul> <li>Typing documentation: Version and Platform checking</li> </ul>","tags":["PYI003"]},{"location":"rules/unreliable-callable-check/","title":"unreliable-callable-check (B004)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is sometimes available.</p>","tags":["B004"]},{"location":"rules/unreliable-callable-check/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>hasattr</code> to test if an object is callable (e.g., <code>hasattr(obj, \"__call__\")</code>).</p>","tags":["B004"]},{"location":"rules/unreliable-callable-check/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>hasattr</code> is an unreliable mechanism for testing if an object is callable. If <code>obj</code> implements a custom <code>__getattr__</code>, or if its <code>__call__</code> is itself not callable, you may get misleading results.</p> <p>Instead, use <code>callable(obj)</code> to test if <code>obj</code> is callable.</p>","tags":["B004"]},{"location":"rules/unreliable-callable-check/#example","title":"Example","text":"<pre><code>hasattr(obj, \"__call__\")\n</code></pre> <p>Use instead:</p> <pre><code>callable(obj)\n</code></pre>","tags":["B004"]},{"location":"rules/unreliable-callable-check/#references","title":"References","text":"<ul> <li>Python documentation: <code>callable</code></li> <li>Python documentation: <code>hasattr</code></li> <li>Python documentation: <code>__getattr__</code></li> <li>Python documentation: <code>__call__</code></li> </ul>","tags":["B004"]},{"location":"rules/unsafe-markup-use/","title":"unsafe-markup-use (RUF035)","text":"<p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF035"]},{"location":"rules/unsafe-markup-use/#what-it-does","title":"What it does","text":"<p>Checks for non-literal strings being passed to <code>markupsafe.Markup</code>.</p>","tags":["RUF035"]},{"location":"rules/unsafe-markup-use/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>markupsafe.Markup</code> does not perform any escaping, so passing dynamic content, like f-strings, variables or interpolated strings will potentially lead to XSS vulnerabilities.</p> <p>Instead you should interpolate the <code>markupsafe.Markup</code> object.</p> <p>Using <code>lint.ruff.extend-markup-names</code> additional objects can be treated like <code>markupsafe.Markup</code>.</p> <p>This rule was originally inspired by flake8-markupsafe but doesn't carve out any exceptions for i18n related calls.</p>","tags":["RUF035"]},{"location":"rules/unsafe-markup-use/#example","title":"Example","text":"<p>Given:</p> <pre><code>from markupsafe import Markup\ncontent = \"&lt;script&gt;alert('Hello, world!')&lt;/script&gt;\"\nhtml = Markup(f\"&lt;b&gt;{content}&lt;/b&gt;\")  # XSS\n</code></pre> <p>Use instead:</p> <pre><code>from markupsafe import Markup\ncontent = \"&lt;script&gt;alert('Hello, world!')&lt;/script&gt;\"\nhtml = Markup(\"&lt;b&gt;{}&lt;/b&gt;\").format(content)  # Safe\n</code></pre> <p>Given:</p> <pre><code>from markupsafe import Markup\nlines = [\nMarkup(\"&lt;b&gt;heading&lt;/b&gt;\"),\n\"&lt;script&gt;alert('XSS attempt')&lt;/script&gt;\",\n]\nhtml = Markup(\"&lt;br&gt;\".join(lines))  # XSS\n</code></pre> <p>Use instead:</p> <pre><code>from markupsafe import Markup\nlines = [\nMarkup(\"&lt;b&gt;heading&lt;/b&gt;\"),\n\"&lt;script&gt;alert('XSS attempt')&lt;/script&gt;\",\n]\nhtml = Markup(\"&lt;br&gt;\").join(lines)  # Safe\n</code></pre>","tags":["RUF035"]},{"location":"rules/unsafe-markup-use/#options","title":"Options","text":"<ul> <li><code>lint.ruff.extend-markup-names</code></li> </ul>","tags":["RUF035"]},{"location":"rules/unsafe-markup-use/#references","title":"References","text":"<ul> <li>MarkupSafe</li> <li><code>markupsafe.Markup</code></li> </ul>","tags":["RUF035"]},{"location":"rules/unsafe-yaml-load/","title":"unsafe-yaml-load (S506)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S506"]},{"location":"rules/unsafe-yaml-load/#what-it-does","title":"What it does","text":"<p>Checks for uses of the <code>yaml.load</code> function.</p>","tags":["S506"]},{"location":"rules/unsafe-yaml-load/#why-is-this-bad","title":"Why is this bad?","text":"<p>Running the <code>yaml.load</code> function over untrusted YAML files is insecure, as <code>yaml.load</code> allows for the creation of arbitrary Python objects, which can then be used to execute arbitrary code.</p> <p>Instead, consider using <code>yaml.safe_load</code>, which allows for the creation of simple Python objects like integers and lists, but prohibits the creation of more complex objects like functions and classes.</p>","tags":["S506"]},{"location":"rules/unsafe-yaml-load/#example","title":"Example","text":"<pre><code>import yaml\nyaml.load(untrusted_yaml)\n</code></pre> <p>Use instead:</p> <pre><code>import yaml\nyaml.safe_load(untrusted_yaml)\n</code></pre>","tags":["S506"]},{"location":"rules/unsafe-yaml-load/#references","title":"References","text":"<ul> <li>PyYAML documentation: Loading YAML</li> <li>Common Weakness Enumeration: CWE-20</li> </ul>","tags":["S506"]},{"location":"rules/unsorted-dunder-all/","title":"unsorted-dunder-all (RUF022)","text":"<p>Fix is sometimes available.</p>","tags":["RUF022"]},{"location":"rules/unsorted-dunder-all/#what-it-does","title":"What it does","text":"<p>Checks for <code>__all__</code> definitions that are not ordered according to an \"isort-style\" sort.</p> <p>An isort-style sort orders items first according to their casing: SCREAMING_SNAKE_CASE names (conventionally used for global constants) come first, followed by CamelCase names (conventionally used for classes), followed by anything else. Within each category, a natural sort is used to order the elements.</p>","tags":["RUF022"]},{"location":"rules/unsorted-dunder-all/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use a common convention for <code>__all__</code> to make your code more readable and idiomatic.</p>","tags":["RUF022"]},{"location":"rules/unsorted-dunder-all/#example","title":"Example","text":"<pre><code>import sys\n__all__ = [\n\"b\",\n\"c\",\n\"a\",\n]\nif sys.platform == \"win32\":\n__all__ += [\"z\", \"y\"]\n</code></pre> <p>Use instead:</p> <pre><code>import sys\n__all__ = [\n\"a\",\n\"b\",\n\"c\",\n]\nif sys.platform == \"win32\":\n__all__ += [\"y\", \"z\"]\n</code></pre>","tags":["RUF022"]},{"location":"rules/unsorted-dunder-all/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as always being safe, in that it should very rarely alter the semantics of any Python code. However, note that (although it's rare) the value of <code>__all__</code> could be read by code elsewhere that depends on the exact iteration order of the items in <code>__all__</code>, in which case this rule's fix could theoretically cause breakage.</p> <p>Note also that for multiline <code>__all__</code> definitions that include comments on their own line, it can be hard to tell where the comments should be moved to when sorting the contents of <code>__all__</code>. While this rule's fix will never delete a comment, it might sometimes move a comment to an unexpected location.</p>","tags":["RUF022"]},{"location":"rules/unsorted-dunder-slots/","title":"unsorted-dunder-slots (RUF023)","text":"<p>Fix is sometimes available.</p>","tags":["RUF023"]},{"location":"rules/unsorted-dunder-slots/#what-it-does","title":"What it does","text":"<p>Checks for <code>__slots__</code> definitions that are not ordered according to a natural sort.</p>","tags":["RUF023"]},{"location":"rules/unsorted-dunder-slots/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use a common convention for this special variable to make your code more readable and idiomatic.</p>","tags":["RUF023"]},{"location":"rules/unsorted-dunder-slots/#example","title":"Example","text":"<pre><code>class Dog:\n__slots__ = \"name\", \"breed\"\n</code></pre> <p>Use instead:</p> <pre><code>class Dog:\n__slots__ = \"breed\", \"name\"\n</code></pre>","tags":["RUF023"]},{"location":"rules/unsorted-dunder-slots/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe whenever Ruff can detect that code elsewhere in the same file reads the <code>__slots__</code> variable in some way. This is because the order of the items in <code>__slots__</code> may have semantic significance if the <code>__slots__</code> of a class is being iterated over, or being assigned to another value.</p> <p>In the vast majority of other cases, this rule's fix is unlikely to cause breakage; as such, Ruff will otherwise mark this rule's fix as safe. However, note that (although it's rare) the value of <code>__slots__</code> could still be read by code outside of the module in which the <code>__slots__</code> definition occurs, in which case this rule's fix could theoretically cause breakage.</p> <p>Additionally, note that for multiline <code>__slots__</code> definitions that include comments on their own line, it can be hard to tell where the comments should be moved to when sorting the contents of <code>__slots__</code>. While this rule's fix will never delete a comment, it might sometimes move a comment to an unexpected location.</p>","tags":["RUF023"]},{"location":"rules/unsorted-imports/","title":"unsorted-imports (I001)","text":"<p>Derived from the isort linter.</p> <p>Fix is sometimes available.</p>","tags":["I001"]},{"location":"rules/unsorted-imports/#what-it-does","title":"What it does","text":"<p>De-duplicates, groups, and sorts imports based on the provided <code>isort</code> settings.</p>","tags":["I001"]},{"location":"rules/unsorted-imports/#why-is-this-bad","title":"Why is this bad?","text":"<p>Consistency is good. Use a common convention for imports to make your code more readable and idiomatic.</p>","tags":["I001"]},{"location":"rules/unsorted-imports/#example","title":"Example","text":"<pre><code>import pandas\nimport numpy as np\n</code></pre> <p>Use instead:</p> <pre><code>import numpy as np\nimport pandas\n</code></pre>","tags":["I001"]},{"location":"rules/unspecified-encoding/","title":"unspecified-encoding (PLW1514)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["PLW1514"]},{"location":"rules/unspecified-encoding/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>open</code> and related calls without an explicit <code>encoding</code> argument.</p>","tags":["PLW1514"]},{"location":"rules/unspecified-encoding/#why-is-this-bad","title":"Why is this bad?","text":"<p>Using <code>open</code> in text mode without an explicit encoding can lead to non-portable code, with differing behavior across platforms. While readers may assume that UTF-8 is the default encoding, in reality, the default is locale-specific.</p> <p>Instead, consider using the <code>encoding</code> parameter to enforce a specific encoding. PEP 597 recommends the use of <code>encoding=\"utf-8\"</code> as a default, and suggests that it may become the default in future versions of Python.</p> <p>If a local-specific encoding is intended, use <code>encoding=\"local\"</code>  on Python 3.10 and later, or <code>locale.getpreferredencoding()</code> on earlier versions, to make the encoding explicit.</p>","tags":["PLW1514"]},{"location":"rules/unspecified-encoding/#example","title":"Example","text":"<pre><code>open(\"file.txt\")\n</code></pre> <p>Use instead:</p> <pre><code>open(\"file.txt\", encoding=\"utf-8\")\n</code></pre>","tags":["PLW1514"]},{"location":"rules/unspecified-encoding/#references","title":"References","text":"<ul> <li>Python documentation: <code>open</code></li> </ul>","tags":["PLW1514"]},{"location":"rules/unsupported-method-call-on-all/","title":"unsupported-method-call-on-all (PYI056)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI056"]},{"location":"rules/unsupported-method-call-on-all/#what-it-does","title":"What it does","text":"<p>Checks that <code>append</code>, <code>extend</code> and <code>remove</code> methods are not called on <code>__all__</code>.</p>","tags":["PYI056"]},{"location":"rules/unsupported-method-call-on-all/#why-is-this-bad","title":"Why is this bad?","text":"<p>Different type checkers have varying levels of support for calling these methods on <code>__all__</code>. Instead, use the <code>+=</code> operator to add items to <code>__all__</code>, which is known to be supported by all major type checkers.</p>","tags":["PYI056"]},{"location":"rules/unsupported-method-call-on-all/#example","title":"Example","text":"<pre><code>import sys\n__all__ = [\"A\", \"B\"]\nif sys.version_info &gt;= (3, 10):\n__all__.append(\"C\")\nif sys.version_info &gt;= (3, 11):\n__all__.remove(\"B\")\n</code></pre> <p>Use instead:</p> <pre><code>import sys\n__all__ = [\"A\"]\nif sys.version_info &lt; (3, 11):\n__all__ += [\"B\"]\nif sys.version_info &gt;= (3, 10):\n__all__ += [\"C\"]\n</code></pre>","tags":["PYI056"]},{"location":"rules/unused-annotation/","title":"unused-annotation (F842)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F842"]},{"location":"rules/unused-annotation/#what-it-does","title":"What it does","text":"<p>Checks for local variables that are annotated but never used.</p>","tags":["F842"]},{"location":"rules/unused-annotation/#why-is-this-bad","title":"Why is this bad?","text":"<p>Annotations are used to provide type hints to static type checkers. If a variable is annotated but never used, the annotation is unnecessary.</p>","tags":["F842"]},{"location":"rules/unused-annotation/#example","title":"Example","text":"<pre><code>def foo():\nbar: int\n</code></pre>","tags":["F842"]},{"location":"rules/unused-annotation/#references","title":"References","text":"<ul> <li>PEP 484 \u2013 Type Hints</li> </ul>","tags":["F842"]},{"location":"rules/unused-async/","title":"unused-async (RUF029)","text":"<p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF029"]},{"location":"rules/unused-async/#what-it-does","title":"What it does","text":"<p>Checks for functions declared <code>async</code> that do not await or otherwise use features requiring the function to be declared <code>async</code>.</p>","tags":["RUF029"]},{"location":"rules/unused-async/#why-is-this-bad","title":"Why is this bad?","text":"<p>Declaring a function <code>async</code> when it's not is usually a mistake, and will artificially limit the contexts where that function may be called. In some cases, labeling a function <code>async</code> is semantically meaningful (e.g. with the trio library).</p>","tags":["RUF029"]},{"location":"rules/unused-async/#examples","title":"Examples","text":"<pre><code>async def foo():\nbar()\n</code></pre> <p>Use instead:</p> <pre><code>def foo():\nbar()\n</code></pre>","tags":["RUF029"]},{"location":"rules/unused-class-method-argument/","title":"unused-class-method-argument (ARG003)","text":"<p>Derived from the flake8-unused-arguments linter.</p>","tags":["ARG003"]},{"location":"rules/unused-class-method-argument/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused arguments in class method definitions.</p>","tags":["ARG003"]},{"location":"rules/unused-class-method-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>An argument that is defined but not used is likely a mistake, and should be removed to avoid confusion.</p> <p>If a variable is intentionally defined-but-not-used, it should be prefixed with an underscore, or some other value that adheres to the <code>lint.dummy-variable-rgx</code> pattern.</p>","tags":["ARG003"]},{"location":"rules/unused-class-method-argument/#example","title":"Example","text":"<pre><code>class Class:\n@classmethod\ndef foo(cls, arg1, arg2):\nprint(arg1)\n</code></pre> <p>Use instead:</p> <pre><code>class Class:\n@classmethod\ndef foo(cls, arg1):\nprint(arg1)\n</code></pre>","tags":["ARG003"]},{"location":"rules/unused-class-method-argument/#options","title":"Options","text":"<ul> <li><code>lint.dummy-variable-rgx</code></li> </ul>","tags":["ARG003"]},{"location":"rules/unused-function-argument/","title":"unused-function-argument (ARG001)","text":"<p>Derived from the flake8-unused-arguments linter.</p>","tags":["ARG001"]},{"location":"rules/unused-function-argument/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused arguments in function definitions.</p>","tags":["ARG001"]},{"location":"rules/unused-function-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>An argument that is defined but not used is likely a mistake, and should be removed to avoid confusion.</p> <p>If a variable is intentionally defined-but-not-used, it should be prefixed with an underscore, or some other value that adheres to the <code>lint.dummy-variable-rgx</code> pattern.</p>","tags":["ARG001"]},{"location":"rules/unused-function-argument/#example","title":"Example","text":"<pre><code>def foo(bar, baz):\nreturn bar * 2\n</code></pre> <p>Use instead:</p> <pre><code>def foo(bar):\nreturn bar * 2\n</code></pre>","tags":["ARG001"]},{"location":"rules/unused-function-argument/#options","title":"Options","text":"<ul> <li><code>lint.dummy-variable-rgx</code></li> </ul>","tags":["ARG001"]},{"location":"rules/unused-import/","title":"unused-import (F401)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F401"]},{"location":"rules/unused-import/#what-it-does","title":"What it does","text":"<p>Checks for unused imports.</p>","tags":["F401"]},{"location":"rules/unused-import/#why-is-this-bad","title":"Why is this bad?","text":"<p>Unused imports add a performance overhead at runtime, and risk creating import cycles. They also increase the cognitive load of reading the code.</p> <p>If an import statement is used to check for the availability or existence of a module, consider using <code>importlib.util.find_spec</code> instead.</p> <p>If an import statement is used to re-export a symbol as part of a module's public interface, consider using a \"redundant\" import alias, which instructs Ruff (and other tools) to respect the re-export, and avoid marking it as unused, as in:</p> <pre><code>from module import member as member\n</code></pre> <p>Alternatively, you can use <code>__all__</code> to declare a symbol as part of the module's interface, as in:</p> <pre><code># __init__.py\nimport some_module\n__all__ = [\"some_module\"]\n</code></pre>","tags":["F401"]},{"location":"rules/unused-import/#fix-safety","title":"Fix safety","text":"<p>Fixes to remove unused imports are safe, except in <code>__init__.py</code> files.</p> <p>Applying fixes to <code>__init__.py</code> files is currently in preview. The fix offered depends on the type of the unused import. Ruff will suggest a safe fix to export first-party imports with either a redundant alias or, if already present in the file, an <code>__all__</code> entry. If multiple <code>__all__</code> declarations are present, Ruff will not offer a fix. Ruff will suggest an unsafe fix to remove third-party and standard library imports -- the fix is unsafe because the module's interface changes.</p>","tags":["F401"]},{"location":"rules/unused-import/#example","title":"Example","text":"<pre><code>import numpy as np  # unused import\ndef area(radius):\nreturn 3.14 * radius**2\n</code></pre> <p>Use instead:</p> <pre><code>def area(radius):\nreturn 3.14 * radius**2\n</code></pre> <p>To check the availability of a module, use <code>importlib.util.find_spec</code>:</p> <pre><code>from importlib.util import find_spec\nif find_spec(\"numpy\") is not None:\nprint(\"numpy is installed\")\nelse:\nprint(\"numpy is not installed\")\n</code></pre>","tags":["F401"]},{"location":"rules/unused-import/#options","title":"Options","text":"<ul> <li><code>lint.ignore-init-module-imports</code></li> <li><code>lint.pyflakes.allowed-unused-imports</code></li> </ul>","tags":["F401"]},{"location":"rules/unused-import/#references","title":"References","text":"<ul> <li>Python documentation: <code>import</code></li> <li>Python documentation: <code>importlib.util.find_spec</code></li> <li>Typing documentation: interface conventions</li> </ul>","tags":["F401"]},{"location":"rules/unused-lambda-argument/","title":"unused-lambda-argument (ARG005)","text":"<p>Derived from the flake8-unused-arguments linter.</p>","tags":["ARG005"]},{"location":"rules/unused-lambda-argument/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused arguments in lambda expression definitions.</p>","tags":["ARG005"]},{"location":"rules/unused-lambda-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>An argument that is defined but not used is likely a mistake, and should be removed to avoid confusion.</p> <p>If a variable is intentionally defined-but-not-used, it should be prefixed with an underscore, or some other value that adheres to the <code>lint.dummy-variable-rgx</code> pattern.</p>","tags":["ARG005"]},{"location":"rules/unused-lambda-argument/#example","title":"Example","text":"<pre><code>my_list = [1, 2, 3, 4, 5]\nsquares = map(lambda x, y: x**2, my_list)\n</code></pre> <p>Use instead:</p> <pre><code>my_list = [1, 2, 3, 4, 5]\nsquares = map(lambda x: x**2, my_list)\n</code></pre>","tags":["ARG005"]},{"location":"rules/unused-lambda-argument/#options","title":"Options","text":"<ul> <li><code>lint.dummy-variable-rgx</code></li> </ul>","tags":["ARG005"]},{"location":"rules/unused-loop-control-variable/","title":"unused-loop-control-variable (B007)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is sometimes available.</p>","tags":["B007"]},{"location":"rules/unused-loop-control-variable/#what-it-does","title":"What it does","text":"<p>Checks for unused variables in loops (e.g., <code>for</code> and <code>while</code> statements).</p>","tags":["B007"]},{"location":"rules/unused-loop-control-variable/#why-is-this-bad","title":"Why is this bad?","text":"<p>Defining a variable in a loop statement that is never used can confuse readers.</p> <p>If the variable is intended to be unused (e.g., to facilitate destructuring of a tuple or other object), prefix it with an underscore to indicate the intent. Otherwise, remove the variable entirely.</p>","tags":["B007"]},{"location":"rules/unused-loop-control-variable/#example","title":"Example","text":"<pre><code>for i, j in foo:\nbar(i)\n</code></pre> <p>Use instead:</p> <pre><code>for i, _j in foo:\nbar(i)\n</code></pre>","tags":["B007"]},{"location":"rules/unused-loop-control-variable/#references","title":"References","text":"<ul> <li>PEP 8: Naming Conventions</li> </ul>","tags":["B007"]},{"location":"rules/unused-method-argument/","title":"unused-method-argument (ARG002)","text":"<p>Derived from the flake8-unused-arguments linter.</p>","tags":["ARG002"]},{"location":"rules/unused-method-argument/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused arguments in instance method definitions.</p>","tags":["ARG002"]},{"location":"rules/unused-method-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>An argument that is defined but not used is likely a mistake, and should be removed to avoid confusion.</p> <p>If a variable is intentionally defined-but-not-used, it should be prefixed with an underscore, or some other value that adheres to the <code>lint.dummy-variable-rgx</code> pattern.</p>","tags":["ARG002"]},{"location":"rules/unused-method-argument/#example","title":"Example","text":"<pre><code>class Class:\ndef foo(self, arg1, arg2):\nprint(arg1)\n</code></pre> <p>Use instead:</p> <pre><code>class Class:\ndef foo(self, arg1):\nprint(arg1)\n</code></pre>","tags":["ARG002"]},{"location":"rules/unused-method-argument/#options","title":"Options","text":"<ul> <li><code>lint.dummy-variable-rgx</code></li> </ul>","tags":["ARG002"]},{"location":"rules/unused-noqa/","title":"unused-noqa (RUF100)","text":"<p>Fix is always available.</p>","tags":["RUF100"]},{"location":"rules/unused-noqa/#what-it-does","title":"What it does","text":"<p>Checks for <code>noqa</code> directives that are no longer applicable.</p>","tags":["RUF100"]},{"location":"rules/unused-noqa/#why-is-this-bad","title":"Why is this bad?","text":"<p>A <code>noqa</code> directive that no longer matches any diagnostic violations is likely included by mistake, and should be removed to avoid confusion.</p>","tags":["RUF100"]},{"location":"rules/unused-noqa/#example","title":"Example","text":"<pre><code>import foo  # noqa: F401\ndef bar():\nfoo.bar()\n</code></pre> <p>Use instead:</p> <pre><code>import foo\ndef bar():\nfoo.bar()\n</code></pre>","tags":["RUF100"]},{"location":"rules/unused-noqa/#options","title":"Options","text":"<ul> <li><code>lint.external</code></li> </ul>","tags":["RUF100"]},{"location":"rules/unused-noqa/#references","title":"References","text":"<ul> <li>Ruff error suppression</li> </ul>","tags":["RUF100"]},{"location":"rules/unused-private-protocol/","title":"unused-private-protocol (PYI046)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI046"]},{"location":"rules/unused-private-protocol/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused private <code>typing.Protocol</code> definitions.</p>","tags":["PYI046"]},{"location":"rules/unused-private-protocol/#why-is-this-bad","title":"Why is this bad?","text":"<p>A private <code>typing.Protocol</code> that is defined but not used is likely a mistake. It should either be used, made public, or removed to avoid confusion.</p>","tags":["PYI046"]},{"location":"rules/unused-private-protocol/#example","title":"Example","text":"<pre><code>import typing\nclass _PrivateProtocol(typing.Protocol):\nfoo: int\n</code></pre> <p>Use instead:</p> <pre><code>import typing\nclass _PrivateProtocol(typing.Protocol):\nfoo: int\ndef func(arg: _PrivateProtocol) -&gt; None: ...\n</code></pre>","tags":["PYI046"]},{"location":"rules/unused-private-type-alias/","title":"unused-private-type-alias (PYI047)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI047"]},{"location":"rules/unused-private-type-alias/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused private type aliases.</p>","tags":["PYI047"]},{"location":"rules/unused-private-type-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>A private type alias that is defined but not used is likely a mistake. It should either be used, made public, or removed to avoid confusion.</p>","tags":["PYI047"]},{"location":"rules/unused-private-type-alias/#example","title":"Example","text":"<pre><code>import typing\n_UnusedTypeAlias: typing.TypeAlias = int\n</code></pre> <p>Use instead:</p> <pre><code>import typing\n_UsedTypeAlias: typing.TypeAlias = int\ndef func(arg: _UsedTypeAlias) -&gt; _UsedTypeAlias: ...\n</code></pre>","tags":["PYI047"]},{"location":"rules/unused-private-type-var/","title":"unused-private-type-var (PYI018)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI018"]},{"location":"rules/unused-private-type-var/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused private <code>TypeVar</code>, <code>ParamSpec</code> or <code>TypeVarTuple</code> declarations.</p>","tags":["PYI018"]},{"location":"rules/unused-private-type-var/#why-is-this-bad","title":"Why is this bad?","text":"<p>A private <code>TypeVar</code> that is defined but not used is likely a mistake. It should either be used, made public, or removed to avoid confusion.</p>","tags":["PYI018"]},{"location":"rules/unused-private-type-var/#example","title":"Example","text":"<pre><code>import typing\nimport typing_extensions\n_T = typing.TypeVar(\"_T\")\n_Ts = typing_extensions.TypeVarTuple(\"_Ts\")\n</code></pre>","tags":["PYI018"]},{"location":"rules/unused-private-typed-dict/","title":"unused-private-typed-dict (PYI049)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI049"]},{"location":"rules/unused-private-typed-dict/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused private <code>typing.TypedDict</code> definitions.</p>","tags":["PYI049"]},{"location":"rules/unused-private-typed-dict/#why-is-this-bad","title":"Why is this bad?","text":"<p>A private <code>typing.TypedDict</code> that is defined but not used is likely a mistake. It should either be used, made public, or removed to avoid confusion.</p>","tags":["PYI049"]},{"location":"rules/unused-private-typed-dict/#example","title":"Example","text":"<pre><code>import typing\nclass _UnusedPrivateTypedDict(typing.TypedDict):\nfoo: list[int]\n</code></pre> <p>Use instead:</p> <pre><code>import typing\nclass _UsedPrivateTypedDict(typing.TypedDict):\nfoo: set[str]\ndef func(arg: _UsedPrivateTypedDict) -&gt; _UsedPrivateTypedDict: ...\n</code></pre>","tags":["PYI049"]},{"location":"rules/unused-static-method-argument/","title":"unused-static-method-argument (ARG004)","text":"<p>Derived from the flake8-unused-arguments linter.</p>","tags":["ARG004"]},{"location":"rules/unused-static-method-argument/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused arguments in static method definitions.</p>","tags":["ARG004"]},{"location":"rules/unused-static-method-argument/#why-is-this-bad","title":"Why is this bad?","text":"<p>An argument that is defined but not used is likely a mistake, and should be removed to avoid confusion.</p> <p>If a variable is intentionally defined-but-not-used, it should be prefixed with an underscore, or some other value that adheres to the <code>lint.dummy-variable-rgx</code> pattern.</p>","tags":["ARG004"]},{"location":"rules/unused-static-method-argument/#example","title":"Example","text":"<pre><code>class Class:\n@staticmethod\ndef foo(arg1, arg2):\nprint(arg1)\n</code></pre> <p>Use instead:</p> <pre><code>class Class:\n@staticmethod\ndef foo(arg1):\nprint(arg1)\n</code></pre>","tags":["ARG004"]},{"location":"rules/unused-static-method-argument/#options","title":"Options","text":"<ul> <li><code>lint.dummy-variable-rgx</code></li> </ul>","tags":["ARG004"]},{"location":"rules/unused-variable/","title":"unused-variable (F841)","text":"<p>Derived from the Pyflakes linter.</p> <p>Fix is sometimes available.</p>","tags":["F841"]},{"location":"rules/unused-variable/#what-it-does","title":"What it does","text":"<p>Checks for the presence of unused variables in function scopes.</p>","tags":["F841"]},{"location":"rules/unused-variable/#why-is-this-bad","title":"Why is this bad?","text":"<p>A variable that is defined but not used is likely a mistake, and should be removed to avoid confusion.</p> <p>If a variable is intentionally defined-but-not-used, it should be prefixed with an underscore, or some other value that adheres to the <code>lint.dummy-variable-rgx</code> pattern.</p> <p>Under preview mode, this rule also triggers on unused unpacked assignments (for example, <code>x, y = foo()</code>).</p>","tags":["F841"]},{"location":"rules/unused-variable/#example","title":"Example","text":"<pre><code>def foo():\nx = 1\ny = 2\nreturn x\n</code></pre> <p>Use instead:</p> <pre><code>def foo():\nx = 1\nreturn x\n</code></pre>","tags":["F841"]},{"location":"rules/unused-variable/#options","title":"Options","text":"<ul> <li><code>lint.dummy-variable-rgx</code></li> </ul>","tags":["F841"]},{"location":"rules/useless-comparison/","title":"useless-comparison (B015)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B015"]},{"location":"rules/useless-comparison/#what-it-does","title":"What it does","text":"<p>Checks for useless comparisons.</p>","tags":["B015"]},{"location":"rules/useless-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>Useless comparisons have no effect on the program, and are often included by mistake. If the comparison is intended to enforce an invariant, prepend the comparison with an <code>assert</code>. Otherwise, remove it entirely.</p>","tags":["B015"]},{"location":"rules/useless-comparison/#example","title":"Example","text":"<pre><code>foo == bar\n</code></pre> <p>Use instead:</p> <pre><code>assert foo == bar, \"`foo` and `bar` should be equal.\"\n</code></pre>","tags":["B015"]},{"location":"rules/useless-comparison/#notebook-behavior","title":"Notebook behavior","text":"<p>For Jupyter Notebooks, this rule is not applied to the last top-level expression in a cell. This is because it's common to have a notebook cell that ends with an expression, which will result in the <code>repr</code> of the evaluated expression being printed as the cell's output.</p>","tags":["B015"]},{"location":"rules/useless-comparison/#references","title":"References","text":"<ul> <li>Python documentation: <code>assert</code> statement</li> </ul>","tags":["B015"]},{"location":"rules/useless-contextlib-suppress/","title":"useless-contextlib-suppress (B022)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B022"]},{"location":"rules/useless-contextlib-suppress/#what-it-does","title":"What it does","text":"<p>Checks for <code>contextlib.suppress</code> without arguments.</p>","tags":["B022"]},{"location":"rules/useless-contextlib-suppress/#why-is-this-bad","title":"Why is this bad?","text":"<p><code>contextlib.suppress</code> is a context manager that suppresses exceptions. It takes, as arguments, the exceptions to suppress within the enclosed block. If no exceptions are specified, then the context manager won't suppress any exceptions, and is thus redundant.</p> <p>Consider adding exceptions to the <code>contextlib.suppress</code> call, or removing the context manager entirely.</p>","tags":["B022"]},{"location":"rules/useless-contextlib-suppress/#example","title":"Example","text":"<pre><code>import contextlib\nwith contextlib.suppress():\nfoo()\n</code></pre> <p>Use instead:</p> <pre><code>import contextlib\nwith contextlib.suppress(Exception):\nfoo()\n</code></pre>","tags":["B022"]},{"location":"rules/useless-contextlib-suppress/#references","title":"References","text":"<ul> <li>Python documentation: <code>contextlib.suppress</code></li> </ul>","tags":["B022"]},{"location":"rules/useless-else-on-loop/","title":"useless-else-on-loop (PLW0120)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLW0120"]},{"location":"rules/useless-else-on-loop/#what-it-does","title":"What it does","text":"<p>Checks for <code>else</code> clauses on loops without a <code>break</code> statement.</p>","tags":["PLW0120"]},{"location":"rules/useless-else-on-loop/#why-is-this-bad","title":"Why is this bad?","text":"<p>When a loop includes an <code>else</code> statement, the code inside the <code>else</code> clause will be executed if the loop terminates \"normally\" (i.e., without a <code>break</code>).</p> <p>If a loop always terminates \"normally\" (i.e., does not contain a <code>break</code>), then the <code>else</code> clause is redundant, as the code inside the <code>else</code> clause will always be executed.</p> <p>In such cases, the code inside the <code>else</code> clause can be moved outside the loop entirely, and the <code>else</code> clause can be removed.</p>","tags":["PLW0120"]},{"location":"rules/useless-else-on-loop/#example","title":"Example","text":"<pre><code>for item in items:\nprint(item)\nelse:\nprint(\"All items printed\")\n</code></pre> <p>Use instead:</p> <pre><code>for item in items:\nprint(item)\nprint(\"All items printed\")\n</code></pre>","tags":["PLW0120"]},{"location":"rules/useless-else-on-loop/#references","title":"References","text":"<ul> <li>Python documentation: <code>break</code> and <code>continue</code> Statements, and <code>else</code> Clauses on Loops</li> </ul>","tags":["PLW0120"]},{"location":"rules/useless-exception-statement/","title":"useless-exception-statement (PLW0133)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLW0133"]},{"location":"rules/useless-exception-statement/#what-it-does","title":"What it does","text":"<p>Checks for an exception that is not raised.</p>","tags":["PLW0133"]},{"location":"rules/useless-exception-statement/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's unnecessary to create an exception without raising it. For example, <code>ValueError(\"...\")</code> on its own will have no effect (unlike <code>raise ValueError(\"...\")</code>) and is likely a mistake.</p>","tags":["PLW0133"]},{"location":"rules/useless-exception-statement/#known-problems","title":"Known problems","text":"<p>This rule only detects built-in exceptions, like <code>ValueError</code>, and does not catch user-defined exceptions.</p>","tags":["PLW0133"]},{"location":"rules/useless-exception-statement/#example","title":"Example","text":"<pre><code>ValueError(\"...\")\n</code></pre> <p>Use instead:</p> <pre><code>raise ValueError(\"...\")\n</code></pre>","tags":["PLW0133"]},{"location":"rules/useless-exception-statement/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as converting a useless exception statement to a <code>raise</code> statement will change the program's behavior.</p>","tags":["PLW0133"]},{"location":"rules/useless-expression/","title":"useless-expression (B018)","text":"<p>Derived from the flake8-bugbear linter.</p>","tags":["B018"]},{"location":"rules/useless-expression/#what-it-does","title":"What it does","text":"<p>Checks for useless expressions.</p>","tags":["B018"]},{"location":"rules/useless-expression/#why-is-this-bad","title":"Why is this bad?","text":"<p>Useless expressions have no effect on the program, and are often included by mistake. Assign a useless expression to a variable, or remove it entirely.</p>","tags":["B018"]},{"location":"rules/useless-expression/#example","title":"Example","text":"<pre><code>1 + 1\n</code></pre> <p>Use instead:</p> <pre><code>foo = 1 + 1\n</code></pre>","tags":["B018"]},{"location":"rules/useless-expression/#notebook-behavior","title":"Notebook behavior","text":"<p>For Jupyter Notebooks, this rule is not applied to the last top-level expression in a cell. This is because it's common to have a notebook cell that ends with an expression, which will result in the <code>repr</code> of the evaluated expression being printed as the cell's output.</p>","tags":["B018"]},{"location":"rules/useless-expression/#known-problems","title":"Known problems","text":"<p>This rule ignores expression types that are commonly used for their side effects, such as function calls.</p> <p>However, if a seemingly useless expression (like an attribute access) is needed to trigger a side effect, consider assigning it to an anonymous variable, to indicate that the return value is intentionally ignored.</p> <p>For example, given:</p> <pre><code>with errors.ExceptionRaisedContext():\nobj.attribute\n</code></pre> <p>Use instead:</p> <pre><code>with errors.ExceptionRaisedContext():\n_ = obj.attribute\n</code></pre>","tags":["B018"]},{"location":"rules/useless-if-else/","title":"useless-if-else (RUF034)","text":"<p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["RUF034"]},{"location":"rules/useless-if-else/#what-it-does","title":"What it does","text":"<p>Checks for useless <code>if</code>-<code>else</code> conditions with identical arms.</p>","tags":["RUF034"]},{"location":"rules/useless-if-else/#why-is-this-bad","title":"Why is this bad?","text":"<p>Useless <code>if</code>-<code>else</code> conditions add unnecessary complexity to the code without providing any logical benefit.</p> <p>Assigning the value directly is clearer and more explicit, and should be preferred.</p>","tags":["RUF034"]},{"location":"rules/useless-if-else/#example","title":"Example","text":"<pre><code># Bad\nfoo = x if y else x\n</code></pre> <p>Use instead:</p> <pre><code># Good\nfoo = x\n</code></pre>","tags":["RUF034"]},{"location":"rules/useless-import-alias/","title":"useless-import-alias (PLC0414)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is sometimes available.</p>","tags":["PLC0414"]},{"location":"rules/useless-import-alias/#what-it-does","title":"What it does","text":"<p>Checks for import aliases that do not rename the original package.</p>","tags":["PLC0414"]},{"location":"rules/useless-import-alias/#why-is-this-bad","title":"Why is this bad?","text":"<p>The import alias is redundant and should be removed to avoid confusion.</p>","tags":["PLC0414"]},{"location":"rules/useless-import-alias/#example","title":"Example","text":"<pre><code>import numpy as numpy\n</code></pre> <p>Use instead:</p> <pre><code>import numpy as np\n</code></pre> <p>or</p> <pre><code>import numpy\n</code></pre>","tags":["PLC0414"]},{"location":"rules/useless-metaclass-type/","title":"useless-metaclass-type (UP001)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP001"]},{"location":"rules/useless-metaclass-type/#what-it-does","title":"What it does","text":"<p>Checks for the use of <code>__metaclass__ = type</code> in class definitions.</p>","tags":["UP001"]},{"location":"rules/useless-metaclass-type/#why-is-this-bad","title":"Why is this bad?","text":"<p>Since Python 3, <code>__metaclass__ = type</code> is implied and can thus be omitted.</p>","tags":["UP001"]},{"location":"rules/useless-metaclass-type/#example","title":"Example","text":"<pre><code>class Foo:\n__metaclass__ = type\n</code></pre> <p>Use instead:</p> <pre><code>class Foo: ...\n</code></pre>","tags":["UP001"]},{"location":"rules/useless-metaclass-type/#references","title":"References","text":"<ul> <li>PEP 3115 \u2013 Metaclasses in Python 3000</li> </ul>","tags":["UP001"]},{"location":"rules/useless-object-inheritance/","title":"useless-object-inheritance (UP004)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP004"]},{"location":"rules/useless-object-inheritance/#what-it-does","title":"What it does","text":"<p>Checks for classes that inherit from <code>object</code>.</p>","tags":["UP004"]},{"location":"rules/useless-object-inheritance/#why-is-this-bad","title":"Why is this bad?","text":"<p>Since Python 3, all classes inherit from <code>object</code> by default, so <code>object</code> can be omitted from the list of base classes.</p>","tags":["UP004"]},{"location":"rules/useless-object-inheritance/#example","title":"Example","text":"<pre><code>class Foo(object): ...\n</code></pre> <p>Use instead:</p> <pre><code>class Foo: ...\n</code></pre>","tags":["UP004"]},{"location":"rules/useless-object-inheritance/#references","title":"References","text":"<ul> <li>PEP 3115 \u2013 Metaclasses in Python 3000</li> </ul>","tags":["UP004"]},{"location":"rules/useless-return/","title":"useless-return (PLR1711)","text":"<p>Derived from the Pylint linter.</p> <p>Fix is always available.</p>","tags":["PLR1711"]},{"location":"rules/useless-return/#what-it-does","title":"What it does","text":"<p>Checks for functions that end with an unnecessary <code>return</code> or <code>return None</code>, and contain no other <code>return</code> statements.</p>","tags":["PLR1711"]},{"location":"rules/useless-return/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python implicitly assumes a <code>None</code> return at the end of a function, making it unnecessary to explicitly write <code>return None</code>.</p>","tags":["PLR1711"]},{"location":"rules/useless-return/#example","title":"Example","text":"<pre><code>def f():\nprint(5)\nreturn None\n</code></pre> <p>Use instead:</p> <pre><code>def f():\nprint(5)\n</code></pre>","tags":["PLR1711"]},{"location":"rules/useless-semicolon/","title":"useless-semicolon (E703)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p>","tags":["E703"]},{"location":"rules/useless-semicolon/#what-it-does","title":"What it does","text":"<p>Checks for statements that end with an unnecessary semicolon.</p>","tags":["E703"]},{"location":"rules/useless-semicolon/#why-is-this-bad","title":"Why is this bad?","text":"<p>A trailing semicolon is unnecessary and should be removed.</p>","tags":["E703"]},{"location":"rules/useless-semicolon/#example","title":"Example","text":"<pre><code>do_four();  # useless semicolon\n</code></pre> <p>Use instead:</p> <pre><code>do_four()\n</code></pre>","tags":["E703"]},{"location":"rules/useless-try-except/","title":"useless-try-except (TRY203)","text":"<p>Derived from the tryceratops linter.</p>","tags":["TRY203"]},{"location":"rules/useless-try-except/#what-it-does","title":"What it does","text":"<p>Checks for immediate uses of <code>raise</code> within exception handlers.</p>","tags":["TRY203"]},{"location":"rules/useless-try-except/#why-is-this-bad","title":"Why is this bad?","text":"<p>Capturing an exception, only to immediately reraise it, has no effect. Instead, remove the error-handling code and let the exception propagate upwards without the unnecessary <code>try</code>-<code>except</code> block.</p>","tags":["TRY203"]},{"location":"rules/useless-try-except/#example","title":"Example","text":"<pre><code>def foo():\ntry:\nbar()\nexcept NotImplementedError:\nraise\n</code></pre> <p>Use instead:</p> <pre><code>def foo():\nbar()\n</code></pre>","tags":["TRY203"]},{"location":"rules/useless-with-lock/","title":"useless-with-lock (PLW2101)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLW2101"]},{"location":"rules/useless-with-lock/#what-it-does","title":"What it does","text":"<p>Checks for lock objects that are created and immediately discarded in <code>with</code> statements.</p>","tags":["PLW2101"]},{"location":"rules/useless-with-lock/#why-is-this-bad","title":"Why is this bad?","text":"<p>Creating a lock (via <code>threading.Lock</code> or similar) in a <code>with</code> statement has no effect, as locks are only relevant when shared between threads.</p> <p>Instead, assign the lock to a variable outside the <code>with</code> statement, and share that variable between threads.</p>","tags":["PLW2101"]},{"location":"rules/useless-with-lock/#example","title":"Example","text":"<pre><code>import threading\ncounter = 0\ndef increment():\nglobal counter\nwith threading.Lock():\ncounter += 1\n</code></pre> <p>Use instead:</p> <pre><code>import threading\ncounter = 0\nlock = threading.Lock()\ndef increment():\nglobal counter\nwith lock:\ncounter += 1\n</code></pre>","tags":["PLW2101"]},{"location":"rules/useless-with-lock/#references","title":"References","text":"<ul> <li>Python documentation: <code>Lock Objects</code></li> </ul>","tags":["PLW2101"]},{"location":"rules/utf8-encoding-declaration/","title":"utf8-encoding-declaration (UP009)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP009"]},{"location":"rules/utf8-encoding-declaration/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary UTF-8 encoding declarations.</p>","tags":["UP009"]},{"location":"rules/utf8-encoding-declaration/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 3120 makes UTF-8 the default encoding, so a UTF-8 encoding declaration is unnecessary.</p>","tags":["UP009"]},{"location":"rules/utf8-encoding-declaration/#example","title":"Example","text":"<pre><code># -*- coding: utf-8 -*-\nprint(\"Hello, world!\")\n</code></pre> <p>Use instead:</p> <pre><code>print(\"Hello, world!\")\n</code></pre>","tags":["UP009"]},{"location":"rules/verbose-decimal-constructor/","title":"verbose-decimal-constructor (FURB157)","text":"<p>Derived from the refurb linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB157"]},{"location":"rules/verbose-decimal-constructor/#what-it-does","title":"What it does","text":"<p>Checks for unnecessary string literal or float casts in <code>Decimal</code> constructors.</p>","tags":["FURB157"]},{"location":"rules/verbose-decimal-constructor/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>Decimal</code> constructor accepts a variety of arguments, including integers, floats, and strings. However, it's not necessary to cast integer literals to strings when passing them to the <code>Decimal</code>.</p> <p>Similarly, <code>Decimal</code> accepts <code>inf</code>, <code>-inf</code>, and <code>nan</code> as string literals, so there's no need to wrap those values in a <code>float</code> call when passing them to the <code>Decimal</code> constructor.</p> <p>Prefer the more concise form of argument passing for <code>Decimal</code> constructors, as it's more readable and idiomatic.</p>","tags":["FURB157"]},{"location":"rules/verbose-decimal-constructor/#example","title":"Example","text":"<pre><code>Decimal(\"0\")\nDecimal(float(\"Infinity\"))\n</code></pre> <p>Use instead:</p> <pre><code>Decimal(0)\nDecimal(\"Infinity\")\n</code></pre>","tags":["FURB157"]},{"location":"rules/verbose-decimal-constructor/#references","title":"References","text":"<ul> <li>Python documentation: <code>decimal</code></li> </ul>","tags":["FURB157"]},{"location":"rules/verbose-log-message/","title":"verbose-log-message (TRY401)","text":"<p>Derived from the tryceratops linter.</p>","tags":["TRY401"]},{"location":"rules/verbose-log-message/#what-it-does","title":"What it does","text":"<p>Checks for excessive logging of exception objects.</p>","tags":["TRY401"]},{"location":"rules/verbose-log-message/#why-is-this-bad","title":"Why is this bad?","text":"<p>When logging exceptions via <code>logging.exception</code>, the exception object is logged automatically. Including the exception object in the log message is redundant and can lead to excessive logging.</p>","tags":["TRY401"]},{"location":"rules/verbose-log-message/#example","title":"Example","text":"<pre><code>try:\n...\nexcept ValueError as e:\nlogger.exception(f\"Found an error: {e}\")\n</code></pre> <p>Use instead:</p> <pre><code>try:\n...\nexcept ValueError:\nlogger.exception(\"Found an error\")\n</code></pre>","tags":["TRY401"]},{"location":"rules/verbose-raise/","title":"verbose-raise (TRY201)","text":"<p>Derived from the tryceratops linter.</p> <p>Fix is always available.</p>","tags":["TRY201"]},{"location":"rules/verbose-raise/#what-it-does","title":"What it does","text":"<p>Checks for needless exception names in <code>raise</code> statements.</p>","tags":["TRY201"]},{"location":"rules/verbose-raise/#why-is-this-bad","title":"Why is this bad?","text":"<p>It's redundant to specify the exception name in a <code>raise</code> statement if the exception is being re-raised.</p>","tags":["TRY201"]},{"location":"rules/verbose-raise/#example","title":"Example","text":"<pre><code>def foo():\ntry:\n...\nexcept ValueError as exc:\nraise exc\n</code></pre> <p>Use instead:</p> <pre><code>def foo():\ntry:\n...\nexcept ValueError:\nraise\n</code></pre>","tags":["TRY201"]},{"location":"rules/verbose-raise/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as it doesn't properly handle bound exceptions that are shadowed between the <code>except</code> and <code>raise</code> statements.</p>","tags":["TRY201"]},{"location":"rules/wait-for-process-in-async-function/","title":"wait-for-process-in-async-function (ASYNC222)","text":"<p>Derived from the flake8-async linter.</p>","tags":["ASYNC222"]},{"location":"rules/wait-for-process-in-async-function/#what-it-does","title":"What it does","text":"<p>Checks that async functions do not wait on processes with blocking methods.</p>","tags":["ASYNC222"]},{"location":"rules/wait-for-process-in-async-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Blocking an async function via a blocking call will block the entire event loop, preventing it from executing other tasks while waiting for the call to complete, negating the benefits of asynchronous programming.</p> <p>Instead of making a blocking call, use an equivalent asynchronous library or function.</p>","tags":["ASYNC222"]},{"location":"rules/wait-for-process-in-async-function/#example","title":"Example","text":"<pre><code>async def foo():\nos.waitpid(0)\n</code></pre> <p>Use instead:</p> <pre><code>def wait_for_process():\nos.waitpid(0)\nasync def foo():\nawait asyncio.loop.run_in_executor(None, wait_for_process)\n</code></pre>","tags":["ASYNC222"]},{"location":"rules/weak-cryptographic-key/","title":"weak-cryptographic-key (S505)","text":"<p>Derived from the flake8-bandit linter.</p>","tags":["S505"]},{"location":"rules/weak-cryptographic-key/#what-it-does","title":"What it does","text":"<p>Checks for uses of cryptographic keys with vulnerable key sizes.</p>","tags":["S505"]},{"location":"rules/weak-cryptographic-key/#why-is-this-bad","title":"Why is this bad?","text":"<p>Small keys are easily breakable. For DSA and RSA, keys should be at least 2048 bits long. For EC, keys should be at least 224 bits long.</p>","tags":["S505"]},{"location":"rules/weak-cryptographic-key/#example","title":"Example","text":"<pre><code>from cryptography.hazmat.primitives.asymmetric import dsa, ec\ndsa.generate_private_key(key_size=512)\nec.generate_private_key(curve=ec.SECT163K1())\n</code></pre> <p>Use instead:</p> <pre><code>from cryptography.hazmat.primitives.asymmetric import dsa, ec\ndsa.generate_private_key(key_size=4096)\nec.generate_private_key(curve=ec.SECP384R1())\n</code></pre>","tags":["S505"]},{"location":"rules/weak-cryptographic-key/#references","title":"References","text":"<ul> <li>CSRC: Transitioning the Use of Cryptographic Algorithms and Key Lengths</li> </ul>","tags":["S505"]},{"location":"rules/whitespace-after-decorator/","title":"whitespace-after-decorator (E204)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E204"]},{"location":"rules/whitespace-after-decorator/#what-it-does","title":"What it does","text":"<p>Checks for trailing whitespace after a decorator's opening <code>@</code>.</p>","tags":["E204"]},{"location":"rules/whitespace-after-decorator/#why-is-this-bad","title":"Why is this bad?","text":"<p>Including whitespace after the <code>@</code> symbol is not compliant with PEP 8.</p>","tags":["E204"]},{"location":"rules/whitespace-after-decorator/#example","title":"Example","text":"<pre><code>@ decorator\ndef func():\npass\n</code></pre> <p>Use instead:</p> <pre><code>@decorator\ndef func():\npass\n</code></pre>","tags":["E204"]},{"location":"rules/whitespace-after-open-bracket/","title":"whitespace-after-open-bracket (E201)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E201"]},{"location":"rules/whitespace-after-open-bracket/#what-it-does","title":"What it does","text":"<p>Checks for the use of extraneous whitespace after \"(\".</p>","tags":["E201"]},{"location":"rules/whitespace-after-open-bracket/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the omission of whitespace in the following cases:</p> <ul> <li>\"Immediately inside parentheses, brackets or braces.\"</li> <li>\"Immediately before a comma, semicolon, or colon.\"</li> </ul>","tags":["E201"]},{"location":"rules/whitespace-after-open-bracket/#example","title":"Example","text":"<pre><code>spam( ham[1], {eggs: 2})\nspam(ham[ 1], {eggs: 2})\nspam(ham[1], { eggs: 2})\n</code></pre> <p>Use instead:</p> <pre><code>spam(ham[1], {eggs: 2})\n</code></pre>","tags":["E201"]},{"location":"rules/whitespace-before-close-bracket/","title":"whitespace-before-close-bracket (E202)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E202"]},{"location":"rules/whitespace-before-close-bracket/#what-it-does","title":"What it does","text":"<p>Checks for the use of extraneous whitespace before \")\".</p>","tags":["E202"]},{"location":"rules/whitespace-before-close-bracket/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the omission of whitespace in the following cases:</p> <ul> <li>\"Immediately inside parentheses, brackets or braces.\"</li> <li>\"Immediately before a comma, semicolon, or colon.\"</li> </ul>","tags":["E202"]},{"location":"rules/whitespace-before-close-bracket/#example","title":"Example","text":"<pre><code>spam(ham[1], {eggs: 2} )\nspam(ham[1 ], {eggs: 2})\nspam(ham[1], {eggs: 2 })\n</code></pre> <p>Use instead:</p> <pre><code>spam(ham[1], {eggs: 2})\n</code></pre>","tags":["E202"]},{"location":"rules/whitespace-before-parameters/","title":"whitespace-before-parameters (E211)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E211"]},{"location":"rules/whitespace-before-parameters/#what-it-does","title":"What it does","text":"<p>Checks for extraneous whitespace immediately preceding an open parenthesis or bracket.</p>","tags":["E211"]},{"location":"rules/whitespace-before-parameters/#why-is-this-bad","title":"Why is this bad?","text":"<p>According to PEP 8, open parentheses and brackets should not be preceded by any trailing whitespace.</p>","tags":["E211"]},{"location":"rules/whitespace-before-parameters/#example","title":"Example","text":"<pre><code>spam (1)\n</code></pre> <p>Use instead:</p> <pre><code>spam(1)\n</code></pre>","tags":["E211"]},{"location":"rules/whitespace-before-punctuation/","title":"whitespace-before-punctuation (E203)","text":"<p>Derived from the pycodestyle linter.</p> <p>Fix is always available.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["E203"]},{"location":"rules/whitespace-before-punctuation/#what-it-does","title":"What it does","text":"<p>Checks for the use of extraneous whitespace before \",\", \";\" or \":\".</p>","tags":["E203"]},{"location":"rules/whitespace-before-punctuation/#why-is-this-bad","title":"Why is this bad?","text":"<p>PEP 8 recommends the omission of whitespace in the following cases:</p> <ul> <li>\"Immediately inside parentheses, brackets or braces.\"</li> <li>\"Immediately before a comma, semicolon, or colon.\"</li> </ul>","tags":["E203"]},{"location":"rules/whitespace-before-punctuation/#example","title":"Example","text":"<pre><code>if x == 4: print(x, y); x, y = y , x\n</code></pre> <p>Use instead:</p> <pre><code>if x == 4: print(x, y); x, y = y, x\n</code></pre>","tags":["E203"]},{"location":"rules/write-whole-file/","title":"write-whole-file (FURB103)","text":"<p>Derived from the refurb linter.</p> <p>This rule is unstable and in preview. The <code>--preview</code> flag is required for use.</p>","tags":["FURB103"]},{"location":"rules/write-whole-file/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>open</code> and <code>write</code> that can be replaced by <code>pathlib</code> methods, like <code>Path.write_text</code> and <code>Path.write_bytes</code>.</p>","tags":["FURB103"]},{"location":"rules/write-whole-file/#why-is-this-bad","title":"Why is this bad?","text":"<p>When writing a single string to a file, it's simpler and more concise to use <code>pathlib</code> methods like <code>Path.write_text</code> and <code>Path.write_bytes</code> instead of <code>open</code> and <code>write</code> calls via <code>with</code> statements.</p>","tags":["FURB103"]},{"location":"rules/write-whole-file/#example","title":"Example","text":"<pre><code>with open(filename, \"w\") as f:\nf.write(contents)\n</code></pre> <p>Use instead:</p> <pre><code>from pathlib import Path\nPath(filename).write_text(contents)\n</code></pre>","tags":["FURB103"]},{"location":"rules/write-whole-file/#references","title":"References","text":"<ul> <li>Python documentation: <code>Path.write_bytes</code></li> <li>Python documentation: <code>Path.write_text</code></li> </ul>","tags":["FURB103"]},{"location":"rules/wrong-tuple-length-version-comparison/","title":"wrong-tuple-length-version-comparison (PYI005)","text":"<p>Derived from the flake8-pyi linter.</p>","tags":["PYI005"]},{"location":"rules/wrong-tuple-length-version-comparison/#what-it-does","title":"What it does","text":"<p>Checks for Python version comparisons that compare against a tuple of the wrong length.</p>","tags":["PYI005"]},{"location":"rules/wrong-tuple-length-version-comparison/#why-is-this-bad","title":"Why is this bad?","text":"<p>Stub files support simple conditionals to test for differences in Python versions and platforms. When comparing against <code>sys.version_info</code>, avoid comparing against tuples of the wrong length, which can lead to unexpected behavior.</p>","tags":["PYI005"]},{"location":"rules/wrong-tuple-length-version-comparison/#example","title":"Example","text":"<pre><code>import sys\nif sys.version_info[:2] == (3,): ...\n</code></pre> <p>Use instead:</p> <pre><code>import sys\nif sys.version_info[0] == 3: ...\n</code></pre>","tags":["PYI005"]},{"location":"rules/wrong-tuple-length-version-comparison/#references","title":"References","text":"<ul> <li>Typing documentation: Version and Platform checking</li> </ul>","tags":["PYI005"]},{"location":"rules/yield-from-in-async-function/","title":"yield-from-in-async-function (PLE1700)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE1700"]},{"location":"rules/yield-from-in-async-function/#what-it-does","title":"What it does","text":"<p>Checks for uses of <code>yield from</code> in async functions.</p>","tags":["PLE1700"]},{"location":"rules/yield-from-in-async-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>Python doesn't support the use of <code>yield from</code> in async functions, and will raise a <code>SyntaxError</code> in such cases.</p> <p>Instead, considering refactoring the code to use an <code>async for</code> loop instead.</p>","tags":["PLE1700"]},{"location":"rules/yield-from-in-async-function/#example","title":"Example","text":"<pre><code>async def numbers():\nyield from [1, 2, 3, 4, 5]\n</code></pre> <p>Use instead:</p> <pre><code>async def numbers():\nasync for number in [1, 2, 3, 4, 5]:\nyield number\n</code></pre>","tags":["PLE1700"]},{"location":"rules/yield-in-for-loop/","title":"yield-in-for-loop (UP028)","text":"<p>Derived from the pyupgrade linter.</p> <p>Fix is always available.</p>","tags":["UP028"]},{"location":"rules/yield-in-for-loop/#what-it-does","title":"What it does","text":"<p>Checks for <code>for</code> loops that can be replaced with <code>yield from</code> expressions.</p>","tags":["UP028"]},{"location":"rules/yield-in-for-loop/#why-is-this-bad","title":"Why is this bad?","text":"<p>If a <code>for</code> loop only contains a <code>yield</code> statement, it can be replaced with a <code>yield from</code> expression, which is more concise and idiomatic.</p>","tags":["UP028"]},{"location":"rules/yield-in-for-loop/#example","title":"Example","text":"<pre><code>for x in foo:\nyield x\n</code></pre> <p>Use instead:</p> <pre><code>yield from foo\n</code></pre>","tags":["UP028"]},{"location":"rules/yield-in-for-loop/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe, as converting a <code>for</code> loop to a <code>yield from</code> expression can change the behavior of the program in rare cases. For example, if a generator is being sent values via <code>send</code>, then rewriting to a <code>yield from</code> could lead to an attribute error if the underlying generator does not implement the <code>send</code> method.</p> <p>In most cases, however, the fix is safe, and such a modification should have no effect on the behavior of the program.</p>","tags":["UP028"]},{"location":"rules/yield-in-for-loop/#references","title":"References","text":"<ul> <li>Python documentation: The <code>yield</code> statement</li> <li>PEP 380 \u2013 Syntax for Delegating to a Subgenerator</li> </ul>","tags":["UP028"]},{"location":"rules/yield-in-init/","title":"yield-in-init (PLE0100)","text":"<p>Derived from the Pylint linter.</p>","tags":["PLE0100"]},{"location":"rules/yield-in-init/#what-it-does","title":"What it does","text":"<p>Checks for <code>__init__</code> methods that are turned into generators by the inclusion of <code>yield</code> or <code>yield from</code> expressions.</p>","tags":["PLE0100"]},{"location":"rules/yield-in-init/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>__init__</code> method is the constructor for a given Python class, responsible for initializing, rather than creating, new objects.</p> <p>The <code>__init__</code> method has to return <code>None</code>. By including a <code>yield</code> or <code>yield from</code> expression in an <code>__init__</code>, the method will return a generator object when called at runtime, resulting in a runtime error.</p>","tags":["PLE0100"]},{"location":"rules/yield-in-init/#example","title":"Example","text":"<pre><code>class InitIsGenerator:\ndef __init__(self, i):\nyield i\n</code></pre>","tags":["PLE0100"]},{"location":"rules/yield-in-init/#references","title":"References","text":"<ul> <li>CodeQL: <code>py-init-method-is-generator</code></li> </ul>","tags":["PLE0100"]},{"location":"rules/yield-outside-function/","title":"yield-outside-function (F704)","text":"<p>Derived from the Pyflakes linter.</p>","tags":["F704"]},{"location":"rules/yield-outside-function/#what-it-does","title":"What it does","text":"<p>Checks for <code>yield</code>, <code>yield from</code>, and <code>await</code> usages outside of functions.</p>","tags":["F704"]},{"location":"rules/yield-outside-function/#why-is-this-bad","title":"Why is this bad?","text":"<p>The use of <code>yield</code>, <code>yield from</code>, or <code>await</code> outside of a function will raise a <code>SyntaxError</code>.</p>","tags":["F704"]},{"location":"rules/yield-outside-function/#example","title":"Example","text":"<pre><code>class Foo:\nyield 1\n</code></pre>","tags":["F704"]},{"location":"rules/yield-outside-function/#notebook-behavior","title":"Notebook behavior","text":"<p>As an exception, <code>await</code> is allowed at the top level of a Jupyter notebook (see: autoawait).</p>","tags":["F704"]},{"location":"rules/yield-outside-function/#references","title":"References","text":"<ul> <li>Python documentation: <code>yield</code></li> </ul>","tags":["F704"]},{"location":"rules/yoda-conditions/","title":"yoda-conditions (SIM300)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is sometimes available.</p>","tags":["SIM300"]},{"location":"rules/yoda-conditions/#what-it-does","title":"What it does","text":"<p>Checks for conditions that position a constant on the left-hand side of the comparison operator, rather than the right-hand side.</p>","tags":["SIM300"]},{"location":"rules/yoda-conditions/#why-is-this-bad","title":"Why is this bad?","text":"<p>These conditions (sometimes referred to as \"Yoda conditions\") are less readable than conditions that place the variable on the left-hand side of the comparison operator.</p> <p>In some languages, Yoda conditions are used to prevent accidental assignment in conditions (i.e., accidental uses of the <code>=</code> operator, instead of the <code>==</code> operator). However, Python does not allow assignments in conditions unless using the <code>:=</code> operator, so Yoda conditions provide no benefit in this regard.</p>","tags":["SIM300"]},{"location":"rules/yoda-conditions/#example","title":"Example","text":"<pre><code>if \"Foo\" == foo:\n...\n</code></pre> <p>Use instead:</p> <pre><code>if foo == \"Foo\":\n...\n</code></pre>","tags":["SIM300"]},{"location":"rules/yoda-conditions/#references","title":"References","text":"<ul> <li>Python documentation: Comparisons</li> <li>Python documentation: Assignment statements</li> </ul>","tags":["SIM300"]},{"location":"rules/zip-dict-keys-and-values/","title":"zip-dict-keys-and-values (SIM911)","text":"<p>Derived from the flake8-simplify linter.</p> <p>Fix is always available.</p>","tags":["SIM911"]},{"location":"rules/zip-dict-keys-and-values/#what-it-does","title":"What it does","text":"<p>Checks for use of <code>zip()</code> to iterate over keys and values of a dictionary at once.</p>","tags":["SIM911"]},{"location":"rules/zip-dict-keys-and-values/#why-is-this-bad","title":"Why is this bad?","text":"<p>The <code>dict</code> type provides an <code>.items()</code> method which is faster and more readable.</p>","tags":["SIM911"]},{"location":"rules/zip-dict-keys-and-values/#example","title":"Example","text":"<pre><code>flag_stars = {\"USA\": 50, \"Slovenia\": 3, \"Panama\": 2, \"Australia\": 6}\nfor country, stars in zip(flag_stars.keys(), flag_stars.values()):\nprint(f\"{country}'s flag has {stars} stars.\")\n</code></pre> <p>Use instead:</p> <pre><code>flag_stars = {\"USA\": 50, \"Slovenia\": 3, \"Panama\": 2, \"Australia\": 6}\nfor country, stars in flag_stars.items():\nprint(f\"{country}'s flag has {stars} stars.\")\n</code></pre>","tags":["SIM911"]},{"location":"rules/zip-dict-keys-and-values/#references","title":"References","text":"<ul> <li>Python documentation: <code>dict.items</code></li> </ul>","tags":["SIM911"]},{"location":"rules/zip-instead-of-pairwise/","title":"zip-instead-of-pairwise (RUF007)","text":"<p>Fix is sometimes available.</p>","tags":["RUF007"]},{"location":"rules/zip-instead-of-pairwise/#what-it-does","title":"What it does","text":"<p>Checks for use of <code>zip()</code> to iterate over successive pairs of elements.</p>","tags":["RUF007"]},{"location":"rules/zip-instead-of-pairwise/#why-is-this-bad","title":"Why is this bad?","text":"<p>When iterating over successive pairs of elements, prefer <code>itertools.pairwise()</code> over <code>zip()</code>.</p> <p><code>itertools.pairwise()</code> is more readable and conveys the intent of the code more clearly.</p>","tags":["RUF007"]},{"location":"rules/zip-instead-of-pairwise/#example","title":"Example","text":"<pre><code>letters = \"ABCD\"\nzip(letters, letters[1:])  # (\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"D\")\n</code></pre> <p>Use instead:</p> <pre><code>from itertools import pairwise\nletters = \"ABCD\"\npairwise(letters)  # (\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"D\")\n</code></pre>","tags":["RUF007"]},{"location":"rules/zip-instead-of-pairwise/#references","title":"References","text":"<ul> <li>Python documentation: <code>itertools.pairwise</code></li> </ul>","tags":["RUF007"]},{"location":"rules/zip-without-explicit-strict/","title":"zip-without-explicit-strict (B905)","text":"<p>Derived from the flake8-bugbear linter.</p> <p>Fix is always available.</p>","tags":["B905"]},{"location":"rules/zip-without-explicit-strict/#what-it-does","title":"What it does","text":"<p>Checks for <code>zip</code> calls without an explicit <code>strict</code> parameter.</p>","tags":["B905"]},{"location":"rules/zip-without-explicit-strict/#why-is-this-bad","title":"Why is this bad?","text":"<p>By default, if the iterables passed to <code>zip</code> are of different lengths, the resulting iterator will be silently truncated to the length of the shortest iterable. This can lead to subtle bugs.</p> <p>Pass <code>strict=True</code> to raise a <code>ValueError</code> if the iterables are of non-uniform length. Alternatively, if the iterables are deliberately different lengths, pass <code>strict=False</code> to make the intention explicit.</p>","tags":["B905"]},{"location":"rules/zip-without-explicit-strict/#example","title":"Example","text":"<pre><code>zip(a, b)\n</code></pre> <p>Use instead:</p> <pre><code>zip(a, b, strict=True)\n</code></pre>","tags":["B905"]},{"location":"rules/zip-without-explicit-strict/#fix-safety","title":"Fix safety","text":"<p>This rule's fix is marked as unsafe for <code>zip</code> calls that contain <code>**kwargs</code>, as adding a <code>strict</code> keyword argument to such a call may lead to a duplicate keyword argument error.</p>","tags":["B905"]},{"location":"rules/zip-without-explicit-strict/#references","title":"References","text":"<ul> <li>Python documentation: <code>zip</code></li> </ul>","tags":["B905"]}]}