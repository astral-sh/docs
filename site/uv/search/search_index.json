{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"uv","text":"<p>An extremely fast Python package and project manager, written in Rust.</p> <p> </p> <p> </p> <p> Installing Trio's dependencies with a warm cache. </p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>\ud83d\ude80 A single tool to replace <code>pip</code>, <code>pip-tools</code>, <code>pipx</code>, <code>poetry</code>, <code>pyenv</code>, <code>twine</code>, <code>virtualenv</code>,   and more.</li> <li>\u26a1\ufe0f 10-100x faster than <code>pip</code>.</li> <li>\ud83d\uddc2\ufe0f Provides comprehensive project management, with a   universal lockfile.</li> <li>\u2747\ufe0f Runs scripts, with support for   inline dependency metadata.</li> <li>\ud83d\udc0d Installs and manages Python versions.</li> <li>\ud83d\udee0\ufe0f Runs and installs tools published as Python packages.</li> <li>\ud83d\udd29 Includes a pip-compatible interface for a performance boost with a   familiar CLI.</li> <li>\ud83c\udfe2 Supports Cargo-style workspaces for scalable projects.</li> <li>\ud83d\udcbe Disk-space efficient, with a global cache for dependency deduplication.</li> <li>\u23ec Installable without Rust or Python via <code>curl</code> or <code>pip</code>.</li> <li>\ud83d\udda5\ufe0f Supports macOS, Linux, and Windows.</li> </ul> <p>uv is backed by Astral, the creators of Ruff.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install uv with our official standalone installer:</p> macOS and LinuxWindows <pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>PS&gt; powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>Then, check out the first steps or read on for a brief overview.</p> <p>Tip</p> <p>uv may also be installed with pip, Homebrew, and more. See all of the methods on the installation page.</p>"},{"location":"#projects","title":"Projects","text":"<p>uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to <code>rye</code> or <code>poetry</code>:</p> <pre><code>$ uv init example\nInitialized project `example` at `/home/user/example`\n$ cd example\n\n$ uv add ruff\nCreating virtual environment at: .venv\nResolved 2 packages in 170ms\n   Built example @ file:///home/user/example\nPrepared 2 packages in 627ms\nInstalled 2 packages in 1ms\n + example==0.1.0 (from file:///home/user/example)\n + ruff==0.5.4\n$ uv run ruff check\nAll checks passed!\n$ uv lock\nResolved 2 packages in 0.33ms\n$ uv sync\nResolved 2 packages in 0.70ms\nAudited 1 package in 0.02ms\n</code></pre> <p>See the project guide to get started.</p> <p>uv also supports building and publishing projects, even if they're not managed with uv. See the packaging guide to learn more.</p>"},{"location":"#scripts","title":"Scripts","text":"<p>uv manages dependencies and environments for single-file scripts.</p> <p>Create a new script and add inline metadata declaring its dependencies:</p> <pre><code>$ echo 'import requests; print(requests.get(\"https://astral.sh\"))' &gt; example.py\n\n$ uv add --script example.py requests\nUpdated `example.py`\n</code></pre> <p>Then, run the script in an isolated virtual environment:</p> <pre><code>$ uv run example.py\nReading inline script metadata from: example.py\nInstalled 5 packages in 12ms\n&lt;Response [200]&gt;\n</code></pre> <p>See the scripts guide to get started.</p>"},{"location":"#tools","title":"Tools","text":"<p>uv executes and installs command-line tools provided by Python packages, similar to <code>pipx</code>.</p> <p>Run a tool in an ephemeral environment using <code>uvx</code> (an alias for <code>uv tool run</code>):</p> <pre><code>$ uvx pycowsay 'hello world!'\nResolved 1 package in 167ms\nInstalled 1 package in 9ms\n + pycowsay==0.0.0.2\n  \"\"\"\n  ------------\n&lt; hello world! &gt;\n  ------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre> <p>Install a tool with <code>uv tool install</code>:</p> <pre><code>$ uv tool install ruff\nResolved 1 package in 6ms\nInstalled 1 package in 2ms\n + ruff==0.5.4\nInstalled 1 executable: ruff\n$ ruff --version\nruff 0.5.4\n</code></pre> <p>See the tools guide to get started.</p>"},{"location":"#python-versions","title":"Python versions","text":"<p>uv installs Python and allows quickly switching between versions.</p> <p>Install multiple Python versions:</p> <pre><code>$ uv python install 3.10 3.11 3.12\nSearching for Python versions matching: Python 3.10\nSearching for Python versions matching: Python 3.11\nSearching for Python versions matching: Python 3.12\nInstalled 3 versions in 3.42s\n + cpython-3.10.14-macos-aarch64-none\n + cpython-3.11.9-macos-aarch64-none\n + cpython-3.12.4-macos-aarch64-none\n</code></pre> <p>Download Python versions as needed:</p> <pre><code>$ uv venv --python 3.12.0\nUsing CPython 3.12.0\nCreating virtual environment at: .venv\nActivate with: source .venv/bin/activate\n$ uv run --python pypy@3.8 -- python\nPython 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)\n[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;&gt;\n</code></pre> <p>Use a specific Python version in the current directory:</p> <pre><code>$ uv python pin 3.11\nPinned `.python-version` to `3.11`\n</code></pre> <p>See the installing Python guide to get started.</p>"},{"location":"#the-pip-interface","title":"The pip interface","text":"<p>uv provides a drop-in replacement for common <code>pip</code>, <code>pip-tools</code>, and <code>virtualenv</code> commands.</p> <p>uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.</p> <p>Migrate to uv without changing your existing workflows \u2014 and experience a 10-100x speedup \u2014 with the <code>uv pip</code> interface.</p> <p>Compile requirements into a platform-independent requirements file:</p> <pre><code>$ uv pip compile docs/requirements.in \\\n--universal \\\n--output-file docs/requirements.txt\nResolved 43 packages in 12ms\n</code></pre> <p>Create a virtual environment:</p> <pre><code>$ uv venv\nUsing CPython 3.12.3\nCreating virtual environment at: .venv\nActivate with: source .venv/bin/activate\n</code></pre> <p>Install the locked requirements:</p> <pre><code>$ uv pip sync docs/requirements.txt\nResolved 43 packages in 11ms\nInstalled 43 packages in 208ms\n + babel==2.15.0\n + black==24.4.2\n + certifi==2024.7.4\n ...\n</code></pre> <p>See the pip interface documentation to get started.</p>"},{"location":"#learn-more","title":"Learn more","text":"<p>See the first steps or jump straight to the guides to start using uv.</p>"},{"location":"concepts/","title":"Concepts overview","text":"<p>Read the concept documents to learn more about uv's features:</p> <ul> <li>Projects</li> <li>Tools</li> <li>Python versions</li> <li>Configuration files</li> <li>Package indexes</li> <li>Resolution</li> <li>The uv build backend</li> <li>Authentication</li> <li>Caching</li> <li>The pip interface</li> </ul> <p>Looking for a quick introduction to features? See the guides instead.</p>"},{"location":"concepts/build-backend/","title":"The uv build backend","text":"<p>A build backend transforms a source tree (i.e., a directory) into a source distribution or a wheel.</p> <p>uv supports all build backends (as specified by PEP 517), but also provides a native build backend (<code>uv_build</code>) that integrates tightly with uv to improve performance and user experience.</p>"},{"location":"concepts/build-backend/#choosing-a-build-backend","title":"Choosing a build backend","text":"<p>The uv build backend is a great choice for most Python projects. It has reasonable defaults, with the goal of requiring zero configuration for most users, but provides flexible configuration to accommodate most Python project structures. It integrates tightly with uv, to improve messaging and user experience. It validates project metadata and structures, preventing common mistakes. And, finally, it's very fast.</p> <p>The uv build backend currently only supports pure Python code. An alternative backend is required to build a library with extension modules.</p> <p>Tip</p> <p>While the backend supports a number of options for configuring your project structure, when build scripts or a more flexible project layout are required, consider using the hatchling build backend instead.</p>"},{"location":"concepts/build-backend/#using-the-uv-build-backend","title":"Using the uv build backend","text":"<p>To use uv as a build backend in an existing project, add <code>uv_build</code> to the <code>[build-system]</code> section in your <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[build-system]\nrequires = [\"uv_build&gt;=0.9.6,&lt;0.10.0\"]\nbuild-backend = \"uv_build\"\n</code></pre> <p>Note</p> <p>The uv build backend follows the same versioning policy as uv. Including an upper bound on the <code>uv_build</code> version ensures that your package continues to build correctly as new versions are released.</p> <p>To create a new project that uses the uv build backend, use <code>uv init</code>:</p> <pre><code>$ uv init\n</code></pre> <p>When the project is built, e.g., with <code>uv build</code>, the uv build backend will be used to create the source distribution and wheel.</p>"},{"location":"concepts/build-backend/#bundled-build-backend","title":"Bundled build backend","text":"<p>The build backend is published as a separate package (<code>uv_build</code>) that is optimized for portability and small binary size. However, the <code>uv</code> executable also includes a copy of the build backend, which will be used during builds performed by uv, e.g., during <code>uv build</code>, if its version is compatible with the <code>uv_build</code> requirement. If it's not compatible, a compatible version of the <code>uv_build</code> package will be used. Other build frontends, such as <code>python -m build</code>, will always use the <code>uv_build</code> package, typically choosing the latest compatible version.</p>"},{"location":"concepts/build-backend/#modules","title":"Modules","text":"<p>Python packages are expected to contain one or more Python modules, which are directories containing an <code>__init__.py</code>. By default, a single root module is expected at <code>src/&lt;package_name&gt;/__init__.py</code>.</p> <p>For example, the structure for a project named <code>foo</code> would be:</p> <pre><code>pyproject.toml\nsrc\n\u2514\u2500\u2500 foo\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>uv normalizes the package name to determine the default module name: the package name is lowercased and dots and dashes are replaced with underscores, e.g., <code>Foo-Bar</code> would be converted to <code>foo_bar</code>.</p> <p>The <code>src/</code> directory is the default directory for module discovery.</p> <p>These defaults can be changed with the <code>module-name</code> and <code>module-root</code> settings. For example, to use a <code>FOO</code> module in the root directory, as in the project structure:</p> <pre><code>pyproject.toml\nFOO\n\u2514\u2500\u2500 __init__.py\n</code></pre> <p>The correct build configuration would be:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nmodule-name = \"FOO\"\nmodule-root = \"\"\n</code></pre>"},{"location":"concepts/build-backend/#namespace-packages","title":"Namespace packages","text":"<p>Namespace packages are intended for use-cases where multiple packages write modules into a shared namespace.</p> <p>Namespace package modules are identified by a <code>.</code> in the <code>module-name</code>. For example, to package the module <code>bar</code> in the shared namespace <code>foo</code>, the project structure would be:</p> <pre><code>pyproject.toml\nsrc\n\u2514\u2500\u2500 foo\n    \u2514\u2500\u2500 bar\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>And the <code>module-name</code> configuration would be:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nmodule-name = \"foo.bar\"\n</code></pre> <p>Important</p> <p>The <code>__init__.py</code> file is not included in <code>foo</code>, since it's the shared namespace module.</p> <p>It's also possible to have a complex namespace package with more than one root module, e.g., with the project structure:</p> <pre><code>pyproject.toml\nsrc\n\u251c\u2500\u2500 foo\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 bar\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>While we do not recommend this structure (i.e., you should use a workspace with multiple packages instead), it is supported by setting <code>module-name</code> to a list of names:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nmodule-name = [\"foo\", \"bar\"]\n</code></pre> <p>For packages with many modules or complex namespaces, the <code>namespace = true</code> option can be used to avoid explicitly declaring each module name, e.g.:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nnamespace = true\n</code></pre> <p>Warning</p> <p>Using <code>namespace = true</code> disables safety checks. Using an explicit list of module names is strongly recommended outside of legacy projects.</p> <p>The <code>namespace</code> option can also be used with <code>module-name</code> to explicitly declare the root, e.g., for the project structure:</p> <pre><code>pyproject.toml\nsrc\n\u2514\u2500\u2500 foo\n    \u251c\u2500\u2500 bar\n    \u2502   \u2514\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 baz\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>The recommended configuration would be:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nmodule-name = \"foo\"\nnamespace = true\n</code></pre>"},{"location":"concepts/build-backend/#stub-packages","title":"Stub packages","text":"<p>The build backend also supports building type stub packages, which are identified by the <code>-stubs</code> suffix on the package or module name, e.g., <code>foo-stubs</code>. The module name for type stub packages must end in <code>-stubs</code>, so uv will not normalize the <code>-</code> to an underscore. Additionally, uv will search for a <code>__init__.pyi</code> file. For example, the project structure would be:</p> <pre><code>pyproject.toml\nsrc\n\u2514\u2500\u2500 foo-stubs\n    \u2514\u2500\u2500 __init__.pyi\n</code></pre> <p>Type stub modules are also supported for namespace packages.</p>"},{"location":"concepts/build-backend/#file-inclusion-and-exclusion","title":"File inclusion and exclusion","text":"<p>The build backend is responsible for determining which files in a source tree should be packaged into the distributions.</p> <p>To determine which files to include in a source distribution, uv first adds the included files and directories, then removes the excluded files and directories. This means that exclusions always take precedence over inclusions.</p> <p>By default, uv excludes <code>__pycache__</code>, <code>*.pyc</code>, and <code>*.pyo</code>.</p> <p>When building a source distribution, the following files and directories are included:</p> <ul> <li>The <code>pyproject.toml</code></li> <li>The module under   <code>tool.uv.build-backend.module-root</code>.</li> <li>The files referenced by <code>project.license-files</code> and <code>project.readme</code>.</li> <li>All directories under <code>tool.uv.build-backend.data</code>.</li> <li>All files matching patterns from   <code>tool.uv.build-backend.source-include</code>.</li> </ul> <p>From these, items matching <code>tool.uv.build-backend.source-exclude</code> and the default excludes are removed.</p> <p>When building a wheel, the following files and directories are included:</p> <ul> <li>The module under   <code>tool.uv.build-backend.module-root</code></li> <li>The files referenced by <code>project.license-files</code>, which are copied into the <code>.dist-info</code> directory.</li> <li>The <code>project.readme</code>, which is copied into the project metadata.</li> <li>All directories under <code>tool.uv.build-backend.data</code>,   which are copied into the <code>.data</code> directory.</li> </ul> <p>From these, <code>tool.uv.build-backend.source-exclude</code>, <code>tool.uv.build-backend.wheel-exclude</code> and the default excludes are removed. The source dist excludes are applied to avoid source tree to wheel source builds including more files than source tree to source distribution to wheel build.</p> <p>There are no specific wheel includes. There must only be one top level module, and all data files must either be under the module root or in the appropriate data directory. Most packages store small data in the module root alongside the source code.</p> <p>Tip</p> <p>When using the uv build backend through a frontend that is not uv, such as pip or <code>python -m build</code>, debug logging can be enabled through environment variables with <code>RUST_LOG=uv=debug</code> or <code>RUST_LOG=uv=verbose</code>. When used through uv, the uv build backend shares the verbosity level of uv.</p>"},{"location":"concepts/build-backend/#include-and-exclude-syntax","title":"Include and exclude syntax","text":"<p>Includes are anchored, which means that <code>pyproject.toml</code> includes only <code>&lt;root&gt;/pyproject.toml</code> and not <code>&lt;root&gt;/bar/pyproject.toml</code>. To recursively include all files under a directory, use a <code>/**</code> suffix, e.g. <code>src/**</code>. Recursive inclusions are also anchored, e.g., <code>assets/**/sample.csv</code> includes all <code>sample.csv</code> files in <code>&lt;root&gt;/assets</code> or any of its children.</p> <p>Note</p> <p>For performance and reproducibility, avoid patterns without an anchor such as <code>**/sample.csv</code>.</p> <p>Excludes are not anchored, which means that <code>__pycache__</code> excludes all directories named <code>__pycache__</code> regardless of its parent directory. All children of an exclusion are excluded as well. To anchor a directory, use a <code>/</code> prefix, e.g., <code>/dist</code> will exclude only <code>&lt;root&gt;/dist</code>.</p> <p>All fields accepting patterns use the reduced portable glob syntax from PEP 639, with the addition that characters can be escaped with a backslash.</p>"},{"location":"concepts/cache/","title":"Caching","text":""},{"location":"concepts/cache/#dependency-caching","title":"Dependency caching","text":"<p>uv uses aggressive caching to avoid re-downloading (and re-building) dependencies that have already been accessed in prior runs.</p> <p>The specifics of uv's caching semantics vary based on the nature of the dependency:</p> <ul> <li>For registry dependencies (like those downloaded from PyPI), uv respects HTTP caching headers.</li> <li>For direct URL dependencies, uv respects HTTP caching headers, and also caches based on the   URL itself.</li> <li>For Git dependencies, uv caches based on the fully-resolved Git commit hash. As such,   <code>uv pip compile</code> will pin Git dependencies to a specific commit hash when writing the resolved   dependency set.</li> <li>For local dependencies, uv caches based on the last-modified time of the source archive (i.e.,   the local <code>.whl</code> or <code>.tar.gz</code> file). For directories, uv caches based on the last-modified time of   the <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file.</li> </ul> <p>If you're running into caching issues, uv includes a few escape hatches:</p> <ul> <li>To clear the cache entirely, run <code>uv cache clean</code>. To clear the cache for a specific package, run   <code>uv cache clean &lt;package-name&gt;</code>. For example, <code>uv cache clean ruff</code> will clear the cache for the   <code>ruff</code> package.</li> <li>To force uv to revalidate cached data for all dependencies, pass <code>--refresh</code> to any command (e.g.,   <code>uv sync --refresh</code> or <code>uv pip install --refresh ...</code>).</li> <li>To force uv to revalidate cached data for a specific dependency pass <code>--refresh-package</code> to any   command (e.g., <code>uv sync --refresh-package ruff</code> or <code>uv pip install --refresh-package ruff ...</code>).</li> <li>To force uv to ignore existing installed versions, pass <code>--reinstall</code> to any installation command   (e.g., <code>uv sync --reinstall</code> or <code>uv pip install --reinstall ...</code>). (Consider running   <code>uv cache clean &lt;package-name&gt;</code> first, to ensure that the cache is cleared prior to   reinstallation.)</li> </ul> <p>As a special case, uv will always rebuild and reinstall any local directory dependencies passed explicitly on the command-line (e.g., <code>uv pip install .</code>).</p>"},{"location":"concepts/cache/#dynamic-metadata","title":"Dynamic metadata","text":"<p>By default, uv will only rebuild and reinstall local directory dependencies (e.g., editables) if the <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file in the directory root has changed, or if a <code>src</code> directory is added or removed. This is a heuristic and, in some cases, may lead to fewer re-installs than desired.</p> <p>To incorporate additional information into the cache key for a given package, you can add cache key entries under <code>tool.uv.cache-keys</code>, which covers both file paths and Git commit hashes. Setting <code>tool.uv.cache-keys</code> will replace defaults, so any necessary files (like <code>pyproject.toml</code>) should still be included in the user-defined cache keys.</p> <p>For example, if a project specifies dependencies in <code>pyproject.toml</code> but uses <code>setuptools-scm</code> to manage its version, and should thus be rebuilt whenever the commit hash or dependencies change, you can add the following to the project's <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { git = { commit = true } }]\n</code></pre> <p>If your dynamic metadata incorporates information from the set of Git tags, you can expand the cache key to include the tags:</p> pyproject.toml<pre><code>[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { git = { commit = true, tags = true } }]\n</code></pre> <p>Similarly, if a project reads from a <code>requirements.txt</code> to populate its dependencies, you can add the following to the project's <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { file = \"requirements.txt\" }]\n</code></pre> <p>Globs are supported for <code>file</code> keys, following the syntax of the <code>glob</code> crate. For example, to invalidate the cache whenever a <code>.toml</code> file in the project directory or any of its subdirectories is modified, use the following:</p> pyproject.toml<pre><code>[tool.uv]\ncache-keys = [{ file = \"**/*.toml\" }]\n</code></pre> <p>Note</p> <p>The use of globs can be expensive, as uv may need to walk the filesystem to determine whether any files have changed. This may, in turn, requiring traversal of large or deeply nested directories.</p> <p>Similarly, if a project relies on an environment variable, you can add the following to the project's <code>pyproject.toml</code> to invalidate the cache whenever the environment variable changes:</p> pyproject.toml<pre><code>[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { env = \"MY_ENV_VAR\" }]\n</code></pre> <p>Finally, to invalidate a project whenever a specific directory (like <code>src</code>) is created or removed, add the following to the project's <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { dir = \"src\" }]\n</code></pre> <p>Note that the <code>dir</code> key will only track changes to the directory itself, and not arbitrary changes within the directory.</p> <p>As an escape hatch, if a project uses <code>dynamic</code> metadata that isn't covered by <code>tool.uv.cache-keys</code>, you can instruct uv to always rebuild and reinstall it by adding the project to the <code>tool.uv.reinstall-package</code> list:</p> pyproject.toml<pre><code>[tool.uv]\nreinstall-package = [\"my-package\"]\n</code></pre> <p>This will force uv to rebuild and reinstall <code>my-package</code> on every run, regardless of whether the package's <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file has changed.</p>"},{"location":"concepts/cache/#cache-safety","title":"Cache safety","text":"<p>It's safe to run multiple uv commands concurrently, even against the same virtual environment. uv's cache is designed to be thread-safe and append-only, and thus robust to multiple concurrent readers and writers. uv applies a file-based lock to the target virtual environment when installing, to avoid concurrent modifications across processes.</p> <p>Note that it's not safe to modify the uv cache (e.g., <code>uv cache clean</code>) while other uv commands are running, and never safe to modify the cache directly (e.g., by removing a file or directory).</p>"},{"location":"concepts/cache/#clearing-the-cache","title":"Clearing the cache","text":"<p>uv provides a few different mechanisms for removing entries from the cache:</p> <ul> <li><code>uv cache clean</code> removes all cache entries from the cache directory, clearing it out entirely.</li> <li><code>uv cache clean ruff</code> removes all cache entries for the <code>ruff</code> package, useful for invalidating   the cache for a single or finite set of packages.</li> <li><code>uv cache prune</code> removes all unused cache entries. For example, the cache directory may contain   entries created in previous uv versions that are no longer necessary and can be safely removed.   <code>uv cache prune</code> is safe to run periodically, to keep the cache directory clean.</li> </ul>"},{"location":"concepts/cache/#caching-in-continuous-integration","title":"Caching in continuous integration","text":"<p>It's common to cache package installation artifacts in continuous integration environments (like GitHub Actions or GitLab CI) to speed up subsequent runs.</p> <p>By default, uv caches both the wheels that it builds from source and the pre-built wheels that it downloads directly, to enable high-performance package installation.</p> <p>However, in continuous integration environments, persisting pre-built wheels may be undesirable. With uv, it turns out that it's often faster to omit pre-built wheels from the cache (and instead re-download them from the registry on each run). On the other hand, caching wheels that are built from source tends to be worthwhile, since the wheel building process can be expensive, especially for extension modules.</p> <p>To support this caching strategy, uv provides a <code>uv cache prune --ci</code> command, which removes all pre-built wheels and unzipped source distributions from the cache, but retains any wheels that were built from source. We recommend running <code>uv cache prune --ci</code> at the end of your continuous integration job to ensure maximum cache efficiency. For an example, see the GitHub integration guide.</p>"},{"location":"concepts/cache/#cache-directory","title":"Cache directory","text":"<p>uv determines the cache directory according to, in order:</p> <ol> <li>A temporary cache directory, if <code>--no-cache</code> was requested.</li> <li>The specific cache directory specified via <code>--cache-dir</code>, <code>UV_CACHE_DIR</code>, or    <code>tool.uv.cache-dir</code>.</li> <li>A system-appropriate cache directory, e.g., <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Unix and    <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows</li> </ol> <p>Note</p> <p>uv always requires a cache directory. When <code>--no-cache</code> is requested, uv will still use a temporary cache for sharing data within that single invocation.</p> <p>In most cases, <code>--refresh</code> should be used instead of <code>--no-cache</code> \u2014 as it will update the cache for subsequent operations but not read from the cache.</p> <p>It is important for performance for the cache directory to be located on the same file system as the Python environment uv is operating on. Otherwise, uv will not be able to link files from the cache into the environment and will instead need to fallback to slow copy operations.</p>"},{"location":"concepts/cache/#cache-versioning","title":"Cache versioning","text":"<p>The uv cache is composed of a number of buckets (e.g., a bucket for wheels, a bucket for source distributions, a bucket for Git repositories, and so on). Each bucket is versioned, such that if a release contains a breaking change to the cache format, uv will not attempt to read from or write to an incompatible cache bucket.</p> <p>For example, uv 0.4.13 included a breaking change to the core metadata bucket. As such, the bucket version was increased from v12 to v13. Within a cache version, changes are guaranteed to be both forwards- and backwards-compatible.</p> <p>Since changes in the cache format are accompanied by changes in the cache version, multiple versions of uv can safely read and write to the same cache directory. However, if the cache version changed between a given pair of uv releases, then those releases may not be able to share the same underlying cache entries.</p> <p>For example, it's safe to use a single shared cache for uv 0.4.12 and uv 0.4.13, though the cache itself may contain duplicate entries in the core metadata bucket due to the change in cache version.</p>"},{"location":"concepts/configuration-files/","title":"Configuration files","text":"<p>uv supports persistent configuration files at both the project- and user-level.</p> <p>Specifically, uv will search for a <code>pyproject.toml</code> or <code>uv.toml</code> file in the current directory, or in the nearest parent directory.</p> <p>Note</p> <p>For <code>tool</code> commands, which operate at the user level, local configuration files will be ignored. Instead, uv will exclusively read from user-level configuration (e.g., <code>~/.config/uv/uv.toml</code>) and system-level configuration (e.g., <code>/etc/uv/uv.toml</code>).</p> <p>In workspaces, uv will begin its search at the workspace root, ignoring any configuration defined in workspace members. Since the workspace is locked as a single unit, configuration is shared across all members.</p> <p>If a <code>pyproject.toml</code> file is found, uv will read configuration from the <code>[tool.uv]</code> table. For example, to set a persistent index URL, add the following to a <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nurl = \"https://test.pypi.org/simple\"\ndefault = true\n</code></pre> <p>(If there is no such table, the <code>pyproject.toml</code> file will be ignored, and uv will continue searching in the directory hierarchy.)</p> <p>uv will also search for <code>uv.toml</code> files, which follow an identical structure, but omit the <code>[tool.uv]</code> prefix. For example:</p> uv.toml<pre><code>[[index]]\nurl = \"https://test.pypi.org/simple\"\ndefault = true\n</code></pre> <p>Note</p> <p><code>uv.toml</code> files take precedence over <code>pyproject.toml</code> files, so if both <code>uv.toml</code> and <code>pyproject.toml</code> files are present in a directory, configuration will be read from <code>uv.toml</code>, and <code>[tool.uv]</code> section in the accompanying <code>pyproject.toml</code> will be ignored.</p> <p>uv will also discover user-level configuration at <code>~/.config/uv/uv.toml</code> (or <code>$XDG_CONFIG_HOME/uv/uv.toml</code>) on macOS and Linux, or <code>%APPDATA%\\uv\\uv.toml</code> on Windows; and system-level configuration at <code>/etc/uv/uv.toml</code> (or <code>$XDG_CONFIG_DIRS/uv/uv.toml</code>) on macOS and Linux, or <code>%SYSTEMDRIVE%\\ProgramData\\uv\\uv.toml</code> on Windows.</p> <p>User-and system-level configuration must use the <code>uv.toml</code> format, rather than the <code>pyproject.toml</code> format, as a <code>pyproject.toml</code> is intended to define a Python project.</p> <p>If project-, user-, and system-level configuration files are found, the settings will be merged, with project-level configuration taking precedence over the user-level configuration, and user-level configuration taking precedence over the system-level configuration. (If multiple system-level configuration files are found, e.g., at both <code>/etc/uv/uv.toml</code> and <code>$XDG_CONFIG_DIRS/uv/uv.toml</code>, only the first-discovered file will be used, with XDG taking priority.)</p> <p>For example, if a string, number, or boolean is present in both the project- and user-level configuration tables, the project-level value will be used, and the user-level value will be ignored. If an array is present in both tables, the arrays will be concatenated, with the project-level settings appearing earlier in the merged array.</p> <p>Settings provided via environment variables take precedence over persistent configuration, and settings provided via the command line take precedence over both.</p> <p>uv accepts a <code>--no-config</code> command-line argument which, when provided, disables the discovery of any persistent configuration.</p> <p>uv also accepts a <code>--config-file</code> command-line argument, which accepts a path to a <code>uv.toml</code> to use as the configuration file. When provided, this file will be used in place of any discovered configuration files (e.g., user-level configuration will be ignored).</p>"},{"location":"concepts/configuration-files/#settings","title":"Settings","text":"<p>See the settings reference for an enumeration of the available settings.</p>"},{"location":"concepts/configuration-files/#env","title":"<code>.env</code>","text":"<p><code>uv run</code> can load environment variables from dotenv files (e.g., <code>.env</code>, <code>.env.local</code>, <code>.env.development</code>), powered by the <code>dotenvy</code> crate.</p> <p>To load a <code>.env</code> file from a dedicated location, set the <code>UV_ENV_FILE</code> environment variable, or pass the <code>--env-file</code> flag to <code>uv run</code>.</p> <p>For example, to load environment variables from a <code>.env</code> file in the current working directory:</p> <pre><code>$ echo \"MY_VAR='Hello, world!'\" &gt; .env\n$ uv run --env-file .env -- python -c 'import os; print(os.getenv(\"MY_VAR\"))'\nHello, world!\n</code></pre> <p>The <code>--env-file</code> flag can be provided multiple times, with subsequent files overriding values defined in previous files. To provide multiple files via the <code>UV_ENV_FILE</code> environment variable, separate the paths with a space (e.g., <code>UV_ENV_FILE=\"/path/to/file1 /path/to/file2\"</code>).</p> <p>To disable dotenv loading (e.g., to override <code>UV_ENV_FILE</code> or the <code>--env-file</code> command-line argument), set the <code>UV_NO_ENV_FILE</code> environment variable to <code>1</code>, or pass the<code>--no-env-file</code> flag to <code>uv run</code>.</p> <p>If the same variable is defined in the environment and in a <code>.env</code> file, the value from the environment will take precedence.</p>"},{"location":"concepts/configuration-files/#configuring-the-pip-interface","title":"Configuring the pip interface","text":"<p>A dedicated <code>[tool.uv.pip]</code> section is provided for configuring just the <code>uv pip</code> command line interface. Settings in this section will not apply to <code>uv</code> commands outside the <code>uv pip</code> namespace. However, many of the settings in this section have corollaries in the top-level namespace which do apply to the <code>uv pip</code> interface unless they are overridden by a value in the <code>uv.pip</code> section.</p> <p>The <code>uv.pip</code> settings are designed to adhere closely to pip's interface and are declared separately to retain compatibility while allowing the global settings to use alternate designs (e.g., <code>--no-build</code>).</p> <p>As an example, setting the <code>index-url</code> under <code>[tool.uv.pip]</code>, as in the following <code>pyproject.toml</code>, would only affect the <code>uv pip</code> subcommands (e.g., <code>uv pip install</code>, but not <code>uv sync</code>, <code>uv lock</code>, or <code>uv run</code>):</p> pyproject.toml<pre><code>[tool.uv.pip]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre>"},{"location":"concepts/indexes/","title":"Package indexes","text":"<p>By default, uv uses the Python Package Index (PyPI) for dependency resolution and package installation. However, uv can be configured to use other package indexes, including private indexes, via the <code>[[tool.uv.index]]</code> configuration option (and <code>--index</code>, the analogous command-line option).</p>"},{"location":"concepts/indexes/#defining-an-index","title":"Defining an index","text":"<p>To include an additional index when resolving dependencies, add a <code>[[tool.uv.index]]</code> entry to your <code>pyproject.toml</code>:</p> <pre><code>[[tool.uv.index]]\n# Optional name for the index.\nname = \"pytorch\"\n# Required URL for the index.\nurl = \"https://download.pytorch.org/whl/cpu\"\n</code></pre> <p>Indexes are prioritized in the order in which they\u2019re defined, such that the first index listed in the configuration file is the first index consulted when resolving dependencies, with indexes provided via the command line taking precedence over those in the configuration file.</p> <p>By default, uv includes the Python Package Index (PyPI) as the \"default\" index, i.e., the index used when a package is not found on any other index. To exclude PyPI from the list of indexes, set <code>default = true</code> on another index entry (or use the <code>--default-index</code> command-line option):</p> <pre><code>[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\ndefault = true\n</code></pre> <p>The default index is always treated as lowest priority, regardless of its position in the list of indexes.</p> <p>Index names may only contain alphanumeric characters, dashes, underscores, and periods, and must be valid ASCII.</p> <p>When providing an index on the command line (with <code>--index</code> or <code>--default-index</code>) or through an environment variable (<code>UV_INDEX</code> or <code>UV_DEFAULT_INDEX</code>), names are optional but can be included using the <code>&lt;name&gt;=&lt;url&gt;</code> syntax, as in:</p> <pre><code># On the command line.\n$ uv lock --index pytorch=https://download.pytorch.org/whl/cpu\n# Via an environment variable.\n$ UV_INDEX=pytorch=https://download.pytorch.org/whl/cpu uv lock\n</code></pre>"},{"location":"concepts/indexes/#pinning-a-package-to-an-index","title":"Pinning a package to an index","text":"<p>A package can be pinned to a specific index by specifying the index in its <code>tool.uv.sources</code> entry. For example, to ensure that <code>torch</code> is always installed from the <code>pytorch</code> index, add the following to your <code>pyproject.toml</code>:</p> <pre><code>[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n</code></pre> <p>Similarly, to pull from a different index based on the platform, you can provide a list of sources disambiguated by environment markers:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"torch\"]\n[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cu118\", marker = \"sys_platform == 'darwin'\"},\n{ index = \"pytorch-cu124\", marker = \"sys_platform != 'darwin'\"},\n]\n[[tool.uv.index]]\nname = \"pytorch-cu118\"\nurl = \"https://download.pytorch.org/whl/cu118\"\n[[tool.uv.index]]\nname = \"pytorch-cu124\"\nurl = \"https://download.pytorch.org/whl/cu124\"\n</code></pre> <p>An index can be marked as <code>explicit = true</code> to prevent packages from being installed from that index unless explicitly pinned to it. For example, to ensure that <code>torch</code> is installed from the <code>pytorch</code> index, but all other packages are installed from PyPI, add the following to your <code>pyproject.toml</code>:</p> <pre><code>[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n</code></pre> <p>Named indexes referenced via <code>tool.uv.sources</code> must be defined within the project's <code>pyproject.toml</code> file; indexes provided via the command-line, environment variables, or user-level configuration will not be recognized.</p> <p>If an index is marked as both <code>default = true</code> and <code>explicit = true</code>, it will be treated as an explicit index (i.e., only usable via <code>tool.uv.sources</code>) while also removing PyPI as the default index.</p>"},{"location":"concepts/indexes/#searching-across-multiple-indexes","title":"Searching across multiple indexes","text":"<p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>).</p> <p>For example, if an internal index is specified via <code>[[tool.uv.index]]</code>, uv's behavior is such that if a package exists on that internal index, it will always be installed from that internal index, and never from PyPI. The intent is to prevent \"dependency confusion\" attacks, in which an attacker publishes a malicious package on PyPI with the same name as an internal package, thus causing the malicious package to be installed instead of the internal package. See, for example, the <code>torchtriton</code> attack from December 2022.</p> <p>To opt in to alternate index behaviors, use the<code>--index-strategy</code> command-line option, or the <code>UV_INDEX_STRATEGY</code> environment variable, which supports the following values:</p> <ul> <li><code>first-index</code> (default): Search for each package across all indexes, limiting the candidate   versions to those present in the first index that contains the package.</li> <li><code>unsafe-first-match</code>: Search for each package across all indexes, but prefer the first index with   a compatible version, even if newer versions are available on other indexes.</li> <li><code>unsafe-best-match</code>: Search for each package across all indexes, and select the best version from   the combined set of candidate versions.</li> </ul> <p>While <code>unsafe-best-match</code> is the closest to pip's behavior, it exposes users to the risk of \"dependency confusion\" attacks.</p>"},{"location":"concepts/indexes/#authentication","title":"Authentication","text":"<p>Most private package indexes require authentication to access packages, typically via a username and password (or access token).</p> <p>Tip</p> <p>See the alternative index guide for details on authenticating with specific private index providers, e.g., from AWS, Azure, or GCP.</p>"},{"location":"concepts/indexes/#providing-credentials-directly","title":"Providing credentials directly","text":"<p>Credentials can be provided directly via environment variables or by embedding them in the URL.</p> <p>For example, given an index named <code>internal-proxy</code> that requires a username (<code>public</code>) and password (<code>koala</code>), define the index (without credentials) in your <code>pyproject.toml</code>:</p> <pre><code>[[tool.uv.index]]\nname = \"internal-proxy\"\nurl = \"https://example.com/simple\"\n</code></pre> <p>From there, you can set the <code>UV_INDEX_INTERNAL_PROXY_USERNAME</code> and <code>UV_INDEX_INTERNAL_PROXY_PASSWORD</code> environment variables, where <code>INTERNAL_PROXY</code> is the uppercase version of the index name, with non-alphanumeric characters replaced by underscores:</p> <pre><code>export UV_INDEX_INTERNAL_PROXY_USERNAME=public\nexport UV_INDEX_INTERNAL_PROXY_PASSWORD=koala\n</code></pre> <p>By providing credentials via environment variables, you can avoid storing sensitive information in the plaintext <code>pyproject.toml</code> file.</p> <p>Alternatively, credentials can be embedded directly in the index definition:</p> <pre><code>[[tool.uv.index]]\nname = \"internal\"\nurl = \"https://public:koala@pypi-proxy.corp.dev/simple\"\n</code></pre> <p>For security purposes, credentials are never stored in the <code>uv.lock</code> file; as such, uv must have access to the authenticated URL at installation time.</p>"},{"location":"concepts/indexes/#using-credential-providers","title":"Using credential providers","text":"<p>In addition to providing credentials directly, uv supports discovery of credentials from netrc and keyring. See the HTTP authentication documentation for details on setting up specific credential providers.</p> <p>By default, uv will attempt an unauthenticated request before querying providers. If the request fails, uv will search for credentials. If credentials are found, an authenticated request will be attempted.</p> <p>Note</p> <p>If a username is set, uv will search for credentials before making an unauthenticated request.</p> <p>Some indexes (e.g., GitLab) will forward unauthenticated requests to a public index, like PyPI \u2014 which means that uv will not search for credentials. This behavior can be changed per-index, using the <code>authenticate</code> setting. For example, to always search for credentials:</p> <pre><code>[[tool.uv.index]]\nname = \"example\"\nurl = \"https://example.com/simple\"\nauthenticate = \"always\"\n</code></pre> <p>When <code>authenticate</code> is set to <code>always</code>, uv will eagerly search for credentials and error if credentials cannot be found.</p>"},{"location":"concepts/indexes/#ignoring-error-codes-when-searching-across-indexes","title":"Ignoring error codes when searching across indexes","text":"<p>When using the first-index strategy, uv will stop searching across indexes if an HTTP 401 Unauthorized or HTTP 403 Forbidden status code is encountered. The one exception is that uv will ignore 403s when searching the <code>pytorch</code> index (since this index returns a 403 when a package is not present).</p> <p>To configure which error codes are ignored for an index, use the <code>ignored-error-codes</code> setting. For example, to ignore 403s (but not 401s) for a private index:</p> <pre><code>[[tool.uv.index]]\nname = \"private-index\"\nurl = \"https://private-index.com/simple\"\nauthenticate = \"always\"\nignore-error-codes = [403]\n</code></pre> <p>uv will always continue searching across indexes when it encounters a <code>404 Not Found</code>. This cannot be overridden.</p>"},{"location":"concepts/indexes/#disabling-authentication","title":"Disabling authentication","text":"<p>To prevent leaking credentials, authentication can be disabled for an index:</p> <pre><code>[[tool.uv.index]]\nname = \"example\"\nurl = \"https://example.com/simple\"\nauthenticate = \"never\"\n</code></pre> <p>When <code>authenticate</code> is set to <code>never</code>, uv will never search for credentials for the given index and will error if credentials are provided directly.</p>"},{"location":"concepts/indexes/#customizing-cache-control-headers","title":"Customizing cache control headers","text":"<p>By default, uv will respect the cache control headers provided by the index. For example, PyPI serves package metadata with a <code>max-age=600</code> header, thereby allowing uv to cache package metadata for 10 minutes; and wheels and source distributions with a <code>max-age=365000000, immutable</code> header, thereby allowing uv to cache artifacts indefinitely.</p> <p>To override the cache control headers for an index, use the <code>cache-control</code> setting:</p> <pre><code>[[tool.uv.index]]\nname = \"example\"\nurl = \"https://example.com/simple\"\ncache-control = { api = \"max-age=600\", files = \"max-age=365000000, immutable\" }\n</code></pre> <p>The <code>cache-control</code> setting accepts an object with two optional keys:</p> <ul> <li><code>api</code>: Controls caching for Simple API requests (package metadata).</li> <li><code>files</code>: Controls caching for artifact downloads (wheels and source distributions).</li> </ul> <p>The values for these keys are strings that follow the HTTP Cache-Control syntax. For example, to force uv to always revalidate package metadata, set <code>api = \"no-cache\"</code>:</p> <pre><code>[[tool.uv.index]]\nname = \"example\"\nurl = \"https://example.com/simple\"\ncache-control = { api = \"no-cache\" }\n</code></pre> <p>This setting is most commonly used to override the default cache control headers for private indexes that otherwise disable caching, often unintentionally. We typically recommend following PyPI's approach to caching headers, i.e., setting <code>api = \"max-age=600\"</code> and <code>files = \"max-age=365000000, immutable\"</code>.</p>"},{"location":"concepts/indexes/#flat-indexes","title":"\"Flat\" indexes","text":"<p>By default, <code>[[tool.uv.index]]</code> entries are assumed to be PyPI-style registries that implement the PEP 503 Simple Repository API. However, uv also supports \"flat\" indexes, which are local directories or HTML pages that contain flat lists of wheels and source distributions. In pip, such indexes are specified using the <code>--find-links</code> option.</p> <p>To define a flat index in your <code>pyproject.toml</code>, use the <code>format = \"flat\"</code> option:</p> <pre><code>[[tool.uv.index]]\nname = \"example\"\nurl = \"/path/to/directory\"\nformat = \"flat\"\n</code></pre> <p>Flat indexes support the same feature set as Simple Repository API indexes (e.g., <code>explicit = true</code>); you can also pin a package to a flat index using <code>tool.uv.sources</code>.</p>"},{"location":"concepts/indexes/#-index-url-and-extra-index-url","title":"<code>--index-url</code> and <code>--extra-index-url</code>","text":"<p>In addition to the <code>[[tool.uv.index]]</code> configuration option, uv supports pip-style <code>--index-url</code> and <code>--extra-index-url</code> command-line options for compatibility, where <code>--index-url</code> defines the default index and <code>--extra-index-url</code> defines additional indexes.</p> <p>These options can be used in conjunction with the <code>[[tool.uv.index]]</code> configuration option, and follow the same prioritization rules:</p> <ul> <li>The default index is always treated as lowest priority, whether defined via the legacy   <code>--index-url</code> argument, the recommended <code>--default-index</code> argument, or a <code>[[tool.uv.index]]</code> entry   with <code>default = true</code>.</li> <li>Indexes are consulted in the order in which they\u2019re defined, either via the legacy   <code>--extra-index-url</code> argument, the recommended <code>--index</code> argument, or <code>[[tool.uv.index]]</code> entries.</li> </ul> <p>In effect, <code>--index-url</code> and <code>--extra-index-url</code> can be thought of as unnamed <code>[[tool.uv.index]]</code> entries, with <code>default = true</code> enabled for the former. In that context, <code>--index-url</code> maps to <code>--default-index</code>, and <code>--extra-index-url</code> maps to <code>--index</code>.</p>"},{"location":"concepts/preview/","title":"Preview features","text":"<p>uv includes opt-in preview features to provide an opportunity for community feedback and increase confidence that changes are a net-benefit before enabling them for everyone.</p>"},{"location":"concepts/preview/#enabling-preview-features","title":"Enabling preview features","text":"<p>To enable all preview features, use the <code>--preview</code> flag:</p> <pre><code>$ uv run --preview ...\n</code></pre> <p>Or, set the <code>UV_PREVIEW</code> environment variable:</p> <pre><code>$ UV_PREVIEW=1 uv run ...\n</code></pre> <p>To enable specific preview features, use the <code>--preview-features</code> flag:</p> <pre><code>$ uv run --preview-features foo ...\n</code></pre> <p>The <code>--preview-features</code> flag can be repeated to enable multiple features:</p> <pre><code>$ uv run --preview-features foo --preview-features bar ...\n</code></pre> <p>Or, features can be provided in a comma separated list:</p> <pre><code>$ uv run --preview-features foo,bar ...\n</code></pre> <p>The <code>UV_PREVIEW_FEATURES</code> environment variable can be used similarly, e.g.:</p> <pre><code>$ UV_PREVIEW_FEATURES=foo,bar uv run ...\n</code></pre> <p>For backwards compatibility, enabling preview features that do not exist will warn, but not error.</p>"},{"location":"concepts/preview/#using-preview-features","title":"Using preview features","text":"<p>Often, preview features can be used without changing any preview settings if the behavior change is gated by some sort of user interaction, For example, while <code>pylock.toml</code> support is in preview, you can use <code>uv pip install</code> with a <code>pylock.toml</code> file without additional configuration because specifying the <code>pylock.toml</code> file indicates you want to use the feature. However, a warning will be displayed that the feature is in preview. The preview feature can be enabled to silence the warning.</p> <p>Other preview features change behavior without changes to your use of uv. For example, when the <code>python-upgrade</code> feature is enabled, the default behavior of <code>uv python install</code> changes to allow uv to upgrade Python versions transparently. This feature requires enabling the preview flag for proper usage.</p>"},{"location":"concepts/preview/#available-preview-features","title":"Available preview features","text":"<p>The following preview features are available:</p> <ul> <li><code>add-bounds</code>: Allows configuring the   default bounds for <code>uv add</code> invocations.</li> <li><code>json-output</code>: Allows <code>--output-format json</code> for various uv commands.</li> <li><code>package-conflicts</code>: Allows defining workspace conflicts at the package level.</li> <li><code>pylock</code>: Allows installing from <code>pylock.toml</code> files.</li> <li><code>python-install-default</code>: Allows   installing <code>python</code> and <code>python3</code> executables.</li> <li><code>python-upgrade</code>: Allows   transparent Python version upgrades.</li> <li><code>format</code>: Allows using <code>uv format</code>.</li> <li><code>native-auth</code>: Enables storage of credentials in a   system-native location.</li> </ul>"},{"location":"concepts/preview/#disabling-preview-features","title":"Disabling preview features","text":"<p>The <code>--no-preview</code> option can be used to disable preview features.</p>"},{"location":"concepts/python-versions/","title":"Python versions","text":"<p>A Python version is composed of a Python interpreter (i.e. the <code>python</code> executable), the standard library, and other supporting files.</p>"},{"location":"concepts/python-versions/#managed-and-system-python-installations","title":"Managed and system Python installations","text":"<p>Since it is common for a system to have an existing Python installation, uv supports discovering Python versions. However, uv also supports installing Python versions itself. To distinguish between these two types of Python installations, uv refers to Python versions it installs as managed Python installations and all other Python installations as system Python installations.</p> <p>Note</p> <p>uv does not distinguish between Python versions installed by the operating system vs those installed and managed by other tools. For example, if a Python installation is managed with <code>pyenv</code>, it would still be considered a system Python version in uv.</p>"},{"location":"concepts/python-versions/#requesting-a-version","title":"Requesting a version","text":"<p>A specific Python version can be requested with the <code>--python</code> flag in most uv commands. For example, when creating a virtual environment:</p> <pre><code>$ uv venv --python 3.11.6\n</code></pre> <p>uv will ensure that Python 3.11.6 is available \u2014 downloading and installing it if necessary \u2014 then create the virtual environment with it.</p> <p>The following Python version request formats are supported:</p> <ul> <li><code>&lt;version&gt;</code> (e.g., <code>3</code>, <code>3.12</code>, <code>3.12.3</code>)</li> <li><code>&lt;version-specifier&gt;</code> (e.g., <code>&gt;=3.12,&lt;3.13</code>)</li> <li><code>&lt;version&gt;&lt;short-variant&gt;</code> (e.g., <code>3.13t</code>, <code>3.12.0d</code>)</li> <li><code>&lt;version&gt;+&lt;variant&gt;</code> (e.g., <code>3.13+freethreaded</code>, <code>3.12.0+debug</code>)</li> <li><code>&lt;implementation&gt;</code> (e.g., <code>cpython</code> or <code>cp</code>)</li> <li><code>&lt;implementation&gt;@&lt;version&gt;</code> (e.g., <code>cpython@3.12</code>)</li> <li><code>&lt;implementation&gt;&lt;version&gt;</code> (e.g., <code>cpython3.12</code> or <code>cp312</code>)</li> <li><code>&lt;implementation&gt;&lt;version-specifier&gt;</code> (e.g., <code>cpython&gt;=3.12,&lt;3.13</code>)</li> <li><code>&lt;implementation&gt;-&lt;version&gt;-&lt;os&gt;-&lt;arch&gt;-&lt;libc&gt;</code> (e.g., <code>cpython-3.12.3-macos-aarch64-none</code>)</li> </ul> <p>Additionally, a specific system Python interpreter can be requested with:</p> <ul> <li><code>&lt;executable-path&gt;</code> (e.g., <code>/opt/homebrew/bin/python3</code>)</li> <li><code>&lt;executable-name&gt;</code> (e.g., <code>mypython3</code>)</li> <li><code>&lt;install-dir&gt;</code> (e.g., <code>/some/environment/</code>)</li> </ul> <p>By default, uv will automatically download Python versions if they cannot be found on the system. This behavior can be disabled with the <code>python-downloads</code> option.</p>"},{"location":"concepts/python-versions/#python-version-files","title":"Python version files","text":"<p>The <code>.python-version</code> file can be used to create a default Python version request. uv searches for a <code>.python-version</code> file in the working directory and each of its parents. If none is found, uv will check the user-level configuration directory. Any of the request formats described above can be used, though use of a version number is recommended for interoperability with other tools.</p> <p>A <code>.python-version</code> file can be created in the current directory with the <code>uv python pin</code> command.</p> <p>A global <code>.python-version</code> file can be created in the user configuration directory with the <code>uv python pin --global</code> command.</p> <p>Discovery of <code>.python-version</code> files can be disabled with <code>--no-config</code>.</p> <p>uv will not search for <code>.python-version</code> files beyond project or workspace boundaries (except the user configuration directory).</p>"},{"location":"concepts/python-versions/#installing-a-python-version","title":"Installing a Python version","text":"<p>uv bundles a list of downloadable CPython and PyPy distributions for macOS, Linux, and Windows.</p> <p>Tip</p> <p>By default, Python versions are automatically downloaded as needed without using <code>uv python install</code>.</p> <p>To install a Python version at a specific version:</p> <pre><code>$ uv python install 3.12.3\n</code></pre> <p>To install the latest patch version:</p> <pre><code>$ uv python install 3.12\n</code></pre> <p>To install a version that satisfies constraints:</p> <pre><code>$ uv python install '&gt;=3.8,&lt;3.10'\n</code></pre> <p>To install multiple versions:</p> <pre><code>$ uv python install 3.9 3.10 3.11\n</code></pre> <p>To install a specific implementation:</p> <pre><code>$ uv python install pypy\n</code></pre> <p>All the Python version request formats are supported except those that are used for requesting local interpreters such as a file path.</p> <p>By default <code>uv python install</code> will verify that a managed Python version is installed or install the latest version. If a <code>.python-version</code> file is present, uv will install the Python version listed in the file. A project that requires multiple Python versions may define a <code>.python-versions</code> file. If present, uv will install all the Python versions listed in the file.</p> <p>Important</p> <p>The available Python versions are frozen for each uv release. To install new Python versions, you may need upgrade uv.</p>"},{"location":"concepts/python-versions/#installing-python-executables","title":"Installing Python executables","text":"<p>uv installs Python executables into your <code>PATH</code> by default, e.g., <code>uv python install 3.12</code> will install a Python executable into <code>~/.local/bin</code>, e.g., as <code>python3.12</code>.</p> <p>Tip</p> <p>If <code>~/.local/bin</code> is not in your <code>PATH</code>, you can add it with <code>uv tool update-shell</code>.</p> <p>To install <code>python</code> and <code>python3</code> executables, include the experimental <code>--default</code> option:</p> <pre><code>$ uv python install 3.12 --default\n</code></pre> <p>When installing Python executables, uv will only overwrite an existing executable if it is managed by uv \u2014 e.g., if <code>~/.local/bin/python3.12</code> exists already uv will not overwrite it without the <code>--force</code> flag.</p> <p>uv will update executables that it manages. However, it will prefer the latest patch version of each Python minor version by default. For example:</p> <pre><code>$ uv python install 3.12.7  # Adds `python3.12` to `~/.local/bin`\n$ uv python install 3.12.6  # Does not update `python3.12`\n$ uv python install 3.12.8  # Updates `python3.12` to point to 3.12.8\n</code></pre>"},{"location":"concepts/python-versions/#upgrading-python-versions","title":"Upgrading Python versions","text":"<p>Important</p> <p>Support for upgrading Python versions is in preview. This means the behavior is experimental and subject to change.</p> <p>Upgrades are only supported for uv-managed Python versions.</p> <p>Upgrades are not currently supported for PyPy and GraalPy.</p> <p>uv allows transparently upgrading Python versions to the latest patch release, e.g., 3.13.4 to 3.13.5. uv does not allow transparently upgrading across minor Python versions, e.g., 3.12 to 3.13, because changing minor versions can affect dependency resolution.</p> <p>uv-managed Python versions can be upgraded to the latest supported patch release with the <code>python upgrade</code> command:</p> <p>To upgrade a Python version to the latest supported patch release:</p> <pre><code>$ uv python upgrade 3.12\n</code></pre> <p>To upgrade all installed Python versions:</p> <pre><code>$ uv python upgrade\n</code></pre> <p>After an upgrade, uv will prefer the new version, but will retain the existing version as it may still be used by virtual environments.</p> <p>If the Python version was installed with the <code>python-upgrade</code> preview feature enabled, e.g., <code>uv python install 3.12 --preview-features python-upgrade</code>, virtual environments using the Python version will be automatically upgraded to the new patch version.</p> <p>Note</p> <p>If the virtual environment was created before opting in to the preview mode, it will not be included in the automatic upgrades.</p> <p>If a virtual environment was created with an explicitly requested patch version, e.g., <code>uv venv -p 3.10.8</code>, it will not be transparently upgraded to a new version.</p>"},{"location":"concepts/python-versions/#minor-version-directories","title":"Minor version directories","text":"<p>Automatic upgrades for virtual environments are implemented using a directory with the Python minor version, e.g.:</p> <pre><code>~/.local/share/uv/python/cpython-3.12-macos-aarch64-none\n</code></pre> <p>which is a symbolic link (on Unix) or junction (on Windows) pointing to a specific patch version:</p> <pre><code>$ readlink ~/.local/share/uv/python/cpython-3.12-macos-aarch64-none\n~/.local/share/uv/python/cpython-3.12.11-macos-aarch64-none\n</code></pre> <p>If this link is resolved by another tool, e.g., by canonicalizing the Python interpreter path, and used to create a virtual environment, it will not be automatically upgraded.</p>"},{"location":"concepts/python-versions/#project-python-versions","title":"Project Python versions","text":"<p>uv will respect Python requirements defined in <code>requires-python</code> in the <code>pyproject.toml</code> file during project command invocations. The first Python version that is compatible with the requirement will be used, unless a version is otherwise requested, e.g., via a <code>.python-version</code> file or the <code>--python</code> flag.</p>"},{"location":"concepts/python-versions/#viewing-available-python-versions","title":"Viewing available Python versions","text":"<p>To list installed and available Python versions:</p> <pre><code>$ uv python list\n</code></pre> <p>To filter the Python versions, provide a request, e.g., to show all Python 3.13 interpreters:</p> <pre><code>$ uv python list 3.13\n</code></pre> <p>Or, to show all PyPy interpreters:</p> <pre><code>$ uv python list pypy\n</code></pre> <p>By default, downloads for other platforms and old patch versions are hidden.</p> <p>To view all versions:</p> <pre><code>$ uv python list --all-versions\n</code></pre> <p>To view Python versions for other platforms:</p> <pre><code>$ uv python list --all-platforms\n</code></pre> <p>To exclude downloads and only show installed Python versions:</p> <pre><code>$ uv python list --only-installed\n</code></pre> <p>See the <code>uv python list</code> reference for more details.</p>"},{"location":"concepts/python-versions/#finding-a-python-executable","title":"Finding a Python executable","text":"<p>To find a Python executable, use the <code>uv python find</code> command:</p> <pre><code>$ uv python find\n</code></pre> <p>By default, this will display the path to the first available Python executable. See the discovery rules for details about how executables are discovered.</p> <p>This interface also supports many request formats, e.g., to find a Python executable that has a version of 3.11 or newer:</p> <pre><code>$ uv python find '&gt;=3.11'\n</code></pre> <p>By default, <code>uv python find</code> will include Python versions from virtual environments. If a <code>.venv</code> directory is found in the working directory or any of the parent directories or the <code>VIRTUAL_ENV</code> environment variable is set, it will take precedence over any Python executables on the <code>PATH</code>.</p> <p>To ignore virtual environments, use the <code>--system</code> flag:</p> <pre><code>$ uv python find --system\n</code></pre>"},{"location":"concepts/python-versions/#discovery-of-python-versions","title":"Discovery of Python versions","text":"<p>When searching for a Python version, the following locations are checked:</p> <ul> <li>Managed Python installations in the <code>UV_PYTHON_INSTALL_DIR</code>.</li> <li>A Python interpreter on the <code>PATH</code> as <code>python</code>, <code>python3</code>, or <code>python3.x</code> on macOS and Linux, or   <code>python.exe</code> on Windows.</li> <li>On Windows, the Python interpreters in the Windows registry and Microsoft Store Python   interpreters (see <code>py --list-paths</code>) that match the requested version.</li> </ul> <p>In some cases, uv allows using a Python version from a virtual environment. In this case, the virtual environment's interpreter will be checked for compatibility with the request before searching for an installation as described above. See the pip-compatible virtual environment discovery documentation for details.</p> <p>When performing discovery, non-executable files will be ignored. Each discovered executable is queried for metadata to ensure it meets the requested Python version. If the query fails, the executable will be skipped. If the executable satisfies the request, it is used without inspecting additional executables.</p> <p>When searching for a managed Python version, uv will prefer newer versions first. When searching for a system Python version, uv will use the first compatible version \u2014 not the newest version.</p> <p>If a Python version cannot be found on the system, uv will check for a compatible managed Python version download.</p>"},{"location":"concepts/python-versions/#python-pre-releases","title":"Python pre-releases","text":"<p>Python pre-releases will not be selected by default. Python pre-releases will be used if there is no other available installation matching the request. For example, if only a pre-release version is available it will be used but otherwise a stable release version will be used. Similarly, if the path to a pre-release Python executable is provided then no other Python version matches the request and the pre-release version will be used.</p> <p>If a pre-release Python version is available and matches the request, uv will not download a stable Python version instead.</p>"},{"location":"concepts/python-versions/#free-threaded-python","title":"Free-threaded Python","text":"<p>uv supports discovering and installing free-threaded Python variants in CPython 3.13+.</p> <p>Free-threaded Python versions will not be selected by default. Free-threaded Python versions will only be selected when explicitly requested, e.g., with <code>3.13t</code> or <code>3.13+freethreaded</code>.</p>"},{"location":"concepts/python-versions/#debug-python-variants","title":"Debug Python variants","text":"<p>uv supports discovering and installing debug builds of Python, i.e., with debug assertions enabled.</p> <p>Important</p> <p>Debug builds of Python are slower and are not appropriate for general use.</p> <p>Debug builds will be used if there is no other available installation matching the request. For example, if only a debug version is available it will be used but otherwise a stable release version will be used. Similarly, if the path to a debug Python executable is provided then no other Python version matches the request and the debug version will be used.</p> <p>Debug builds of Python can be explicitly requested with, e.g., <code>3.13d</code> or <code>3.13+debug</code>.</p> <p>Note</p> <p>CPython versions installed by uv usually have debug symbols stripped to reduce the distribution size. These debug builds do not have debug symbols stripped, which can be useful when debugging Python processes with a C-level debugger.</p>"},{"location":"concepts/python-versions/#disabling-automatic-python-downloads","title":"Disabling automatic Python downloads","text":"<p>By default, uv will automatically download Python versions when needed.</p> <p>The <code>python-downloads</code> option can be used to disable this behavior. By default, it is set to <code>automatic</code>; set to <code>manual</code> to only allow Python downloads during <code>uv python install</code>.</p> <p>Tip</p> <p>The <code>python-downloads</code> setting can be set in a persistent configuration file to change the default behavior, or the <code>--no-python-downloads</code> flag can be passed to any uv command.</p>"},{"location":"concepts/python-versions/#requiring-or-disabling-managed-python-versions","title":"Requiring or disabling managed Python versions","text":"<p>By default, uv will attempt to use Python versions found on the system and only download managed Python versions when necessary. To ignore system Python versions, and only use managed Python versions, use the <code>--managed-python</code> flag:</p> <pre><code>$ uv python list --managed-python\n</code></pre> <p>Similarly, to ignore managed Python versions and only use system Python versions, use the <code>--no-managed-python</code> flag:</p> <pre><code>$ uv python list --no-managed-python\n</code></pre> <p>To change uv's default behavior in a configuration file, use the <code>python-preference</code> setting.</p>"},{"location":"concepts/python-versions/#adjusting-python-version-preferences","title":"Adjusting Python version preferences","text":"<p>The <code>python-preference</code> setting determines whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv.</p> <p>By default, the <code>python-preference</code> is set to <code>managed</code> which prefers managed Python installations over system Python installations. However, system Python installations are still preferred over downloading a managed Python version.</p> <p>The following alternative options are available:</p> <ul> <li><code>only-managed</code>: Only use managed Python installations; never use system Python installations.   Equivalent to <code>--managed-python</code>.</li> <li><code>system</code>: Prefer system Python installations over managed Python installations.</li> <li><code>only-system</code>: Only use system Python installations; never use managed Python installations.   Equivalent to <code>--no-managed-python</code>.</li> </ul> <p>Note</p> <p>Automatic Python version downloads can be disabled without changing the preference.</p>"},{"location":"concepts/python-versions/#python-implementation-support","title":"Python implementation support","text":"<p>uv supports the CPython, PyPy, Pyodide, and GraalPy Python implementations. If a Python implementation is not supported, uv will fail to discover its interpreter.</p> <p>The implementations may be requested with either the long or short name:</p> <ul> <li>CPython: <code>cpython</code>, <code>cp</code></li> <li>PyPy: <code>pypy</code>, <code>pp</code></li> <li>GraalPy: <code>graalpy</code>, <code>gp</code></li> <li>Pyodide: <code>pyodide</code></li> </ul> <p>Implementation name requests are not case-sensitive.</p> <p>See the Python version request documentation for more details on the supported formats.</p>"},{"location":"concepts/python-versions/#managed-python-distributions","title":"Managed Python distributions","text":"<p>uv supports downloading and installing CPython, PyPy, and Pyodide distributions.</p>"},{"location":"concepts/python-versions/#cpython-distributions","title":"CPython distributions","text":"<p>As Python does not publish official distributable CPython binaries, uv instead uses pre-built distributions from the Astral <code>python-build-standalone</code> project. <code>python-build-standalone</code> is also is used in many other Python projects, like Mise and bazelbuild/rules_python.</p> <p>The uv Python distributions are self-contained, highly-portable, and performant. While Python can be built from source, as in tools like <code>pyenv</code>, doing so requires preinstalled system dependencies, and creating optimized, performant builds (e.g., with PGO and LTO enabled) is very slow.</p> <p>These distributions have some behavior quirks, generally as a consequence of portability; see the <code>python-build-standalone</code> quirks documentation for details.</p>"},{"location":"concepts/python-versions/#pypy-distributions","title":"PyPy distributions","text":"<p>PyPy distributions are provided by the PyPy project.</p>"},{"location":"concepts/python-versions/#pyodide-distributions","title":"Pyodide distributions","text":"<p>Pyodide distributions are provided by the Pyodide project.</p> <p>Pyodide is a port of CPython for the WebAssembly / Emscripten platform.</p>"},{"location":"concepts/python-versions/#transparent-x86_64-emulation-on-aarch64","title":"Transparent x86_64 emulation on aarch64","text":"<p>Both macOS and Windows support running x86_64 binaries on aarch64 through transparent emulation. This is called Rosetta 2 or Windows on ARM (WoA) emulation. It's possible to use x86_64 uv on aarch64, and also possible to use an x86_64 Python interpreter on aarch64. Either uv binary can use either Python interpreter, but a Python interpreter needs packages for its architecture, either all x86_64 or all aarch64.</p>"},{"location":"concepts/python-versions/#registration-in-the-windows-registry","title":"Registration in the Windows registry","text":"<p>On Windows, installation of managed Python versions will register them with the Windows registry as defined by PEP 514.</p> <p>After installation, the Python versions can be selected with the <code>py</code> launcher, e.g.:</p> <pre><code>$ uv python install 3.13.1\n$ py -V:Astral/CPython3.13.1\n</code></pre> <p>On uninstall, uv will remove the registry entry for the target version as well as any broken registry entries.</p>"},{"location":"concepts/resolution/","title":"Resolution","text":"<p>Resolution is the process of taking a list of requirements and converting them to a list of package versions that fulfill the requirements. Resolution requires recursively searching for compatible versions of packages, ensuring that the requested requirements are fulfilled and that the requirements of the requested packages are compatible.</p>"},{"location":"concepts/resolution/#dependencies","title":"Dependencies","text":"<p>Most projects and packages have dependencies. Dependencies are other packages that are necessary in order for the current package to work. A package defines its dependencies as requirements, roughly a combination of a package name and acceptable versions. The dependencies defined by the current project are called direct dependencies. The dependencies added by each dependency of the current project are called indirect or transitive dependencies.</p> <p>Note</p> <p>See the dependency specifiers page in the Python Packaging documentation for details about dependencies.</p>"},{"location":"concepts/resolution/#basic-examples","title":"Basic examples","text":"<p>To help demonstrate the resolution process, consider the following dependencies:</p> <ul> <li>The project depends on <code>foo</code> and <code>bar</code>.</li> <li><code>foo</code> has one version, 1.0.0:<ul> <li><code>foo 1.0.0</code> depends on <code>lib&gt;=1.0.0</code>.</li> </ul> </li> <li><code>bar</code> has one version, 1.0.0:<ul> <li><code>bar 1.0.0</code> depends on <code>lib&gt;=2.0.0</code>.</li> </ul> </li> <li><code>lib</code> has two versions, 1.0.0 and 2.0.0. Both versions have no dependencies.</li> </ul> <p>In this example, the resolver must find a set of package versions which satisfies the project requirements. Since there is only one version of both <code>foo</code> and <code>bar</code>, those will be used. The resolution must also include the transitive dependencies, so a version of <code>lib</code> must be chosen. <code>foo 1.0.0</code> allows all available versions of <code>lib</code>, but <code>bar 1.0.0</code> requires <code>lib&gt;=2.0.0</code> so <code>lib 2.0.0</code> must be used.</p> <p>In some resolutions, there may be more than one valid solution. Consider the following dependencies:</p> <ul> <li>The project depends on <code>foo</code> and <code>bar</code>.</li> <li><code>foo</code> has two versions, 1.0.0 and 2.0.0:<ul> <li><code>foo 1.0.0</code> has no dependencies.</li> <li><code>foo 2.0.0</code> depends on <code>lib==2.0.0</code>.</li> </ul> </li> <li><code>bar</code> has two versions, 1.0.0 and 2.0.0:<ul> <li><code>bar 1.0.0</code> has no dependencies.</li> <li><code>bar 2.0.0</code> depends on <code>lib==1.0.0</code></li> </ul> </li> <li><code>lib</code> has two versions, 1.0.0 and 2.0.0. Both versions have no dependencies.</li> </ul> <p>In this example, some version of both <code>foo</code> and <code>bar</code> must be selected; however, determining which version requires considering the dependencies of each version of <code>foo</code> and <code>bar</code>. <code>foo 2.0.0</code> and <code>bar 2.0.0</code> cannot be installed together as they conflict on their required version of <code>lib</code>, so the resolver must select either <code>foo 1.0.0</code> (along with <code>bar 2.0.0</code>) or <code>bar 1.0.0</code> (along with <code>foo 1.0.0</code>). Both are valid solutions, and different resolution algorithms may yield either result.</p>"},{"location":"concepts/resolution/#platform-markers","title":"Platform markers","text":"<p>Markers allow attaching an expression to requirements that indicate when the dependency should be used. For example <code>bar ; python_version &lt; \"3.9\"</code> indicates that <code>bar</code> should only be installed on Python 3.8 and earlier.</p> <p>Markers are used to adjust a package's dependencies based on the current environment or platform. For example, markers can be used to modify dependencies by operating system, CPU architecture, Python version, Python implementation, and more.</p> <p>Note</p> <p>See the environment markers section in the Python Packaging documentation for more details about markers.</p> <p>Markers are important for resolution because their values change the required dependencies. Typically, Python package resolvers use the markers of the current platform to determine which dependencies to use since the package is often being installed on the current platform. However, for locking dependencies this is problematic \u2014 the lockfile would only work for developers using the same platform the lockfile was created on. To solve this problem, platform-independent, or \"universal\" resolvers exist.</p> <p>uv supports both platform-specific and universal resolution.</p>"},{"location":"concepts/resolution/#platform-specific-resolution","title":"Platform-specific resolution","text":"<p>By default, uv's pip interface, i.e., <code>uv pip compile</code>, produces a resolution that is platform-specific, like <code>pip-tools</code>. There is no way to use platform-specific resolution in the uv's project interface.</p> <p>uv also supports resolving for specific, alternate platforms and Python versions with the <code>--python-platform</code> and <code>--python-version</code> options. For example, if using Python 3.12 on macOS, <code>uv pip compile --python-platform linux --python-version 3.10 requirements.in</code> can be used to produce a resolution for Python 3.10 on Linux instead. Unlike universal resolution, during platform-specific resolution, the provided <code>--python-version</code> is the exact python version to use, not a lower bound.</p> <p>Note</p> <p>Python's environment markers expose far more information about the current machine than can be expressed by a simple <code>--python-platform</code> argument. For example, the <code>platform_version</code> marker on macOS includes the time at which the kernel was built, which can (in theory) be encoded in package requirements. uv's resolver makes a best-effort attempt to generate a resolution that is compatible with any machine running on the target <code>--python-platform</code>, which should be sufficient for most use cases, but may lose fidelity for complex package and platform combinations.</p>"},{"location":"concepts/resolution/#universal-resolution","title":"Universal resolution","text":"<p>uv's lockfile (<code>uv.lock</code>) is created with a universal resolution and is portable across platforms. This ensures that dependencies are locked for everyone working on the project, regardless of operating system, architecture, and Python version. The uv lockfile is created and modified by project commands such as <code>uv lock</code>, <code>uv sync</code>, and <code>uv add</code>.</p> <p>Universal resolution is also available in uv's pip interface, i.e., <code>uv pip compile</code>, with the <code>--universal</code> flag. The resulting requirements file will contain markers to indicate which platform each dependency is relevant for.</p> <p>During universal resolution, a package may be listed multiple times with different versions or URLs if different versions are needed for different platforms \u2014 the markers determine which version will be used. A universal resolution is often more constrained than a platform-specific resolution, since we need to take the requirements for all markers into account.</p> <p>During universal resolution, all required packages must be compatible with the entire range of <code>requires-python</code> declared in the <code>pyproject.toml</code>. For example, if a project's <code>requires-python</code> is <code>&gt;=3.8</code>, resolution will fail if all versions of given dependency require Python 3.9 or later, since the dependency lacks a usable version for (e.g.) Python 3.8, the lower bound of the project's supported range. In other words, the project's <code>requires-python</code> must be a subset of the <code>requires-python</code> of all its dependencies.</p> <p>When selecting the compatible version for a given dependency, uv will (by default) attempt to choose the latest compatible version for each supported Python version. For example, if a project's <code>requires-python</code> is <code>&gt;=3.8</code>, and the latest version of a dependency requires Python 3.9 or later, while all prior versions supporting Python 3.8, the resolver will select the latest version for users running Python 3.9 or later, and previous versions for users running Python 3.8.</p> <p>When evaluating <code>requires-python</code> ranges for dependencies, uv only considers lower bounds and ignores upper bounds entirely. For example, <code>&gt;=3.8, &lt;4</code> is treated as <code>&gt;=3.8</code>. Respecting upper bounds on <code>requires-python</code> often leads to formally correct but practically incorrect resolutions, as, e.g., resolvers will backtrack to the first published version that omits the upper bound (see: <code>Requires-Python</code> upper limits).</p>"},{"location":"concepts/resolution/#limited-resolution-environments","title":"Limited resolution environments","text":"<p>By default, the universal resolver attempts to solve for all platforms and Python versions.</p> <p>If your project supports only a limited set of platforms or Python versions, you can constrain the set of solved platforms via the <code>environments</code> setting, which accepts a list of PEP 508 environment markers. In other words, you can use the <code>environments</code> setting to reduce the set of supported platforms.</p> <p>For example, to constrain the lockfile to macOS and Linux, and avoid solving for Windows:</p> pyproject.toml<pre><code>[tool.uv]\nenvironments = [\n\"sys_platform == 'darwin'\",\n\"sys_platform == 'linux'\",\n]\n</code></pre> <p>Or, to avoid solving for alternative Python implementations:</p> pyproject.toml<pre><code>[tool.uv]\nenvironments = [\n\"implementation_name == 'cpython'\"\n]\n</code></pre> <p>Entries in the <code>environments</code> setting must be disjoint (i.e., they must not overlap). For example, <code>sys_platform == 'darwin'</code> and <code>sys_platform == 'linux'</code> are disjoint, but <code>sys_platform == 'darwin'</code> and <code>python_version &gt;= '3.9'</code> are not, since both could be true at the same time.</p>"},{"location":"concepts/resolution/#required-environments","title":"Required environments","text":"<p>In the Python ecosystem, packages can be published as source distributions, built distributions (wheels), or both; but to install a package, a built distribution is required. If a package lacks a built distribution, or lacks a distribution for the current platform or Python version (built distributions are often platform-specific), uv will attempt to build the package from source, then install the resulting built distribution.</p> <p>Some packages (like PyTorch) publish built distributions, but omit a source distribution. Such packages are only installable on platforms for which a built distribution is available. For example, if a package publishes built distributions for Linux, but not macOS or Windows, then that package will only be installable on Linux.</p> <p>Packages that lack source distributions cause problems for universal resolution, since there will typically be at least one platform or Python version for which the package is not installable.</p> <p>By default, uv requires each such package to include at least one wheel that is compatible with the target Python version. The <code>required-environments</code> setting can be used to ensure that the resulting resolution contains wheels for specific platforms, or fails if no such wheels are available. The setting accepts a list of PEP 508 environment markers.</p> <p>While the <code>environments</code> setting limits the set of environments that uv will consider when resolving dependencies, <code>required-environments</code> expands the set of platforms that uv must support when resolving dependencies.</p> <p>For example, <code>environments = [\"sys_platform == 'darwin'\"]</code> would limit uv to solving for macOS (and ignoring Linux and Windows). On the other hand, <code>required-environments = [\"sys_platform == 'darwin'\"]</code> would require that any package without a source distribution include a wheel for macOS in order to be installable (and would fail if no such wheel is available).</p> <p>In practice, <code>required-environments</code> can be useful for declaring explicit support for non-latest platforms, since this often requires backtracking past the latest published versions of those packages. For example, to guarantee that any built distribution-only packages includes support for Intel macOS:</p> pyproject.toml<pre><code>[tool.uv]\nrequired-environments = [\n\"sys_platform == 'darwin' and platform_machine == 'x86_64'\"\n]\n</code></pre>"},{"location":"concepts/resolution/#dependency-preferences","title":"Dependency preferences","text":"<p>If resolution output file exists, i.e., a uv lockfile (<code>uv.lock</code>) or a requirements output file (<code>requirements.txt</code>), uv will prefer the dependency versions listed there. Similarly, if installing a package into a virtual environment, uv will prefer the already installed version if present. This means that locked or installed versions will not change unless an incompatible version is requested or an upgrade is explicitly requested with <code>--upgrade</code>.</p>"},{"location":"concepts/resolution/#resolution-strategy","title":"Resolution strategy","text":"<p>By default, uv tries to use the latest version of each package. For example, <code>uv pip install flask&gt;=2.0.0</code> will install the latest version of Flask, e.g., 3.0.0. If <code>flask&gt;=2.0.0</code> is a dependency of the project, only <code>flask</code> 3.0.0 will be used. This is important, for example, because running tests will not check that the project is actually compatible with its stated lower bound of <code>flask</code> 2.0.0.</p> <p>With <code>--resolution lowest</code>, uv will install the lowest possible version for all dependencies, both direct and indirect (transitive). Alternatively, <code>--resolution lowest-direct</code> will use the lowest compatible versions for all direct dependencies, while using the latest compatible versions for all other dependencies. uv will always use the latest versions for build dependencies.</p> <p>For example, given the following <code>requirements.in</code> file:</p> requirements.in<pre><code>flask&gt;=2.0.0\n</code></pre> <p>Running <code>uv pip compile requirements.in</code> would produce the following <code>requirements.txt</code> file:</p> requirements.txt<pre><code># This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in\nblinker==1.7.0\n# via flask\nclick==8.1.7\n# via flask\nflask==3.0.0\nitsdangerous==2.1.2\n# via flask\njinja2==3.1.2\n# via flask\nmarkupsafe==2.1.3\n# via\n#   jinja2\n#   werkzeug\nwerkzeug==3.0.1\n# via flask\n</code></pre> <p>However, <code>uv pip compile --resolution lowest requirements.in</code> would instead produce:</p> requirements.in<pre><code># This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in --resolution lowest\nclick==7.1.2\n# via flask\nflask==2.0.0\nitsdangerous==2.0.0\n# via flask\njinja2==3.0.0\n# via flask\nmarkupsafe==2.0.0\n# via jinja2\nwerkzeug==2.0.0\n# via flask\n</code></pre> <p>When publishing libraries, it is recommended to separately run tests with <code>--resolution lowest</code> or <code>--resolution lowest-direct</code> in continuous integration to ensure compatibility with the declared lower bounds.</p>"},{"location":"concepts/resolution/#pre-release-handling","title":"Pre-release handling","text":"<p>By default, uv will accept pre-release versions during dependency resolution in two cases:</p> <ol> <li>If the package is a direct dependency, and its version specifiers include a pre-release specifier    (e.g., <code>flask&gt;=2.0.0rc1</code>).</li> <li>If all published versions of a package are pre-releases.</li> </ol> <p>If dependency resolution fails due to a transitive pre-release, uv will prompt use of <code>--prerelease allow</code> to allow pre-releases for all dependencies.</p> <p>Alternatively, the transitive dependency can be added as a constraint or direct dependency (i.e. in <code>requirements.in</code> or <code>pyproject.toml</code>) with a pre-release version specifier (e.g., <code>flask&gt;=2.0.0rc1</code>) to opt in to pre-release support for that specific dependency.</p> <p>Pre-releases are notoriously difficult to model, and are a frequent source of bugs in other packaging tools. uv's pre-release handling is intentionally limited and requires user opt-in for pre-releases to ensure correctness.</p> <p>For more details, see Pre-release compatibility.</p>"},{"location":"concepts/resolution/#multi-version-resolution","title":"Multi-version resolution","text":"<p>During universal resolution, a package may be listed multiple times with different versions or URLs within the same lockfile, since different versions may be needed for different platforms or Python versions.</p> <p>The <code>--fork-strategy</code> setting can be used to control how uv trades off between (1) minimizing the number of selected versions and (2) selecting the latest-possible version for each platform. The former leads to greater consistency across platforms, while the latter leads to use of newer package versions where possible.</p> <p>By default (<code>--fork-strategy requires-python</code>), uv will optimize for selecting the latest version of each package for each supported Python version, while minimizing the number of selected versions across platforms.</p> <p>For example, when resolving <code>numpy</code> with a Python requirement of <code>&gt;=3.8</code>, uv would select the following versions:</p> <pre><code>numpy==1.24.4 ; python_version == \"3.8\"\nnumpy==2.0.2 ; python_version == \"3.9\"\nnumpy==2.2.0 ; python_version &gt;= \"3.10\"\n</code></pre> <p>This resolution reflects the fact that NumPy 2.2.0 and later require at least Python 3.10, while earlier versions are compatible with Python 3.8 and 3.9.</p> <p>Under <code>--fork-strategy fewest</code>, uv will instead minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>For example, when in the scenario above, uv would select <code>numpy==1.24.4</code> for all Python versions, rather than upgrading to <code>numpy==2.0.2</code> for Python 3.9 and <code>numpy==2.2.0</code> for Python 3.10 and later.</p>"},{"location":"concepts/resolution/#dependency-constraints","title":"Dependency constraints","text":"<p>Like pip, uv supports constraint files (<code>--constraint constraints.txt</code>) which narrow the set of acceptable versions for the given packages. Constraint files are similar to requirements files, but being listed as a constraint alone will not cause a package to be included to the resolution. Instead, constraints only take effect if a requested package is already pulled in as a direct or transitive dependency. Constraints are useful for reducing the range of available versions for a transitive dependency. They can also be used to keep a resolution in sync with some other set of resolved versions, regardless of which packages are overlapping between the two.</p>"},{"location":"concepts/resolution/#dependency-overrides","title":"Dependency overrides","text":"<p>Dependency overrides allow bypassing unsuccessful or undesirable resolutions by overriding a package's declared dependencies. Overrides are a useful last resort for cases in which you know that a dependency is compatible with a certain version of a package, despite the metadata indicating otherwise.</p> <p>For example, if a transitive dependency declares the requirement <code>pydantic&gt;=1.0,&lt;2.0</code>, but does work with <code>pydantic&gt;=2.0</code>, the user can override the declared dependency by including <code>pydantic&gt;=1.0,&lt;3</code> in the overrides, thereby allowing the resolver to choose a newer version of <code>pydantic</code>.</p> <p>Concretely, if <code>pydantic&gt;=1.0,&lt;3</code> is included as an override, uv will ignore all declared requirements on <code>pydantic</code>, replacing them with the override. In the above example, the <code>pydantic&gt;=1.0,&lt;2.0</code> requirement would be ignored completely, and would instead be replaced with <code>pydantic&gt;=1.0,&lt;3</code>.</p> <p>While constraints can only reduce the set of acceptable versions for a package, overrides can expand the set of acceptable versions, providing an escape hatch for erroneous upper version bounds. As with constraints, overrides do not add a dependency on the package and only take effect if the package is requested in a direct or transitive dependency.</p> <p>In a <code>pyproject.toml</code>, use <code>tool.uv.override-dependencies</code> to define a list of overrides. In the pip-compatible interface, the <code>--override</code> option can be used to pass files with the same format as constraints files.</p> <p>If multiple overrides are provided for the same package, they must be differentiated with markers. If a package has a dependency with a marker, it is replaced unconditionally when using overrides \u2014 it does not matter if the marker evaluates to true or false.</p>"},{"location":"concepts/resolution/#dependency-metadata","title":"Dependency metadata","text":"<p>During resolution, uv needs to resolve the metadata for each package it encounters, in order to determine its dependencies. This metadata is often available as a static file in the package index; however, for packages that only provide source distributions, the metadata may not be available upfront.</p> <p>In such cases, uv has to build the package to determine its metadata (e.g., by invoking <code>setup.py</code>). This can introduce a performance penalty during resolution. Further, it imposes the requirement that the package can be built on all platforms, which may not be true.</p> <p>For example, you may have a package that should only be built and installed on Linux, but doesn't build successfully on macOS or Windows. While uv can construct a perfectly valid lockfile for this scenario, doing so would require building the package, which would fail on non-Linux platforms.</p> <p>The <code>tool.uv.dependency-metadata</code> table can be used to provide static metadata for such dependencies upfront, thereby allowing uv to skip the build step and use the provided metadata instead.</p> <p>For example, to provide metadata for <code>chumpy</code> upfront, include its <code>dependency-metadata</code> in the <code>pyproject.toml</code>:</p> <pre><code>[[tool.uv.dependency-metadata]]\nname = \"chumpy\"\nversion = \"0.70\"\nrequires-dist = [\"numpy&gt;=1.8.1\", \"scipy&gt;=0.13.0\", \"six&gt;=1.11.0\"]\n</code></pre> <p>These declarations are intended for cases in which a package does not declare static metadata upfront, though they are also useful for packages that require disabling build isolation In such cases, it may be easier to declare the package metadata upfront, rather than creating a custom build environment prior to resolving the package.</p> <p>For example, past versions of <code>flash-attn</code> did not declare static metadata. By declaring metadata for <code>flash-attn</code> upfront, uv can resolve <code>flash-attn</code> without building the package from source (which itself requires installing <code>torch</code>):</p> <pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"flash-attn\"]\n[tool.uv.sources]\nflash-attn = { git = \"https://github.com/Dao-AILab/flash-attention\", tag = \"v2.6.3\" }\n[[tool.uv.dependency-metadata]]\nname = \"flash-attn\"\nversion = \"2.6.3\"\nrequires-dist = [\"torch\", \"einops\"]\n</code></pre> <p>Like dependency overrides, <code>tool.uv.dependency-metadata</code> can also be used for cases in which a package's metadata is incorrect or incomplete, or when a package is not available in the package index. While dependency overrides allow overriding the allowed versions of a package globally, metadata overrides allow overriding the declared metadata of a specific package.</p> <p>Note</p> <p>The <code>version</code> field in <code>tool.uv.dependency-metadata</code> is optional for registry-based dependencies (when omitted, uv will assume the metadata applies to all versions of the package), but required for direct URL dependencies (like Git dependencies).</p> <p>Entries in the <code>tool.uv.dependency-metadata</code> table follow the Metadata 2.3 specification, though only <code>name</code>, <code>version</code>, <code>requires-dist</code>, <code>requires-python</code>, and <code>provides-extra</code> are read by uv. The <code>version</code> field is also considered optional. If omitted, the metadata will be used for all versions of the specified package.</p>"},{"location":"concepts/resolution/#conflicting-dependencies","title":"Conflicting dependencies","text":"<p>uv requires that all dependencies declared by a project are compatible with each other and resolves all dependencies together when creating the lockfile. This includes project dependencies, optional dependencies (\"extras\"), and dependency groups (development dependencies).</p> <p>If dependencies declared in one extra are not compatible with those in another extra, uv will fail to resolve the requirements of the project with an error. For example, consider two sets of optional dependencies that conflict with one another:</p> pyproject.toml<pre><code>[project.optional-dependencies]\nextra1 = [\"numpy==2.1.2\"]\nextra2 = [\"numpy==2.0.0\"]\n</code></pre> <p>If you run <code>uv lock</code> with the above dependencies, resolution will fail:</p> <pre><code>$ uv lock\n  x No solution found when resolving dependencies:\n  `-&gt; Because myproject[extra2] depends on numpy==2.0.0 and myproject[extra1] depends on numpy==2.1.2, we can conclude that myproject[extra1] and\n      myproject[extra2] are incompatible.\n      And because your project requires myproject[extra1] and myproject[extra2], we can conclude that your projects's requirements are unsatisfiable.\n</code></pre> <p>To work around this, uv supports explicit declaration of conflicts. If you specify that <code>extra1</code> and <code>extra2</code> are conflicting, uv will resolve them separately. Specify conflicts in the <code>tool.uv</code> section:</p> pyproject.toml<pre><code>[tool.uv]\nconflicts = [\n[\n{ extra = \"extra1\" },\n{ extra = \"extra2\" },\n],\n]\n</code></pre> <p>Now, running <code>uv lock</code> will succeed. However, now you cannot install both <code>extra1</code> and <code>extra2</code> at the same time:</p> <pre><code>$ uv sync --extra extra1 --extra extra2\nResolved 3 packages in 14ms\nerror: extra `extra1`, extra `extra2` are incompatible with the declared conflicts: {`myproject[extra1]`, `myproject[extra2]`}\n</code></pre> <p>This error occurs because installing both <code>extra1</code> and <code>extra2</code> would result in installing two different versions of a package into the same environment.</p> <p>The above strategy for dealing with conflicting optional dependencies also works with dependency groups:</p> pyproject.toml<pre><code>[dependency-groups]\ngroup1 = [\"numpy==2.1.2\"]\ngroup2 = [\"numpy==2.0.0\"]\n[tool.uv]\nconflicts = [\n[\n{ group = \"group1\" },\n{ group = \"group2\" },\n],\n]\n</code></pre> <p>The only difference from conflicting extras is that you need to use the <code>group</code> key instead of <code>extra</code>.</p> <p>When using a workspace with multiple projects, the same restrictions apply \u2014 uv requires all workspace members to be compatible with each other. Similarly, conflicts can be declared across workspace members.</p> <p>For example, consider the following workspace:</p> member1/pyproject.toml<pre><code>[project]\nname = \"member1\"\n[project.optional-dependencies]\nextra1 = [\"numpy==2.1.2\"]\n</code></pre> member2/pyproject.toml<pre><code>[project]\nname = \"member2\"\n[project.optional-dependencies]\nextra2 = [\"numpy==2.0.0\"]\n</code></pre> <p>To declare a conflict between extras in these different workspace members, use the <code>package</code> key:</p> pyproject.toml<pre><code>[tool.uv]\nconflicts = [\n[\n{ package = \"member1\", extra = \"extra1\" },\n{ package = \"member2\", extra = \"extra2\" },\n],\n]\n</code></pre> <p>It's also possible for the project dependencies (i.e., <code>project.dependencies</code>) of one workspace member to conflict with the extra of another member, for example:</p> member1/pyproject.toml<pre><code>[project]\nname = \"member1\"\ndependencies = [\"numpy==2.1.2\"]\n</code></pre> member2/pyproject.toml<pre><code>[project]\nname = \"member2\"\n[project.optional-dependencies]\nextra2 = [\"numpy==2.0.0\"]\n</code></pre> <p>This conflict can also be declared using the <code>package</code> key:</p> pyproject.toml<pre><code>[tool.uv]\nconflicts = [\n[\n{ package = \"member1\" },\n{ package = \"member2\", extra = \"extra2\" },\n],\n]\n</code></pre> <p>Similarly, it's possible for some workspace members to have conflicting project dependencies:</p> member1/pyproject.toml<pre><code>[project]\nname = \"member1\"\ndependencies = [\"numpy==2.1.2\"]\n</code></pre> member2/pyproject.toml<pre><code>[project]\nname = \"member2\"\ndependencies = [\"numpy==2.0.0\"]\n</code></pre> <p>This conflict can also be declared using the <code>package</code> key:</p> pyproject.toml<pre><code>[tool.uv]\nconflicts = [\n[\n{ package = \"member1\" },\n{ package = \"member2\" },\n],\n]\n</code></pre> <p>These workspace members will not be installable together, e.g., the workspace root cannot define:</p> pyproject.toml<pre><code>[project]\nname = \"root\"\ndependencies = [\"member1\", \"member2\"]\n</code></pre>"},{"location":"concepts/resolution/#lower-bounds","title":"Lower bounds","text":"<p>By default, <code>uv add</code> adds lower bounds to dependencies and, when using uv to manage projects, uv will warn if direct dependencies don't have lower bound.</p> <p>Lower bounds are not critical in the \"happy path\", but they are important for cases where there are dependency conflicts. For example, consider a project that requires two packages and those packages have conflicting dependencies. The resolver needs to check all combinations of all versions within the constraints for the two packages \u2014 if all of them conflict, an error is reported because the dependencies are not satisfiable. If there are no lower bounds, the resolver can (and often will) backtrack down to the oldest version of a package. This isn't only problematic because it's slow, the old version of the package often fails to build, or the resolver can end up picking a version that's old enough that it doesn't depend on the conflicting package, but also doesn't work with your code.</p> <p>Lower bounds are particularly critical when writing a library. It's important to declare the lowest version for each dependency that your library works with, and to validate that the bounds are correct \u2014 testing with <code>--resolution lowest</code> or <code>--resolution lowest-direct</code>. Otherwise, a user may receive an old, incompatible version of one of your library's dependencies and the library will fail with an unexpected error.</p>"},{"location":"concepts/resolution/#reproducible-resolutions","title":"Reproducible resolutions","text":"<p>uv supports an <code>--exclude-newer</code> option to limit resolution to distributions published before a specific date, allowing reproduction of installations regardless of new package releases. The date may be specified as an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or a local date in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Note the package index must support the <code>upload-time</code> field as specified in <code>PEP 700</code>. If the field is not present for a given distribution, the distribution will be treated as unavailable. PyPI provides <code>upload-time</code> for all packages.</p> <p>To ensure reproducibility, messages for unsatisfiable resolutions will not mention that distributions were excluded due to the <code>--exclude-newer</code> flag \u2014 newer distributions will be treated as if they do not exist.</p> <p>Note</p> <p>The <code>--exclude-newer</code> option is only applied to packages that are read from a registry (as opposed to, e.g., Git dependencies). Further, when using the <code>uv pip</code> interface, uv will not downgrade previously installed packages unless the <code>--reinstall</code> flag is provided, in which case uv will perform a new resolution.</p>"},{"location":"concepts/resolution/#source-distribution","title":"Source distribution","text":"<p>PEP 625 specifies that packages must distribute source distributions as gzip tarball (<code>.tar.gz</code>) archives. Prior to this specification, other archive formats, which need to be supported for backward compatibility, were also allowed. uv supports reading and extracting archives in the following formats:</p> <ul> <li>gzip tarball (<code>.tar.gz</code>, <code>.tgz</code>)</li> <li>bzip2 tarball (<code>.tar.bz2</code>, <code>.tbz</code>)</li> <li>xz tarball (<code>.tar.xz</code>, <code>.txz</code>)</li> <li>zstd tarball (<code>.tar.zst</code>)</li> <li>lzip tarball (<code>.tar.lz</code>)</li> <li>lzma tarball (<code>.tar.lzma</code>)</li> <li>zip (<code>.zip</code>)</li> </ul>"},{"location":"concepts/resolution/#lockfile-versioning","title":"Lockfile versioning","text":"<p>The <code>uv.lock</code> file uses a versioned schema. The schema version is included in the <code>version</code> field of the lockfile.</p> <p>Any given version of uv can read and write lockfiles with the same schema version, but will reject lockfiles with a greater schema version. For example, if your uv version supports schema v1, <code>uv lock</code> will error if it encounters an existing lockfile with schema v2.</p> <p>uv versions that support schema v2 may be able to read lockfiles with schema v1 if the schema update was backwards-compatible. However, this is not guaranteed, and uv may exit with an error if it encounters a lockfile with an outdated schema version.</p> <p>The schema version is considered part of the public API, and so is only bumped in minor releases, as a breaking change (see Versioning). As such, all uv patch versions within a given minor uv release are guaranteed to have full lockfile compatibility. In other words, lockfiles may only be rejected across minor releases.</p> <p>The <code>revision</code> field of the lockfile is used to track backwards compatible changes to the lockfile. For example, adding a new field to distributions. Changes to the revision will not cause older versions of uv to error.</p>"},{"location":"concepts/resolution/#learn-more","title":"Learn more","text":"<p>For more details about the internals of the resolver, see the resolver reference documentation.</p>"},{"location":"concepts/tools/","title":"Tools","text":"<p>Tools are Python packages that provide command-line interfaces.</p> <p>Note</p> <p>See the tools guide for an introduction to working with the tools interface \u2014 this document discusses details of tool management.</p>"},{"location":"concepts/tools/#the-uv-tool-interface","title":"The <code>uv tool</code> interface","text":"<p>uv includes a dedicated interface for interacting with tools. Tools can be invoked without installation using <code>uv tool run</code>, in which case their dependencies are installed in a temporary virtual environment isolated from the current project.</p> <p>Because it is very common to run tools without installing them, a <code>uvx</code> alias is provided for <code>uv tool run</code> \u2014 the two commands are exactly equivalent. For brevity, the documentation will mostly refer to <code>uvx</code> instead of <code>uv tool run</code>.</p> <p>Tools can also be installed with <code>uv tool install</code>, in which case their executables are available on the <code>PATH</code> \u2014 an isolated virtual environment is still used, but it is not removed when the command completes.</p>"},{"location":"concepts/tools/#execution-vs-installation","title":"Execution vs installation","text":"<p>In most cases, executing a tool with <code>uvx</code> is more appropriate than installing the tool. Installing the tool is useful if you need the tool to be available to other programs on your system, e.g., if some script you do not control requires the tool, or if you are in a Docker image and want to make the tool available to users.</p>"},{"location":"concepts/tools/#tool-environments","title":"Tool environments","text":"<p>When running a tool with <code>uvx</code>, a virtual environment is stored in the uv cache directory and is treated as disposable, i.e., if you run <code>uv cache clean</code> the environment will be deleted. The environment is only cached to reduce the overhead of repeated invocations. If the environment is removed, a new one will be created automatically.</p> <p>When installing a tool with <code>uv tool install</code>, a virtual environment is created in the uv tools directory. The environment will not be removed unless the tool is uninstalled. If the environment is manually deleted, the tool will fail to run.</p>"},{"location":"concepts/tools/#tool-versions","title":"Tool versions","text":"<p>Unless a specific version is requested, <code>uv tool install</code> will install the latest available of the requested tool. <code>uvx</code> will use the latest available version of the requested tool on the first invocation. After that, <code>uvx</code> will use the cached version of the tool unless a different version is requested, the cache is pruned, or the cache is refreshed.</p> <p>For example, to run a specific version of Ruff:</p> <pre><code>$ uvx ruff@0.6.0 --version\nruff 0.6.0\n</code></pre> <p>A subsequent invocation of <code>uvx</code> will use the latest, not the cached, version.</p> <pre><code>$ uvx ruff --version\nruff 0.6.2\n</code></pre> <p>But, if a new version of Ruff was released, it would not be used unless the cache was refreshed.</p> <p>To request the latest version of Ruff and refresh the cache, use the <code>@latest</code> suffix:</p> <pre><code>$ uvx ruff@latest --version\n0.6.2\n</code></pre> <p>Once a tool is installed with <code>uv tool install</code>, <code>uvx</code> will use the installed version by default.</p> <p>For example, after installing an older version of Ruff:</p> <pre><code>$ uv tool install ruff==0.5.0\n</code></pre> <p>The version of <code>ruff</code> and <code>uvx ruff</code> is the same:</p> <pre><code>$ ruff --version\nruff 0.5.0\n$ uvx ruff --version\nruff 0.5.0\n</code></pre> <p>However, you can ignore the installed version by requesting the latest version explicitly, e.g.:</p> <pre><code>$ uvx ruff@latest --version\n0.6.2\n</code></pre> <p>Or, by using the <code>--isolated</code> flag, which will avoid refreshing the cache but ignore the installed version:</p> <pre><code>$ uvx --isolated ruff --version\n0.6.2\n</code></pre> <p><code>uv tool install</code> will also respect the <code>{package}@{version}</code> and <code>{package}@latest</code> specifiers, as in:</p> <pre><code>$ uv tool install ruff@latest\n$ uv tool install ruff@0.6.0\n</code></pre>"},{"location":"concepts/tools/#tools-directory","title":"Tools directory","text":"<p>By default, the uv tools directory is named <code>tools</code> and is in the uv application state directory, e.g., <code>~/.local/share/uv/tools</code>. The location may be customized with the <code>UV_TOOL_DIR</code> environment variable.</p> <p>To display the path to the tool installation directory:</p> <pre><code>$ uv tool dir\n</code></pre> <p>Tool environments are placed in a directory with the same name as the tool package, e.g., <code>.../tools/&lt;name&gt;</code>.</p> <p>Important</p> <p>Tool environments are not intended to be mutated directly. It is strongly recommended never to mutate a tool environment manually, e.g., with a <code>pip</code> operation.</p>"},{"location":"concepts/tools/#upgrading-tools","title":"Upgrading tools","text":"<p>Tool environments may be upgraded via <code>uv tool upgrade</code>, or re-created entirely via subsequent <code>uv tool install</code> operations.</p> <p>To upgrade all packages in a tool environment</p> <pre><code>$ uv tool upgrade black\n</code></pre> <p>To upgrade a single package in a tool environment:</p> <pre><code>$ uv tool upgrade black --upgrade-package click\n</code></pre> <p>Tool upgrades will respect the version constraints provided when installing the tool. For example, <code>uv tool install black &gt;=23,&lt;24</code> followed by <code>uv tool upgrade black</code> will upgrade Black to the latest version in the range <code>&gt;=23,&lt;24</code>.</p> <p>To instead replace the version constraints, reinstall the tool with <code>uv tool install</code>:</p> <pre><code>$ uv tool install black&gt;=24\n</code></pre> <p>Similarly, tool upgrades will retain the settings provided when installing the tool. For example, <code>uv tool install black --prerelease allow</code> followed by <code>uv tool upgrade black</code> will retain the <code>--prerelease allow</code> setting.</p> <p>Note</p> <p>Tool upgrades will reinstall the tool executables, even if they have not changed.</p> <p>To reinstall packages during upgrade, use the <code>--reinstall</code> and <code>--reinstall-package</code> options.</p> <p>To reinstall all packages in a tool environment</p> <pre><code>$ uv tool upgrade black --reinstall\n</code></pre> <p>To reinstall a single package in a tool environment:</p> <pre><code>$ uv tool upgrade black --reinstall-package click\n</code></pre>"},{"location":"concepts/tools/#including-additional-dependencies","title":"Including additional dependencies","text":"<p>Additional packages can be included during tool execution:</p> <pre><code>$ uvx --with &lt;extra-package&gt; &lt;tool&gt;\n</code></pre> <p>And, during tool installation:</p> <pre><code>$ uv tool install --with &lt;extra-package&gt; &lt;tool-package&gt;\n</code></pre> <p>The <code>--with</code> option can be provided multiple times to include additional packages.</p> <p>The <code>--with</code> option supports package specifications, so a specific version can be requested:</p> <pre><code>$ uvx --with &lt;extra-package&gt;==&lt;version&gt; &lt;tool-package&gt;\n</code></pre> <p>The <code>-w</code> shorthand can be used in place of the <code>--with</code> option:</p> <pre><code>$ uvx -w &lt;extra-package&gt; &lt;tool-package&gt;\n</code></pre> <p>If the requested version conflicts with the requirements of the tool package, package resolution will fail and the command will error.</p>"},{"location":"concepts/tools/#installing-executables-from-additional-packages","title":"Installing executables from additional packages","text":"<p>When installing a tool, you may want to include executables from additional packages in the same tool environment. This is useful when you have related tools that work together or when you want to install multiple executables that share dependencies.</p> <p>The <code>--with-executables-from</code> option allows you to specify additional packages whose executables should be installed alongside the main tool:</p> <pre><code>$ uv tool install --with-executables-from &lt;package1&gt;,&lt;package2&gt; &lt;tool-package&gt;\n</code></pre> <p>For example, to install Ansible along with executables from <code>ansible-core</code> and <code>ansible-lint</code>:</p> <pre><code>$ uv tool install --with-executables-from ansible-core,ansible-lint ansible\n</code></pre> <p>This will install all executables from the <code>ansible</code>, <code>ansible-core</code>, and <code>ansible-lint</code> packages into the same tool environment, making them all available on the <code>PATH</code>.</p> <p>The <code>--with-executables-from</code> option can be combined with other installation options:</p> <pre><code>$ uv tool install --with-executables-from ansible-core --with mkdocs-material ansible\n</code></pre> <p>Note that <code>--with-executables-from</code> differs from <code>--with</code> in that:</p> <ul> <li><code>--with</code> includes additional packages as dependencies but does not install their executables</li> <li><code>--with-executables-from</code> includes both the packages as dependencies and installs their   executables</li> </ul>"},{"location":"concepts/tools/#python-versions","title":"Python versions","text":"<p>Each tool environment is linked to a specific Python version. This uses the same Python version discovery logic as other virtual environments created by uv, but will ignore non-global Python version requests like <code>.python-version</code> files and the <code>requires-python</code> value from a <code>pyproject.toml</code>.</p> <p>The <code>--python</code> option can be used to request a specific version. See the Python version documentation for more details.</p> <p>If the Python version used by a tool is uninstalled, the tool environment will be broken and the tool may be unusable.</p>"},{"location":"concepts/tools/#tool-executables","title":"Tool executables","text":"<p>Tool executables include all console entry points, script entry points, and binary scripts provided by a Python package. Tool executables are symlinked into the <code>bin</code> directory on Unix and copied on Windows.</p>"},{"location":"concepts/tools/#the-bin-directory","title":"The <code>bin</code> directory","text":"<p>Executables are installed into the user <code>bin</code> directory following the XDG standard, e.g., <code>~/.local/bin</code>. Unlike other directory schemes in uv, the XDG standard is used on all platforms notably including Windows and macOS \u2014 there is no clear alternative location to place executables on these platforms. The installation directory is determined from the first available environment variable:</p> <ul> <li><code>$UV_TOOL_BIN_DIR</code></li> <li><code>$XDG_BIN_HOME</code></li> <li><code>$XDG_DATA_HOME/../bin</code></li> <li><code>$HOME/.local/bin</code></li> </ul> <p>Executables provided by dependencies of tool packages are not installed.</p>"},{"location":"concepts/tools/#the-path","title":"The <code>PATH</code>","text":"<p>The <code>bin</code> directory must be in the <code>PATH</code> variable for tool executables to be available from the shell. If it is not in the <code>PATH</code>, a warning will be displayed. The <code>uv tool update-shell</code> command can be used to add the <code>bin</code> directory to the <code>PATH</code> in common shell configuration files.</p>"},{"location":"concepts/tools/#overwriting-executables","title":"Overwriting executables","text":"<p>Installation of tools will not overwrite executables in the <code>bin</code> directory that were not previously installed by uv. For example, if <code>pipx</code> has been used to install a tool, <code>uv tool install</code> will fail. The <code>--force</code> flag can be used to override this behavior.</p>"},{"location":"concepts/tools/#relationship-to-uv-run","title":"Relationship to <code>uv run</code>","text":"<p>The invocation <code>uv tool run &lt;name&gt;</code> (or <code>uvx &lt;name&gt;</code>) is nearly equivalent to:</p> <pre><code>$ uv run --no-project --with &lt;name&gt; -- &lt;name&gt;\n</code></pre> <p>However, there are a couple notable differences when using uv's tool interface:</p> <ul> <li>The <code>--with</code> option is not needed \u2014 the required package is inferred from the command name.</li> <li>The temporary environment is cached in a dedicated location.</li> <li>The <code>--no-project</code> flag is not needed \u2014 tools are always run isolated from the project.</li> <li>If a tool is already installed, <code>uv tool run</code> will use the installed version but <code>uv run</code> will   not.</li> </ul> <p>If the tool should not be isolated from the project, e.g., when running <code>pytest</code> or <code>mypy</code>, then <code>uv run</code> should be used instead of <code>uv tool run</code>.</p>"},{"location":"concepts/authentication/","title":"Authentication","text":"<p>Authentication is required when working with private repositories or package indexes.</p> <p>Learn more about authentication in uv:</p> <ul> <li>Using the <code>uv auth</code> CLI</li> <li>HTTP authentication</li> <li>Git authentication</li> <li>TLS certificates</li> <li>Third-party services</li> </ul>"},{"location":"concepts/authentication/certificates/","title":"TLS certificates","text":"<p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS, where reading the system trust store incurs a significant delay).</p>"},{"location":"concepts/authentication/certificates/#system-certificates","title":"System certificates","text":"<p>In some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store. To instruct uv to use the system's trust store, run uv with the <code>--native-tls</code> command-line flag, or set the <code>UV_NATIVE_TLS</code> environment variable to <code>true</code>.</p>"},{"location":"concepts/authentication/certificates/#custom-certificates","title":"Custom certificates","text":"<p>If a direct path to the certificate is required (e.g., in CI), set the <code>SSL_CERT_FILE</code> environment variable to the path of the certificate bundle, to instruct uv to use that file instead of the system's trust store.</p> <p>If client certificate authentication (mTLS) is desired, set the <code>SSL_CLIENT_CERT</code> environment variable to the path of the PEM formatted file containing the certificate followed by the private key.</p>"},{"location":"concepts/authentication/certificates/#insecure-hosts","title":"Insecure hosts","text":"<p>If you're using a setup in which you want to trust a self-signed certificate or otherwise disable certificate verification, you can instruct uv to allow insecure connections to dedicated hosts via the <code>allow-insecure-host</code> configuration option. For example, adding the following to <code>pyproject.toml</code> will allow insecure connections to <code>example.com</code>:</p> <pre><code>[tool.uv]\nallow-insecure-host = [\"example.com\"]\n</code></pre> <p><code>allow-insecure-host</code> expects to receive a hostname (e.g., <code>localhost</code>) or hostname-port pair (e.g., <code>localhost:8080</code>), and is only applicable to HTTPS connections, as HTTP connections are inherently insecure.</p> <p>Use <code>allow-insecure-host</code> with caution and only in trusted environments, as it can expose you to security risks due to the lack of certificate verification.</p>"},{"location":"concepts/authentication/cli/","title":"The <code>uv auth</code> CLI","text":"<p>uv provides a high-level interface for storing and retrieving credentials from services.</p>"},{"location":"concepts/authentication/cli/#logging-in-to-a-service","title":"Logging in to a service","text":"<p>To add credentials for service, use the <code>uv auth login</code> command:</p> <pre><code>$ uv auth login example.com\n</code></pre> <p>This will prompt for the credentials.</p> <p>The credentials can also be provided using the <code>--username</code> and <code>--password</code> options, or the <code>--token</code> option for services which use a <code>__token__</code> or arbitrary username.</p> <p>Note</p> <p>We recommend providing the secret via stdin. Use <code>-</code> to indicate the value should be read from stdin, e.g., for <code>--password</code>:</p> <pre><code>$ echo 'my-password' | uv auth login example.com --password -\n</code></pre> <p>The same pattern can be used with <code>--token</code>.</p> <p>Once credentials are added, uv will use them for packaging operations that require fetching content from the given service. At this time, only HTTPS Basic authentication is supported. The credentials will not yet be used for Git requests.</p> <p>Note</p> <p>The credentials will not be validated, i.e., incorrect credentials will not fail.</p>"},{"location":"concepts/authentication/cli/#logging-out-of-a-service","title":"Logging out of a service","text":"<p>To remove credentials, use the <code>uv auth logout</code> command:</p> <pre><code>$ uv auth logout example.com\n</code></pre> <p>Note</p> <p>The credentials will not be invalidated with the remote server, i.e., they will only be removed from local storage not rendered unusable.</p>"},{"location":"concepts/authentication/cli/#showing-credentials-for-a-service","title":"Showing credentials for a service","text":"<p>To show the credential stored for a given URL, use the <code>uv auth token</code> command:</p> <pre><code>$ uv auth token example.com\n</code></pre> <p>If a username was used to log in, it will need to be provided as well, e.g.:</p> <pre><code>$ uv auth token --username foo example.com\n</code></pre>"},{"location":"concepts/authentication/cli/#configuring-the-storage-backend","title":"Configuring the storage backend","text":"<p>Credentials are persisted to the uv credentials store.</p> <p>By default, credentials are written to a plaintext file. An encrypted system-native storage backend can be enabled with <code>UV_PREVIEW_FEATURES=native-auth</code>.</p>"},{"location":"concepts/authentication/git/","title":"Git credentials","text":"<p>uv allows packages to be installed from private Git repositories using SSH or HTTP authentication.</p>"},{"location":"concepts/authentication/git/#ssh-authentication","title":"SSH authentication","text":"<p>To authenticate using an SSH key, use the <code>ssh://</code> protocol:</p> <ul> <li><code>git+ssh://git@&lt;hostname&gt;/...</code> (e.g., <code>git+ssh://git@github.com/astral-sh/uv</code>)</li> <li><code>git+ssh://git@&lt;host&gt;/...</code> (e.g., <code>git+ssh://git@github.com-key-2/astral-sh/uv</code>)</li> </ul> <p>SSH authentication requires using the username <code>git</code>.</p> <p>See the GitHub SSH documentation for more details on how to configure SSH.</p>"},{"location":"concepts/authentication/git/#http-authentication","title":"HTTP authentication","text":"<p>To authenticate over HTTP Basic authentication using a password or token:</p> <ul> <li><code>git+https://&lt;user&gt;:&lt;token&gt;@&lt;hostname&gt;/...</code> (e.g.,   <code>git+https://git:github_pat_asdf@github.com/astral-sh/uv</code>)</li> <li><code>git+https://&lt;token&gt;@&lt;hostname&gt;/...</code> (e.g., <code>git+https://github_pat_asdf@github.com/astral-sh/uv</code>)</li> <li><code>git+https://&lt;user&gt;@&lt;hostname&gt;/...</code> (e.g., <code>git+https://git@github.com/astral-sh/uv</code>)</li> </ul> <p>Note</p> <p>When using a GitHub personal access token, the username is arbitrary. GitHub doesn't allow you to use your account name and password in URLs like this, although other hosts may.</p> <p>If there are no credentials present in the URL and authentication is needed, the Git credential helper will be queried.</p>"},{"location":"concepts/authentication/git/#persistence-of-credentials","title":"Persistence of credentials","text":"<p>When using <code>uv add</code>, uv will not persist Git credentials to the <code>pyproject.toml</code> or <code>uv.lock</code>. These files are often included in source control and distributions, so it is generally unsafe to include credentials in them.</p> <p>If you have a Git credential helper configured, your credentials may be automatically persisted, resulting in successful subsequent fetches of the dependency. However, if you do not have a Git credential helper or the project is used on a machine without credentials seeded, uv will fail to fetch the dependency.</p> <p>You may force uv to persist Git credentials by passing the <code>--raw</code> option to <code>uv add</code>. However, we strongly recommend setting up a credential helper instead.</p>"},{"location":"concepts/authentication/git/#git-credential-helpers","title":"Git credential helpers","text":"<p>Git credential helpers are used to store and retrieve Git credentials. See the Git documentation to learn more.</p> <p>If you're using GitHub, the simplest way to set up a credential helper is to install the <code>gh</code> CLI and use:</p> <pre><code>$ gh auth login\n</code></pre> <p>See the <code>gh auth login</code> documentation for more details.</p> <p>Note</p> <p>When using <code>gh auth login</code> interactively, the credential helper will be configured automatically. But when using <code>gh auth login --with-token</code>, as in the uv GitHub Actions guide, the <code>gh auth setup-git</code> command will need to be run afterwards to configure the credential helper.</p>"},{"location":"concepts/authentication/http/","title":"HTTP credentials","text":"<p>uv supports credentials over HTTP when querying package registries.</p> <p>Authentication can come from the following sources, in order of precedence:</p> <ul> <li>The URL, e.g., <code>https://&lt;user&gt;:&lt;password&gt;@&lt;hostname&gt;/...</code></li> <li>A netrc configuration file</li> <li>The uv credentials store</li> <li>A keyring provider (off by default)</li> </ul> <p>Authentication may be used for hosts specified in the following contexts:</p> <ul> <li><code>[index]</code></li> <li><code>index-url</code></li> <li><code>extra-index-url</code></li> <li><code>find-links</code></li> <li><code>package @ https://...</code></li> </ul>"},{"location":"concepts/authentication/http/#netrc-files","title":"netrc files","text":"<p><code>.netrc</code> files are a long-standing plain text format for storing credentials on a system.</p> <p>Reading credentials from <code>.netrc</code> files is always enabled. The target file path will be loaded from the <code>NETRC</code> environment variable if defined, falling back to <code>~/.netrc</code> if not.</p>"},{"location":"concepts/authentication/http/#the-uv-credentials-store","title":"The uv credentials store","text":"<p>uv can read and write credentials from a store using the <code>uv auth</code> commands.</p> <p>Credentials are stored in a plaintext file in uv's state directory, e.g., <code>~/.local/share/uv/credentials/credentials.toml</code> on Unix. This file is currently not intended to be edited manually.</p> <p>Note</p> <p>A secure, system native storage mechanism is in preview \u2014 it is still experimental and being actively developed. In the future, this will become the default storage mechanism.</p> <p>When enabled, uv will use the secret storage mechanism native to your operating system. On macOS, it uses the Keychain Services. On Windows, it uses the Windows Credential Manager. On Linux, it uses the DBus-based Secret Service API.</p> <p>Currently, uv only searches the native store for credentials it has added to the secret store \u2014 it will not retrieve credentials persisted by other applications.</p> <p>Set <code>UV_PREVIEW_FEATURES=native-auth</code> to use this storage mechanism.</p>"},{"location":"concepts/authentication/http/#keyring-providers","title":"Keyring providers","text":"<p>A keyring provider is a concept from <code>pip</code> allowing retrieval of credentials from an interface matching the popular keyring Python package.</p> <p>The \"subprocess\" keyring provider invokes the <code>keyring</code> command to fetch credentials. uv does not support additional keyring provider types at this time.</p> <p>Set <code>--keyring-provider subprocess</code>, <code>UV_KEYRING_PROVIDER=subprocess</code>, or <code>tool.uv.keyring-provider = \"subprocess\"</code> to use the provider.</p>"},{"location":"concepts/authentication/http/#persistence-of-credentials","title":"Persistence of credentials","text":"<p>If authentication is found for a single index URL or net location (scheme, host, and port), it will be cached for the duration of the command and used for other queries to that index or net location. Authentication is not cached across invocations of uv.</p> <p>When using <code>uv add</code>, uv will not persist index credentials to the <code>pyproject.toml</code> or <code>uv.lock</code>. These files are often included in source control and distributions, so it is generally unsafe to include credentials in them. However, uv will persist credentials for direct URLs, i.e., <code>package @ https://username:password:example.com/foo.whl</code>, as there is not currently a way to otherwise provide those credentials.</p> <p>If credentials were attached to an index URL during <code>uv add</code>, uv may fail to fetch dependencies from indexes which require authentication on subsequent operations. See the index authentication documentation for details on persistent authentication for indexes.</p>"},{"location":"concepts/authentication/http/#learn-more","title":"Learn more","text":"<p>See the index authentication documentation for details on authenticating index URLs.</p> <p>See the <code>pip</code> compatibility guide for details on differences from <code>pip</code>.</p>"},{"location":"concepts/authentication/third-party/","title":"Third-party services","text":""},{"location":"concepts/authentication/third-party/#authentication-with-alternative-package-indexes","title":"Authentication with alternative package indexes","text":"<p>See the alternative indexes integration guide for details on authentication with popular alternative Python package indexes.</p>"},{"location":"concepts/authentication/third-party/#hugging-face-support","title":"Hugging Face support","text":"<p>uv supports automatic authentication for the Hugging Face Hub. Specifically, if the <code>HF_TOKEN</code> environment variable is set, uv will propagate it to requests to <code>huggingface.co</code>.</p> <p>This is particularly useful for accessing private scripts in Hugging Face Datasets. For example, you can run the following command to execute the script <code>main.py</code> script from a private dataset:</p> <pre><code>$ HF_TOKEN=hf_... uv run https://huggingface.co/datasets/&lt;user&gt;/&lt;name&gt;/resolve/&lt;branch&gt;/main.py\n</code></pre> <p>You can disable automatic Hugging Face authentication by setting the <code>UV_NO_HF_TOKEN=1</code> environment variable.</p>"},{"location":"concepts/projects/","title":"Projects","text":"<p>Projects help manage Python code spanning multiple files.</p> <p>Tip</p> <p>Looking for an introduction to creating a project with uv? See the projects guide first.</p> <p>Working on projects is a core part of the uv experience. Learn more about using projects:</p> <ul> <li>Understanding project structure and files</li> <li>Creating new projects</li> <li>Managing project dependencies</li> <li>Running commands and scripts in a project</li> <li>Using lockfiles and syncing the environment</li> <li>Configuring the project for advanced use cases</li> <li>Building distributions to publish a project</li> <li>Using workspaces to work on multiple projects at once</li> </ul>"},{"location":"concepts/projects/build/","title":"Building distributions","text":"<p>To distribute your project to others (e.g., to upload it to an index like PyPI), you'll need to build it into a distributable format.</p> <p>Python projects are typically distributed as both source distributions (sdists) and binary distributions (wheels). The former is typically a <code>.tar.gz</code> or <code>.zip</code> file containing the project's source code along with some additional metadata, while the latter is a <code>.whl</code> file containing pre-built artifacts that can be installed directly.</p> <p>Important</p> <p>When using <code>uv build</code>, uv acts as a build frontend and only determines the Python version to use and invokes the build backend. The details of the builds, such as the included files and the distribution filenames, are determined by the build backend, as defined in <code>[build-system]</code>. Information about build configuration can be found in the respective tool's documentation.</p>"},{"location":"concepts/projects/build/#using-uv-build","title":"Using <code>uv build</code>","text":"<p><code>uv build</code> can be used to build both source distributions and binary distributions for your project. By default, <code>uv build</code> will build the project in the current directory, and place the built artifacts in a <code>dist/</code> subdirectory:</p> <pre><code>$ uv build\n$ ls dist/\nexample-0.1.0-py3-none-any.whl\nexample-0.1.0.tar.gz\n</code></pre> <p>You can build the project in a different directory by providing a path to <code>uv build</code>, e.g., <code>uv build path/to/project</code>.</p> <p><code>uv build</code> will first build a source distribution, and then build a binary distribution (wheel) from that source distribution.</p> <p>You can limit <code>uv build</code> to building a source distribution with <code>uv build --sdist</code>, a binary distribution with <code>uv build --wheel</code>, or build both distributions from source with <code>uv build --sdist --wheel</code>.</p>"},{"location":"concepts/projects/build/#build-constraints","title":"Build constraints","text":"<p><code>uv build</code> accepts <code>--build-constraint</code>, which can be used to constrain the versions of any build requirements during the build process. When coupled with <code>--require-hashes</code>, uv will enforce that the requirement used to build the project match specific, known hashes, for reproducibility.</p> <p>For example, given the following <code>constraints.txt</code>:</p> <pre><code>setuptools==68.2.2 --hash=sha256:b454a35605876da60632df1a60f736524eb73cc47bbc9f3f1ef1b644de74fd2a\n</code></pre> <p>Running the following would build the project with the specified version of <code>setuptools</code>, and verify that the downloaded <code>setuptools</code> distribution matches the specified hash:</p> <pre><code>$ uv build --build-constraint constraints.txt --require-hashes\n</code></pre>"},{"location":"concepts/projects/config/","title":"Configuring projects","text":""},{"location":"concepts/projects/config/#python-version-requirement","title":"Python version requirement","text":"<p>Projects may declare the Python versions supported by the project in the <code>project.requires-python</code> field of the <code>pyproject.toml</code>.</p> <p>It is recommended to set a <code>requires-python</code> value:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\n</code></pre> <p>The Python version requirement determines the Python syntax that is allowed in the project and affects selection of dependency versions (they must support the same Python version range).</p>"},{"location":"concepts/projects/config/#entry-points","title":"Entry points","text":"<p>Entry points are the official term for an installed package to advertise interfaces. These include:</p> <ul> <li>Command line interfaces</li> <li>Graphical user interfaces</li> <li>Plugin entry points</li> </ul> <p>Important</p> <p>Using the entry point tables requires a build system to be defined.</p>"},{"location":"concepts/projects/config/#command-line-interfaces","title":"Command-line interfaces","text":"<p>Projects may define command line interfaces (CLIs) for the project in the <code>[project.scripts]</code> table of the <code>pyproject.toml</code>.</p> <p>For example, to declare a command called <code>hello</code> that invokes the <code>hello</code> function in the <code>example</code> module:</p> pyproject.toml<pre><code>[project.scripts]\nhello = \"example:hello\"\n</code></pre> <p>Then, the command can be run from a console:</p> <pre><code>$ uv run hello\n</code></pre>"},{"location":"concepts/projects/config/#graphical-user-interfaces","title":"Graphical user interfaces","text":"<p>Projects may define graphical user interfaces (GUIs) for the project in the <code>[project.gui-scripts]</code> table of the <code>pyproject.toml</code>.</p> <p>Important</p> <p>These are only different from command-line interfaces on Windows, where they are wrapped by a GUI executable so they can be started without a console. On other platforms, they behave the same.</p> <p>For example, to declare a command called <code>hello</code> that invokes the <code>app</code> function in the <code>example</code> module:</p> pyproject.toml<pre><code>[project.gui-scripts]\nhello = \"example:app\"\n</code></pre>"},{"location":"concepts/projects/config/#plugin-entry-points","title":"Plugin entry points","text":"<p>Projects may define entry points for plugin discovery in the <code>[project.entry-points]</code> table of the <code>pyproject.toml</code>.</p> <p>For example, to register the <code>example-plugin-a</code> package as a plugin for <code>example</code>:</p> pyproject.toml<pre><code>[project.entry-points.'example.plugins']\na = \"example_plugin_a\"\n</code></pre> <p>Then, in <code>example</code>, plugins would be loaded with:</p> example/__init__.py<pre><code>from importlib.metadata import entry_points\nfor plugin in entry_points(group='example.plugins'):\nplugin.load()\n</code></pre> <p>Note</p> <p>The <code>group</code> key can be an arbitrary value, it does not need to include the package name or \"plugins\". However, it is recommended to namespace the key by the package name to avoid collisions with other packages.</p>"},{"location":"concepts/projects/config/#build-systems","title":"Build systems","text":"<p>A build system determines how the project should be packaged and installed. Projects may declare and configure a build system in the <code>[build-system]</code> table of the <code>pyproject.toml</code>.</p> <p>uv uses the presence of a build system to determine if a project contains a package that should be installed in the project virtual environment. If a build system is not defined, uv will not attempt to build or install the project itself, just its dependencies. If a build system is defined, uv will build and install the project into the project environment.</p> <p>The <code>--build-backend</code> option can be provided to <code>uv init</code> to create a packaged project with an appropriate layout. The <code>--package</code> option can be provided to <code>uv init</code> to create a packaged project with the default build system.</p> <p>Note</p> <p>While uv will not build and install the current project without a build system definition, the presence of a <code>[build-system]</code> table is not required in other packages. For legacy reasons, if a build system is not defined, then <code>setuptools.build_meta:__legacy__</code> is used to build the package. Packages you depend on may not explicitly declare their build system but are still installable. Similarly, if you add a dependency on a local project or install it with <code>uv pip</code>, uv will attempt to build and install it regardless of the presence of a <code>[build-system]</code> table.</p> <p>Build systems are used to power the following features:</p> <ul> <li>Including or excluding files from distributions</li> <li>Editable installation behavior</li> <li>Dynamic project metadata</li> <li>Compilation of native code</li> <li>Vendoring shared libraries</li> </ul> <p>To configure these features, refer to the documentation of your chosen build system.</p>"},{"location":"concepts/projects/config/#project-packaging","title":"Project packaging","text":"<p>As discussed in build systems, a Python project must be built to be installed. This process is generally referred to as \"packaging\".</p> <p>You probably need a package if you want to:</p> <ul> <li>Add commands to the project</li> <li>Distribute the project to others</li> <li>Use a <code>src</code> and <code>test</code> layout</li> <li>Write a library</li> </ul> <p>You probably do not need a package if you are:</p> <ul> <li>Writing scripts</li> <li>Building a simple application</li> <li>Using a flat layout</li> </ul> <p>While uv usually uses the declaration of a build system to determine if a project should be packaged, uv also allows overriding this behavior with the <code>tool.uv.package</code> setting.</p> <p>Setting <code>tool.uv.package = true</code> will force a project to be built and installed into the project environment. If no build system is defined, uv will use the setuptools legacy backend.</p> <p>Setting <code>tool.uv.package = false</code> will force a project package not to be built and installed into the project environment. uv will ignore a declared build system when interacting with the project; however, uv will still respect explicit attempts to build the project such as invoking <code>uv build</code>.</p>"},{"location":"concepts/projects/config/#project-environment-path","title":"Project environment path","text":"<p>The <code>UV_PROJECT_ENVIRONMENT</code> environment variable can be used to configure the project virtual environment path (<code>.venv</code> by default).</p> <p>If a relative path is provided, it will be resolved relative to the workspace root. If an absolute path is provided, it will be used as-is, i.e., a child directory will not be created for the environment. If an environment is not present at the provided path, uv will create it.</p> <p>This option can be used to write to the system Python environment, though it is not recommended. <code>uv sync</code> will remove extraneous packages from the environment by default and, as such, may leave the system in a broken state.</p> <p>To target the system environment, set <code>UV_PROJECT_ENVIRONMENT</code> to the prefix of the Python installation. For example, on Debian-based systems, this is usually <code>/usr/local</code>:</p> <pre><code>$ python -c \"import sysconfig; print(sysconfig.get_config_var('prefix'))\"\n/usr/local\n</code></pre> <p>To target this environment, you'd export <code>UV_PROJECT_ENVIRONMENT=/usr/local</code>.</p> <p>Important</p> <p>If an absolute path is provided and the setting is used across multiple projects, the environment will be overwritten by invocations in each project. This setting is only recommended for use for a single project in CI or Docker images.</p> <p>Note</p> <p>By default, uv does not read the <code>VIRTUAL_ENV</code> environment variable during project operations. A warning will be displayed if <code>VIRTUAL_ENV</code> is set to a different path than the project's environment. The <code>--active</code> flag can be used to opt-in to respecting <code>VIRTUAL_ENV</code>. The <code>--no-active</code> flag can be used to silence the warning.</p>"},{"location":"concepts/projects/config/#build-isolation","title":"Build isolation","text":"<p>By default, uv builds all packages in isolated virtual environments alongside their declared build dependencies, as per PEP 517.</p> <p>Some packages are incompatible with this approach to build isolation, be it intentionally or unintentionally.</p> <p>For example, packages like <code>flash-attn</code> and <code>deepspeed</code> need to build against the same version of PyTorch that is installed in the project environment; by building them in an isolated environment, they may inadvertently build against a different version of PyTorch, leading to runtime errors.</p> <p>In other cases, packages may accidentally omit necessary dependencies in their declared build dependency list. For example, <code>cchardet</code> requires <code>cython</code> to be installed in the project environment prior to installing <code>cchardet</code>, but does not declare it as a build dependency.</p> <p>To address these issues, uv supports two separate approaches to modifying the build isolation behavior:</p> <ol> <li> <p>Augmenting the list of build dependencies: This allows you to install a package in an    isolated environment, but with additional build dependencies that are not declared by the package    itself via the <code>extra-build-dependencies</code>    setting. For packages like <code>flash-attn</code>, you can even enforce that those build dependencies (like    <code>torch</code>) match the version of the package that is or will be installed in the project    environment.</p> </li> <li> <p>Disabling build isolation for specific packages: This allows you to install a package without    building it in an isolated environment.</p> </li> </ol> <p>When possible, we recommend augmenting the build dependencies rather than disabling build isolation entirely, as the latter approach requires that the build dependencies are installed in the project environment prior to installing the package itself, which can lead to more complex installation steps, the inclusion of extraneous packages in the project environment, and difficulty in reproducing the project environment in other contexts.</p>"},{"location":"concepts/projects/config/#augmenting-build-dependencies","title":"Augmenting build dependencies","text":"<p>To augment the list of build dependencies for a specific package, add it to the <code>extra-build-dependencies</code> list in your <code>pyproject.toml</code>.</p> <p>For example, to build <code>cchardet</code> with <code>cython</code> as an additional build dependency, include the following in your <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"cchardet\"]\n[tool.uv.extra-build-dependencies]\ncchardet = [\"cython\"]\n</code></pre> <p>To ensure that a build dependency matches the version of the package that is or will be installed in the project environment, set <code>match-runtime = true</code> in the <code>extra-build-dependencies</code> table. For example, to build <code>deepspeed</code> with <code>torch</code> as an additional build dependency, include the following in your <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"deepspeed\", \"torch\"]\n[tool.uv.extra-build-dependencies]\ndeepspeed = [{ requirement = \"torch\", match-runtime = true }]\n</code></pre> <p>This will ensure that <code>deepspeed</code> is built with the same version of <code>torch</code> that is installed in the project environment.</p> <p>Similarly, to build <code>flash-attn</code> with <code>torch</code> as an additional build dependency, include the following in your <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"flash-attn\", \"torch\"]\n[tool.uv.extra-build-dependencies]\nflash-attn = [{ requirement = \"torch\", match-runtime = true }]\n[tool.uv.extra-build-variables]\nflash-attn = { FLASH_ATTENTION_SKIP_CUDA_BUILD = \"TRUE\" }\n</code></pre> <p>Note</p> <p>The <code>FLASH_ATTENTION_SKIP_CUDA_BUILD</code> environment variable ensures that <code>flash-attn</code> is installed from a compatible, pre-built wheel, rather than attempting to build it from source, which requires access to the CUDA development toolkit. If the CUDA toolkit is not available, the environment variable can be omitted, and <code>flash-attn</code> will be installed from a pre-built wheel if one is available for the current platform, Python version, and PyTorch version.</p> <p>Similarly, <code>deep_gemm</code> follows the same pattern:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"deep_gemm\", \"torch\"]\n[tool.uv.sources]\ndeep_gemm = { git = \"https://github.com/deepseek-ai/DeepGEMM\" }\n[tool.uv.extra-build-dependencies]\ndeep_gemm = [{ requirement = \"torch\", match-runtime = true }]\n</code></pre> <p>The use of <code>extra-build-dependencies</code> and <code>extra-build-variables</code> are tracked in the uv cache, such that changes to these settings will trigger a reinstall and rebuild of the affected packages. For example, in the case of <code>flash-attn</code>, upgrading the version of <code>torch</code> used in your project would subsequently trigger a rebuild of <code>flash-attn</code> with the new version of <code>torch</code>.</p>"},{"location":"concepts/projects/config/#dynamic-metadata","title":"Dynamic metadata","text":"<p>The use of <code>match-runtime = true</code> is only available for packages like <code>flash-attn</code> that declare static metadata. If static metadata is unavailable, uv is required to build the package during the dependency resolution phase; as such, uv cannot determine the version of the build dependency that would ultimately be installed in the project environment.</p> <p>In other words, if <code>flash-attn</code> did not declare static metadata, uv would not be able to determine the version of <code>torch</code> that would be installed in the project environment, since it would need to build <code>flash-attn</code> prior to resolving the <code>torch</code> version.</p> <p>As a concrete example, <code>axolotl</code> is a popular package that requires augmented build dependencies, but does not declare static metadata, as the package's dependencies vary based on the version of <code>torch</code> that is installed in the project environment. In this case, users should instead specify the exact version of <code>torch</code> that they intend to use in their project, and then augment the build dependencies with that version.</p> <p>For example, to build <code>axolotl</code> against <code>torch==2.6.0</code>, include the following in your <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"axolotl[deepspeed, flash-attn]\", \"torch==2.6.0\"]\n[tool.uv.extra-build-dependencies]\naxolotl = [\"torch==2.6.0\"]\ndeepspeed = [\"torch==2.6.0\"]\nflash-attn = [\"torch==2.6.0\"]\n</code></pre> <p>Similarly, older versions of <code>flash-attn</code> did not declare static metadata, and thus would not have supported <code>match-runtime = true</code> out of the box. Unlike <code>axolotl</code>, though, <code>flash-attn</code> did not vary its dependencies based on dynamic properties of the build environment. As such, users could instead provide the <code>flash-attn</code> metadata upfront via the <code>dependency-metadata</code> setting, thereby forgoing the need to build the package during the dependency resolution phase. For example, to provide the <code>flash-attn</code> metadata upfront:</p> pyproject.toml<pre><code>[[tool.uv.dependency-metadata]]\nname = \"flash-attn\"\nversion = \"2.6.3\"\nrequires-dist = [\"torch\", \"einops\"]\n</code></pre> <p>Tip</p> <p>To determine the package metadata for a package like <code>flash-attn</code>, navigate to the appropriate Git repository, or look it up on PyPI and download the package's source distribution. The package requirements can typically be found in the <code>setup.py</code> or <code>setup.cfg</code> file.</p> <p>(If the package includes a built distribution, you can unzip it to find the <code>METADATA</code> file; however, the presence of a built distribution would negate the need to provide the metadata upfront, since it would already be available to uv.)</p> <p>The <code>version</code> field in <code>tool.uv.dependency-metadata</code> is optional for registry-based dependencies (when omitted, uv will assume the metadata applies to all versions of the package), but required for direct URL dependencies (like Git dependencies).</p>"},{"location":"concepts/projects/config/#disabling-build-isolation","title":"Disabling build isolation","text":"<p>Installing packages without build isolation requires that the package's build dependencies are installed in the project environment prior to building the package itself.</p> <p>For example, historically, to install <code>cchardet</code> without build isolation, you would first need to install the <code>cython</code> and <code>setuptools</code> packages in the project environment, followed by a separate invocation to install <code>cchardet</code> without build isolation:</p> <pre><code>$ uv venv\n$ uv pip install cython setuptools\n$ uv pip install cchardet --no-build-isolation\n</code></pre> <p>uv simplifies this process by allowing you to specify packages that should not be built in isolation via the <code>no-build-isolation-package</code> setting in your <code>pyproject.toml</code> and the <code>--no-build-isolation-package</code> flag in the command line. Further, when a package is marked for disabling build isolation, uv will perform a two-phase install, first installing any packages that support build isolation, followed by those that do not. As a result, if a project's build dependencies are included as project dependencies, uv will automatically install them before installing the package that requires build isolation to be disabled.</p> <p>For example, to install <code>cchardet</code> without build isolation, include the following in your <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"cchardet\", \"cython\", \"setuptools\"]\n[tool.uv]\nno-build-isolation-package = [\"cchardet\"]\n</code></pre> <p>When running <code>uv sync</code>, uv will first install <code>cython</code> and <code>setuptools</code> in the project environment, followed by <code>cchardet</code> (without build isolation):</p> <pre><code>$ uv sync --extra build\n + cchardet==2.1.7\n + cython==3.1.3\n + setuptools==80.9.0\n</code></pre> <p>Similarly, to install <code>flash-attn</code> without build isolation, include the following in your <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"flash-attn\", \"torch\"]\n[tool.uv]\nno-build-isolation-package = [\"flash-attn\"]\n</code></pre> <p>When running <code>uv sync</code>, uv will first install <code>torch</code> in the project environment, followed by <code>flash-attn</code> (without build isolation). As <code>torch</code> is both a project dependency and a build dependency, the version of <code>torch</code> is guaranteed to be consistent between the build and runtime environments.</p> <p>A downside of the above approach is that it requires the build dependencies to be installed in the project environment, which is appropriate for <code>flash-attn</code> (which requires <code>torch</code> both at build-time and runtime), but not for <code>cchardet</code> (which only requires <code>cython</code> at build-time).</p> <p>To avoid including build dependencies in the project environment, uv supports a two-step installation process that allows you to separate the build dependencies from the packages that require them.</p> <p>For example, the build dependencies for <code>cchardet</code> can be isolated to an optional <code>build</code> group, as in:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"cchardet\"]\n[project.optional-dependencies]\nbuild = [\"setuptools\", \"cython\"]\n[tool.uv]\nno-build-isolation-package = [\"cchardet\"]\n</code></pre> <p>Given the above, a user would first sync with the <code>build</code> optional group, and then without it to remove the build dependencies:</p> <pre><code>$ uv sync --extra build\n + cchardet==2.1.7\n + cython==3.1.3\n + setuptools==80.9.0\n$ uv sync\n - cython==3.1.3\n - setuptools==80.9.0\n</code></pre> <p>Some packages, like <code>cchardet</code>, only require build dependencies for the installation phase of <code>uv sync</code>. Others require their build dependencies to be present even just to resolve the project's dependencies during the resolution phase.</p> <p>In such cases, the build dependencies can be installed prior to running any <code>uv lock</code> or <code>uv sync</code> commands, using the lower lower-level <code>uv pip</code> API. For example, given:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\ndescription = \"...\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"flash-attn\"]\n[tool.uv]\nno-build-isolation-package = [\"flash-attn\"]\n</code></pre> <p>You could run the following sequence of commands to sync <code>flash-attn</code>:</p> <pre><code>$ uv venv\n$ uv pip install torch setuptools\n$ uv sync\n</code></pre> <p>Alternatively, users can instead provide the <code>flash-attn</code> metadata upfront via the <code>dependency-metadata</code> setting, thereby forgoing the need to build the package during the dependency resolution phase. For example, to provide the <code>flash-attn</code> metadata upfront:</p> pyproject.toml<pre><code>[[tool.uv.dependency-metadata]]\nname = \"flash-attn\"\nversion = \"2.6.3\"\nrequires-dist = [\"torch\", \"einops\"]\n</code></pre>"},{"location":"concepts/projects/config/#editable-mode","title":"Editable mode","text":"<p>By default, the project will be installed in editable mode, such that changes to the source code are immediately reflected in the environment. <code>uv sync</code> and <code>uv run</code> both accept a <code>--no-editable</code> flag, which instructs uv to install the project in non-editable mode. <code>--no-editable</code> is intended for deployment use-cases, such as building a Docker container, in which the project should be included in the deployed environment without a dependency on the originating source code.</p>"},{"location":"concepts/projects/config/#conflicting-dependencies","title":"Conflicting dependencies","text":"<p>uv resolves all project dependencies together, including optional dependencies (\"extras\") and dependency groups. If dependencies declared in one section are not compatible with those in another section, uv will fail to resolve the requirements of the project with an error.</p> <p>uv supports explicit declaration of conflicting dependency groups. For example, to declare that the <code>optional-dependency</code> groups <code>extra1</code> and <code>extra2</code> are incompatible:</p> pyproject.toml<pre><code>[tool.uv]\nconflicts = [\n[\n{ extra = \"extra1\" },\n{ extra = \"extra2\" },\n],\n]\n</code></pre> <p>Or, to declare the development dependency groups <code>group1</code> and <code>group2</code> incompatible:</p> pyproject.toml<pre><code>[tool.uv]\nconflicts = [\n[\n{ group = \"group1\" },\n{ group = \"group2\" },\n],\n]\n</code></pre> <p>See the resolution documentation for more.</p>"},{"location":"concepts/projects/config/#limited-resolution-environments","title":"Limited resolution environments","text":"<p>If your project supports a more limited set of platforms or Python versions, you can constrain the set of solved platforms via the <code>environments</code> setting, which accepts a list of PEP 508 environment markers. For example, to constrain the lockfile to macOS and Linux, and exclude Windows:</p> pyproject.toml<pre><code>[tool.uv]\nenvironments = [\n\"sys_platform == 'darwin'\",\n\"sys_platform == 'linux'\",\n]\n</code></pre> <p>See the resolution documentation for more.</p>"},{"location":"concepts/projects/config/#required-environments","title":"Required environments","text":"<p>If your project must support a specific platform or Python version, you can mark that platform as required via the <code>required-environments</code> setting. For example, to require that the project supports Intel macOS:</p> pyproject.toml<pre><code>[tool.uv]\nrequired-environments = [\n\"sys_platform == 'darwin' and platform_machine == 'x86_64'\",\n]\n</code></pre> <p>The <code>required-environments</code> setting is only relevant for packages that do not publish a source distribution (like PyTorch), as such packages can only be installed on environments covered by the set of pre-built binary distributions (wheels) published by that package.</p> <p>See the resolution documentation for more.</p>"},{"location":"concepts/projects/dependencies/","title":"Managing dependencies","text":""},{"location":"concepts/projects/dependencies/#dependency-fields","title":"Dependency fields","text":"<p>Dependencies of the project are defined in several fields:</p> <ul> <li><code>project.dependencies</code>: Published dependencies.</li> <li><code>project.optional-dependencies</code>: Published optional dependencies, or   \"extras\".</li> <li><code>dependency-groups</code>: Local dependencies for development.</li> <li><code>tool.uv.sources</code>: Alternative sources for dependencies during development.</li> </ul> <p>Note</p> <p>The <code>project.dependencies</code> and <code>project.optional-dependencies</code> fields can be used even if project isn't going to be published. <code>dependency-groups</code> are a recently standardized feature and may not be supported by all tools yet.</p> <p>uv supports modifying the project's dependencies with <code>uv add</code> and <code>uv remove</code>, but dependency metadata can also be updated by editing the <code>pyproject.toml</code> directly.</p>"},{"location":"concepts/projects/dependencies/#adding-dependencies","title":"Adding dependencies","text":"<p>To add a dependency:</p> <pre><code>$ uv add httpx\n</code></pre> <p>An entry will be added in the <code>project.dependencies</code> field:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.1.0\"\ndependencies = [\"httpx&gt;=0.27.2\"]\n</code></pre> <p>The <code>--dev</code>, <code>--group</code>, or <code>--optional</code> flags can be used to add dependencies to an alternative field.</p> <p>The dependency will include a constraint, e.g., <code>&gt;=0.27.2</code>, for the most recent, compatible version of the package. The kind of bound can be adjusted with <code>--bounds</code>, or the constraint can be provided directly:</p> <pre><code>$ uv add \"httpx&gt;=0.20\"\n</code></pre> <p>When adding a dependency from a source other than a package registry, uv will add an entry in the sources field. For example, when adding <code>httpx</code> from GitHub:</p> <pre><code>$ uv add \"httpx @ git+https://github.com/encode/httpx\"\n</code></pre> <p>The <code>pyproject.toml</code> will include a Git source entry:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.1.0\"\ndependencies = [\n\"httpx\",\n]\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\" }\n</code></pre> <p>If a dependency cannot be used, uv will display an error.:</p> <pre><code>$ uv add \"httpx&gt;9999\"\n  \u00d7 No solution found when resolving dependencies:\n  \u2570\u2500\u25b6 Because only httpx&lt;=1.0.0b0 is available and your project depends on httpx&gt;9999,\n      we can conclude that your project's requirements are unsatisfiable.\n</code></pre>"},{"location":"concepts/projects/dependencies/#importing-dependencies-from-requirements-files","title":"Importing dependencies from requirements files","text":"<p>Dependencies declared in a <code>requirements.txt</code> file can be added to the project with the <code>-r</code> option:</p> <pre><code>uv add -r requirements.txt\n</code></pre> <p>See the pip migration guide for more details.</p>"},{"location":"concepts/projects/dependencies/#removing-dependencies","title":"Removing dependencies","text":"<p>To remove a dependency:</p> <pre><code>$ uv remove httpx\n</code></pre> <p>The <code>--dev</code>, <code>--group</code>, or <code>--optional</code> flags can be used to remove a dependency from a specific table.</p> <p>If a source is defined for the removed dependency, and there are no other references to the dependency, it will also be removed.</p>"},{"location":"concepts/projects/dependencies/#changing-dependencies","title":"Changing dependencies","text":"<p>To change an existing dependency, e.g., to use a different constraint for <code>httpx</code>:</p> <pre><code>$ uv add \"httpx&gt;0.1.0\"\n</code></pre> <p>Note</p> <p>In this example, we are changing the constraints for the dependency in the <code>pyproject.toml</code>. The locked version of the dependency will only change if necessary to satisfy the new constraints. To force the package version to update to the latest within the constraints, use <code>--upgrade-package &lt;name&gt;</code>, e.g.:</p> <pre><code>$ uv add \"httpx&gt;0.1.0\" --upgrade-package httpx\n</code></pre> <p>See the lockfile documentation for more details on upgrading packages.</p> <p>Requesting a different dependency source will update the <code>tool.uv.sources</code> table, e.g., to use <code>httpx</code> from a local path during development:</p> <pre><code>$ uv add \"httpx @ ../httpx\"\n</code></pre>"},{"location":"concepts/projects/dependencies/#platform-specific-dependencies","title":"Platform-specific dependencies","text":"<p>To ensure that a dependency is only installed on a specific platform or on specific Python versions, use environment markers.</p> <p>For example, to install <code>jax</code> on Linux, but not on Windows or macOS:</p> <pre><code>$ uv add \"jax; sys_platform == 'linux'\"\n</code></pre> <p>The resulting <code>pyproject.toml</code> will then include the environment marker in the dependency definition:</p> pyproject.toml<pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11\"\ndependencies = [\"jax; sys_platform == 'linux'\"]\n</code></pre> <p>Similarly, to include <code>numpy</code> on Python 3.11 and later:</p> <pre><code>$ uv add \"numpy; python_version &gt;= '3.11'\"\n</code></pre> <p>See Python's environment marker documentation for a complete enumeration of the available markers and operators.</p> <p>Tip</p> <p>Dependency sources can also be changed per-platform.</p>"},{"location":"concepts/projects/dependencies/#project-dependencies","title":"Project dependencies","text":"<p>The <code>project.dependencies</code> table represents the dependencies that are used when uploading to PyPI or building a wheel. Individual dependencies are specified using dependency specifiers syntax, and the table follows the PEP 621 standard.</p> <p><code>project.dependencies</code> defines the list of packages that are required for the project, along with the version constraints that should be used when installing them. Each entry includes a dependency name and version. An entry may include extras or environment markers for platform-specific packages. For example:</p> pyproject.toml<pre><code>[project]\nname = \"albatross\"\nversion = \"0.1.0\"\ndependencies = [\n# Any version in this range\n\"tqdm &gt;=4.66.2,&lt;5\",\n# Exactly this version of torch\n\"torch ==2.2.2\",\n# Install transformers with the torch extra\n\"transformers[torch] &gt;=4.39.3,&lt;5\",\n# Only install this package on older python versions\n# See \"Environment Markers\" for more information\n\"importlib_metadata &gt;=7.1.0,&lt;8; python_version &lt; '3.10'\",\n\"mollymawk ==0.1.0\"\n]\n</code></pre>"},{"location":"concepts/projects/dependencies/#dependency-sources","title":"Dependency sources","text":"<p>The <code>tool.uv.sources</code> table extends the standard dependency tables with alternative dependency sources, which are used during development.</p> <p>Dependency sources add support for common patterns that are not supported by the <code>project.dependencies</code> standard, like editable installations and relative paths. For example, to install <code>foo</code> from a directory relative to the project root:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.1.0\"\ndependencies = [\"foo\"]\n[tool.uv.sources]\nfoo = { path = \"./packages/foo\" }\n</code></pre> <p>The following dependency sources are supported by uv:</p> <ul> <li>Index: A package resolved from a specific package index.</li> <li>Git: A Git repository.</li> <li>URL: A remote wheel or source distribution.</li> <li>Path: A local wheel, source distribution, or project directory.</li> <li>Workspace: A member of the current workspace.</li> </ul> <p>Important</p> <p>Sources are only respected by uv. If another tool is used, only the definitions in the standard project tables will be used. If another tool is being used for development, any metadata provided in the source table will need to be re-specified in the other tool's format.</p>"},{"location":"concepts/projects/dependencies/#index","title":"Index","text":"<p>To add Python package from a specific index, use the <code>--index</code> option:</p> <pre><code>$ uv add torch --index pytorch=https://download.pytorch.org/whl/cpu\n</code></pre> <p>uv will store the index in <code>[[tool.uv.index]]</code> and add a <code>[tool.uv.sources]</code> entry:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"torch\"]\n[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n</code></pre> <p>Tip</p> <p>The above example will only work on x86-64 Linux, due to the specifics of the PyTorch index. See the PyTorch guide for more information about setting up PyTorch.</p> <p>Using an <code>index</code> source pins a package to the given index \u2014 it will not be downloaded from other indexes.</p> <p>When defining an index, an <code>explicit</code> flag can be included to indicate that the index should only be used for packages that explicitly specify it in <code>tool.uv.sources</code>. If <code>explicit</code> is not set, other packages may be resolved from the index, if not found elsewhere.</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n</code></pre>"},{"location":"concepts/projects/dependencies/#git","title":"Git","text":"<p>To add a Git dependency source, prefix a Git-compatible URL with <code>git+</code>.</p> <p>For example:</p> <pre><code>$ # Install over HTTP(S).\n$ uv add git+https://github.com/encode/httpx\n\n$ # Install over SSH.\n$ uv add git+ssh://git@github.com/encode/httpx\n</code></pre> pyproject.toml<pre><code>[project]\ndependencies = [\"httpx\"]\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\" }\n</code></pre> <p>Specific Git references can be requested, e.g., a tag:</p> <pre><code>$ uv add git+https://github.com/encode/httpx --tag 0.27.0\n</code></pre> pyproject.toml<pre><code>[project]\ndependencies = [\"httpx\"]\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\", tag = \"0.27.0\" }\n</code></pre> <p>Or, a branch:</p> <pre><code>$ uv add git+https://github.com/encode/httpx --branch main\n</code></pre> pyproject.toml<pre><code>[project]\ndependencies = [\"httpx\"]\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\", branch = \"main\" }\n</code></pre> <p>Or, a revision (commit):</p> <pre><code>$ uv add git+https://github.com/encode/httpx --rev 326b9431c761e1ef1e00b9f760d1f654c8db48c6\n</code></pre> pyproject.toml<pre><code>[project]\ndependencies = [\"httpx\"]\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\", rev = \"326b9431c761e1ef1e00b9f760d1f654c8db48c6\" }\n</code></pre> <p>A <code>subdirectory</code> may be specified if the package isn't in the repository root:</p> <pre><code>$ uv add git+https://github.com/langchain-ai/langchain#subdirectory=libs/langchain\n</code></pre> pyproject.toml<pre><code>[project]\ndependencies = [\"langchain\"]\n[tool.uv.sources]\nlangchain = { git = \"https://github.com/langchain-ai/langchain\", subdirectory = \"libs/langchain\" }\n</code></pre>"},{"location":"concepts/projects/dependencies/#url","title":"URL","text":"<p>To add a URL source, provide a <code>https://</code> URL to either a wheel (ending in <code>.whl</code>) or a source distribution (typically ending in <code>.tar.gz</code> or <code>.zip</code>; see here for all supported formats).</p> <p>For example:</p> <pre><code>$ uv add \"https://files.pythonhosted.org/packages/5c/2d/3da5bdf4408b8b2800061c339f240c1802f2e82d55e50bd39c5a881f47f0/httpx-0.27.0.tar.gz\"\n</code></pre> <p>Will result in a <code>pyproject.toml</code> with:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"httpx\"]\n[tool.uv.sources]\nhttpx = { url = \"https://files.pythonhosted.org/packages/5c/2d/3da5bdf4408b8b2800061c339f240c1802f2e82d55e50bd39c5a881f47f0/httpx-0.27.0.tar.gz\" }\n</code></pre> <p>URL dependencies can also be manually added or edited in the <code>pyproject.toml</code> with the <code>{ url = &lt;url&gt; }</code> syntax. A <code>subdirectory</code> may be specified if the source distribution isn't in the archive root.</p>"},{"location":"concepts/projects/dependencies/#path","title":"Path","text":"<p>To add a path source, provide the path of a wheel (ending in <code>.whl</code>), a source distribution (typically ending in <code>.tar.gz</code> or <code>.zip</code>; see here for all supported formats), or a directory containing a <code>pyproject.toml</code>.</p> <p>For example:</p> <pre><code>$ uv add /example/foo-0.1.0-py3-none-any.whl\n</code></pre> <p>Will result in a <code>pyproject.toml</code> with:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"foo\"]\n[tool.uv.sources]\nfoo = { path = \"/example/foo-0.1.0-py3-none-any.whl\" }\n</code></pre> <p>The path may also be a relative path:</p> <pre><code>$ uv add ./foo-0.1.0-py3-none-any.whl\n</code></pre> <p>Or, a path to a project directory:</p> <pre><code>$ uv add ~/projects/bar/\n</code></pre> <p>Important</p> <p>When using a directory as a path dependency, uv will attempt to build and install the target as a package by default. See the virtual dependency documentation for details.</p> <p>An editable installation is not used for path dependencies by default. An editable installation may be requested for project directories:</p> <pre><code>$ uv add --editable ../projects/bar/\n</code></pre> <p>Which will result in a <code>pyproject.toml</code> with:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"bar\"]\n[tool.uv.sources]\nbar = { path = \"../projects/bar\", editable = true }\n</code></pre> <p>Tip</p> <p>For multiple packages in the same repository, workspaces may be a better fit.</p>"},{"location":"concepts/projects/dependencies/#workspace-member","title":"Workspace member","text":"<p>To declare a dependency on a workspace member, add the member name with <code>{ workspace = true }</code>. All workspace members must be explicitly stated. Workspace members are always editable . See the workspace documentation for more details on workspaces.</p> pyproject.toml<pre><code>[project]\ndependencies = [\"foo==0.1.0\"]\n[tool.uv.sources]\nfoo = { workspace = true }\n[tool.uv.workspace]\nmembers = [\n\"packages/foo\"\n]\n</code></pre>"},{"location":"concepts/projects/dependencies/#platform-specific-sources","title":"Platform-specific sources","text":"<p>You can limit a source to a given platform or Python version by providing dependency specifiers-compatible environment markers for the source.</p> <p>For example, to pull <code>httpx</code> from GitHub, but only on macOS, use the following:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"httpx\"]\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\", tag = \"0.27.2\", marker = \"sys_platform == 'darwin'\" }\n</code></pre> <p>By specifying the marker on the source, uv will still include <code>httpx</code> on all platforms, but will download the source from GitHub on macOS, and fall back to PyPI on all other platforms.</p>"},{"location":"concepts/projects/dependencies/#multiple-sources","title":"Multiple sources","text":"<p>You can specify multiple sources for a single dependency by providing a list of sources, disambiguated by PEP 508-compatible environment markers.</p> <p>For example, to pull in different <code>httpx</code> tags on macOS vs. Linux:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"httpx\"]\n[tool.uv.sources]\nhttpx = [\n{ git = \"https://github.com/encode/httpx\", tag = \"0.27.2\", marker = \"sys_platform == 'darwin'\" },\n{ git = \"https://github.com/encode/httpx\", tag = \"0.24.1\", marker = \"sys_platform == 'linux'\" },\n]\n</code></pre> <p>This strategy extends to using different indexes based on environment markers. For example, to install <code>torch</code> from different PyTorch indexes based on the platform:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"torch\"]\n[tool.uv.sources]\ntorch = [\n{ index = \"torch-cpu\", marker = \"platform_system == 'Darwin'\"},\n{ index = \"torch-gpu\", marker = \"platform_system == 'Linux'\"},\n]\n[[tool.uv.index]]\nname = \"torch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n[[tool.uv.index]]\nname = \"torch-gpu\"\nurl = \"https://download.pytorch.org/whl/cu124\"\nexplicit = true\n</code></pre>"},{"location":"concepts/projects/dependencies/#disabling-sources","title":"Disabling sources","text":"<p>To instruct uv to ignore the <code>tool.uv.sources</code> table (e.g., to simulate resolving with the package's published metadata), use the <code>--no-sources</code> flag:</p> <pre><code>$ uv lock --no-sources\n</code></pre> <p>The use of <code>--no-sources</code> will also prevent uv from discovering any workspace members that could satisfy a given dependency.</p>"},{"location":"concepts/projects/dependencies/#optional-dependencies","title":"Optional dependencies","text":"<p>It is common for projects that are published as libraries to make some features optional to reduce the default dependency tree. For example, Pandas has an <code>excel</code> extra and a <code>plot</code> extra to avoid installation of Excel parsers and <code>matplotlib</code> unless someone explicitly requires them. Extras are requested with the <code>package[&lt;extra&gt;]</code> syntax, e.g., <code>pandas[plot, excel]</code>.</p> <p>Optional dependencies are specified in <code>[project.optional-dependencies]</code>, a TOML table that maps from extra name to its dependencies, following dependency specifiers syntax.</p> <p>Optional dependencies can have entries in <code>tool.uv.sources</code> the same as normal dependencies.</p> pyproject.toml<pre><code>[project]\nname = \"pandas\"\nversion = \"1.0.0\"\n[project.optional-dependencies]\nplot = [\n\"matplotlib&gt;=3.6.3\"\n]\nexcel = [\n\"odfpy&gt;=1.4.1\",\n\"openpyxl&gt;=3.1.0\",\n\"python-calamine&gt;=0.1.7\",\n\"pyxlsb&gt;=1.0.10\",\n\"xlrd&gt;=2.0.1\",\n\"xlsxwriter&gt;=3.0.5\"\n]\n</code></pre> <p>To add an optional dependency, use the <code>--optional &lt;extra&gt;</code> option:</p> <pre><code>$ uv add httpx --optional network\n</code></pre> <p>Note</p> <p>If you have optional dependencies that conflict with one another, resolution will fail unless you explicitly declare them as conflicting.</p> <p>Sources can also be declared as applying only to a specific optional dependency. For example, to pull <code>torch</code> from different PyTorch indexes based on an optional <code>cpu</code> or <code>gpu</code> extra:</p> pyproject.toml<pre><code>[project]\ndependencies = []\n[project.optional-dependencies]\ncpu = [\n\"torch\",\n]\ngpu = [\n\"torch\",\n]\n[tool.uv.sources]\ntorch = [\n{ index = \"torch-cpu\", extra = \"cpu\" },\n{ index = \"torch-gpu\", extra = \"gpu\" },\n]\n[[tool.uv.index]]\nname = \"torch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n[[tool.uv.index]]\nname = \"torch-gpu\"\nurl = \"https://download.pytorch.org/whl/cu124\"\n</code></pre>"},{"location":"concepts/projects/dependencies/#development-dependencies","title":"Development dependencies","text":"<p>Unlike optional dependencies, development dependencies are local-only and will not be included in the project requirements when published to PyPI or other indexes. As such, development dependencies are not included in the <code>[project]</code> table.</p> <p>Development dependencies can have entries in <code>tool.uv.sources</code> the same as normal dependencies.</p> <p>To add a development dependency, use the <code>--dev</code> flag:</p> <pre><code>$ uv add --dev pytest\n</code></pre> <p>uv uses the <code>[dependency-groups]</code> table (as defined in PEP 735) for declaration of development dependencies. The above command will create a <code>dev</code> group:</p> pyproject.toml<pre><code>[dependency-groups]\ndev = [\n\"pytest &gt;=8.1.1,&lt;9\"\n]\n</code></pre> <p>The <code>dev</code> group is special-cased; there are <code>--dev</code>, <code>--only-dev</code>, and <code>--no-dev</code> flags to toggle inclusion or exclusion of its dependencies. See <code>--no-default-groups</code> to disable all default groups instead. Additionally, the <code>dev</code> group is synced by default.</p>"},{"location":"concepts/projects/dependencies/#dependency-groups","title":"Dependency groups","text":"<p>Development dependencies can be divided into multiple groups, using the <code>--group</code> flag.</p> <p>For example, to add a development dependency in the <code>lint</code> group:</p> <pre><code>$ uv add --group lint ruff\n</code></pre> <p>Which results in the following <code>[dependency-groups]</code> definition:</p> pyproject.toml<pre><code>[dependency-groups]\ndev = [\n\"pytest\"\n]\nlint = [\n\"ruff\"\n]\n</code></pre> <p>Once groups are defined, the <code>--all-groups</code>, <code>--no-default-groups</code>, <code>--group</code>, <code>--only-group</code>, and <code>--no-group</code> options can be used to include or exclude their dependencies.</p> <p>Tip</p> <p>The <code>--dev</code>, <code>--only-dev</code>, and <code>--no-dev</code> flags are equivalent to <code>--group dev</code>, <code>--only-group dev</code>, and <code>--no-group dev</code> respectively.</p> <p>uv requires that all dependency groups are compatible with each other and resolves all groups together when creating the lockfile.</p> <p>If dependencies declared in one group are not compatible with those in another group, uv will fail to resolve the requirements of the project with an error.</p> <p>Note</p> <p>If you have dependency groups that conflict with one another, resolution will fail unless you explicitly declare them as conflicting.</p>"},{"location":"concepts/projects/dependencies/#nesting-groups","title":"Nesting groups","text":"<p>A dependency group can include other dependency groups, e.g.:</p> pyproject.toml<pre><code>[dependency-groups]\ndev = [\n{include-group = \"lint\"},\n{include-group = \"test\"}\n]\nlint = [\n\"ruff\"\n]\ntest = [\n\"pytest\"\n]\n</code></pre> <p>An included group's dependencies cannot conflict with the other dependencies declared in a group.</p>"},{"location":"concepts/projects/dependencies/#default-groups","title":"Default groups","text":"<p>By default, uv includes the <code>dev</code> dependency group in the environment (e.g., during <code>uv run</code> or <code>uv sync</code>). The default groups to include can be changed using the <code>tool.uv.default-groups</code> setting.</p> pyproject.toml<pre><code>[tool.uv]\ndefault-groups = [\"dev\", \"foo\"]\n</code></pre> <p>To enable all dependencies groups by default, use <code>\"all\"</code> instead of listing group names:</p> pyproject.toml<pre><code>[tool.uv]\ndefault-groups = \"all\"\n</code></pre> <p>Tip</p> <p>To disable this behaviour during <code>uv run</code> or <code>uv sync</code>, use <code>--no-default-groups</code>. To exclude a specific default group, use <code>--no-group &lt;name&gt;</code>.</p>"},{"location":"concepts/projects/dependencies/#group-requires-python","title":"Group <code>requires-python</code>","text":"<p>By default, dependency groups must be compatible with your project's <code>requires-python</code> range.</p> <p>If a dependency group requires a different range of Python versions than your project, you can specify a <code>requires-python</code> for the group in <code>[tool.uv.dependency-groups]</code>, e.g.:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.0.0\"\nrequires-python = \"&gt;=3.10\"\n[dependency-groups]\ndev = [\"pytest\"]\n[tool.uv.dependency-groups]\ndev = {requires-python = \"&gt;=3.12\"}\n</code></pre>"},{"location":"concepts/projects/dependencies/#legacy-dev-dependencies","title":"Legacy <code>dev-dependencies</code>","text":"<p>Before <code>[dependency-groups]</code> was standardized, uv used the <code>tool.uv.dev-dependencies</code> field to specify development dependencies, e.g.:</p> pyproject.toml<pre><code>[tool.uv]\ndev-dependencies = [\n\"pytest\"\n]\n</code></pre> <p>Dependencies declared in this section will be combined with the contents in the <code>dependency-groups.dev</code>. Eventually, the <code>dev-dependencies</code> field will be deprecated and removed.</p> <p>Note</p> <p>If a <code>tool.uv.dev-dependencies</code> field exists, <code>uv add --dev</code> will use the existing section instead of adding a new <code>dependency-groups.dev</code> section.</p>"},{"location":"concepts/projects/dependencies/#build-dependencies","title":"Build dependencies","text":"<p>If a project is structured as Python package, it may declare dependencies that are required to build the project, but not required to run it. These dependencies are specified in the <code>[build-system]</code> table under <code>build-system.requires</code>, following PEP 518.</p> <p>For example, if a project uses <code>setuptools</code> as its build backend, it should declare <code>setuptools</code> as a build dependency:</p> pyproject.toml<pre><code>[project]\nname = \"pandas\"\nversion = \"0.1.0\"\n[build-system]\nrequires = [\"setuptools&gt;=42\"]\nbuild-backend = \"setuptools.build_meta\"\n</code></pre> <p>By default, uv will respect <code>tool.uv.sources</code> when resolving build dependencies. For example, to use a local version of <code>setuptools</code> for building, add the source to <code>tool.uv.sources</code>:</p> pyproject.toml<pre><code>[project]\nname = \"pandas\"\nversion = \"0.1.0\"\n[build-system]\nrequires = [\"setuptools&gt;=42\"]\nbuild-backend = \"setuptools.build_meta\"\n[tool.uv.sources]\nsetuptools = { path = \"./packages/setuptools\" }\n</code></pre> <p>When publishing a package, we recommend running <code>uv build --no-sources</code> to ensure that the package builds correctly when <code>tool.uv.sources</code> is disabled, as is the case when using other build tools, like <code>pypa/build</code>.</p>"},{"location":"concepts/projects/dependencies/#editable-dependencies","title":"Editable dependencies","text":"<p>A regular installation of a directory with a Python package first builds a wheel and then installs that wheel into your virtual environment, copying all source files. When the package source files are edited, the virtual environment will contain outdated versions.</p> <p>Editable installations solve this problem by adding a link to the project within the virtual environment (a <code>.pth</code> file), which instructs the interpreter to include the source files directly.</p> <p>There are some limitations to editables (mainly: the build backend needs to support them, and native modules aren't recompiled before import), but they are useful for development, as the virtual environment will always use the latest changes to the package.</p> <p>uv uses editable installation for workspace packages by default.</p> <p>To add an editable dependency, use the <code>--editable</code> flag:</p> <pre><code>$ uv add --editable ./path/foo\n</code></pre> <p>Or, to opt-out of using an editable dependency in a workspace:</p> <pre><code>$ uv add --no-editable ./path/foo\n</code></pre>"},{"location":"concepts/projects/dependencies/#virtual-dependencies","title":"Virtual dependencies","text":"<p>uv allows dependencies to be \"virtual\", in which the dependency itself is not installed as a package, but its dependencies are.</p> <p>By default, dependencies are never virtual.</p> <p>A dependency with a <code>path</code> source can be virtual if it explicitly sets <code>tool.uv.package = false</code>. Unlike working in the dependent project with uv, the package will be built even if a build system is not declared.</p> <p>To treat a dependency as virtual, set <code>package = false</code> on the source:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"bar\"]\n[tool.uv.sources]\nbar = { path = \"../projects/bar\", package = false }\n</code></pre> <p>If a dependency sets <code>tool.uv.package = false</code>, it can be overridden by declaring <code>package = true</code> on the source:</p> pyproject.toml<pre><code>[project]\ndependencies = [\"bar\"]\n[tool.uv.sources]\nbar = { path = \"../projects/bar\", package = true }\n</code></pre> <p>Similarly, a dependency with a <code>workspace</code> source can be virtual if it explicitly sets <code>tool.uv.package = false</code>. The workspace member will be built even if a build system is not declared.</p> <p>Workspace members that are not dependencies can be virtual by default, e.g., if the parent <code>pyproject.toml</code> is:</p> pyproject.toml<pre><code>[project]\nname = \"parent\"\nversion = \"1.0.0\"\ndependencies = []\n[tool.uv.workspace]\nmembers = [\"child\"]\n</code></pre> <p>And the child <code>pyproject.toml</code> excluded a build system:</p> pyproject.toml<pre><code>[project]\nname = \"child\"\nversion = \"1.0.0\"\ndependencies = [\"anyio\"]\n</code></pre> <p>Then the <code>child</code> workspace member would not be installed, but the transitive dependency <code>anyio</code> would be.</p> <p>In contrast, if the parent declared a dependency on <code>child</code>:</p> pyproject.toml<pre><code>[project]\nname = \"parent\"\nversion = \"1.0.0\"\ndependencies = [\"child\"]\n[tool.uv.sources]\nchild = { workspace = true }\n[tool.uv.workspace]\nmembers = [\"child\"]\n</code></pre> <p>Then <code>child</code> would be built and installed.</p>"},{"location":"concepts/projects/dependencies/#dependency-specifiers","title":"Dependency specifiers","text":"<p>uv uses standard dependency specifiers, originally defined in PEP 508. A dependency specifier is composed of, in order:</p> <ul> <li>The dependency name</li> <li>The extras you want (optional)</li> <li>The version specifier</li> <li>An environment marker (optional)</li> </ul> <p>The version specifiers are comma separated and added together, e.g., <code>foo &gt;=1.2.3,&lt;2,!=1.4.0</code> is interpreted as \"a version of <code>foo</code> that's at least 1.2.3, but less than 2, and not 1.4.0\".</p> <p>Specifiers are padded with trailing zeros if required, so <code>foo ==2</code> matches foo 2.0.0, too.</p> <p>A star can be used for the last digit with equals, e.g., <code>foo ==2.1.*</code> will accept any release from the 2.1 series. Similarly, <code>~=</code> matches where the last digit is equal or higher, e.g., <code>foo ~=1.2</code> is equal to <code>foo &gt;=1.2,&lt;2</code>, and <code>foo ~=1.2.3</code> is equal to <code>foo &gt;=1.2.3,&lt;1.3</code>.</p> <p>Extras are comma-separated in square bracket between name and version, e.g., <code>pandas[excel,plot] ==2.2</code>. Whitespace between extra names is ignored.</p> <p>Some dependencies are only required in specific environments, e.g., a specific Python version or operating system. For example to install the <code>importlib-metadata</code> backport for the <code>importlib.metadata</code> module, use <code>importlib-metadata &gt;=7.1.0,&lt;8; python_version &lt; '3.10'</code>. To install <code>colorama</code> on Windows (but omit it on other platforms), use <code>colorama &gt;=0.4.6,&lt;5; platform_system == \"Windows\"</code>.</p> <p>Markers are combined with <code>and</code>, <code>or</code>, and parentheses, e.g., <code>aiohttp &gt;=3.7.4,&lt;4; (sys_platform != 'win32' or implementation_name != 'pypy') and python_version &gt;= '3.10'</code>. Note that versions within markers must be quoted, while versions outside of markers must not be quoted.</p>"},{"location":"concepts/projects/init/","title":"Creating projects","text":"<p>uv supports creating a project with <code>uv init</code>.</p> <p>When creating projects, uv supports two basic templates: applications and libraries. By default, uv will create a project for an application. The <code>--lib</code> flag can be used to create a project for a library instead.</p>"},{"location":"concepts/projects/init/#target-directory","title":"Target directory","text":"<p>uv will create a project in the working directory, or, in a target directory by providing a name, e.g., <code>uv init foo</code>. If there's already a project in the target directory, i.e., if there's a <code>pyproject.toml</code>, uv will exit with an error.</p>"},{"location":"concepts/projects/init/#applications","title":"Applications","text":"<p>Application projects are suitable for web servers, scripts, and command-line interfaces.</p> <p>Applications are the default target for <code>uv init</code>, but can also be specified with the <code>--app</code> flag.</p> <pre><code>$ uv init example-app\n</code></pre> <p>The project includes a <code>pyproject.toml</code>, a sample file (<code>main.py</code>), a readme, and a Python version pin file (<code>.python-version</code>).</p> <pre><code>$ tree example-app\nexample-app\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>Note</p> <p>Prior to v0.6.0, uv created a file named <code>hello.py</code> instead of <code>main.py</code>.</p> <p>The <code>pyproject.toml</code> includes basic metadata. It does not include a build system, it is not a package and will not be installed into the environment:</p> pyproject.toml<pre><code>[project]\nname = \"example-app\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.11\"\ndependencies = []\n</code></pre> <p>The sample file defines a <code>main</code> function with some standard boilerplate:</p> main.py<pre><code>def main():\nprint(\"Hello from example-app!\")\nif __name__ == \"__main__\":\nmain()\n</code></pre> <p>Python files can be executed with <code>uv run</code>:</p> <pre><code>$ cd example-app\n$ uv run main.py\nHello from example-project!\n</code></pre>"},{"location":"concepts/projects/init/#packaged-applications","title":"Packaged applications","text":"<p>Many use-cases require a package. For example, if you are creating a command-line interface that will be published to PyPI or if you want to define tests in a dedicated directory.</p> <p>The <code>--package</code> flag can be used to create a packaged application:</p> <pre><code>$ uv init --package example-pkg\n</code></pre> <p>The source code is moved into a <code>src</code> directory with a module directory and an <code>__init__.py</code> file:</p> <pre><code>$ tree example-pkg\nexample-pkg\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 example_pkg\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>A build system is defined, so the project will be installed into the environment:</p> pyproject.toml<pre><code>[project]\nname = \"example-pkg\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.11\"\ndependencies = []\n[project.scripts]\nexample-pkg = \"example_pkg:main\"\n[build-system]\nrequires = [\"uv_build&gt;=0.9.6,&lt;0.10.0\"]\nbuild-backend = \"uv_build\"\n</code></pre> <p>Tip</p> <p>The <code>--build-backend</code> option can be used to request an alternative build system.</p> <p>A command definition is included:</p> pyproject.toml<pre><code>[project]\nname = \"example-pkg\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.11\"\ndependencies = []\n[project.scripts]\nexample-pkg = \"example_pkg:main\"\n[build-system]\nrequires = [\"uv_build&gt;=0.9.6,&lt;0.10.0\"]\nbuild-backend = \"uv_build\"\n</code></pre> <p>The command can be executed with <code>uv run</code>:</p> <pre><code>$ cd example-pkg\n$ uv run example-pkg\nHello from example-pkg!\n</code></pre>"},{"location":"concepts/projects/init/#libraries","title":"Libraries","text":"<p>A library provides functions and objects for other projects to consume. Libraries are intended to be built and distributed, e.g., by uploading them to PyPI.</p> <p>Libraries can be created by using the <code>--lib</code> flag:</p> <pre><code>$ uv init --lib example-lib\n</code></pre> <p>Note</p> <p>Using <code>--lib</code> implies <code>--package</code>. Libraries always require a packaged project.</p> <p>As with a packaged application, a <code>src</code> layout is used. A <code>py.typed</code> marker is included to indicate to consumers that types can be read from the library:</p> <pre><code>$ tree example-lib\nexample-lib\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 example_lib\n        \u251c\u2500\u2500 py.typed\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Note</p> <p>A <code>src</code> layout is particularly valuable when developing libraries. It ensures that the library is isolated from any <code>python</code> invocations in the project root and that distributed library code is well separated from the rest of the project source.</p> <p>A build system is defined, so the project will be installed into the environment:</p> pyproject.toml<pre><code>[project]\nname = \"example-lib\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.11\"\ndependencies = []\n[build-system]\nrequires = [\"uv_build&gt;=0.9.6,&lt;0.10.0\"]\nbuild-backend = \"uv_build\"\n</code></pre> <p>Tip</p> <p>You can select a different build backend template by using <code>--build-backend</code> with <code>hatchling</code>, <code>uv_build</code>, <code>flit-core</code>, <code>pdm-backend</code>, <code>setuptools</code>, <code>maturin</code>, or <code>scikit-build-core</code>. An alternative backend is required if you want to create a library with extension modules.</p> <p>The created module defines a simple API function:</p> __init__.py<pre><code>def hello() -&gt; str:\nreturn \"Hello from example-lib!\"\n</code></pre> <p>And you can import and execute it using <code>uv run</code>:</p> <pre><code>$ cd example-lib\n$ uv run python -c \"import example_lib; print(example_lib.hello())\"\nHello from example-lib!\n</code></pre>"},{"location":"concepts/projects/init/#projects-with-extension-modules","title":"Projects with extension modules","text":"<p>Most Python projects are \"pure Python\", meaning they do not define modules in other languages like C, C++, FORTRAN, or Rust. However, projects with extension modules are often used for performance sensitive code.</p> <p>Creating a project with an extension module requires choosing an alternative build system. uv supports creating projects with the following build systems that support building extension modules:</p> <ul> <li><code>maturin</code> for projects with Rust</li> <li><code>scikit-build-core</code> for projects with C, C++,   FORTRAN, Cython</li> </ul> <p>Specify the build system with the <code>--build-backend</code> flag:</p> <pre><code>$ uv init --build-backend maturin example-ext\n</code></pre> <p>Note</p> <p>Using <code>--build-backend</code> implies <code>--package</code>.</p> <p>The project contains a <code>Cargo.toml</code> and a <code>lib.rs</code> file in addition to the typical Python project files:</p> <pre><code>$ tree example-ext\nexample-ext\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 lib.rs\n    \u2514\u2500\u2500 example_ext\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 _core.pyi\n</code></pre> <p>Note</p> <p>If using <code>scikit-build-core</code>, you'll see CMake configuration and a <code>main.cpp</code> file instead.</p> <p>The Rust library defines a simple function:</p> src/lib.rs<pre><code>use pyo3::prelude::*;\n#[pymodule]\nmod _core {\nuse pyo3::prelude::*;\n#[pyfunction]\nfn hello_from_bin() -&gt; String {\n\"Hello from example-ext!\".to_string()\n}\n}\n</code></pre> <p>And the Python module imports it:</p> src/example_ext/__init__.py<pre><code>from example_ext._core import hello_from_bin\ndef main() -&gt; None:\nprint(hello_from_bin())\n</code></pre> <p>The command can be executed with <code>uv run</code>:</p> <pre><code>$ cd example-ext\n$ uv run example-ext\nHello from example-ext!\n</code></pre> <p>Important</p> <p>When creating a project with maturin or scikit-build-core, uv configures <code>tool.uv.cache-keys</code> to include common source file types. To force a rebuild, e.g. when changing files outside <code>cache-keys</code> or when not using <code>cache-keys</code>, use <code>--reinstall</code>.</p>"},{"location":"concepts/projects/init/#creating-a-minimal-project","title":"Creating a minimal project","text":"<p>If you only want to create a <code>pyproject.toml</code>, use the <code>--bare</code> option:</p> <pre><code>$ uv init example --bare\n</code></pre> <p>uv will skip creating a Python version pin file, a README, and any source directories or files. Additionally, uv will not initialize a version control system (i.e., <code>git</code>).</p> <pre><code>$ tree example-bare\nexample-bare\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>uv will also not add extra metadata to the <code>pyproject.toml</code>, such as the <code>description</code> or <code>authors</code>.</p> <pre><code>[project]\nname = \"example\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\ndependencies = []\n</code></pre> <p>The <code>--bare</code> option can be used with other options like <code>--lib</code> or <code>--build-backend</code> \u2014 in these cases uv will still configure a build system but will not create the expected file structure.</p> <p>When <code>--bare</code> is used, additional features can still be used opt-in:</p> <pre><code>$ uv init example --bare --description \"Hello world\" --author-from git --vcs git --python-pin\n</code></pre>"},{"location":"concepts/projects/layout/","title":"Project structure and files","text":""},{"location":"concepts/projects/layout/#the-pyprojecttoml","title":"The <code>pyproject.toml</code>","text":"<p>Python project metadata is defined in a <code>pyproject.toml</code> file. uv requires this file to identify the root directory of a project.</p> <p>Tip</p> <p><code>uv init</code> can be used to create a new project. See Creating projects for details.</p> <p>A minimal project definition includes a name and version:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.1.0\"\n</code></pre> <p>Additional project metadata and configuration includes:</p> <ul> <li>Python version requirement</li> <li>Dependencies</li> <li>Build system</li> <li>Entry points (commands)</li> </ul>"},{"location":"concepts/projects/layout/#the-project-environment","title":"The project environment","text":"<p>When working on a project with uv, uv will create a virtual environment as needed. While some uv commands will create a temporary environment (e.g., <code>uv run --isolated</code>), uv also manages a persistent environment with the project and its dependencies in a <code>.venv</code> directory next to the <code>pyproject.toml</code>. It is stored inside the project to make it easy for editors to find \u2014 they need the environment to give code completions and type hints. It is not recommended to include the <code>.venv</code> directory in version control; it is automatically excluded from <code>git</code> with an internal <code>.gitignore</code> file.</p> <p>To run a command in the project environment, use <code>uv run</code>. Alternatively the project environment can be activated as normal for a virtual environment.</p> <p>When <code>uv run</code> is invoked, it will create the project environment if it does not exist yet or ensure it is up-to-date if it exists. The project environment can also be explicitly created with <code>uv sync</code>. See the locking and syncing documentation for details.</p> <p>It is not recommended to modify the project environment manually, e.g., with <code>uv pip install</code>. For project dependencies, use <code>uv add</code> to add a package to the environment. For one-off requirements, use <code>uvx</code> or <code>uv run --with</code>.</p> <p>Tip</p> <p>If you don't want uv to manage the project environment, set <code>managed = false</code> to disable automatic locking and syncing of the project. For example:</p> pyproject.toml<pre><code>[tool.uv]\nmanaged = false\n</code></pre>"},{"location":"concepts/projects/layout/#the-lockfile","title":"The lockfile","text":"<p>uv creates a <code>uv.lock</code> file next to the <code>pyproject.toml</code>.</p> <p><code>uv.lock</code> is a universal or cross-platform lockfile that captures the packages that would be installed across all possible Python markers such as operating system, architecture, and Python version.</p> <p>Unlike the <code>pyproject.toml</code>, which is used to specify the broad requirements of your project, the lockfile contains the exact resolved versions that are installed in the project environment. This file should be checked into version control, allowing for consistent and reproducible installations across machines.</p> <p>A lockfile ensures that developers working on the project are using a consistent set of package versions. Additionally, it ensures when deploying the project as an application that the exact set of used package versions is known.</p> <p>The lockfile is automatically created and updated during uv invocations that use the project environment, i.e., <code>uv sync</code> and <code>uv run</code>. The lockfile may also be explicitly updated using <code>uv lock</code>.</p> <p><code>uv.lock</code> is a human-readable TOML file but is managed by uv and should not be edited manually. The <code>uv.lock</code> format is specific to uv and not usable by other tools.</p>"},{"location":"concepts/projects/layout/#relationship-to-pylocktoml","title":"Relationship to <code>pylock.toml</code>","text":"<p>In PEP 751, Python standardized a new resolution file format, <code>pylock.toml</code>.</p> <p><code>pylock.toml</code> is a resolution output format intended to replace <code>requirements.txt</code> (e.g., in the context of <code>uv pip compile</code>, whereby a \"locked\" <code>requirements.txt</code> file is generated from a set of input requirements). <code>pylock.toml</code> is standardized and tool-agnostic, such that in the future, <code>pylock.toml</code> files generated by uv could be installed by other tools, and vice versa.</p> <p>Some of uv's functionality cannot be expressed in the <code>pylock.toml</code> format; as such, uv will continue to use the <code>uv.lock</code> format within the project interface.</p> <p>However, uv supports <code>pylock.toml</code> as an export target and in the <code>uv pip</code> CLI. For example:</p> <ul> <li>To export a <code>uv.lock</code> to the <code>pylock.toml</code> format, run: <code>uv export -o pylock.toml</code></li> <li>To generate a <code>pylock.toml</code> file from a set of requirements, run:   <code>uv pip compile requirements.in -o pylock.toml</code></li> <li>To install from a <code>pylock.toml</code> file, run: <code>uv pip sync pylock.toml</code> or   <code>uv pip install -r pylock.toml</code></li> </ul>"},{"location":"concepts/projects/run/","title":"Running commands in projects","text":"<p>When working on a project, it is installed into the virtual environment at <code>.venv</code>. This environment is isolated from the current shell by default, so invocations that require the project, e.g., <code>python -c \"import example\"</code>, will fail. Instead, use <code>uv run</code> to run commands in the project environment:</p> <pre><code>$ uv run python -c \"import example\"\n</code></pre> <p>When using <code>run</code>, uv will ensure that the project environment is up-to-date before running the given command.</p> <p>The given command can be provided by the project environment or exist outside of it, e.g.:</p> <pre><code>$ # Presuming the project provides `example-cli`\n$ uv run example-cli foo\n\n$ # Running a `bash` script that requires the project to be available\n$ uv run bash scripts/foo.sh\n</code></pre>"},{"location":"concepts/projects/run/#requesting-additional-dependencies","title":"Requesting additional dependencies","text":"<p>Additional dependencies or different versions of dependencies can be requested per invocation.</p> <p>The <code>--with</code> option is used to include a dependency for the invocation, e.g., to request a different version of <code>httpx</code>:</p> <pre><code>$ uv run --with httpx==0.26.0 python -c \"import httpx; print(httpx.__version__)\"\n0.26.0\n$ uv run --with httpx==0.25.0 python -c \"import httpx; print(httpx.__version__)\"\n0.25.0\n</code></pre> <p>The requested version will be respected regardless of the project's requirements. For example, even if the project requires <code>httpx==0.24.0</code>, the output above would be the same.</p>"},{"location":"concepts/projects/run/#running-scripts","title":"Running scripts","text":"<p>Scripts that declare inline metadata are automatically executed in environments isolated from the project. See the scripts guide for more details.</p> <p>For example, given a script:</p> example.py<pre><code># /// script\n# dependencies = [\n#   \"httpx\",\n# ]\n# ///\nimport httpx\nresp = httpx.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\nprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n</code></pre> <p>The invocation <code>uv run example.py</code> would run isolated from the project with only the given dependencies listed.</p>"},{"location":"concepts/projects/run/#legacy-scripts-on-windows","title":"Legacy scripts on Windows","text":"<p>Support is provided for legacy setuptools scripts. These types of scripts are additional files installed by setuptools in <code>.venv\\Scripts</code>.</p> <p>Currently only legacy scripts with the <code>.ps1</code>, <code>.cmd</code>, and <code>.bat</code> extensions are supported.</p> <p>For example, below is an example running a Command Prompt script.</p> <pre><code>$ uv run --with nuitka==2.6.7 -- nuitka.cmd --version\n</code></pre> <p>In addition, you don't need to specify the extension. <code>uv</code> will automatically look for files ending in <code>.ps1</code>, <code>.cmd</code>, and <code>.bat</code> in that order of execution on your behalf.</p> <pre><code>$ uv run --with nuitka==2.6.7 -- nuitka --version\n</code></pre>"},{"location":"concepts/projects/run/#signal-handling","title":"Signal handling","text":"<p>uv does not cede control of the process to the spawned command in order to provide better error messages on failure. Consequently, uv is responsible for forwarding some signals to the child process the requested command runs in.</p> <p>On Unix systems, uv will forward most signals (with the exception of SIGKILL, SIGCHLD, SIGIO, and SIGPOLL) to the child process. Since terminals send SIGINT to the foreground process group on Ctrl-C, uv will only forward a SIGINT to the child process if it is sent more than once or the child process group differs from uv's.</p> <p>On Windows, these concepts do not apply and uv ignores Ctrl-C events, deferring handling to the child process so it can exit cleanly.</p>"},{"location":"concepts/projects/sync/","title":"Locking and syncing","text":"<p>Locking is the process of resolving your project's dependencies into a lockfile. Syncing is the process of installing a subset of packages from the lockfile into the project environment.</p>"},{"location":"concepts/projects/sync/#automatic-lock-and-sync","title":"Automatic lock and sync","text":"<p>Locking and syncing are automatic in uv. For example, when <code>uv run</code> is used, the project is locked and synced before invoking the requested command. This ensures the project environment is always up-to-date. Similarly, commands which read the lockfile, such as <code>uv tree</code>, will automatically update it before running.</p> <p>To disable automatic locking, use the <code>--locked</code> option:</p> <pre><code>$ uv run --locked ...\n</code></pre> <p>If the lockfile is not up-to-date, uv will raise an error instead of updating the lockfile.</p> <p>To use the lockfile without checking if it is up-to-date, use the <code>--frozen</code> option:</p> <pre><code>$ uv run --frozen ...\n</code></pre> <p>Similarly, to run a command without checking if the environment is up-to-date, use the <code>--no-sync</code> option:</p> <pre><code>$ uv run --no-sync ...\n</code></pre>"},{"location":"concepts/projects/sync/#checking-the-lockfile","title":"Checking the lockfile","text":"<p>When considering if the lockfile is up-to-date, uv will check if it matches the project metadata. For example, if you add a dependency to your <code>pyproject.toml</code>, the lockfile will be considered outdated. Similarly, if you change the version constraints for a dependency such that the locked version is excluded, the lockfile will be considered outdated. However, if you change the version constraints such that the existing locked version is still included, the lockfile will still be considered up-to-date.</p> <p>You can check if the lockfile is up-to-date by passing the <code>--check</code> flag to <code>uv lock</code>:</p> <pre><code>$ uv lock --check\n</code></pre> <p>This is equivalent to the <code>--locked</code> flag for other commands.</p> <p>Important</p> <p>uv will not consider lockfiles outdated when new versions of packages are released \u2014 the lockfile needs to be explicitly updated if you want to upgrade dependencies. See the documentation on upgrading locked package versions for details.</p>"},{"location":"concepts/projects/sync/#creating-the-lockfile","title":"Creating the lockfile","text":"<p>While the lockfile is created automatically, the lockfile may also be explicitly created or updated using <code>uv lock</code>:</p> <pre><code>$ uv lock\n</code></pre>"},{"location":"concepts/projects/sync/#syncing-the-environment","title":"Syncing the environment","text":"<p>While the environment is synced automatically, it may also be explicitly synced using <code>uv sync</code>:</p> <pre><code>$ uv sync\n</code></pre> <p>Syncing the environment manually is especially useful for ensuring your editor has the correct versions of dependencies.</p>"},{"location":"concepts/projects/sync/#editable-installation","title":"Editable installation","text":"<p>When the environment is synced, uv will install the project (and other workspace members) as editable packages, such that re-syncing is not necessary for changes to be reflected in the environment.</p> <p>To opt-out of this behavior, use the <code>--no-editable</code> option.</p> <p>Note</p> <p>If the project does not define a build system, it will not be installed. See the build systems documentation for details.</p>"},{"location":"concepts/projects/sync/#retaining-extraneous-packages","title":"Retaining extraneous packages","text":"<p>Syncing is \"exact\" by default, which means it will remove any packages that are not present in the lockfile.</p> <p>To retain extraneous packages, use the <code>--inexact</code> option:</p> <pre><code>$ uv sync --inexact\n</code></pre>"},{"location":"concepts/projects/sync/#syncing-optional-dependencies","title":"Syncing optional dependencies","text":"<p>uv reads optional dependencies from the <code>[project.optional-dependencies]</code> table. These are frequently referred to as \"extras\".</p> <p>uv does not sync extras by default. Use the <code>--extra</code> option to include an extra.</p> <pre><code>$ uv sync --extra foo\n</code></pre> <p>To quickly enable all extras, use the <code>--all-extras</code> option.</p> <p>See the optional dependencies documentation for details on how to manage optional dependencies.</p>"},{"location":"concepts/projects/sync/#syncing-development-dependencies","title":"Syncing development dependencies","text":"<p>uv reads development dependencies from the <code>[dependency-groups]</code> table (as defined in PEP 735).</p> <p>The <code>dev</code> group is special-cased and synced by default. See the default groups documentation for details on changing the defaults.</p> <p>The <code>--no-dev</code> flag can be used to exclude the <code>dev</code> group.</p> <p>The <code>--only-dev</code> flag can be used to install the <code>dev</code> group without the project and its dependencies.</p> <p>Additional groups can be included or excluded with the <code>--all-groups</code>, <code>--no-default-groups</code>, <code>--group &lt;name&gt;</code>, <code>--only-group &lt;name&gt;</code>, and <code>--no-group &lt;name&gt;</code> options. The semantics of <code>--only-group</code> are the same as <code>--only-dev</code>, the project will not be included. However, <code>--only-group</code> will also exclude default groups.</p> <p>Group exclusions always take precedence over inclusions, so given the command:</p> <pre><code>$ uv sync --no-group foo --group foo\n</code></pre> <p>The <code>foo</code> group would not be installed.</p> <p>See the development dependencies documentation for details on how to manage development dependencies.</p>"},{"location":"concepts/projects/sync/#upgrading-locked-package-versions","title":"Upgrading locked package versions","text":"<p>With an existing <code>uv.lock</code> file, uv will prefer the previously locked versions of packages when running <code>uv sync</code> and <code>uv lock</code>. Package versions will only change if the project's dependency constraints exclude the previous, locked version.</p> <p>To upgrade all packages:</p> <pre><code>$ uv lock --upgrade\n</code></pre> <p>To upgrade a single package to the latest version, while retaining the locked versions of all other packages:</p> <pre><code>$ uv lock --upgrade-package &lt;package&gt;\n</code></pre> <p>To upgrade a single package to a specific version:</p> <pre><code>$ uv lock --upgrade-package &lt;package&gt;==&lt;version&gt;\n</code></pre> <p>In all cases, upgrades are limited to the project's dependency constraints. For example, if the project defines an upper bound for a package then an upgrade will not go beyond that version.</p> <p>Note</p> <p>uv applies similar logic to Git dependencies. For example, if a Git dependency references the <code>main</code> branch, uv will prefer the locked commit SHA in an existing <code>uv.lock</code> file over the latest commit on the <code>main</code> branch, unless the <code>--upgrade</code> or <code>--upgrade-package</code> flags are used.</p> <p>These flags can also be provided to <code>uv sync</code> or <code>uv run</code> to update the lockfile and the environment.</p>"},{"location":"concepts/projects/sync/#exporting-the-lockfile","title":"Exporting the lockfile","text":"<p>If you need to integrate uv with other tools or workflows, you can export <code>uv.lock</code> to the <code>requirements.txt</code> format with <code>uv export --format requirements-txt</code>. The generated <code>requirements.txt</code> file can then be installed via <code>uv pip install</code>, or with other tools like <code>pip</code>.</p> <p>In general, we recommend against using both a <code>uv.lock</code> and a <code>requirements.txt</code> file. If you find yourself exporting a <code>uv.lock</code> file, consider opening an issue to discuss your use case.</p>"},{"location":"concepts/projects/sync/#partial-installations","title":"Partial installations","text":"<p>Sometimes it's helpful to perform installations in multiple steps, e.g., for optimal layer caching while building a Docker image. <code>uv sync</code> has several flags for this purpose.</p> <ul> <li><code>--no-install-project</code>: Do not install the current project</li> <li><code>--no-install-workspace</code>: Do not install any workspace members, including the root project</li> <li><code>--no-install-package &lt;NO_INSTALL_PACKAGE&gt;</code>: Do not install the given package(s)</li> </ul> <p>When these options are used, all the dependencies of the target are still installed. For example, <code>--no-install-project</code> will omit the project but not any of its dependencies.</p> <p>If used improperly, these flags can result in a broken environment since a package can be missing its dependencies.</p>"},{"location":"concepts/projects/workspaces/","title":"Using workspaces","text":"<p>Inspired by the Cargo concept of the same name, a workspace is \"a collection of one or more packages, called workspace members, that are managed together.\"</p> <p>Workspaces organize large codebases by splitting them into multiple packages with common dependencies. Think: a FastAPI-based web application, alongside a series of libraries that are versioned and maintained as separate Python packages, all in the same Git repository.</p> <p>In a workspace, each package defines its own <code>pyproject.toml</code>, but the workspace shares a single lockfile, ensuring that the workspace operates with a consistent set of dependencies.</p> <p>As such, <code>uv lock</code> operates on the entire workspace at once, while <code>uv run</code> and <code>uv sync</code> operate on the workspace root by default, though both accept a <code>--package</code> argument, allowing you to run a command in a particular workspace member from any workspace directory.</p>"},{"location":"concepts/projects/workspaces/#getting-started","title":"Getting started","text":"<p>To create a workspace, add a <code>tool.uv.workspace</code> table to a <code>pyproject.toml</code>, which will implicitly create a workspace rooted at that package.</p> <p>Tip</p> <p>By default, running <code>uv init</code> inside an existing package will add the newly created member to the workspace, creating a <code>tool.uv.workspace</code> table in the workspace root if it doesn't already exist.</p> <p>In defining a workspace, you must specify the <code>members</code> (required) and <code>exclude</code> (optional) keys, which direct the workspace to include or exclude specific directories as members respectively, and accept lists of globs:</p> pyproject.toml<pre><code>[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm&gt;=4,&lt;5\"]\n[tool.uv.sources]\nbird-feeder = { workspace = true }\n[tool.uv.workspace]\nmembers = [\"packages/*\"]\nexclude = [\"packages/seeds\"]\n</code></pre> <p>Every directory included by the <code>members</code> globs (and not excluded by the <code>exclude</code> globs) must contain a <code>pyproject.toml</code> file. However, workspace members can be either applications or libraries; both are supported in the workspace context.</p> <p>Every workspace needs a root, which is also a workspace member. In the above example, <code>albatross</code> is the workspace root, and the workspace members include all projects under the <code>packages</code> directory, except <code>seeds</code>.</p> <p>By default, <code>uv run</code> and <code>uv sync</code> operates on the workspace root. For example, in the above example, <code>uv run</code> and <code>uv run --package albatross</code> would be equivalent, while <code>uv run --package bird-feeder</code> would run the command in the <code>bird-feeder</code> package.</p>"},{"location":"concepts/projects/workspaces/#workspace-sources","title":"Workspace sources","text":"<p>Within a workspace, dependencies on workspace members are facilitated via <code>tool.uv.sources</code>, as in:</p> pyproject.toml<pre><code>[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm&gt;=4,&lt;5\"]\n[tool.uv.sources]\nbird-feeder = { workspace = true }\n[tool.uv.workspace]\nmembers = [\"packages/*\"]\n[build-system]\nrequires = [\"uv_build&gt;=0.9.6,&lt;0.10.0\"]\nbuild-backend = \"uv_build\"\n</code></pre> <p>In this example, the <code>albatross</code> project depends on the <code>bird-feeder</code> project, which is a member of the workspace. The <code>workspace = true</code> key-value pair in the <code>tool.uv.sources</code> table indicates the <code>bird-feeder</code> dependency should be provided by the workspace, rather than fetched from PyPI or another registry.</p> <p>Note</p> <p>Dependencies between workspace members are editable.</p> <p>Any <code>tool.uv.sources</code> definitions in the workspace root apply to all members, unless overridden in the <code>tool.uv.sources</code> of a specific member. For example, given the following <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm&gt;=4,&lt;5\"]\n[tool.uv.sources]\nbird-feeder = { workspace = true }\ntqdm = { git = \"https://github.com/tqdm/tqdm\" }\n[tool.uv.workspace]\nmembers = [\"packages/*\"]\n[build-system]\nrequires = [\"uv_build&gt;=0.9.6,&lt;0.10.0\"]\nbuild-backend = \"uv_build\"\n</code></pre> <p>Every workspace member would, by default, install <code>tqdm</code> from GitHub, unless a specific member overrides the <code>tqdm</code> entry in its own <code>tool.uv.sources</code> table.</p> <p>Note</p> <p>If a workspace member provides <code>tool.uv.sources</code> for some dependency, it will ignore any <code>tool.uv.sources</code> for the same dependency in the workspace root, even if the member's source is limited by a marker that doesn't match the current platform.</p>"},{"location":"concepts/projects/workspaces/#workspace-layouts","title":"Workspace layouts","text":"<p>The most common workspace layout can be thought of as a root project with a series of accompanying libraries.</p> <p>For example, continuing with the above example, this workspace has an explicit root at <code>albatross</code>, with two libraries (<code>bird-feeder</code> and <code>seeds</code>) in the <code>packages</code> directory:</p> <pre><code>albatross\n\u251c\u2500\u2500 packages\n\u2502   \u251c\u2500\u2500 bird-feeder\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u2502   \u2514\u2500\u2500 src\n\u2502   \u2502       \u2514\u2500\u2500 bird_feeder\n\u2502   \u2502           \u251c\u2500\u2500 __init__.py\n\u2502   \u2502           \u2514\u2500\u2500 foo.py\n\u2502   \u2514\u2500\u2500 seeds\n\u2502       \u251c\u2500\u2500 pyproject.toml\n\u2502       \u2514\u2500\u2500 src\n\u2502           \u2514\u2500\u2500 seeds\n\u2502               \u251c\u2500\u2500 __init__.py\n\u2502               \u2514\u2500\u2500 bar.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 uv.lock\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 albatross\n        \u2514\u2500\u2500 main.py\n</code></pre> <p>Since <code>seeds</code> was excluded in the <code>pyproject.toml</code>, the workspace has two members total: <code>albatross</code> (the root) and <code>bird-feeder</code>.</p>"},{"location":"concepts/projects/workspaces/#when-not-to-use-workspaces","title":"When (not) to use workspaces","text":"<p>Workspaces are intended to facilitate the development of multiple interconnected packages within a single repository. As a codebase grows in complexity, it can be helpful to split it into smaller, composable packages, each with their own dependencies and version constraints.</p> <p>Workspaces help enforce isolation and separation of concerns. For example, in uv, we have separate packages for the core library and the command-line interface, enabling us to test the core library independently of the CLI, and vice versa.</p> <p>Other common use cases for workspaces include:</p> <ul> <li>A library with a performance-critical subroutine implemented in an extension module (Rust, C++,   etc.).</li> <li>A library with a plugin system, where each plugin is a separate workspace package with a   dependency on the root.</li> </ul> <p>Workspaces are not suited for cases in which members have conflicting requirements, or desire a separate virtual environment for each member. In this case, path dependencies are often preferable. For example, rather than grouping <code>albatross</code> and its members in a workspace, you can always define each package as its own independent project, with inter-package dependencies defined as path dependencies in <code>tool.uv.sources</code>:</p> pyproject.toml<pre><code>[project]\nname = \"albatross\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"bird-feeder\", \"tqdm&gt;=4,&lt;5\"]\n[tool.uv.sources]\nbird-feeder = { path = \"packages/bird-feeder\" }\n[build-system]\nrequires = [\"uv_build&gt;=0.9.6,&lt;0.10.0\"]\nbuild-backend = \"uv_build\"\n</code></pre> <p>This approach conveys many of the same benefits, but allows for more fine-grained control over dependency resolution and virtual environment management (with the downside that <code>uv run --package</code> is no longer available; instead, commands must be run from the relevant package directory).</p> <p>Finally, uv's workspaces enforce a single <code>requires-python</code> for the entire workspace, taking the intersection of all members' <code>requires-python</code> values. If you need to support testing a given member on a Python version that isn't supported by the rest of the workspace, you may need to use <code>uv pip</code> to install that member in a separate virtual environment.</p> <p>Note</p> <p>As Python does not provide dependency isolation, uv can't ensure that a package uses its declared dependencies and nothing else. For workspaces specifically, uv can't ensure that packages don't import dependencies declared by another workspace member.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>To help you get started with uv, we'll cover a few important topics:</p> <ul> <li>Installing uv</li> <li>First steps after installation</li> <li>An overview of uv's features</li> <li>How to get help</li> </ul> <p>Read on, or jump ahead to another section:</p> <ul> <li>Get going quickly with guides for common workflows.</li> <li>Learn more about the core concepts in uv.</li> <li>Use the reference documentation to find details about something specific.</li> </ul>"},{"location":"getting-started/features/","title":"Features","text":"<p>uv provides essential features for Python development \u2014 from installing Python and hacking on simple scripts to working on large projects that support multiple Python versions and platforms.</p> <p>uv's interface can be broken down into sections, which are usable independently or together.</p>"},{"location":"getting-started/features/#python-versions","title":"Python versions","text":"<p>Installing and managing Python itself.</p> <ul> <li><code>uv python install</code>: Install Python versions.</li> <li><code>uv python list</code>: View available Python versions.</li> <li><code>uv python find</code>: Find an installed Python version.</li> <li><code>uv python pin</code>: Pin the current project to use a specific Python version.</li> <li><code>uv python uninstall</code>: Uninstall a Python version.</li> </ul> <p>See the guide on installing Python to get started.</p>"},{"location":"getting-started/features/#scripts","title":"Scripts","text":"<p>Executing standalone Python scripts, e.g., <code>example.py</code>.</p> <ul> <li><code>uv run</code>: Run a script.</li> <li><code>uv add --script</code>: Add a dependency to a script.</li> <li><code>uv remove --script</code>: Remove a dependency from a script.</li> </ul> <p>See the guide on running scripts to get started.</p>"},{"location":"getting-started/features/#projects","title":"Projects","text":"<p>Creating and working on Python projects, i.e., with a <code>pyproject.toml</code>.</p> <ul> <li><code>uv init</code>: Create a new Python project.</li> <li><code>uv add</code>: Add a dependency to the project.</li> <li><code>uv remove</code>: Remove a dependency from the project.</li> <li><code>uv sync</code>: Sync the project's dependencies with the environment.</li> <li><code>uv lock</code>: Create a lockfile for the project's dependencies.</li> <li><code>uv run</code>: Run a command in the project environment.</li> <li><code>uv tree</code>: View the dependency tree for the project.</li> <li><code>uv build</code>: Build the project into distribution archives.</li> <li><code>uv publish</code>: Publish the project to a package index.</li> </ul> <p>See the guide on projects to get started.</p>"},{"location":"getting-started/features/#tools","title":"Tools","text":"<p>Running and installing tools published to Python package indexes, e.g., <code>ruff</code> or <code>black</code>.</p> <ul> <li><code>uvx</code> / <code>uv tool run</code>: Run a tool in a temporary environment.</li> <li><code>uv tool install</code>: Install a tool user-wide.</li> <li><code>uv tool uninstall</code>: Uninstall a tool.</li> <li><code>uv tool list</code>: List installed tools.</li> <li><code>uv tool update-shell</code>: Update the shell to include tool executables.</li> </ul> <p>See the guide on tools to get started.</p>"},{"location":"getting-started/features/#the-pip-interface","title":"The pip interface","text":"<p>Manually managing environments and packages \u2014 intended to be used in legacy workflows or cases where the high-level commands do not provide enough control.</p> <p>Creating virtual environments (replacing <code>venv</code> and <code>virtualenv</code>):</p> <ul> <li><code>uv venv</code>: Create a new virtual environment.</li> </ul> <p>See the documentation on using environments for details.</p> <p>Managing packages in an environment (replacing <code>pip</code> and <code>pipdeptree</code>):</p> <ul> <li><code>uv pip install</code>: Install packages into the current environment.</li> <li><code>uv pip show</code>: Show details about an installed package.</li> <li><code>uv pip freeze</code>: List installed packages and their versions.</li> <li><code>uv pip check</code>: Check that the current environment has compatible packages.</li> <li><code>uv pip list</code>: List installed packages.</li> <li><code>uv pip uninstall</code>: Uninstall packages.</li> <li><code>uv pip tree</code>: View the dependency tree for the environment.</li> </ul> <p>See the documentation on managing packages for details.</p> <p>Locking packages in an environment (replacing <code>pip-tools</code>):</p> <ul> <li><code>uv pip compile</code>: Compile requirements into a lockfile.</li> <li><code>uv pip sync</code>: Sync an environment with a lockfile.</li> </ul> <p>See the documentation on locking environments for details.</p> <p>Important</p> <p>These commands do not exactly implement the interfaces and behavior of the tools they are based on. The further you stray from common workflows, the more likely you are to encounter differences. Consult the pip-compatibility guide for details.</p>"},{"location":"getting-started/features/#utility","title":"Utility","text":"<p>Managing and inspecting uv's state, such as the cache, storage directories, or performing a self-update:</p> <ul> <li><code>uv cache clean</code>: Remove cache entries.</li> <li><code>uv cache prune</code>: Remove outdated cache entries.</li> <li><code>uv cache dir</code>: Show the uv cache directory path.</li> <li><code>uv tool dir</code>: Show the uv tool directory path.</li> <li><code>uv python dir</code>: Show the uv installed Python versions path.</li> <li><code>uv self update</code>: Update uv to the latest version.</li> </ul>"},{"location":"getting-started/features/#next-steps","title":"Next steps","text":"<p>Read the guides for an introduction to each feature, check out the concept pages for in-depth details about uv's features, or learn how to get help if you run into any problems.</p>"},{"location":"getting-started/first-steps/","title":"First steps with uv","text":"<p>After installing uv, you can check that uv is available by running the <code>uv</code> command:</p> <pre><code>$ uv\nAn extremely fast Python package manager.\nUsage: uv [OPTIONS] &lt;COMMAND&gt;\n...\n</code></pre> <p>You should see a help menu listing the available commands.</p>"},{"location":"getting-started/first-steps/#next-steps","title":"Next steps","text":"<p>Now that you've confirmed uv is installed, check out an overview of features, learn how to get help if you run into any problems, or jump to the guides to start using uv.</p>"},{"location":"getting-started/help/","title":"Getting help","text":""},{"location":"getting-started/help/#help-menus","title":"Help menus","text":"<p>The <code>--help</code> flag can be used to view the help menu for a command, e.g., for <code>uv</code>:</p> <pre><code>$ uv --help\n</code></pre> <p>To view the help menu for a specific command, e.g., for <code>uv init</code>:</p> <pre><code>$ uv init --help\n</code></pre> <p>When using the <code>--help</code> flag, uv displays a condensed help menu. To view a longer help menu for a command, use <code>uv help</code>:</p> <pre><code>$ uv help\n</code></pre> <p>To view the long help menu for a specific command, e.g., for <code>uv init</code>:</p> <pre><code>$ uv help init\n</code></pre> <p>When using the long help menu, uv will attempt to use <code>less</code> or <code>more</code> to \"page\" the output so it is not all displayed at once. To exit the pager, press <code>q</code>.</p>"},{"location":"getting-started/help/#displaying-verbose-output","title":"Displaying verbose output","text":"<p>The <code>-v</code> flag can be used to display verbose output for a command, e.g., for <code>uv sync</code>:</p> <pre><code>$ uv sync -v\n</code></pre> <p>The <code>-v</code> flag can be repeated to increase verbosity, e.g.:</p> <pre><code>$ uv sync -vv\n</code></pre> <p>Often, the verbose output will include additional information about why uv is behaving in a certain way.</p>"},{"location":"getting-started/help/#viewing-the-version","title":"Viewing the version","text":"<p>When seeking help, it's important to determine the version of uv that you're using \u2014 sometimes the problem is already solved in a newer version.</p> <p>To check the installed version:</p> <pre><code>$ uv self version\n</code></pre> <p>The following are also valid:</p> <pre><code>$ uv --version      # Same output as `uv self version`\n$ uv -V             # Will not include the build commit and date\n</code></pre> <p>Note</p> <p>Before uv 0.7.0, <code>uv version</code> was used instead of <code>uv self version</code>.</p>"},{"location":"getting-started/help/#troubleshooting-issues","title":"Troubleshooting issues","text":"<p>The reference documentation contains a troubleshooting guide for common issues.</p>"},{"location":"getting-started/help/#open-an-issue-on-github","title":"Open an issue on GitHub","text":"<p>The issue tracker on GitHub is a good place to report bugs and request features. Make sure to search for similar issues first, as it is common for someone else to encounter the same problem.</p>"},{"location":"getting-started/help/#chat-on-discord","title":"Chat on Discord","text":"<p>Astral has a Discord server, which is a great place to ask questions, learn more about uv, and engage with other community members.</p>"},{"location":"getting-started/installation/","title":"Installing uv","text":""},{"location":"getting-started/installation/#installation-methods","title":"Installation methods","text":"<p>Install uv with our standalone installers or your package manager of choice.</p>"},{"location":"getting-started/installation/#standalone-installer","title":"Standalone installer","text":"<p>uv provides a standalone installer to download and install uv:</p> macOS and LinuxWindows <p>Use <code>curl</code> to download the script and execute it with <code>sh</code>:</p> <pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>If your system doesn't have <code>curl</code>, you can use <code>wget</code>:</p> <pre><code>$ wget -qO- https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Request a specific version by including it in the URL:</p> <pre><code>$ curl -LsSf https://astral.sh/uv/0.9.6/install.sh | sh\n</code></pre> <p>Use <code>irm</code> to download the script and execute it with <code>iex</code>:</p> <pre><code>PS&gt; powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>Changing the execution policy allows running a script from the internet.</p> <p>Request a specific version by including it in the URL:</p> <pre><code>PS&gt; powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/0.9.6/install.ps1 | iex\"\n</code></pre> <p>Tip</p> <p>The installation script may be inspected before use:</p> macOS and LinuxWindows <pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | less\n</code></pre> <pre><code>PS&gt; powershell -c \"irm https://astral.sh/uv/install.ps1 | more\"\n</code></pre> <p>Alternatively, the installer or binaries can be downloaded directly from GitHub.</p> <p>See the reference documentation on the installer for details on customizing your uv installation.</p>"},{"location":"getting-started/installation/#pypi","title":"PyPI","text":"<p>For convenience, uv is published to PyPI.</p> <p>If installing from PyPI, we recommend installing uv into an isolated environment, e.g., with <code>pipx</code>:</p> <pre><code>$ pipx install uv\n</code></pre> <p>However, <code>pip</code> can also be used:</p> <pre><code>$ pip install uv\n</code></pre> <p>Note</p> <p>uv ships with prebuilt distributions (wheels) for many platforms; if a wheel is not available for a given platform, uv will be built from source, which requires a Rust toolchain. See the contributing setup guide for details on building uv from source.</p>"},{"location":"getting-started/installation/#homebrew","title":"Homebrew","text":"<p>uv is available in the core Homebrew packages.</p> <pre><code>$ brew install uv\n</code></pre>"},{"location":"getting-started/installation/#macports","title":"MacPorts","text":"<p>uv is available via MacPorts.</p> <pre><code>$ sudo port install uv\n</code></pre>"},{"location":"getting-started/installation/#winget","title":"WinGet","text":"<p>uv is available via WinGet.</p> <pre><code>$ winget install --id=astral-sh.uv  -e\n</code></pre>"},{"location":"getting-started/installation/#scoop","title":"Scoop","text":"<p>uv is available via Scoop.</p> <pre><code>$ scoop install main/uv\n</code></pre>"},{"location":"getting-started/installation/#docker","title":"Docker","text":"<p>uv provides a Docker image at <code>ghcr.io/astral-sh/uv</code>.</p> <p>See our guide on using uv in Docker for more details.</p>"},{"location":"getting-started/installation/#github-releases","title":"GitHub Releases","text":"<p>uv release artifacts can be downloaded directly from GitHub Releases.</p> <p>Each release page includes binaries for all supported platforms as well as instructions for using the standalone installer via <code>github.com</code> instead of <code>astral.sh</code>.</p>"},{"location":"getting-started/installation/#cargo","title":"Cargo","text":"<p>uv is available via Cargo, but must be built from Git rather than crates.io due to its dependency on unpublished crates.</p> <pre><code>$ cargo install --git https://github.com/astral-sh/uv uv\n</code></pre> <p>Note</p> <p>This method builds uv from source, which requires a compatible Rust toolchain.</p>"},{"location":"getting-started/installation/#upgrading-uv","title":"Upgrading uv","text":"<p>When uv is installed via the standalone installer, it can update itself on-demand:</p> <pre><code>$ uv self update\n</code></pre> <p>Tip</p> <p>Updating uv will re-run the installer and can modify your shell profiles. To disable this behavior, set <code>UV_NO_MODIFY_PATH=1</code>.</p> <p>When another installation method is used, self-updates are disabled. Use the package manager's upgrade method instead. For example, with <code>pip</code>:</p> <pre><code>$ pip install --upgrade uv\n</code></pre>"},{"location":"getting-started/installation/#shell-autocompletion","title":"Shell autocompletion","text":"<p>Tip</p> <p>You can run <code>echo $SHELL</code> to help you determine your shell.</p> <p>To enable shell autocompletion for uv commands, run one of the following:</p> BashZshfishElvishPowerShell / pwsh <pre><code>echo 'eval \"$(uv generate-shell-completion bash)\"' &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>echo 'eval \"$(uv generate-shell-completion zsh)\"' &gt;&gt; ~/.zshrc\n</code></pre> <pre><code>echo 'uv generate-shell-completion fish | source' &gt; ~/.config/fish/completions/uv.fish\n</code></pre> <pre><code>echo 'eval (uv generate-shell-completion elvish | slurp)' &gt;&gt; ~/.elvish/rc.elv\n</code></pre> <pre><code>if (!(Test-Path -Path $PROFILE)) {\nNew-Item -ItemType File -Path $PROFILE -Force\n}\nAdd-Content -Path $PROFILE -Value '(&amp; uv generate-shell-completion powershell) | Out-String | Invoke-Expression'\n</code></pre> <p>To enable shell autocompletion for uvx, run one of the following:</p> BashZshfishElvishPowerShell / pwsh <pre><code>echo 'eval \"$(uvx --generate-shell-completion bash)\"' &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>echo 'eval \"$(uvx --generate-shell-completion zsh)\"' &gt;&gt; ~/.zshrc\n</code></pre> <pre><code>echo 'uvx --generate-shell-completion fish | source' &gt; ~/.config/fish/completions/uvx.fish\n</code></pre> <pre><code>echo 'eval (uvx --generate-shell-completion elvish | slurp)' &gt;&gt; ~/.elvish/rc.elv\n</code></pre> <pre><code>if (!(Test-Path -Path $PROFILE)) {\nNew-Item -ItemType File -Path $PROFILE -Force\n}\nAdd-Content -Path $PROFILE -Value '(&amp; uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression'\n</code></pre> <p>Then restart the shell or source the shell config file.</p>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>If you need to remove uv from your system, follow these steps:</p> <ol> <li> <p>Clean up stored data (optional):</p> <pre><code>$ uv cache clean\n$ rm -r \"$(uv python dir)\"\n$ rm -r \"$(uv tool dir)\"\n</code></pre> <p>Tip</p> <p>Before removing the binaries, you may want to remove any data that uv has stored.</p> </li> <li> <p>Remove the uv, uvx, and uvw binaries:</p> macOS and LinuxWindows <pre><code>$ rm ~/.local/bin/uv ~/.local/bin/uvx\n</code></pre> <pre><code>PS&gt; rm $HOME\\.local\\bin\\uv.exe\nPS&gt; rm $HOME\\.local\\bin\\uvx.exe\nPS&gt; rm $HOME\\.local\\bin\\uvw.exe\n</code></pre> <p>Note</p> <p>Prior to 0.5.0, uv was installed into <code>~/.cargo/bin</code>. The binaries can be removed from there to uninstall. Upgrading from an older version will not automatically remove the binaries from <code>~/.cargo/bin</code>.</p> </li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next steps","text":"<p>See the first steps or jump straight to the guides to start using uv.</p>"},{"location":"guides/","title":"Guides overview","text":"<p>Check out one of the core guides to get started:</p> <ul> <li>Installing Python versions</li> <li>Running scripts and declaring dependencies</li> <li>Running and installing applications as tools</li> <li>Creating and working on projects</li> <li>Building and publishing packages</li> <li>Integrate uv with other software, e.g., Docker, GitHub, PyTorch, and more</li> </ul> <p>Or, explore the concept documentation for comprehensive breakdown of each feature.</p>"},{"location":"guides/install-python/","title":"Installing Python","text":"<p>If Python is already installed on your system, uv will detect and use it without configuration. However, uv can also install and manage Python versions. uv automatically installs missing Python versions as needed \u2014 you don't need to install Python to get started.</p>"},{"location":"guides/install-python/#getting-started","title":"Getting started","text":"<p>To install the latest Python version:</p> <pre><code>$ uv python install\n</code></pre> <p>Note</p> <p>Python does not publish official distributable binaries. As such, uv uses distributions from the Astral <code>python-build-standalone</code> project. See the Python distributions documentation for more details.</p> <p>Once Python is installed, it will be used by <code>uv</code> commands automatically. uv also adds the installed version to your <code>PATH</code>:</p> <pre><code>$ python3.13\n</code></pre> <p>uv only installs a versioned executable by default. To install <code>python</code> and <code>python3</code> executables, include the experimental <code>--default</code> option:</p> <pre><code>$ uv python install --default\n</code></pre> <p>Tip</p> <p>See the documentation on installing Python executables for more details.</p>"},{"location":"guides/install-python/#installing-a-specific-version","title":"Installing a specific version","text":"<p>To install a specific Python version:</p> <pre><code>$ uv python install 3.12\n</code></pre> <p>To install multiple Python versions:</p> <pre><code>$ uv python install 3.11 3.12\n</code></pre> <p>To install an alternative Python implementation, e.g., PyPy:</p> <pre><code>$ uv python install pypy@3.10\n</code></pre> <p>See the <code>python install</code> documentation for more details.</p>"},{"location":"guides/install-python/#reinstalling-python","title":"Reinstalling Python","text":"<p>To reinstall uv-managed Python versions, use <code>--reinstall</code>, e.g.:</p> <pre><code>$ uv python install --reinstall\n</code></pre> <p>This will reinstall all previously installed Python versions. Improvements are constantly being added to the Python distributions, so reinstalling may resolve bugs even if the Python version does not change.</p>"},{"location":"guides/install-python/#viewing-python-installations","title":"Viewing Python installations","text":"<p>To view available and installed Python versions:</p> <pre><code>$ uv python list\n</code></pre> <p>See the <code>python list</code> documentation for more details.</p>"},{"location":"guides/install-python/#automatic-python-downloads","title":"Automatic Python downloads","text":"<p>Python does not need to be explicitly installed to use uv. By default, uv will automatically download Python versions when they are required. For example, the following would download Python 3.12 if it was not installed:</p> <pre><code>$ uvx python@3.12 -c \"print('hello world')\"\n</code></pre> <p>Even if a specific Python version is not requested, uv will download the latest version on demand. For example, if there are no Python versions on your system, the following will install Python before creating a new virtual environment:</p> <pre><code>$ uv venv\n</code></pre> <p>Tip</p> <p>Automatic Python downloads can be easily disabled if you want more control over when Python is downloaded.</p>"},{"location":"guides/install-python/#using-existing-python-versions","title":"Using existing Python versions","text":"<p>uv will use existing Python installations if present on your system. There is no configuration necessary for this behavior: uv will use the system Python if it satisfies the requirements of the command invocation. See the Python discovery documentation for details.</p> <p>To force uv to use the system Python, provide the <code>--no-managed-python</code> flag. See the Python version preference documentation for more details.</p>"},{"location":"guides/install-python/#upgrading-python-versions","title":"Upgrading Python versions","text":"<p>Important</p> <p>Support for upgrading Python patch versions is in preview. This means the behavior is experimental and subject to change.</p> <p>To upgrade a Python version to the latest supported patch release:</p> <pre><code>$ uv python upgrade 3.12\n</code></pre> <p>To upgrade all uv-managed Python versions:</p> <pre><code>$ uv python upgrade\n</code></pre> <p>See the <code>python upgrade</code> documentation for more details.</p>"},{"location":"guides/install-python/#next-steps","title":"Next steps","text":"<p>To learn more about <code>uv python</code>, see the Python version concept page and the command reference.</p> <p>Or, read on to learn how to run scripts and invoke Python with uv.</p>"},{"location":"guides/package/","title":"Building and publishing a package","text":"<p>uv supports building Python packages into source and binary distributions via <code>uv build</code> and uploading them to a registry with <code>uv publish</code>.</p>"},{"location":"guides/package/#preparing-your-project-for-packaging","title":"Preparing your project for packaging","text":"<p>Before attempting to publish your project, you'll want to make sure it's ready to be packaged for distribution.</p> <p>If your project does not include a <code>[build-system]</code> definition in the <code>pyproject.toml</code>, uv will not build it by default. This means that your project may not be ready for distribution. Read more about the effect of declaring a build system in the project concept documentation.</p> <p>Note</p> <p>If you have internal packages that you do not want to be published, you can mark them as private:</p> <pre><code>[project]\nclassifiers = [\"Private :: Do Not Upload\"]\n</code></pre> <p>This setting makes PyPI reject your uploaded package from publishing. It does not affect security or privacy settings on alternative registries.</p> <p>We also recommend only generating per-project PyPI API tokens: Without a PyPI token matching the project, it can't be accidentally published.</p>"},{"location":"guides/package/#building-your-package","title":"Building your package","text":"<p>Build your package with <code>uv build</code>:</p> <pre><code>$ uv build\n</code></pre> <p>By default, <code>uv build</code> will build the project in the current directory, and place the built artifacts in a <code>dist/</code> subdirectory.</p> <p>Alternatively, <code>uv build &lt;SRC&gt;</code> will build the package in the specified directory, while <code>uv build --package &lt;PACKAGE&gt;</code> will build the specified package within the current workspace.</p> <p>Info</p> <p>By default, <code>uv build</code> respects <code>tool.uv.sources</code> when resolving build dependencies from the <code>build-system.requires</code> section of the <code>pyproject.toml</code>. When publishing a package, we recommend running <code>uv build --no-sources</code> to ensure that the package builds correctly when <code>tool.uv.sources</code> is disabled, as is the case when using other build tools, like <code>pypa/build</code>.</p>"},{"location":"guides/package/#updating-your-version","title":"Updating your version","text":"<p>The <code>uv version</code> command provides conveniences for updating the version of your package before you publish it. See the project docs for reading your package's version.</p> <p>To update to an exact version, provide it as a positional argument:</p> <pre><code>$ uv version 1.0.0\nhello-world 0.7.0 =&gt; 1.0.0\n</code></pre> <p>To preview the change without updating the <code>pyproject.toml</code>, use the <code>--dry-run</code> flag:</p> <pre><code>$ uv version 2.0.0 --dry-run\nhello-world 1.0.0 =&gt; 2.0.0\n$ uv version\nhello-world 1.0.0\n</code></pre> <p>To increase the version of your package semantics, use the <code>--bump</code> option:</p> <pre><code>$ uv version --bump minor\nhello-world 1.2.3 =&gt; 1.3.0\n</code></pre> <p>The <code>--bump</code> option supports the following common version components: <code>major</code>, <code>minor</code>, <code>patch</code>, <code>stable</code>, <code>alpha</code>, <code>beta</code>, <code>rc</code>, <code>post</code>, and <code>dev</code>. When provided more than once, the components will be applied in order, from largest (<code>major</code>) to smallest (<code>dev</code>).</p> <p>To move from a stable to pre-release version, bump one of the major, minor, or patch components in addition to the pre-release component:</p> <pre><code>$ uv version --bump patch --bump beta\nhello-world 1.3.0 =&gt; 1.3.1b1\n$ uv version --bump major --bump alpha\nhello-world 1.3.0 =&gt; 2.0.0a1\n</code></pre> <p>When moving from a pre-release to a new pre-release version, just bump the relevant pre-release component:</p> <pre><code>$ uv version --bump beta\nhello-world 1.3.0b1 =&gt; 1.3.0b2\n</code></pre> <p>When moving from a pre-release to a stable version, the <code>stable</code> option can be used to clear the pre-release component:</p> <pre><code>$ uv version --bump stable\nhello-world 1.3.1b2 =&gt; 1.3.1\n</code></pre> <p>Info</p> <p>By default, when <code>uv version</code> modifies the project it will perform a lock and sync. To prevent locking and syncing, use <code>--frozen</code>, or,  to just prevent syncing, use <code>--no-sync</code>.</p>"},{"location":"guides/package/#publishing-your-package","title":"Publishing your package","text":"<p>Note</p> <p>A complete guide to publishing from GitHub Actions to PyPI can be found in the GitHub Guide</p> <p>Publish your package with <code>uv publish</code>:</p> <pre><code>$ uv publish\n</code></pre> <p>Set a PyPI token with <code>--token</code> or <code>UV_PUBLISH_TOKEN</code>, or set a username with <code>--username</code> or <code>UV_PUBLISH_USERNAME</code> and password with <code>--password</code> or <code>UV_PUBLISH_PASSWORD</code>. For publishing to PyPI from GitHub Actions or another Trusted Publisher, you don't need to set any credentials. Instead, add a trusted publisher to the PyPI project.</p> <p>Note</p> <p>PyPI does not support publishing with username and password anymore, instead you need to generate a token. Using a token is equivalent to setting <code>--username __token__</code> and using the token as password.</p> <p>If you're using a custom index through <code>[[tool.uv.index]]</code>, add <code>publish-url</code> and use <code>uv publish --index &lt;name&gt;</code>. For example:</p> <pre><code>[[tool.uv.index]]\nname = \"testpypi\"\nurl = \"https://test.pypi.org/simple/\"\npublish-url = \"https://test.pypi.org/legacy/\"\nexplicit = true\n</code></pre> <p>Note</p> <p>When using <code>uv publish --index &lt;name&gt;</code>, the <code>pyproject.toml</code> must be present, i.e., you need to have a checkout step in a publish CI job.</p> <p>Even though <code>uv publish</code> retries failed uploads, it can happen that publishing fails in the middle, with some files uploaded and some files still missing. With PyPI, you can retry the exact same command, existing identical files will be ignored. With other registries, use <code>--check-url &lt;index url&gt;</code> with the index URL (not the publishing URL) the packages belong to. When using <code>--index</code>, the index URL is used as check URL. uv will skip uploading files that are identical to files in the registry, and it will also handle raced parallel uploads. Note that existing files need to match exactly with those previously uploaded to the registry, this avoids accidentally publishing source distribution and wheels with different contents for the same version.</p>"},{"location":"guides/package/#installing-your-package","title":"Installing your package","text":"<p>Test that the package can be installed and imported with <code>uv run</code>:</p> <pre><code>$ uv run --with &lt;PACKAGE&gt; --no-project -- python -c \"import &lt;PACKAGE&gt;\"\n</code></pre> <p>The <code>--no-project</code> flag is used to avoid installing the package from your local project directory.</p> <p>Tip</p> <p>If you have recently installed the package, you may need to include the <code>--refresh-package &lt;PACKAGE&gt;</code> option to avoid using a cached version of the package.</p>"},{"location":"guides/package/#next-steps","title":"Next steps","text":"<p>To learn more about publishing packages, check out the PyPA guides on building and publishing.</p> <p>Or, read on for guides on integrating uv with other software.</p>"},{"location":"guides/projects/","title":"Working on projects","text":"<p>uv supports managing Python projects, which define their dependencies in a <code>pyproject.toml</code> file.</p>"},{"location":"guides/projects/#creating-a-new-project","title":"Creating a new project","text":"<p>You can create a new Python project using the <code>uv init</code> command:</p> <pre><code>$ uv init hello-world\n$ cd hello-world\n</code></pre> <p>Alternatively, you can initialize a project in the working directory:</p> <pre><code>$ mkdir hello-world\n$ cd hello-world\n$ uv init\n</code></pre> <p>uv will create the following files:</p> <pre><code>\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>The <code>main.py</code> file contains a simple \"Hello world\" program. Try it out with <code>uv run</code>:</p> <pre><code>$ uv run main.py\nHello from hello-world!\n</code></pre>"},{"location":"guides/projects/#project-structure","title":"Project structure","text":"<p>A project consists of a few important parts that work together and allow uv to manage your project. In addition to the files created by <code>uv init</code>, uv will create a virtual environment and <code>uv.lock</code> file in the root of your project the first time you run a project command, i.e., <code>uv run</code>, <code>uv sync</code>, or <code>uv lock</code>.</p> <p>A complete listing would look like:</p> <pre><code>.\n\u251c\u2500\u2500 .venv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pyvenv.cfg\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 uv.lock\n</code></pre>"},{"location":"guides/projects/#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>The <code>pyproject.toml</code> contains metadata about your project:</p> pyproject.toml<pre><code>[project]\nname = \"hello-world\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\ndependencies = []\n</code></pre> <p>You'll use this file to specify dependencies, as well as details about the project such as its description or license. You can edit this file manually, or use commands like <code>uv add</code> and <code>uv remove</code> to manage your project from the terminal.</p> <p>Tip</p> <p>See the official <code>pyproject.toml</code> guide for more details on getting started with the <code>pyproject.toml</code> format.</p> <p>You'll also use this file to specify uv configuration options in a <code>[tool.uv]</code> section.</p>"},{"location":"guides/projects/#python-version","title":"<code>.python-version</code>","text":"<p>The <code>.python-version</code> file contains the project's default Python version. This file tells uv which Python version to use when creating the project's virtual environment.</p>"},{"location":"guides/projects/#venv","title":"<code>.venv</code>","text":"<p>The <code>.venv</code> folder contains your project's virtual environment, a Python environment that is isolated from the rest of your system. This is where uv will install your project's dependencies.</p> <p>See the project environment documentation for more details.</p>"},{"location":"guides/projects/#uvlock","title":"<code>uv.lock</code>","text":"<p><code>uv.lock</code> is a cross-platform lockfile that contains exact information about your project's dependencies. Unlike the <code>pyproject.toml</code> which is used to specify the broad requirements of your project, the lockfile contains the exact resolved versions that are installed in the project environment. This file should be checked into version control, allowing for consistent and reproducible installations across machines.</p> <p><code>uv.lock</code> is a human-readable TOML file but is managed by uv and should not be edited manually.</p> <p>See the lockfile documentation for more details.</p>"},{"location":"guides/projects/#managing-dependencies","title":"Managing dependencies","text":"<p>You can add dependencies to your <code>pyproject.toml</code> with the <code>uv add</code> command. This will also update the lockfile and project environment:</p> <pre><code>$ uv add requests\n</code></pre> <p>You can also specify version constraints or alternative sources:</p> <pre><code>$ # Specify a version constraint\n$ uv add 'requests==2.31.0'\n$ # Add a git dependency\n$ uv add git+https://github.com/psf/requests\n</code></pre> <p>If you're migrating from a <code>requirements.txt</code> file, you can use <code>uv add</code> with the <code>-r</code> flag to add all dependencies from the file:</p> <pre><code>$ # Add all dependencies from `requirements.txt`.\n$ uv add -r requirements.txt -c constraints.txt\n</code></pre> <p>To remove a package, you can use <code>uv remove</code>:</p> <pre><code>$ uv remove requests\n</code></pre> <p>To upgrade a package, run <code>uv lock</code> with the <code>--upgrade-package</code> flag:</p> <pre><code>$ uv lock --upgrade-package requests\n</code></pre> <p>The <code>--upgrade-package</code> flag will attempt to update the specified package to the latest compatible version, while keeping the rest of the lockfile intact.</p> <p>See the documentation on managing dependencies for more details.</p>"},{"location":"guides/projects/#viewing-your-version","title":"Viewing your version","text":"<p>The <code>uv version</code> command can be used to read your package's version.</p> <p>To get the version of your package, run <code>uv version</code>:</p> <pre><code>$ uv version\nhello-world 0.7.0\n</code></pre> <p>To get the version without the package name, use the <code>--short</code> option:</p> <pre><code>$ uv version --short\n0.7.0\n</code></pre> <p>To get version information in a JSON format, use the <code>--output-format json</code> option:</p> <pre><code>$ uv version --output-format json\n{\n    \"package_name\": \"hello-world\",\n    \"version\": \"0.7.0\",\n    \"commit_info\": null\n}\n</code></pre> <p>See the publishing guide for details on updating your package version.</p>"},{"location":"guides/projects/#running-commands","title":"Running commands","text":"<p><code>uv run</code> can be used to run arbitrary scripts or commands in your project environment.</p> <p>Prior to every <code>uv run</code> invocation, uv will verify that the lockfile is up-to-date with the <code>pyproject.toml</code>, and that the environment is up-to-date with the lockfile, keeping your project in-sync without the need for manual intervention. <code>uv run</code> guarantees that your command is run in a consistent, locked environment.</p> <p>For example, to use <code>flask</code>:</p> <pre><code>$ uv add flask\n$ uv run -- flask run -p 3000\n</code></pre> <p>Or, to run a script:</p> example.py<pre><code># Require a project dependency\nimport flask\nprint(\"hello world\")\n</code></pre> <pre><code>$ uv run example.py\n</code></pre> <p>Alternatively, you can use <code>uv sync</code> to manually update the environment then activate it before executing a command:</p> macOS and LinuxWindows <pre><code>$ uv sync\n$ source .venv/bin/activate\n$ flask run -p 3000\n$ python example.py\n</code></pre> <pre><code>PS&gt; uv sync\nPS&gt; .venv\\Scripts\\activate\nPS&gt; flask run -p 3000\nPS&gt; python example.py\n</code></pre> <p>Note</p> <p>The virtual environment must be active to run scripts and commands in the project without <code>uv run</code>. Virtual environment activation differs per shell and platform.</p> <p>See the documentation on running commands and scripts in projects for more details.</p>"},{"location":"guides/projects/#building-distributions","title":"Building distributions","text":"<p><code>uv build</code> can be used to build source distributions and binary distributions (wheel) for your project.</p> <p>By default, <code>uv build</code> will build the project in the current directory, and place the built artifacts in a <code>dist/</code> subdirectory:</p> <pre><code>$ uv build\n$ ls dist/\nhello-world-0.1.0-py3-none-any.whl\nhello-world-0.1.0.tar.gz\n</code></pre> <p>See the documentation on building projects for more details.</p>"},{"location":"guides/projects/#next-steps","title":"Next steps","text":"<p>To learn more about working on projects with uv, see the projects concept page and the command reference.</p> <p>Or, read on to learn how to build and publish your project to a package index.</p>"},{"location":"guides/scripts/","title":"Running scripts","text":"<p>A Python script is a file intended for standalone execution, e.g., with <code>python &lt;script&gt;.py</code>. Using uv to execute scripts ensures that script dependencies are managed without manually managing environments.</p> <p>Note</p> <p>If you are not familiar with Python environments: every Python installation has an environment that packages can be installed in. Typically, creating virtual environments is recommended to isolate packages required by each script. uv automatically manages virtual environments for you and prefers a declarative approach to dependencies.</p>"},{"location":"guides/scripts/#running-a-script-without-dependencies","title":"Running a script without dependencies","text":"<p>If your script has no dependencies, you can execute it with <code>uv run</code>:</p> example.py<pre><code>print(\"Hello world\")\n</code></pre> <pre><code>$ uv run example.py\nHello world\n</code></pre> <p>Similarly, if your script depends on a module in the standard library, there's nothing more to do:</p> example.py<pre><code>import os\nprint(os.path.expanduser(\"~\"))\n</code></pre> <pre><code>$ uv run example.py\n/Users/astral\n</code></pre> <p>Arguments may be provided to the script:</p> example.py<pre><code>import sys\nprint(\" \".join(sys.argv[1:]))\n</code></pre> <pre><code>$ uv run example.py test\ntest\n$ uv run example.py hello world!\nhello world!\n</code></pre> <p>Additionally, your script can be read directly from stdin:</p> <pre><code>$ echo 'print(\"hello world!\")' | uv run -\n</code></pre> <p>Or, if your shell supports here-documents:</p> <pre><code>uv run - &lt;&lt;EOF\nprint(\"hello world!\")\nEOF\n</code></pre> <p>Note that if you use <code>uv run</code> in a project, i.e., a directory with a <code>pyproject.toml</code>, it will install the current project before running the script. If your script does not depend on the project, use the <code>--no-project</code> flag to skip this:</p> <pre><code>$ # Note: the `--no-project` flag must be provided _before_ the script name.\n$ uv run --no-project example.py\n</code></pre> <p>See the projects guide for more details on working in projects.</p>"},{"location":"guides/scripts/#running-a-script-with-dependencies","title":"Running a script with dependencies","text":"<p>When your script requires other packages, they must be installed into the environment that the script runs in. uv prefers to create these environments on-demand instead of using a long-lived virtual environment with manually managed dependencies. This requires explicit declaration of dependencies that are required for the script. Generally, it's recommended to use a project or inline metadata to declare dependencies, but uv supports requesting dependencies per invocation as well.</p> <p>For example, the following script requires <code>rich</code>.</p> example.py<pre><code>import time\nfrom rich.progress import track\nfor i in track(range(20), description=\"For example:\"):\ntime.sleep(0.05)\n</code></pre> <p>If executed without specifying a dependency, this script will fail:</p> <pre><code>$ uv run --no-project example.py\nTraceback (most recent call last):\n  File \"/Users/astral/example.py\", line 2, in &lt;module&gt;\n    from rich.progress import track\nModuleNotFoundError: No module named 'rich'\n</code></pre> <p>Request the dependency using the <code>--with</code> option:</p> <pre><code>$ uv run --with rich example.py\nFor example: \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:01\n</code></pre> <p>Constraints can be added to the requested dependency if specific versions are needed:</p> <pre><code>$ uv run --with 'rich&gt;12,&lt;13' example.py\n</code></pre> <p>Multiple dependencies can be requested by repeating with <code>--with</code> option.</p> <p>Note that if <code>uv run</code> is used in a project, these dependencies will be included in addition to the project's dependencies. To opt-out of this behavior, use the <code>--no-project</code> flag.</p>"},{"location":"guides/scripts/#creating-a-python-script","title":"Creating a Python script","text":"<p>Python recently added a standard format for inline script metadata. It allows for selecting Python versions and defining dependencies. Use <code>uv init --script</code> to initialize scripts with the inline metadata:</p> <pre><code>$ uv init --script example.py --python 3.12\n</code></pre>"},{"location":"guides/scripts/#declaring-script-dependencies","title":"Declaring script dependencies","text":"<p>The inline metadata format allows the dependencies for a script to be declared in the script itself.</p> <p>uv supports adding and updating inline script metadata for you. Use <code>uv add --script</code> to declare the dependencies for the script:</p> <pre><code>$ uv add --script example.py 'requests&lt;3' 'rich'\n</code></pre> <p>This will add a <code>script</code> section at the top of the script declaring the dependencies using TOML:</p> example.py<pre><code># /// script\n# dependencies = [\n#   \"requests&lt;3\",\n#   \"rich\",\n# ]\n# ///\nimport requests\nfrom rich.pretty import pprint\nresp = requests.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n</code></pre> <p>uv will automatically create an environment with the dependencies necessary to run the script, e.g.:</p> <pre><code>$ uv run example.py\n[\n\u2502   ('1', 'PEP Purpose and Guidelines'),\n\u2502   ('2', 'Procedure for Adding New Modules'),\n\u2502   ('3', 'Guidelines for Handling Bug Reports'),\n\u2502   ('4', 'Deprecation of Standard Modules'),\n\u2502   ('5', 'Guidelines for Language Evolution'),\n\u2502   ('6', 'Bug Fix Releases'),\n\u2502   ('7', 'Style Guide for C Code'),\n\u2502   ('8', 'Style Guide for Python Code'),\n\u2502   ('9', 'Sample Plaintext PEP Template'),\n\u2502   ('10', 'Voting Guidelines')\n]\n</code></pre> <p>Important</p> <p>When using inline script metadata, even if <code>uv run</code> is used in a project, the project's dependencies will be ignored. The <code>--no-project</code> flag is not required.</p> <p>uv also respects Python version requirements:</p> example.py<pre><code># /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = []\n# ///\n# Use some syntax added in Python 3.12\ntype Point = tuple[float, float]\nprint(Point)\n</code></pre> <p>Note</p> <p>The <code>dependencies</code> field must be provided even if empty.</p> <p><code>uv run</code> will search for and use the required Python version. The Python version will download if it is not installed \u2014 see the documentation on Python versions for more details.</p>"},{"location":"guides/scripts/#using-a-shebang-to-create-an-executable-file","title":"Using a shebang to create an executable file","text":"<p>A shebang can be added to make a script executable without using <code>uv run</code> \u2014 this makes it easy to run scripts that are on your <code>PATH</code> or in the current folder.</p> <p>For example, create a file called <code>greet</code> with the following contents</p> greet<pre><code>#!/usr/bin/env -S uv run --script\nprint(\"Hello, world!\")\n</code></pre> <p>Ensure that your script is executable, e.g., with <code>chmod +x greet</code>, then run the script:</p> <pre><code>$ ./greet\nHello, world!\n</code></pre> <p>Declaration of dependencies is also supported in this context, for example:</p> example<pre><code>#!/usr/bin/env -S uv run --script\n#\n# /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = [\"httpx\"]\n# ///\nimport httpx\nprint(httpx.get(\"https://example.com\"))\n</code></pre>"},{"location":"guides/scripts/#using-alternative-package-indexes","title":"Using alternative package indexes","text":"<p>If you wish to use an alternative package index to resolve dependencies, you can provide the index with the <code>--index</code> option:</p> <pre><code>$ uv add --index \"https://example.com/simple\" --script example.py 'requests&lt;3' 'rich'\n</code></pre> <p>This will include the package data in the inline metadata:</p> <pre><code># [[tool.uv.index]]\n# url = \"https://example.com/simple\"\n</code></pre> <p>If you require authentication to access the package index, then please refer to the package index documentation.</p>"},{"location":"guides/scripts/#locking-dependencies","title":"Locking dependencies","text":"<p>uv supports locking dependencies for PEP 723 scripts using the <code>uv.lock</code> file format. Unlike with projects, scripts must be explicitly locked using <code>uv lock</code>:</p> <pre><code>$ uv lock --script example.py\n</code></pre> <p>Running <code>uv lock --script</code> will create a <code>.lock</code> file adjacent to the script (e.g., <code>example.py.lock</code>).</p> <p>Once locked, subsequent operations like <code>uv run --script</code>, <code>uv add --script</code>, <code>uv export --script</code>, and <code>uv tree --script</code> will reuse the locked dependencies, updating the lockfile if necessary.</p> <p>If no such lockfile is present, commands like <code>uv export --script</code> will still function as expected, but will not create a lockfile.</p>"},{"location":"guides/scripts/#improving-reproducibility","title":"Improving reproducibility","text":"<p>In addition to locking dependencies, uv supports an <code>exclude-newer</code> field in the <code>tool.uv</code> section of inline script metadata to limit uv to only considering distributions released before a specific date. This is useful for improving the reproducibility of your script when run at a later point in time.</p> <p>The date must be specified as an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>).</p> example.py<pre><code># /// script\n# dependencies = [\n#   \"requests\",\n# ]\n# [tool.uv]\n# exclude-newer = \"2023-10-16T00:00:00Z\"\n# ///\nimport requests\nprint(requests.__version__)\n</code></pre>"},{"location":"guides/scripts/#using-different-python-versions","title":"Using different Python versions","text":"<p>uv allows arbitrary Python versions to be requested on each script invocation, for example:</p> example.py<pre><code>import sys\nprint(\".\".join(map(str, sys.version_info[:3])))\n</code></pre> <pre><code>$ # Use the default Python version, may differ on your machine\n$ uv run example.py\n3.12.6\n</code></pre> <pre><code>$ # Use a specific Python version\n$ uv run --python 3.10 example.py\n3.10.15\n</code></pre> <p>See the Python version request documentation for more details on requesting Python versions.</p>"},{"location":"guides/scripts/#using-gui-scripts","title":"Using GUI scripts","text":"<p>On Windows <code>uv</code> will run your script ending with <code>.pyw</code> extension using <code>pythonw</code>:</p> example.pyw<pre><code>from tkinter import Tk, ttk\nroot = Tk()\nroot.title(\"uv\")\nfrm = ttk.Frame(root, padding=10)\nfrm.grid()\nttk.Label(frm, text=\"Hello World\").grid(column=0, row=0)\nroot.mainloop()\n</code></pre> <pre><code>PS&gt; uv run example.pyw\n</code></pre> <p></p> <p>Similarly, it works with dependencies as well:</p> example_pyqt.pyw<pre><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QLabel, QGridLayout\napp = QApplication(sys.argv)\nwidget = QWidget()\ngrid = QGridLayout()\ntext_label = QLabel()\ntext_label.setText(\"Hello World!\")\ngrid.addWidget(text_label)\nwidget.setLayout(grid)\nwidget.setGeometry(100, 100, 200, 50)\nwidget.setWindowTitle(\"uv\")\nwidget.show()\nsys.exit(app.exec_())\n</code></pre> <pre><code>PS&gt; uv run --with PyQt5 example_pyqt.pyw\n</code></pre> <p></p>"},{"location":"guides/scripts/#next-steps","title":"Next steps","text":"<p>To learn more about <code>uv run</code>, see the command reference.</p> <p>Or, read on to learn how to run and install tools with uv.</p>"},{"location":"guides/tools/","title":"Using tools","text":"<p>Many Python packages provide applications that can be used as tools. uv has specialized support for easily invoking and installing tools.</p>"},{"location":"guides/tools/#running-tools","title":"Running tools","text":"<p>The <code>uvx</code> command invokes a tool without installing it.</p> <p>For example, to run <code>ruff</code>:</p> <pre><code>$ uvx ruff\n</code></pre> <p>Note</p> <p>This is exactly equivalent to:</p> <pre><code>$ uv tool run ruff\n</code></pre> <p><code>uvx</code> is provided as an alias for convenience.</p> <p>Arguments can be provided after the tool name:</p> <pre><code>$ uvx pycowsay hello from uv\n\n  -------------\n&lt; hello from uv &gt;\n  -------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre> <p>Tools are installed into temporary, isolated environments when using <code>uvx</code>.</p> <p>Note</p> <p>If you are running a tool in a project and the tool requires that your project is installed, e.g., when using <code>pytest</code> or <code>mypy</code>, you'll want to use <code>uv run</code> instead of <code>uvx</code>. Otherwise, the tool will be run in a virtual environment that is isolated from your project.</p> <p>If your project has a flat structure, e.g., instead of using a <code>src</code> directory for modules, the project itself does not need to be installed and <code>uvx</code> is fine. In this case, using <code>uv run</code> is only beneficial if you want to pin the version of the tool in the project's dependencies.</p>"},{"location":"guides/tools/#commands-with-different-package-names","title":"Commands with different package names","text":"<p>When <code>uvx ruff</code> is invoked, uv installs the <code>ruff</code> package which provides the <code>ruff</code> command. However, sometimes the package and command names differ.</p> <p>The <code>--from</code> option can be used to invoke a command from a specific package, e.g., <code>http</code> which is provided by <code>httpie</code>:</p> <pre><code>$ uvx --from httpie http\n</code></pre>"},{"location":"guides/tools/#requesting-specific-versions","title":"Requesting specific versions","text":"<p>To run a tool at a specific version, use <code>command@&lt;version&gt;</code>:</p> <pre><code>$ uvx ruff@0.3.0 check\n</code></pre> <p>To run a tool at the latest version, use <code>command@latest</code>:</p> <pre><code>$ uvx ruff@latest check\n</code></pre> <p>The <code>--from</code> option can also be used to specify package versions, as above:</p> <pre><code>$ uvx --from 'ruff==0.3.0' ruff check\n</code></pre> <p>Or, to constrain to a range of versions:</p> <pre><code>$ uvx --from 'ruff&gt;0.2.0,&lt;0.3.0' ruff check\n</code></pre> <p>Note the <code>@</code> syntax cannot be used for anything other than an exact version.</p>"},{"location":"guides/tools/#requesting-extras","title":"Requesting extras","text":"<p>The <code>--from</code> option can be used to run a tool with extras:</p> <pre><code>$ uvx --from 'mypy[faster-cache,reports]' mypy --xml-report mypy_report\n</code></pre> <p>This can also be combined with version selection:</p> <pre><code>$ uvx --from 'mypy[faster-cache,reports]==1.13.0' mypy --xml-report mypy_report\n</code></pre>"},{"location":"guides/tools/#requesting-different-sources","title":"Requesting different sources","text":"<p>The <code>--from</code> option can also be used to install from alternative sources.</p> <p>For example, to pull from git:</p> <pre><code>$ uvx --from git+https://github.com/httpie/cli httpie\n</code></pre> <p>You can also pull the latest commit from a specific named branch:</p> <pre><code>$ uvx --from git+https://github.com/httpie/cli@master httpie\n</code></pre> <p>Or pull a specific tag:</p> <pre><code>$ uvx --from git+https://github.com/httpie/cli@3.2.4 httpie\n</code></pre> <p>Or even a specific commit:</p> <pre><code>$ uvx --from git+https://github.com/httpie/cli@2843b87 httpie\n</code></pre>"},{"location":"guides/tools/#commands-with-plugins","title":"Commands with plugins","text":"<p>Additional dependencies can be included, e.g., to include <code>mkdocs-material</code> when running <code>mkdocs</code>:</p> <pre><code>$ uvx --with mkdocs-material mkdocs --help\n</code></pre>"},{"location":"guides/tools/#installing-tools","title":"Installing tools","text":"<p>If a tool is used often, it is useful to install it to a persistent environment and add it to the <code>PATH</code> instead of invoking <code>uvx</code> repeatedly.</p> <p>Tip</p> <p><code>uvx</code> is a convenient alias for <code>uv tool run</code>. All of the other commands for interacting with tools require the full <code>uv tool</code> prefix.</p> <p>To install <code>ruff</code>:</p> <pre><code>$ uv tool install ruff\n</code></pre> <p>When a tool is installed, its executables are placed in a <code>bin</code> directory in the <code>PATH</code> which allows the tool to be run without uv. If it's not on the <code>PATH</code>, a warning will be displayed and <code>uv tool update-shell</code> can be used to add it to the <code>PATH</code>.</p> <p>After installing <code>ruff</code>, it should be available:</p> <pre><code>$ ruff --version\n</code></pre> <p>Unlike <code>uv pip install</code>, installing a tool does not make its modules available in the current environment. For example, the following command will fail:</p> <pre><code>$ python -c \"import ruff\"\n</code></pre> <p>This isolation is important for reducing interactions and conflicts between dependencies of tools, scripts, and projects.</p> <p>Unlike <code>uvx</code>, <code>uv tool install</code> operates on a package and will install all executables provided by the tool.</p> <p>For example, the following will install the <code>http</code>, <code>https</code>, and <code>httpie</code> executables:</p> <pre><code>$ uv tool install httpie\n</code></pre> <p>Additionally, package versions can be included without <code>--from</code>:</p> <pre><code>$ uv tool install 'httpie&gt;0.1.0'\n</code></pre> <p>And, similarly, for package sources:</p> <pre><code>$ uv tool install git+https://github.com/httpie/cli\n</code></pre> <p>As with <code>uvx</code>, installations can include additional packages:</p> <pre><code>$ uv tool install mkdocs --with mkdocs-material\n</code></pre> <p>Multiple related executables can be installed together in the same tool environment, using the <code>--with-executables-from</code> flag. For example, the following will install the executables from <code>ansible</code>, plus those ones provided by <code>ansible-core</code> and <code>ansible-lint</code>:</p> <pre><code>$ uv tool install --with-executables-from ansible-core,ansible-lint ansible\n</code></pre>"},{"location":"guides/tools/#upgrading-tools","title":"Upgrading tools","text":"<p>To upgrade a tool, use <code>uv tool upgrade</code>:</p> <pre><code>$ uv tool upgrade ruff\n</code></pre> <p>Tool upgrades will respect the version constraints provided when installing the tool. For example, <code>uv tool install ruff &gt;=0.3,&lt;0.4</code> followed by <code>uv tool upgrade ruff</code> will upgrade Ruff to the latest version in the range <code>&gt;=0.3,&lt;0.4</code>.</p> <p>To instead replace the version constraints, re-install the tool with <code>uv tool install</code>:</p> <pre><code>$ uv tool install ruff&gt;=0.4\n</code></pre> <p>To instead upgrade all tools:</p> <pre><code>$ uv tool upgrade --all\n</code></pre>"},{"location":"guides/tools/#requesting-python-versions","title":"Requesting Python versions","text":"<p>By default, uv will use your default Python interpreter (the first it finds) when running, installing, or upgrading tools. You can specify the Python interpreter to use with the <code>--python</code> option.</p> <p>For example, to request a specific Python version when running a tool:</p> <pre><code>$ uvx --python 3.10 ruff\n</code></pre> <p>Or, when installing a tool:</p> <pre><code>$ uv tool install --python 3.10 ruff\n</code></pre> <p>Or, when upgrading a tool:</p> <pre><code>$ uv tool upgrade --python 3.10 ruff\n</code></pre> <p>For more details on requesting Python versions, see the Python version concept page.</p>"},{"location":"guides/tools/#legacy-windows-scripts","title":"Legacy Windows Scripts","text":"<p>Tools also support running legacy setuptools scripts. These scripts are available via <code>$(uv tool dir)\\&lt;tool-name&gt;\\Scripts</code> when installed.</p> <p>Currently only legacy scripts with the <code>.ps1</code>, <code>.cmd</code>, and <code>.bat</code> extensions are supported.</p> <p>For example, below is an example running a Command Prompt script.</p> <pre><code>$ uv tool run --from nuitka==2.6.7 nuitka.cmd --version\n</code></pre> <p>In addition, you don't need to specify the extension. <code>uvx</code> will automatically look for files ending in <code>.ps1</code>, <code>.cmd</code>, and <code>.bat</code> in that order of execution on your behalf.</p> <pre><code>$ uv tool run --from nuitka==2.6.7 nuitka --version\n</code></pre>"},{"location":"guides/tools/#next-steps","title":"Next steps","text":"<p>To learn more about managing tools with uv, see the Tools concept page and the command reference.</p> <p>Or, read on to learn how to work on projects.</p>"},{"location":"guides/integration/","title":"Integration guides","text":"<p>Learn how to integrate uv with other software:</p> <ul> <li>Using in Docker images</li> <li>Using with Jupyter notebooks</li> <li>Using with marimo notebooks</li> <li>Using with pre-commit</li> <li>Using in GitHub Actions</li> <li>Using in GitLab CI/CD</li> <li>Using with alternative package indexes</li> <li>Installing PyTorch</li> <li>Building a FastAPI application</li> <li>Using with AWS Lambda</li> <li>Using with Coiled</li> </ul> <p>Or, explore the concept documentation for comprehensive breakdown of each feature.</p>"},{"location":"guides/integration/alternative-indexes/","title":"Using alternative package indexes","text":"<p>While uv uses the official Python Package Index (PyPI) by default, it also supports alternative package indexes. Most alternative indexes require various forms of authentication, which require some initial setup.</p> <p>Important</p> <p>If using the pip interface, please read the documentation on using multiple indexes in uv \u2014 the default behavior is different from pip to prevent dependency confusion attacks, but this means that uv may not find the versions of a package as you'd expect.</p>"},{"location":"guides/integration/alternative-indexes/#azure-artifacts","title":"Azure Artifacts","text":"<p>uv can install packages from Azure Artifacts, either by using a Personal Access Token (PAT), or using the <code>keyring</code> package.</p> <p>To use Azure Artifacts, add the index to your project:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/simple/\"\n</code></pre>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-an-azure-access-token","title":"Authenticate with an Azure access token","text":"<p>If there is a personal access token (PAT) available (e.g., <code>$(System.AccessToken)</code> in an Azure pipeline), credentials can be provided via \"Basic\" HTTP authentication scheme. Include the PAT in the password field of the URL. A username must be included as well, but can be any string.</p> <p>For example, with the token stored in the <code>$AZURE_ARTIFACTS_TOKEN</code> environment variable, set credentials for the index with:</p> <pre><code>export UV_INDEX_PRIVATE_REGISTRY_USERNAME=dummy\nexport UV_INDEX_PRIVATE_REGISTRY_PASSWORD=\"$AZURE_ARTIFACTS_TOKEN\"\n</code></pre> <p>Note</p> <p><code>PRIVATE_REGISTRY</code> should match the name of the index defined in your <code>pyproject.toml</code>.</p>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-keyring-and-artifacts-keyring","title":"Authenticate with <code>keyring</code> and <code>artifacts-keyring</code>","text":"<p>You can also authenticate to Artifacts using <code>keyring</code> package with the <code>artifacts-keyring</code> plugin. Because these two packages are required to authenticate to Azure Artifacts, they must be pre-installed from a source other than Artifacts.</p> <p>The <code>artifacts-keyring</code> plugin wraps the Azure Artifacts Credential Provider tool. The credential provider supports a few different authentication modes including interactive login \u2014 see the tool's documentation for information on configuration.</p> <p>uv only supports using the <code>keyring</code> package in subprocess mode. The <code>keyring</code> executable must be in the <code>PATH</code>, i.e., installed globally or in the active environment. The <code>keyring</code> CLI requires a username in the URL, and it must be <code>VssSessionToken</code>.</p> <pre><code># Pre-install keyring and the Artifacts plugin from the public PyPI\nuv tool install keyring --with artifacts-keyring\n\n# Enable keyring authentication\nexport UV_KEYRING_PROVIDER=subprocess\n\n# Set the username for the index\nexport UV_INDEX_PRIVATE_REGISTRY_USERNAME=VssSessionToken\n</code></pre> <p>Note</p> <p>The <code>tool.uv.keyring-provider</code> setting can be used to enable keyring in your <code>uv.toml</code> or <code>pyproject.toml</code>.</p> <p>Similarly, the username for the index can be added directly to the index URL.</p>"},{"location":"guides/integration/alternative-indexes/#publishing-packages-to-azure-artifacts","title":"Publishing packages to Azure Artifacts","text":"<p>If you also want to publish your own packages to Azure Artifacts, you can use <code>uv publish</code> as described in the Building and publishing guide.</p> <p>First, add a <code>publish-url</code> to the index you want to publish packages to. For example:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/simple/\"\npublish-url = \"https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/upload/\"\n</code></pre> <p>Then, configure credentials (if not using keyring):</p> <pre><code>$ export UV_PUBLISH_USERNAME=dummy\n$ export UV_PUBLISH_PASSWORD=\"$AZURE_ARTIFACTS_TOKEN\"\n</code></pre> <p>And publish the package:</p> <pre><code>$ uv publish --index private-registry\n</code></pre> <p>To use <code>uv publish</code> without adding the <code>publish-url</code> to the project, you can set <code>UV_PUBLISH_URL</code>:</p> <pre><code>$ export UV_PUBLISH_URL=https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/upload/\n$ uv publish\n</code></pre> <p>Note this method is not preferable because uv cannot check if the package is already published before uploading artifacts.</p>"},{"location":"guides/integration/alternative-indexes/#google-artifact-registry","title":"Google Artifact Registry","text":"<p>uv can install packages from Google Artifact Registry, either by using an access token, or using the <code>keyring</code> package.</p> <p>Note</p> <p>This guide assumes that <code>gcloud</code> CLI is installed and authenticated.</p> <p>To use Google Artifact Registry, add the index to your project:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;/simple/\"\n</code></pre>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-a-google-access-token","title":"Authenticate with a Google access token","text":"<p>Credentials can be provided via \"Basic\" HTTP authentication scheme. Include access token in the password field of the URL. Username must be <code>oauth2accesstoken</code>, otherwise authentication will fail.</p> <p>Generate a token with <code>gcloud</code>:</p> <pre><code>export ARTIFACT_REGISTRY_TOKEN=$(\ngcloud auth application-default print-access-token\n)\n</code></pre> <p>Note</p> <p>You might need to pass extra parameters to properly generate the token (like <code>--project</code>), this is a basic example.</p> <p>Then set credentials for the index with:</p> <pre><code>export UV_INDEX_PRIVATE_REGISTRY_USERNAME=oauth2accesstoken\nexport UV_INDEX_PRIVATE_REGISTRY_PASSWORD=\"$ARTIFACT_REGISTRY_TOKEN\"\n</code></pre> <p>Note</p> <p><code>PRIVATE_REGISTRY</code> should match the name of the index defined in your <code>pyproject.toml</code>.</p>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-keyring-and-keyringsgoogle-artifactregistry-auth","title":"Authenticate with <code>keyring</code> and <code>keyrings.google-artifactregistry-auth</code>","text":"<p>You can also authenticate to Artifact Registry using <code>keyring</code> package with the <code>keyrings.google-artifactregistry-auth</code> plugin. Because these two packages are required to authenticate to Artifact Registry, they must be pre-installed from a source other than Artifact Registry.</p> <p>The <code>keyrings.google-artifactregistry-auth</code> plugin wraps gcloud CLI to generate short-lived access tokens, securely store them in system keyring, and refresh them when they are expired.</p> <p>uv only supports using the <code>keyring</code> package in subprocess mode. The <code>keyring</code> executable must be in the <code>PATH</code>, i.e., installed globally or in the active environment. The <code>keyring</code> CLI requires a username in the URL and it must be <code>oauth2accesstoken</code>.</p> <pre><code># Pre-install keyring and Artifact Registry plugin from the public PyPI\nuv tool install keyring --with keyrings.google-artifactregistry-auth\n\n# Enable keyring authentication\nexport UV_KEYRING_PROVIDER=subprocess\n\n# Set the username for the index\nexport UV_INDEX_PRIVATE_REGISTRY_USERNAME=oauth2accesstoken\n</code></pre> <p>Note</p> <p>The <code>tool.uv.keyring-provider</code> setting can be used to enable keyring in your <code>uv.toml</code> or <code>pyproject.toml</code>.</p> <p>Similarly, the username for the index can be added directly to the index URL.</p>"},{"location":"guides/integration/alternative-indexes/#publishing-packages-to-google-artifact-registry","title":"Publishing packages to Google Artifact Registry","text":"<p>If you also want to publish your own packages to Google Artifact Registry, you can use <code>uv publish</code> as described in the Building and publishing guide.</p> <p>First, add a <code>publish-url</code> to the index you want to publish packages to. For example:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;/simple/\"\npublish-url = \"https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;/\"\n</code></pre> <p>Then, configure credentials (if not using keyring):</p> <pre><code>$ export UV_PUBLISH_USERNAME=oauth2accesstoken\n$ export UV_PUBLISH_PASSWORD=\"$ARTIFACT_REGISTRY_TOKEN\"\n</code></pre> <p>And publish the package:</p> <pre><code>$ uv publish --index private-registry\n</code></pre> <p>To use <code>uv publish</code> without adding the <code>publish-url</code> to the project, you can set <code>UV_PUBLISH_URL</code>:</p> <pre><code>$ export UV_PUBLISH_URL=https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;/\n$ uv publish\n</code></pre> <p>Note this method is not preferable because uv cannot check if the package is already published before uploading artifacts.</p>"},{"location":"guides/integration/alternative-indexes/#aws-codeartifact","title":"AWS CodeArtifact","text":"<p>uv can install packages from AWS CodeArtifact, either by using an access token, or using the <code>keyring</code> package.</p> <p>Note</p> <p>This guide assumes that <code>awscli</code> is installed and authenticated.</p> <p>The index can be declared like so:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/simple/\"\n</code></pre>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-an-aws-access-token","title":"Authenticate with an AWS access token","text":"<p>Credentials can be provided via \"Basic\" HTTP authentication scheme. Include access token in the password field of the URL. Username must be <code>aws</code>, otherwise authentication will fail.</p> <p>Generate a token with <code>awscli</code>:</p> <pre><code>export AWS_CODEARTIFACT_TOKEN=\"$(\naws codeartifact get-authorization-token \\\n--domain &lt;DOMAIN&gt; \\\n--domain-owner &lt;ACCOUNT_ID&gt; \\\n--query authorizationToken \\\n--output text\n)\"\n</code></pre> <p>Note</p> <p>You might need to pass extra parameters to properly generate the token (like <code>--region</code>), this is a basic example.</p> <p>Then set credentials for the index with:</p> <pre><code>export UV_INDEX_PRIVATE_REGISTRY_USERNAME=aws\nexport UV_INDEX_PRIVATE_REGISTRY_PASSWORD=\"$AWS_CODEARTIFACT_TOKEN\"\n</code></pre> <p>Note</p> <p><code>PRIVATE_REGISTRY</code> should match the name of the index defined in your <code>pyproject.toml</code>.</p>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-keyring-and-keyringscodeartifact","title":"Authenticate with <code>keyring</code> and <code>keyrings.codeartifact</code>","text":"<p>You can also authenticate to Artifact Registry using <code>keyring</code> package with the <code>keyrings.codeartifact</code> plugin. Because these two packages are required to authenticate to Artifact Registry, they must be pre-installed from a source other than Artifact Registry.</p> <p>The <code>keyrings.codeartifact</code> plugin wraps boto3 to generate short-lived access tokens, securely store them in system keyring, and refresh them when they are expired.</p> <p>uv only supports using the <code>keyring</code> package in subprocess mode. The <code>keyring</code> executable must be in the <code>PATH</code>, i.e., installed globally or in the active environment. The <code>keyring</code> CLI requires a username in the URL and it must be <code>aws</code>.</p> <pre><code># Pre-install keyring and AWS CodeArtifact plugin from the public PyPI\nuv tool install keyring --with keyrings.codeartifact\n\n# Enable keyring authentication\nexport UV_KEYRING_PROVIDER=subprocess\n\n# Set the username for the index\nexport UV_INDEX_PRIVATE_REGISTRY_USERNAME=aws\n</code></pre> <p>Note</p> <p>The <code>tool.uv.keyring-provider</code> setting can be used to enable keyring in your <code>uv.toml</code> or <code>pyproject.toml</code>.</p> <p>Similarly, the username for the index can be added directly to the index URL.</p>"},{"location":"guides/integration/alternative-indexes/#publishing-packages-to-aws-codeartifact","title":"Publishing packages to AWS CodeArtifact","text":"<p>If you also want to publish your own packages to AWS CodeArtifact, you can use <code>uv publish</code> as described in the Building and publishing guide.</p> <p>First, add a <code>publish-url</code> to the index you want to publish packages to. For example:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/simple/\"\npublish-url = \"https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/\"\n</code></pre> <p>Then, configure credentials (if not using keyring):</p> <pre><code>$ export UV_PUBLISH_USERNAME=aws\n$ export UV_PUBLISH_PASSWORD=\"$AWS_CODEARTIFACT_TOKEN\"\n</code></pre> <p>And publish the package:</p> <pre><code>$ uv publish --index private-registry\n</code></pre> <p>To use <code>uv publish</code> without adding the <code>publish-url</code> to the project, you can set <code>UV_PUBLISH_URL</code>:</p> <pre><code>$ export UV_PUBLISH_URL=https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/\n$ uv publish\n</code></pre> <p>Note this method is not preferable because uv cannot check if the package is already published before uploading artifacts.</p>"},{"location":"guides/integration/alternative-indexes/#jfrog-artifactory","title":"JFrog Artifactory","text":"<p>uv can install packages from JFrog Artifactory, either by using a username and password or a JWT token.</p> <p>To use it, add the index to your project:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://&lt;organization&gt;.jfrog.io/artifactory/api/pypi/&lt;repository&gt;/simple\"\n</code></pre>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-username-and-password","title":"Authenticate with username and password","text":"<pre><code>$ export UV_INDEX_PRIVATE_REGISTRY_USERNAME=\"&lt;username&gt;\"\n$ export UV_INDEX_PRIVATE_REGISTRY_PASSWORD=\"&lt;password&gt;\"\n</code></pre>"},{"location":"guides/integration/alternative-indexes/#authenticate-with-jwt-token","title":"Authenticate with JWT token","text":"<pre><code>$ export UV_INDEX_PRIVATE_REGISTRY_USERNAME=\"\"\n$ export UV_INDEX_PRIVATE_REGISTRY_PASSWORD=\"$JFROG_JWT_TOKEN\"\n</code></pre> <p>Note</p> <p>Replace <code>PRIVATE_REGISTRY</code> in the environment variable names with the actual index name defined in your <code>pyproject.toml</code>.</p>"},{"location":"guides/integration/alternative-indexes/#publishing-packages-to-jfrog-artifactory","title":"Publishing packages to JFrog Artifactory","text":"<p>Add a <code>publish-url</code> to your index definition:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"private-registry\"\nurl = \"https://&lt;organization&gt;.jfrog.io/artifactory/api/pypi/&lt;repository&gt;/simple\"\npublish-url = \"https://&lt;organization&gt;.jfrog.io/artifactory/api/pypi/&lt;repository&gt;\"\n</code></pre> <p>Important</p> <p>If you use <code>--token \"$JFROG_TOKEN\"</code> or <code>UV_PUBLISH_TOKEN</code> with JFrog, you will receive a 401 Unauthorized error as JFrog requires an empty username but uv passes <code>__token__</code> for as the username when <code>--token</code> is used.</p> <p>To authenticate, pass your token as the password and set the username to an empty string:</p> <pre><code>$ uv publish --index &lt;index_name&gt; -u \"\" -p \"$JFROG_TOKEN\"\n</code></pre> <p>Alternatively, you can set environment variables:</p> <pre><code>$ export UV_PUBLISH_USERNAME=\"\"\n$ export UV_PUBLISH_PASSWORD=\"$JFROG_TOKEN\"\n$ uv publish --index private-registry\n</code></pre> <p>Note</p> <p>The publish environment variables (<code>UV_PUBLISH_USERNAME</code> and <code>UV_PUBLISH_PASSWORD</code>) do not include the index name.</p>"},{"location":"guides/integration/aws-lambda/","title":"Using uv with AWS Lambda","text":"<p>AWS Lambda is a serverless computing service that lets you run code without provisioning or managing servers.</p> <p>You can use uv with AWS Lambda to manage your Python dependencies, build your deployment package, and deploy your Lambda functions.</p> <p>Tip</p> <p>Check out the <code>uv-aws-lambda-example</code> project for an example of best practices when using uv to deploy an application to AWS Lambda.</p>"},{"location":"guides/integration/aws-lambda/#getting-started","title":"Getting started","text":"<p>To start, assume we have a minimal FastAPI application with the following structure:</p> <pre><code>project\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 app\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 main.py\n</code></pre> <p>Where the <code>pyproject.toml</code> contains:</p> pyproject.toml<pre><code>[project]\nname = \"uv-aws-lambda-example\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.13\"\ndependencies = [\n# FastAPI is a modern web framework for building APIs with Python.\n\"fastapi\",\n# Mangum is a library that adapts ASGI applications to AWS Lambda and API Gateway.\n\"mangum\",\n]\n[dependency-groups]\ndev = [\n# In development mode, include the FastAPI development server.\n\"fastapi[standard]&gt;=0.115\",\n]\n</code></pre> <p>And the <code>main.py</code> file contains:</p> app/main.py<pre><code>import logging\nfrom fastapi import FastAPI\nfrom mangum import Mangum\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\napp = FastAPI()\nhandler = Mangum(app)\n@app.get(\"/\")\nasync def root() -&gt; str:\nreturn \"Hello, world!\"\n</code></pre> <p>We can run this application locally with:</p> <pre><code>$ uv run fastapi dev\n</code></pre> <p>From there, opening http://127.0.0.1:8000/ in a web browser will display \"Hello, world!\"</p>"},{"location":"guides/integration/aws-lambda/#deploying-a-docker-image","title":"Deploying a Docker image","text":"<p>To deploy to AWS Lambda, we need to build a container image that includes the application code and dependencies in a single output directory.</p> <p>We'll follow the principles outlined in the Docker guide (in particular, a multi-stage build) to ensure that the final image is as small and cache-friendly as possible.</p> <p>In the first stage, we'll populate a single directory with all application code and dependencies. In the second stage, we'll copy this directory over to the final image, omitting the build tools and other unnecessary files.</p> Dockerfile<pre><code>FROM ghcr.io/astral-sh/uv:0.9.6 AS uv\n# First, bundle the dependencies into the task root.\nFROM public.ecr.aws/lambda/python:3.13 AS builder\n# Enable bytecode compilation, to improve cold-start performance.\nENV UV_COMPILE_BYTECODE=1\n# Disable installer metadata, to create a deterministic layer.\nENV UV_NO_INSTALLER_METADATA=1\n# Enable copy mode to support bind mount caching.\nENV UV_LINK_MODE=copy\n\n# Bundle the dependencies into the Lambda task root via `uv pip install --target`.\n#\n# Omit any local packages (`--no-emit-workspace`) and development dependencies (`--no-dev`).\n# This ensures that the Docker layer cache is only invalidated when the `pyproject.toml` or `uv.lock`\n# files change, but remains robust to changes in the application code.\nRUN --mount=from=uv,source=/uv,target=/bin/uv \\\n--mount=type=cache,target=/root/.cache/uv \\\n--mount=type=bind,source=uv.lock,target=uv.lock \\\n--mount=type=bind,source=pyproject.toml,target=pyproject.toml \\\nuv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt &amp;&amp; \\\nuv pip install -r requirements.txt --target \"${LAMBDA_TASK_ROOT}\"\nFROM public.ecr.aws/lambda/python:3.13\n# Copy the runtime dependencies from the builder stage.\nCOPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}\n# Copy the application code.\nCOPY ./app ${LAMBDA_TASK_ROOT}/app\n\n# Set the AWS Lambda handler.\nCMD [\"app.main.handler\"]\n</code></pre> <p>Tip</p> <p>To deploy to ARM-based AWS Lambda runtimes, replace <code>public.ecr.aws/lambda/python:3.13</code> with <code>public.ecr.aws/lambda/python:3.13-arm64</code>.</p> <p>We can build the image with, e.g.:</p> <pre><code>$ uv lock\n$ docker build -t fastapi-app .\n</code></pre> <p>The core benefits of this Dockerfile structure are as follows:</p> <ol> <li>Minimal image size. By using a multi-stage build, we can ensure that the final image only    includes the application code and dependencies. For example, the uv binary itself is not included    in the final image.</li> <li>Maximal cache reuse. By installing application dependencies separately from the application    code, we can ensure that the Docker layer cache is only invalidated when the dependencies change.</li> </ol> <p>Concretely, rebuilding the image after modifying the application source code can reuse the cached layers, resulting in millisecond builds:</p> <pre><code> =&gt; [internal] load build definition from Dockerfile                                                                 0.0s\n =&gt; =&gt; transferring dockerfile: 1.31kB                                                                               0.0s\n =&gt; [internal] load metadata for public.ecr.aws/lambda/python:3.13                                                   0.3s\n =&gt; [internal] load metadata for ghcr.io/astral-sh/uv:latest                                                         0.3s\n =&gt; [internal] load .dockerignore                                                                                    0.0s\n =&gt; =&gt; transferring context: 106B                                                                                    0.0s\n =&gt; [uv 1/1] FROM ghcr.io/astral-sh/uv:latest@sha256:ea61e006cfec0e8d81fae901ad703e09d2c6cf1aa58abcb6507d124b50286f  0.0s\n =&gt; [builder 1/2] FROM public.ecr.aws/lambda/python:3.13@sha256:f5b51b377b80bd303fe8055084e2763336ea8920d12955b23ef  0.0s\n =&gt; [internal] load build context                                                                                    0.0s\n =&gt; =&gt; transferring context: 185B                                                                                    0.0s\n =&gt; CACHED [builder 2/2] RUN --mount=from=uv,source=/uv,target=/bin/uv     --mount=type=cache,target=/root/.cache/u  0.0s\n =&gt; CACHED [stage-2 2/3] COPY --from=builder /var/task /var/task                                                     0.0s\n =&gt; CACHED [stage-2 3/3] COPY ./app /var/task                                                                        0.0s\n =&gt; exporting to image                                                                                               0.0s\n =&gt; =&gt; exporting layers                                                                                              0.0s\n =&gt; =&gt; writing image sha256:6f8f9ef715a7cda466b677a9df4046ebbb90c8e88595242ade3b4771f547652d                         0.0\n</code></pre> <p>After building, we can push the image to Elastic Container Registry (ECR) with, e.g.:</p> <pre><code>$ aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com\n$ docker tag fastapi-app:latest aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest\n$ docker push aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest\n</code></pre> <p>Finally, we can deploy the image to AWS Lambda using the AWS Management Console or the AWS CLI, e.g.:</p> <pre><code>$ aws lambda create-function \\\n--function-name myFunction \\\n--package-type Image \\\n--code ImageUri=aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest \\\n--role arn:aws:iam::111122223333:role/my-lambda-role\n</code></pre> <p>Where the execution role is created via:</p> <pre><code>$ aws iam create-role \\\n--role-name my-lambda-role \\\n--assume-role-policy-document '{\"Version\": \"2012-10-17\", \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": {\"Service\": \"lambda.amazonaws.com\"}, \"Action\": \"sts:AssumeRole\"}]}'\n</code></pre> <p>Or, update an existing function with:</p> <pre><code>$ aws lambda update-function-code \\\n--function-name myFunction \\\n--image-uri aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest \\\n--publish\n</code></pre> <p>To test the Lambda, we can invoke it via the AWS Management Console or the AWS CLI, e.g.:</p> <pre><code>$ aws lambda invoke \\\n--function-name myFunction \\\n--payload file://event.json \\\n--cli-binary-format raw-in-base64-out \\\nresponse.json\n{\n  \"StatusCode\": 200,\n  \"ExecutedVersion\": \"$LATEST\"\n}\n</code></pre> <p>Where <code>event.json</code> contains the event payload to pass to the Lambda function:</p> event.json<pre><code>{\n\"httpMethod\": \"GET\",\n\"path\": \"/\",\n\"requestContext\": {},\n\"version\": \"1.0\"\n}\n</code></pre> <p>And <code>response.json</code> contains the response from the Lambda function:</p> response.json<pre><code>{\n\"statusCode\": 200,\n\"headers\": {\n\"content-length\": \"14\",\n\"content-type\": \"application/json\"\n},\n\"multiValueHeaders\": {},\n\"body\": \"\\\"Hello, world!\\\"\",\n\"isBase64Encoded\": false\n}\n</code></pre> <p>For details, see the AWS Lambda documentation.</p>"},{"location":"guides/integration/aws-lambda/#workspace-support","title":"Workspace support","text":"<p>If a project includes local dependencies (e.g., via Workspaces), those too must be included in the deployment package.</p> <p>We'll start by extending the above example to include a dependency on a locally-developed library named <code>library</code>.</p> <p>First, we'll create the library itself:</p> <pre><code>$ uv init --lib library\n$ uv add ./library\n</code></pre> <p>Running <code>uv init</code> within the <code>project</code> directory will automatically convert <code>project</code> to a workspace and add <code>library</code> as a workspace member:</p> pyproject.toml<pre><code>[project]\nname = \"uv-aws-lambda-example\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.13\"\ndependencies = [\n# FastAPI is a modern web framework for building APIs with Python.\n\"fastapi\",\n# A local library.\n\"library\",\n# Mangum is a library that adapts ASGI applications to AWS Lambda and API Gateway.\n\"mangum\",\n]\n[dependency-groups]\ndev = [\n# In development mode, include the FastAPI development server.\n\"fastapi[standard]\",\n]\n[tool.uv.workspace]\nmembers = [\"library\"]\n[tool.uv.sources]\nlib = { workspace = true }\n</code></pre> <p>By default, <code>uv init --lib</code> will create a package that exports a <code>hello</code> function. We'll modify the application source code to call that function:</p> app/main.py<pre><code>import logging\nfrom fastapi import FastAPI\nfrom mangum import Mangum\nfrom library import hello\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\napp = FastAPI()\nhandler = Mangum(app)\n@app.get(\"/\")\nasync def root() -&gt; str:\nreturn hello()\n</code></pre> <p>We can run the modified application locally with:</p> <pre><code>$ uv run fastapi dev\n</code></pre> <p>And confirm that opening http://127.0.0.1:8000/ in a web browser displays, \"Hello from library!\" (instead of \"Hello, World!\")</p> <p>Finally, we'll update the Dockerfile to include the local library in the deployment package:</p> Dockerfile<pre><code>FROM ghcr.io/astral-sh/uv:0.9.6 AS uv\n# First, bundle the dependencies into the task root.\nFROM public.ecr.aws/lambda/python:3.13 AS builder\n# Enable bytecode compilation, to improve cold-start performance.\nENV UV_COMPILE_BYTECODE=1\n# Disable installer metadata, to create a deterministic layer.\nENV UV_NO_INSTALLER_METADATA=1\n# Enable copy mode to support bind mount caching.\nENV UV_LINK_MODE=copy\n\n# Bundle the dependencies into the Lambda task root via `uv pip install --target`.\n#\n# Omit any local packages (`--no-emit-workspace`) and development dependencies (`--no-dev`).\n# This ensures that the Docker layer cache is only invalidated when the `pyproject.toml` or `uv.lock`\n# files change, but remains robust to changes in the application code.\nRUN --mount=from=uv,source=/uv,target=/bin/uv \\\n--mount=type=cache,target=/root/.cache/uv \\\n--mount=type=bind,source=uv.lock,target=uv.lock \\\n--mount=type=bind,source=pyproject.toml,target=pyproject.toml \\\nuv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt &amp;&amp; \\\nuv pip install -r requirements.txt --target \"${LAMBDA_TASK_ROOT}\"\n# If you have a workspace, copy it over and install it too.\n#\n# By omitting `--no-emit-workspace`, `library` will be copied into the task root. Using a separate\n# `RUN` command ensures that all third-party dependencies are cached separately and remain\n# robust to changes in the workspace.\nRUN --mount=from=uv,source=/uv,target=/bin/uv \\\n--mount=type=cache,target=/root/.cache/uv \\\n--mount=type=bind,source=uv.lock,target=uv.lock \\\n--mount=type=bind,source=pyproject.toml,target=pyproject.toml \\\n--mount=type=bind,source=library,target=library \\\nuv export --frozen --no-dev --no-editable -o requirements.txt &amp;&amp; \\\nuv pip install -r requirements.txt --target \"${LAMBDA_TASK_ROOT}\"\nFROM public.ecr.aws/lambda/python:3.13\n# Copy the runtime dependencies from the builder stage.\nCOPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}\n# Copy the application code.\nCOPY ./app ${LAMBDA_TASK_ROOT}/app\n\n# Set the AWS Lambda handler.\nCMD [\"app.main.handler\"]\n</code></pre> <p>Tip</p> <p>To deploy to ARM-based AWS Lambda runtimes, replace <code>public.ecr.aws/lambda/python:3.13</code> with <code>public.ecr.aws/lambda/python:3.13-arm64</code>.</p> <p>From there, we can build and deploy the updated image as before.</p>"},{"location":"guides/integration/aws-lambda/#deploying-a-zip-archive","title":"Deploying a zip archive","text":"<p>AWS Lambda also supports deployment via zip archives. For simple applications, zip archives can be a more straightforward and efficient deployment method than Docker images; however, zip archives are limited to 250 MB in size.</p> <p>Returning to the FastAPI example, we can bundle the application dependencies into a local directory for AWS Lambda via:</p> <pre><code>$ uv export --frozen --no-dev --no-editable -o requirements.txt\n$ uv pip install \\\n--no-installer-metadata \\\n--no-compile-bytecode \\\n--python-platform x86_64-manylinux2014 \\\n--python 3.13 \\\n--target packages \\\n-r requirements.txt\n</code></pre> <p>Tip</p> <p>To deploy to ARM-based AWS Lambda runtimes, replace <code>x86_64-manylinux2014</code> with <code>aarch64-manylinux2014</code>.</p> <p>Following the AWS Lambda documentation, we can then bundle these dependencies into a zip as follows:</p> <pre><code>$ cd packages\n$ zip -r ../package.zip .\n$ cd ..\n</code></pre> <p>Finally, we can add the application code to the zip archive:</p> <pre><code>$ zip -r package.zip app\n</code></pre> <p>We can then deploy the zip archive to AWS Lambda via the AWS Management Console or the AWS CLI, e.g.:</p> <pre><code>$ aws lambda create-function \\\n--function-name myFunction \\\n--runtime python3.13 \\\n--zip-file fileb://package.zip \\\n--handler app.main.handler \\\n--role arn:aws:iam::111122223333:role/service-role/my-lambda-role\n</code></pre> <p>Where the execution role is created via:</p> <pre><code>$ aws iam create-role \\\n--role-name my-lambda-role \\\n--assume-role-policy-document '{\"Version\": \"2012-10-17\", \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": {\"Service\": \"lambda.amazonaws.com\"}, \"Action\": \"sts:AssumeRole\"}]}'\n</code></pre> <p>Or, update an existing function with:</p> <pre><code>$ aws lambda update-function-code \\\n--function-name myFunction \\\n--zip-file fileb://package.zip\n</code></pre> <p>Note</p> <p>By default, the AWS Management Console assumes a Lambda entrypoint of <code>lambda_function.lambda_handler</code>. If your application uses a different entrypoint, you'll need to modify it in the AWS Management Console. For example, the above FastAPI application uses <code>app.main.handler</code>.</p> <p>To test the Lambda, we can invoke it via the AWS Management Console or the AWS CLI, e.g.:</p> <pre><code>$ aws lambda invoke \\\n--function-name myFunction \\\n--payload file://event.json \\\n--cli-binary-format raw-in-base64-out \\\nresponse.json\n{\n  \"StatusCode\": 200,\n  \"ExecutedVersion\": \"$LATEST\"\n}\n</code></pre> <p>Where <code>event.json</code> contains the event payload to pass to the Lambda function:</p> event.json<pre><code>{\n\"httpMethod\": \"GET\",\n\"path\": \"/\",\n\"requestContext\": {},\n\"version\": \"1.0\"\n}\n</code></pre> <p>And <code>response.json</code> contains the response from the Lambda function:</p> response.json<pre><code>{\n\"statusCode\": 200,\n\"headers\": {\n\"content-length\": \"14\",\n\"content-type\": \"application/json\"\n},\n\"multiValueHeaders\": {},\n\"body\": \"\\\"Hello, world!\\\"\",\n\"isBase64Encoded\": false\n}\n</code></pre>"},{"location":"guides/integration/aws-lambda/#using-a-lambda-layer","title":"Using a Lambda layer","text":"<p>AWS Lambda also supports the deployment of multiple composed Lambda layers when working with zip archives. These layers are conceptually similar to layers in a Docker image, allowing you to separate application code from dependencies.</p> <p>In particular, we can create a lambda layer for application dependencies and attach it to the Lambda function, separate from the application code itself. This setup can improve cold-start performance for application updates, as the dependencies layer can be reused across deployments.</p> <p>To create a Lambda layer, we'll follow similar steps, but create two separate zip archives: one for the application code and one for the application dependencies.</p> <p>First, we'll create the dependency layer. Lambda layers are expected to follow a slightly different structure, so we'll use <code>--prefix</code> rather than <code>--target</code>:</p> <pre><code>$ uv export --frozen --no-dev --no-editable -o requirements.txt\n$ uv pip install \\\n--no-installer-metadata \\\n--no-compile-bytecode \\\n--python-platform x86_64-manylinux2014 \\\n--python 3.13 \\\n--prefix packages \\\n-r requirements.txt\n</code></pre> <p>We'll then zip the dependencies in adherence with the expected layout for Lambda layers:</p> <pre><code>$ mkdir python\n$ cp -r packages/lib python/\n$ zip -r layer_content.zip python\n</code></pre> <p>Tip</p> <p>To generate deterministic zip archives, consider passing the <code>-X</code> flag to <code>zip</code> to exclude extended attributes and file system metadata.</p> <p>And publish the Lambda layer:</p> <pre><code>$ aws lambda publish-layer-version --layer-name dependencies-layer \\\n--zip-file fileb://layer_content.zip \\\n--compatible-runtimes python3.13 \\\n--compatible-architectures \"x86_64\"\n</code></pre> <p>We can then create the Lambda function as in the previous example, omitting the dependencies:</p> <pre><code>$ # Zip the application code.\n$ zip -r app.zip app\n\n$ # Create the Lambda function.\n$ aws lambda create-function \\\n--function-name myFunction \\\n--runtime python3.13 \\\n--zip-file fileb://app.zip \\\n--handler app.main.handler \\\n--role arn:aws:iam::111122223333:role/service-role/my-lambda-role\n</code></pre> <p>Finally, we can attach the dependencies layer to the Lambda function, using the ARN returned by the <code>publish-layer-version</code> step:</p> <pre><code>$ aws lambda update-function-configuration --function-name myFunction \\\n--cli-binary-format raw-in-base64-out \\\n--layers \"arn:aws:lambda:region:111122223333:layer:dependencies-layer:1\"\n</code></pre> <p>When the application dependencies change, the layer can be updated independently of the application by republishing the layer and updating the Lambda function configuration:</p> <pre><code>$ # Update the dependencies in the layer.\n$ aws lambda publish-layer-version --layer-name dependencies-layer \\\n--zip-file fileb://layer_content.zip \\\n--compatible-runtimes python3.13 \\\n--compatible-architectures \"x86_64\"\n$ # Update the Lambda function configuration.\n$ aws lambda update-function-configuration --function-name myFunction \\\n--cli-binary-format raw-in-base64-out \\\n--layers \"arn:aws:lambda:region:111122223333:layer:dependencies-layer:2\"\n</code></pre>"},{"location":"guides/integration/coiled/","title":"Using uv with Coiled","text":"<p>Coiled is a serverless, UX-focused cloud computing platform that makes it easy to run code on cloud hardware (AWS, GCP, and Azure).</p> <p>This guide shows how to run Python scripts on the cloud using uv for dependency management and Coiled for cloud deployment.</p>"},{"location":"guides/integration/coiled/#managing-script-dependencies-with-uv","title":"Managing script dependencies with uv","text":"<p>Note</p> <p>We'll use this concrete example throughout this guide, but any Python script can be used with uv and Coiled.</p> <p>We'll use the following script as an example:</p> process.py<pre><code># /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = [\n#   \"pandas\",\n#   \"pyarrow\",\n#   \"s3fs\",\n# ]\n# ///\nimport pandas as pd\ndf = pd.read_parquet(\n\"s3://coiled-data/uber/part.0.parquet\",\nstorage_options={\"anon\": True},\n)\nprint(df.head())\n</code></pre> <p>The script uses <code>pandas</code> to load a Parquet file hosted in a public bucket on S3, then prints the first few rows. It uses inline script metadata to enumerate its dependencies.</p> <p>When running this script locally, e.g., with:</p> <pre><code>$ uv run process.py\n</code></pre> <p>uv will automatically create a virtual environment and installs its dependencies.</p> <p>To learn more about using inline script metadata with uv, see the script guide.</p>"},{"location":"guides/integration/coiled/#running-scripts-on-the-cloud-with-coiled","title":"Running scripts on the cloud with Coiled","text":"<p>Using inline script metadata makes the script fully self-contained: it includes the information that is needed to run it. This makes it easier to run on other machines, like a machine in the cloud.</p> <p>There are many use cases where resources beyond what's available on a local workstation are needed, e.g.:</p> <ul> <li>Processing large amounts of cloud-hosted data</li> <li>Needing accelerated hardware like GPUs or a big machine with more memory</li> <li>Running the same script with hundreds or thousands of different inputs, in parallel</li> </ul> <p>Coiled makes it simple to run code on cloud hardware.</p> <p>First, authenticate with Coiled using <code>coiled login</code> :</p> <pre><code>$ uvx coiled login\n</code></pre> <p>You'll be prompted to create a Coiled account if you don't already have one \u2014 it's free to start using Coiled.</p> <p>To instruct Coiled to run the script on a virtual machine on AWS, add two comments to the top:</p> process.py<pre><code># COILED container ghcr.io/astral-sh/uv:debian-slim\n# COILED region us-east-2\n# /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = [\n#   \"pandas\",\n#   \"pyarrow\",\n#   \"s3fs\",\n# ]\n# ///\nimport pandas as pd\ndf = pd.read_parquet(\n\"s3://coiled-data/uber/part.0.parquet\",\nstorage_options={\"anon\": True},\n)\nprint(df.head())\n</code></pre> <p>Tip</p> <p>While Coiled supports AWS, GCP, and Azure, this example assumes AWS is being used (see the <code>region</code> option above). If you're new to Coiled, you'll automatically have access to a free account running on AWS. If you're not running on AWS, you can either use a valid <code>region</code> for your cloud provider or remove the <code>region</code> line above.</p> <p>The comments tell Coiled to use the official uv Docker image when running the script (ensuring uv is available) and to run in the <code>us-east-2</code> region on AWS (where this example data file happens to live) to avoid any data egress.</p> <p>To submit a batch job for Coiled to run, use <code>coiled batch run</code> to execute the <code>uv run</code> command in the cloud:</p> <pre><code>$ uvx coiled batch run \\\nuv run process.py\n</code></pre> <p>The same process that previously ran locally is now running on a remote cloud VM on AWS.</p> <p>You can monitor the progress of the batch job in the UI at cloud.coiled.io or from the terminal using the <code>coiled batch status</code>, <code>coiled batch wait</code>, and <code>coiled batch logs</code> commands.</p> <p></p> <p>Note there's additional configuration we could have specified, e.g., the instance type (the default is a 4-core virtual machine with 16 GiB of memory), disk size, whether to use spot instance, and more. See the Coiled Batch documentation for more details.</p> <p>For more details on Coiled, and how it can help with other use cases, see the Coiled documentation.</p>"},{"location":"guides/integration/dependency-bots/","title":"Dependency bots","text":"<p>It is considered best practice to regularly update dependencies, to avoid being exposed to vulnerabilities, limit incompatibilities between dependencies, and avoid complex upgrades when upgrading from a too old version. A variety of tools can help staying up-to-date by creating automated pull requests. Several of them support uv, or have work underway to support it.</p>"},{"location":"guides/integration/dependency-bots/#renovate","title":"Renovate","text":"<p>uv is supported by Renovate.</p>"},{"location":"guides/integration/dependency-bots/#uvlock-output","title":"<code>uv.lock</code> output","text":"<p>Renovate uses the presence of a <code>uv.lock</code> file to determine that uv is used for managing dependencies, and will suggest upgrades to project dependencies, optional dependencies and development dependencies. Renovate will update both the <code>pyproject.toml</code> and <code>uv.lock</code> files.</p> <p>The lockfile can also be refreshed on a regular basis (for instance to update transitive dependencies) by enabling the <code>lockFileMaintenance</code> option:</p> renovate.json5<pre><code>{\n$schema: \"https://docs.renovatebot.com/renovate-schema.json\",\nlockFileMaintenance: {\nenabled: true,\n},\n}\n</code></pre>"},{"location":"guides/integration/dependency-bots/#inline-script-metadata","title":"Inline script metadata","text":"<p>Renovate supports updating dependencies defined using script inline metadata.</p> <p>Since it cannot automatically detect which Python files use script inline metadata, their locations need to be explicitly defined using <code>fileMatch</code>, like so:</p> renovate.json5<pre><code>{\n$schema: \"https://docs.renovatebot.com/renovate-schema.json\",\npep723: {\nfileMatch: [\n\"scripts/generate_docs\\\\.py\",\n\"scripts/run_server\\\\.py\",\n],\n},\n}\n</code></pre>"},{"location":"guides/integration/dependency-bots/#dependabot","title":"Dependabot","text":"<p>Dependabot has announced support for uv, but there are some use cases that are not yet working. See astral-sh/uv#2512 for updates.</p> <p>Dependabot supports updating <code>uv.lock</code> files. To enable it, add the uv <code>package-ecosystem</code> to your <code>updates</code> list in the <code>dependabot.yml</code>:</p> dependabot.yml<pre><code>version: 2\nupdates:\n- package-ecosystem: \"uv\"\ndirectory: \"/\"\nschedule:\ninterval: \"weekly\"\n</code></pre>"},{"location":"guides/integration/docker/","title":"Using uv in Docker","text":""},{"location":"guides/integration/docker/#getting-started","title":"Getting started","text":"<p>Tip</p> <p>Check out the <code>uv-docker-example</code> project for an example of best practices when using uv to build an application in Docker.</p> <p>uv provides both distroless Docker images, which are useful for copying uv binaries into your own image builds, and images derived from popular base images, which are useful for using uv in a container. The distroless images do not contain anything but the uv binaries. In contrast, the derived images include an operating system with uv pre-installed.</p> <p>As an example, to run uv in a container using a Debian-based image:</p> <pre><code>$ docker run --rm -it ghcr.io/astral-sh/uv:debian uv --help\n</code></pre>"},{"location":"guides/integration/docker/#available-images","title":"Available images","text":"<p>The following distroless images are available:</p> <ul> <li><code>ghcr.io/astral-sh/uv:latest</code></li> <li><code>ghcr.io/astral-sh/uv:{major}.{minor}.{patch}</code>, e.g., <code>ghcr.io/astral-sh/uv:0.9.6</code></li> <li><code>ghcr.io/astral-sh/uv:{major}.{minor}</code>, e.g., <code>ghcr.io/astral-sh/uv:0.8</code> (the latest patch   version)</li> </ul> <p>And the following derived images are available:</p> <ul> <li>Based on <code>alpine:3.22</code>:<ul> <li><code>ghcr.io/astral-sh/uv:alpine</code></li> <li><code>ghcr.io/astral-sh/uv:alpine3.22</code></li> </ul> </li> <li>Based on <code>alpine:3.21</code>:<ul> <li><code>ghcr.io/astral-sh/uv:alpine3.21</code></li> </ul> </li> <li>Based on <code>debian:trixie-slim</code>:<ul> <li><code>ghcr.io/astral-sh/uv:debian-slim</code></li> <li><code>ghcr.io/astral-sh/uv:trixie-slim</code></li> </ul> </li> <li>Based on <code>debian:bookworm-slim</code>:<ul> <li><code>ghcr.io/astral-sh/uv:bookworm-slim</code></li> </ul> </li> <li>Based on <code>buildpack-deps:trixie</code>:<ul> <li><code>ghcr.io/astral-sh/uv:debian</code></li> <li><code>ghcr.io/astral-sh/uv:trixie</code></li> </ul> </li> <li>Based on <code>buildpack-deps:bookworm</code>:<ul> <li><code>ghcr.io/astral-sh/uv:bookworm</code></li> </ul> </li> <li>Based on <code>python3.x-alpine</code>:<ul> <li><code>ghcr.io/astral-sh/uv:python3.14-alpine</code></li> <li><code>ghcr.io/astral-sh/uv:python3.13-alpine</code></li> <li><code>ghcr.io/astral-sh/uv:python3.12-alpine</code></li> <li><code>ghcr.io/astral-sh/uv:python3.11-alpine</code></li> <li><code>ghcr.io/astral-sh/uv:python3.10-alpine</code></li> <li><code>ghcr.io/astral-sh/uv:python3.9-alpine</code></li> <li><code>ghcr.io/astral-sh/uv:python3.8-alpine</code></li> </ul> </li> <li>Based on <code>python3.x-trixie</code>:<ul> <li><code>ghcr.io/astral-sh/uv:python3.14-trixie</code></li> <li><code>ghcr.io/astral-sh/uv:python3.13-trixie</code></li> <li><code>ghcr.io/astral-sh/uv:python3.12-trixie</code></li> <li><code>ghcr.io/astral-sh/uv:python3.11-trixie</code></li> <li><code>ghcr.io/astral-sh/uv:python3.10-trixie</code></li> <li><code>ghcr.io/astral-sh/uv:python3.9-trixie</code></li> </ul> </li> <li>Based on <code>python3.x-slim-trixie</code>:<ul> <li><code>ghcr.io/astral-sh/uv:python3.14-trixie-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.13-trixie-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.12-trixie-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.11-trixie-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.10-trixie-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.9-trixie-slim</code></li> </ul> </li> <li>Based on <code>python3.x-bookworm</code>:<ul> <li><code>ghcr.io/astral-sh/uv:python3.14-bookworm</code></li> <li><code>ghcr.io/astral-sh/uv:python3.13-bookworm</code></li> <li><code>ghcr.io/astral-sh/uv:python3.12-bookworm</code></li> <li><code>ghcr.io/astral-sh/uv:python3.11-bookworm</code></li> <li><code>ghcr.io/astral-sh/uv:python3.10-bookworm</code></li> <li><code>ghcr.io/astral-sh/uv:python3.9-bookworm</code></li> <li><code>ghcr.io/astral-sh/uv:python3.8-bookworm</code></li> </ul> </li> <li>Based on <code>python3.x-slim-bookworm</code>:<ul> <li><code>ghcr.io/astral-sh/uv:python3.14-bookworm-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.13-bookworm-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.12-bookworm-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.11-bookworm-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.10-bookworm-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.9-bookworm-slim</code></li> <li><code>ghcr.io/astral-sh/uv:python3.8-bookworm-slim</code></li> </ul> </li> </ul> <p>As with the distroless image, each derived image is published with uv version tags as <code>ghcr.io/astral-sh/uv:{major}.{minor}.{patch}-{base}</code> and <code>ghcr.io/astral-sh/uv:{major}.{minor}-{base}</code>, e.g., <code>ghcr.io/astral-sh/uv:0.9.6-alpine</code>.</p> <p>In addition, starting with <code>0.8</code> each derived image also sets <code>UV_TOOL_BIN_DIR</code> to <code>/usr/local/bin</code> to allow <code>uv tool install</code> to work as expected with the default user.</p> <p>For more details, see the GitHub Container page.</p>"},{"location":"guides/integration/docker/#installing-uv","title":"Installing uv","text":"<p>Use one of the above images with uv pre-installed or install uv by copying the binary from the official distroless Docker image:</p> Dockerfile<pre><code>FROM python:3.12-slim-trixie\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/\n</code></pre> <p>Or, with the installer:</p> Dockerfile<pre><code>FROM python:3.12-slim-trixie\n# The installer requires curl (and certificates) to download the release archive\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends curl ca-certificates\n\n# Download the latest installer\nADD https://astral.sh/uv/install.sh /uv-installer.sh\n\n# Run the installer then remove it\nRUN sh /uv-installer.sh &amp;&amp; rm /uv-installer.sh\n\n# Ensure the installed binary is on the `PATH`\nENV PATH=\"/root/.local/bin/:$PATH\"\n</code></pre> <p>Note this requires <code>curl</code> to be available.</p> <p>In either case, it is best practice to pin to a specific uv version, e.g., with:</p> <pre><code>COPY --from=ghcr.io/astral-sh/uv:0.9.6 /uv /uvx /bin/\n</code></pre> <p>Tip</p> <p>While the Dockerfile example above pins to a specific tag, it's also possible to pin a specific SHA256. Pinning a specific SHA256 is considered best practice in environments that require reproducible builds as tags can be moved across different commit SHAs.</p> <pre><code># e.g., using a hash from a previous release\nCOPY --from=ghcr.io/astral-sh/uv@sha256:2381d6aa60c326b71fd40023f921a0a3b8f91b14d5db6b90402e65a635053709 /uv /uvx /bin/\n</code></pre> <p>Or, with the installer:</p> <pre><code>ADD https://astral.sh/uv/0.9.6/install.sh /uv-installer.sh\n</code></pre>"},{"location":"guides/integration/docker/#installing-a-project","title":"Installing a project","text":"<p>If you're using uv to manage your project, you can copy it into the image and install it:</p> Dockerfile<pre><code># Copy the project into the image\nADD . /app\n\n# Sync the project into a new environment, asserting the lockfile is up to date\nWORKDIR /app\nRUN uv sync --locked\n</code></pre> <p>Important</p> <p>It is best practice to add <code>.venv</code> to a <code>.dockerignore</code> file in your repository to prevent it from being included in image builds. The project virtual environment is dependent on your local platform and should be created from scratch in the image.</p> <p>Then, to start your application by default:</p> Dockerfile<pre><code># Presuming there is a `my_app` command provided by the project\nCMD [\"uv\", \"run\", \"my_app\"]\n</code></pre> <p>Tip</p> <p>It is best practice to use intermediate layers separating installation of dependencies and the project itself to improve Docker image build times.</p> <p>See a complete example in the <code>uv-docker-example</code> project.</p>"},{"location":"guides/integration/docker/#using-the-environment","title":"Using the environment","text":"<p>Once the project is installed, you can either activate the project virtual environment by placing its binary directory at the front of the path:</p> Dockerfile<pre><code>ENV PATH=\"/app/.venv/bin:$PATH\"\n</code></pre> <p>Or, you can use <code>uv run</code> for any commands that require the environment:</p> Dockerfile<pre><code>RUN uv run some_script.py\n</code></pre> <p>Tip</p> <p>Alternatively, the <code>UV_PROJECT_ENVIRONMENT</code> setting can be set before syncing to install to the system Python environment and skip environment activation entirely.</p>"},{"location":"guides/integration/docker/#using-installed-tools","title":"Using installed tools","text":"<p>To use installed tools, ensure the tool bin directory is on the path:</p> Dockerfile<pre><code>ENV PATH=/root/.local/bin:$PATH\nRUN uv tool install cowsay\n</code></pre> <pre><code>$ docker run -it $(docker build -q .) /bin/bash -c \"cowsay -t hello\"\n  _____\n| hello |\n  =====\n     \\\n      \\\n        ^__^\n        (oo)\\_______\n        (__)\\       )\\/\\\n            ||----w |\n            ||     ||\n</code></pre> <p>Note</p> <p>The tool bin directory's location can be determined by running the <code>uv tool dir --bin</code> command in the container.</p> <p>Alternatively, it can be set to a constant location:</p> Dockerfile<pre><code>ENV UV_TOOL_BIN_DIR=/opt/uv-bin/\n</code></pre>"},{"location":"guides/integration/docker/#installing-python-in-arm-musl-images","title":"Installing Python in ARM musl images","text":"<p>While uv will attempt to install a compatible Python version if no such version is available in the image, uv does not yet support installing Python for musl Linux on ARM. For example, if you are using an Alpine Linux base image on an ARM machine, you may need to add it with the system package manager:</p> <pre><code>apk add --no-cache python3~=3.12\n</code></pre>"},{"location":"guides/integration/docker/#developing-in-a-container","title":"Developing in a container","text":"<p>When developing, it's useful to mount the project directory into a container. With this setup, changes to the project can be immediately reflected in a containerized service without rebuilding the image. However, it is important not to include the project virtual environment (<code>.venv</code>) in the mount, because the virtual environment is platform specific and the one built for the image should be kept.</p>"},{"location":"guides/integration/docker/#mounting-the-project-with-docker-run","title":"Mounting the project with <code>docker run</code>","text":"<p>Bind mount the project (in the working directory) to <code>/app</code> while retaining the <code>.venv</code> directory with an anonymous volume:</p> <pre><code>$ docker run --rm --volume .:/app --volume /app/.venv [...]\n</code></pre> <p>Tip</p> <p>The <code>--rm</code> flag is included to ensure the container and anonymous volume are cleaned up when the container exits.</p> <p>See a complete example in the <code>uv-docker-example</code> project.</p>"},{"location":"guides/integration/docker/#configuring-watch-with-docker-compose","title":"Configuring <code>watch</code> with <code>docker compose</code>","text":"<p>When using Docker compose, more sophisticated tooling is available for container development. The <code>watch</code> option allows for greater granularity than is practical with a bind mount and supports triggering updates to the containerized service when files change.</p> <p>Note</p> <p>This feature requires Compose 2.22.0 which is bundled with Docker Desktop 4.24.</p> <p>Configure <code>watch</code> in your Docker compose file to mount the project directory without syncing the project virtual environment and to rebuild the image when the configuration changes:</p> compose.yaml<pre><code>services:\nexample:\nbuild: .\n# ...\ndevelop:\n# Create a `watch` configuration to update the app\n#\nwatch:\n# Sync the working directory with the `/app` directory in the container\n- action: sync\npath: .\ntarget: /app\n# Exclude the project virtual environment\nignore:\n- .venv/\n# Rebuild the image on changes to the `pyproject.toml`\n- action: rebuild\npath: ./pyproject.toml\n</code></pre> <p>Then, run <code>docker compose watch</code> to run the container with the development setup.</p> <p>See a complete example in the <code>uv-docker-example</code> project.</p>"},{"location":"guides/integration/docker/#optimizations","title":"Optimizations","text":""},{"location":"guides/integration/docker/#compiling-bytecode","title":"Compiling bytecode","text":"<p>Compiling Python source files to bytecode is typically desirable for production images as it tends to improve startup time (at the cost of increased installation time).</p> <p>To enable bytecode compilation, use the <code>--compile-bytecode</code> flag:</p> Dockerfile<pre><code>RUN uv sync --compile-bytecode\n</code></pre> <p>Alternatively, you can set the <code>UV_COMPILE_BYTECODE</code> environment variable to ensure that all commands within the Dockerfile compile bytecode:</p> Dockerfile<pre><code>ENV UV_COMPILE_BYTECODE=1\n</code></pre>"},{"location":"guides/integration/docker/#caching","title":"Caching","text":"<p>A cache mount can be used to improve performance across builds:</p> Dockerfile<pre><code>ENV UV_LINK_MODE=copy\n\nRUN --mount=type=cache,target=/root/.cache/uv \\\nuv sync\n</code></pre> <p>Changing the default <code>UV_LINK_MODE</code> silences warnings about not being able to use hard links since the cache and sync target are on separate file systems.</p> <p>If you're not mounting the cache, image size can be reduced by using the <code>--no-cache</code> flag or setting <code>UV_NO_CACHE</code>.</p> <p>By default, managed Python installations are not cached before being installed. Setting <code>UV_PYTHON_CACHE_DIR</code> can be used in combination with a cache mount:</p> Dockerfile<pre><code>ENV UV_PYTHON_CACHE_DIR=/root/.cache/uv/python\n\nRUN --mount=type=cache,target=/root/.cache/uv \\\nuv python install\n</code></pre> <p>Note</p> <p>The cache directory's location can be determined by running the <code>uv cache dir</code> command in the container.</p> <p>Alternatively, the cache can be set to a constant location:</p> Dockerfile<pre><code>ENV UV_CACHE_DIR=/opt/uv-cache/\n</code></pre>"},{"location":"guides/integration/docker/#intermediate-layers","title":"Intermediate layers","text":"<p>If you're using uv to manage your project, you can improve build times by moving your transitive dependency installation into its own layer via the <code>--no-install</code> options.</p> <p><code>uv sync --no-install-project</code> will install the dependencies of the project but not the project itself. Since the project changes frequently, but its dependencies are generally static, this can be a big time saver.</p> Dockerfile<pre><code># Install uv\nFROM python:3.12-slim\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/\n\n# Change the working directory to the `app` directory\nWORKDIR /app\n# Install dependencies\nRUN --mount=type=cache,target=/root/.cache/uv \\\n--mount=type=bind,source=uv.lock,target=uv.lock \\\n--mount=type=bind,source=pyproject.toml,target=pyproject.toml \\\nuv sync --locked --no-install-project\n\n# Copy the project into the image\nADD . /app\n\n# Sync the project\nRUN --mount=type=cache,target=/root/.cache/uv \\\nuv sync --locked\n</code></pre> <p>Note that the <code>pyproject.toml</code> is required to identify the project root and name, but the project contents are not copied into the image until the final <code>uv sync</code> command.</p> <p>Tip</p> <p>If you're using a workspace, then use the <code>--no-install-workspace</code> flag which excludes the project and any workspace members.</p> <p>If you want to remove specific packages from the sync, use <code>--no-install-package &lt;name&gt;</code>.</p>"},{"location":"guides/integration/docker/#non-editable-installs","title":"Non-editable installs","text":"<p>By default, uv installs projects and workspace members in editable mode, such that changes to the source code are immediately reflected in the environment.</p> <p><code>uv sync</code> and <code>uv run</code> both accept a <code>--no-editable</code> flag, which instructs uv to install the project in non-editable mode, removing any dependency on the source code.</p> <p>In the context of a multi-stage Docker image, <code>--no-editable</code> can be used to include the project in the synced virtual environment from one stage, then copy the virtual environment alone (and not the source code) into the final image.</p> <p>For example:</p> Dockerfile<pre><code># Install uv\nFROM python:3.12-slim AS builder\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/\n\n# Change the working directory to the `app` directory\nWORKDIR /app\n# Install dependencies\nRUN --mount=type=cache,target=/root/.cache/uv \\\n--mount=type=bind,source=uv.lock,target=uv.lock \\\n--mount=type=bind,source=pyproject.toml,target=pyproject.toml \\\nuv sync --locked --no-install-project --no-editable\n\n# Copy the project into the intermediate image\nADD . /app\n\n# Sync the project\nRUN --mount=type=cache,target=/root/.cache/uv \\\nuv sync --locked --no-editable\n\nFROM python:3.12-slim\n# Copy the environment, but not the source code\nCOPY --from=builder --chown=app:app /app/.venv /app/.venv\n\n# Run the application\nCMD [\"/app/.venv/bin/hello\"]\n</code></pre>"},{"location":"guides/integration/docker/#using-uv-temporarily","title":"Using uv temporarily","text":"<p>If uv isn't needed in the final image, the binary can be mounted in each invocation:</p> Dockerfile<pre><code>RUN --mount=from=ghcr.io/astral-sh/uv,source=/uv,target=/bin/uv \\\nuv sync\n</code></pre>"},{"location":"guides/integration/docker/#using-the-pip-interface","title":"Using the pip interface","text":""},{"location":"guides/integration/docker/#installing-a-package","title":"Installing a package","text":"<p>The system Python environment is safe to use this context, since a container is already isolated. The <code>--system</code> flag can be used to install in the system environment:</p> Dockerfile<pre><code>RUN uv pip install --system ruff\n</code></pre> <p>To use the system Python environment by default, set the <code>UV_SYSTEM_PYTHON</code> variable:</p> Dockerfile<pre><code>ENV UV_SYSTEM_PYTHON=1\n</code></pre> <p>Alternatively, a virtual environment can be created and activated:</p> Dockerfile<pre><code>RUN uv venv /opt/venv\n# Use the virtual environment automatically\nENV VIRTUAL_ENV=/opt/venv\n# Place entry points in the environment at the front of the path\nENV PATH=\"/opt/venv/bin:$PATH\"\n</code></pre> <p>When using a virtual environment, the <code>--system</code> flag should be omitted from uv invocations:</p> Dockerfile<pre><code>RUN uv pip install ruff\n</code></pre>"},{"location":"guides/integration/docker/#installing-requirements","title":"Installing requirements","text":"<p>To install requirements files, copy them into the container:</p> Dockerfile<pre><code>COPY requirements.txt .\nRUN uv pip install -r requirements.txt\n</code></pre>"},{"location":"guides/integration/docker/#installing-a-project_1","title":"Installing a project","text":"<p>When installing a project alongside requirements, it is best practice to separate copying the requirements from the rest of the source code. This allows the dependencies of the project (which do not change often) to be cached separately from the project itself (which changes very frequently).</p> Dockerfile<pre><code>COPY pyproject.toml .\nRUN uv pip install -r pyproject.toml\nCOPY . .\nRUN uv pip install -e .\n</code></pre>"},{"location":"guides/integration/docker/#verifying-image-provenance","title":"Verifying image provenance","text":"<p>The Docker images are signed during the build process to provide proof of their origin. These attestations can be used to verify that an image was produced from an official channel.</p> <p>For example, you can verify the attestations with the GitHub CLI tool <code>gh</code>:</p> <pre><code>$ gh attestation verify --owner astral-sh oci://ghcr.io/astral-sh/uv:latest\nLoaded digest sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx for oci://ghcr.io/astral-sh/uv:latest\nLoaded 1 attestation from GitHub API\nThe following policy criteria will be enforced:\n- OIDC Issuer must match:................... https://token.actions.githubusercontent.com\n- Source Repository Owner URI must match:... https://github.com/astral-sh\n- Predicate type must match:................ https://slsa.dev/provenance/v1\n- Subject Alternative Name must match regex: (?i)^https://github.com/astral-sh/\n\u2713 Verification succeeded!\nsha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx was attested by:\nREPO          PREDICATE_TYPE                  WORKFLOW\nastral-sh/uv  https://slsa.dev/provenance/v1  .github/workflows/build-docker.yml@refs/heads/main\n</code></pre> <p>This tells you that the specific Docker image was built by the official uv GitHub release workflow and hasn't been tampered with since.</p> <p>GitHub attestations build on the sigstore.dev infrastructure. As such you can also use the <code>cosign</code> command to verify the attestation blob against the (multi-platform) manifest for <code>uv</code>:</p> <pre><code>$ REPO=astral-sh/uv\n$ gh attestation download --repo $REPO oci://ghcr.io/${REPO}:latest\nWrote attestations to file sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.jsonl.\nAny previous content has been overwritten\nThe trusted metadata is now available at sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.jsonl\n$ docker buildx imagetools inspect ghcr.io/${REPO}:latest --format \"{{json .Manifest}}\" &gt; manifest.json\n$ cosign verify-blob-attestation \\\n--new-bundle-format \\\n--bundle \"$(jq -r .digest manifest.json).jsonl\"  \\\n--certificate-oidc-issuer=\"https://token.actions.githubusercontent.com\" \\\n--certificate-identity-regexp=\"^https://github\\.com/${REPO}/.*\" \\\n&lt;(jq -j '.|del(.digest,.size)' manifest.json)\nVerified OK\n</code></pre> <p>Tip</p> <p>These examples use <code>latest</code>, but best practice is to verify the attestation for a specific version tag, e.g., <code>ghcr.io/astral-sh/uv:0.9.6</code>, or (even better) the specific image digest, such as <code>ghcr.io/astral-sh/uv:0.5.27@sha256:5adf09a5a526f380237408032a9308000d14d5947eafa687ad6c6a2476787b4f</code>.</p>"},{"location":"guides/integration/fastapi/","title":"Using uv with FastAPI","text":"<p>FastAPI is a modern, high-performance Python web framework. You can use uv to manage your FastAPI project, including installing dependencies, managing environments, running FastAPI applications, and more.</p> <p>Note</p> <p>You can view the source code for this guide in the uv-fastapi-example repository.</p>"},{"location":"guides/integration/fastapi/#migrating-an-existing-fastapi-project","title":"Migrating an existing FastAPI project","text":"<p>As an example, consider the sample application defined in the FastAPI documentation, structured as follows:</p> <pre><code>project\n\u2514\u2500\u2500 app\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 dependencies.py\n    \u251c\u2500\u2500 routers\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 items.py\n    \u2502   \u2514\u2500\u2500 users.py\n    \u2514\u2500\u2500 internal\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 admin.py\n</code></pre> <p>To use uv with this application, inside the <code>project</code> directory run:</p> <pre><code>$ uv init --app\n</code></pre> <p>This creates a project with an application layout and a <code>pyproject.toml</code> file.</p> <p>Then, add a dependency on FastAPI:</p> <pre><code>$ uv add fastapi --extra standard\n</code></pre> <p>You should now have the following structure:</p> <pre><code>project\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 app\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 dependencies.py\n    \u251c\u2500\u2500 routers\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 items.py\n    \u2502   \u2514\u2500\u2500 users.py\n    \u2514\u2500\u2500 internal\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 admin.py\n</code></pre> <p>And the contents of the <code>pyproject.toml</code> file should look something like this:</p> pyproject.toml<pre><code>[project]\nname = \"uv-fastapi-example\"\nversion = \"0.1.0\"\ndescription = \"FastAPI project\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\n\"fastapi[standard]\",\n]\n</code></pre> <p>From there, you can run the FastAPI application with:</p> <pre><code>$ uv run fastapi dev\n</code></pre> <p><code>uv run</code> will automatically resolve and lock the project dependencies (i.e., create a <code>uv.lock</code> alongside the <code>pyproject.toml</code>), create a virtual environment, and run the command in that environment.</p> <p>Test the app by opening http://127.0.0.1:8000/?token=jessica in a web browser.</p>"},{"location":"guides/integration/fastapi/#deployment","title":"Deployment","text":"<p>To deploy the FastAPI application with Docker, you can use the following <code>Dockerfile</code>:</p> Dockerfile<pre><code>FROM python:3.12-slim\n# Install uv.\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/\n\n# Copy the application into the container.\nCOPY . /app\n\n# Install the application dependencies.\nWORKDIR /app\nRUN uv sync --frozen --no-cache\n\n# Run the application.\nCMD [\"/app/.venv/bin/fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\", \"--host\", \"0.0.0.0\"]\n</code></pre> <p>Build the Docker image with:</p> <pre><code>$ docker build -t fastapi-app .\n</code></pre> <p>Run the Docker container locally with:</p> <pre><code>$ docker run -p 8000:80 fastapi-app\n</code></pre> <p>Navigate to http://127.0.0.1:8000/?token=jessica in your browser to verify that the app is running correctly.</p> <p>Tip</p> <p>For more on using uv with Docker, see the Docker guide.</p>"},{"location":"guides/integration/github/","title":"Using uv in GitHub Actions","text":""},{"location":"guides/integration/github/#installation","title":"Installation","text":"<p>For use with GitHub Actions, we recommend the official <code>astral-sh/setup-uv</code> action, which installs uv, adds it to PATH, (optionally) persists the cache, and more, with support for all uv-supported platforms.</p> <p>To install the latest version of uv:</p> example.yml<pre><code>name: Example\njobs:\nuv-example:\nname: python\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v5\n- name: Install uv\nuses: astral-sh/setup-uv@v6\n</code></pre> <p>It is considered best practice to pin to a specific uv version, e.g., with:</p> example.yml<pre><code>name: Example\njobs:\nuv-example:\nname: python\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v5\n- name: Install uv\nuses: astral-sh/setup-uv@v6\nwith:\n# Install a specific version of uv.\nversion: \"0.9.6\"\n</code></pre>"},{"location":"guides/integration/github/#setting-up-python","title":"Setting up Python","text":"<p>Python can be installed with the <code>python install</code> command:</p> example.yml<pre><code>name: Example\njobs:\nuv-example:\nname: python\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v5\n- name: Install uv\nuses: astral-sh/setup-uv@v6\n- name: Set up Python\nrun: uv python install\n</code></pre> <p>This will respect the Python version pinned in the project.</p> <p>Alternatively, the official GitHub <code>setup-python</code> action can be used. This can be faster, because GitHub caches the Python versions alongside the runner.</p> <p>Set the <code>python-version-file</code> option to use the pinned version for the project:</p> example.yml<pre><code>name: Example\njobs:\nuv-example:\nname: python\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v5\n- name: \"Set up Python\"\nuses: actions/setup-python@v6\nwith:\npython-version-file: \".python-version\"\n- name: Install uv\nuses: astral-sh/setup-uv@v6\n</code></pre> <p>Or, specify the <code>pyproject.toml</code> file to ignore the pin and use the latest version compatible with the project's <code>requires-python</code> constraint:</p> example.yml<pre><code>name: Example\njobs:\nuv-example:\nname: python\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v5\n- name: \"Set up Python\"\nuses: actions/setup-python@v6\nwith:\npython-version-file: \"pyproject.toml\"\n- name: Install uv\nuses: astral-sh/setup-uv@v6\n</code></pre>"},{"location":"guides/integration/github/#multiple-python-versions","title":"Multiple Python versions","text":"<p>When using a matrix to test multiple Python versions, set the Python version using <code>astral-sh/setup-uv</code>, which will override the Python version specification in the <code>pyproject.toml</code> or <code>.python-version</code> files:</p> example.yml<pre><code>jobs:\nbuild:\nname: continuous-integration\nruns-on: ubuntu-latest\nstrategy:\nmatrix:\npython-version:\n- \"3.10\"\n- \"3.11\"\n- \"3.12\"\nsteps:\n- uses: actions/checkout@v5\n- name: Install uv and set the Python version\nuses: astral-sh/setup-uv@v6\nwith:\npython-version: ${{ matrix.python-version }}\n</code></pre> <p>If not using the <code>setup-uv</code> action, you can set the <code>UV_PYTHON</code> environment variable:</p> example.yml<pre><code>jobs:\nbuild:\nname: continuous-integration\nruns-on: ubuntu-latest\nstrategy:\nmatrix:\npython-version:\n- \"3.10\"\n- \"3.11\"\n- \"3.12\"\nenv:\nUV_PYTHON: ${{ matrix.python-version }}\nsteps:\n- uses: actions/checkout@v5\n</code></pre>"},{"location":"guides/integration/github/#syncing-and-running","title":"Syncing and running","text":"<p>Once uv and Python are installed, the project can be installed with <code>uv sync</code> and commands can be run in the environment with <code>uv run</code>:</p> example.yml<pre><code>name: Example\njobs:\nuv-example:\nname: python\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v5\n- name: Install uv\nuses: astral-sh/setup-uv@v6\n- name: Install the project\nrun: uv sync --locked --all-extras --dev\n- name: Run tests\n# For example, using `pytest`\nrun: uv run pytest tests\n</code></pre> <p>Tip</p> <p>The <code>UV_PROJECT_ENVIRONMENT</code> setting can be used to install to the system Python environment instead of creating a virtual environment.</p>"},{"location":"guides/integration/github/#caching","title":"Caching","text":"<p>It may improve CI times to store uv's cache across workflow runs.</p> <p>The <code>astral-sh/setup-uv</code> has built-in support for persisting the cache:</p> example.yml<pre><code>- name: Enable caching\nuses: astral-sh/setup-uv@v6\nwith:\nenable-cache: true\n</code></pre> <p>Alternatively, you can manage the cache manually with the <code>actions/cache</code> action:</p> example.yml<pre><code>jobs:\ninstall_job:\nenv:\n# Configure a constant location for the uv cache\nUV_CACHE_DIR: /tmp/.uv-cache\nsteps:\n# ... setup up Python and uv ...\n- name: Restore uv cache\nuses: actions/cache@v4\nwith:\npath: /tmp/.uv-cache\nkey: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}\nrestore-keys: |\nuv-${{ runner.os }}-${{ hashFiles('uv.lock') }}\nuv-${{ runner.os }}\n# ... install packages, run tests, etc ...\n- name: Minimize uv cache\nrun: uv cache prune --ci\n</code></pre> <p>The <code>uv cache prune --ci</code> command is used to reduce the size of the cache and is optimized for CI. Its effect on performance is dependent on the packages being installed.</p> <p>Tip</p> <p>If using <code>uv pip</code>, use <code>requirements.txt</code> instead of <code>uv.lock</code> in the cache key.</p> <p>Note</p> <p>When using non-ephemeral, self-hosted runners the default cache directory can grow unbounded. In this case, it may not be optimal to share the cache between jobs. Instead, move the cache inside the GitHub Workspace and remove it once the job finishes using a Post Job Hook.</p> <pre><code>install_job:\nenv:\n# Configure a relative location for the uv cache\nUV_CACHE_DIR: ${{ github.workspace }}/.cache/uv\n</code></pre> <p>Using a post job hook requires setting the <code>ACTIONS_RUNNER_HOOK_JOB_STARTED</code> environment variable on the self-hosted runner to the path of a cleanup script such as the one shown below.</p> clean-uv-cache.sh<pre><code>#!/usr/bin/env sh\nuv cache clean\n</code></pre>"},{"location":"guides/integration/github/#using-uv-pip","title":"Using <code>uv pip</code>","text":"<p>If using the <code>uv pip</code> interface instead of the uv project interface, uv requires a virtual environment by default. To allow installing packages into the system environment, use the <code>--system</code> flag on all <code>uv</code> invocations or set the <code>UV_SYSTEM_PYTHON</code> variable.</p> <p>The <code>UV_SYSTEM_PYTHON</code> variable can be defined in at different scopes.</p> <p>Opt-in for the entire workflow by defining it at the top level:</p> example.yml<pre><code>env:\nUV_SYSTEM_PYTHON: 1\njobs: ...\n</code></pre> <p>Or, opt-in for a specific job in the workflow:</p> example.yml<pre><code>jobs:\ninstall_job:\nenv:\nUV_SYSTEM_PYTHON: 1\n...\n</code></pre> <p>Or, opt-in for a specific step in a job:</p> example.yml<pre><code>steps:\n- name: Install requirements\nrun: uv pip install -r requirements.txt\nenv:\nUV_SYSTEM_PYTHON: 1\n</code></pre> <p>To opt-out again, the <code>--no-system</code> flag can be used in any uv invocation.</p>"},{"location":"guides/integration/github/#private-repos","title":"Private repos","text":"<p>If your project has dependencies on private GitHub repositories, you will need to configure a personal access token (PAT) to allow uv to fetch them.</p> <p>After creating a PAT that has read access to the private repositories, add it as a repository secret.</p> <p>Then, you can use the <code>gh</code> CLI (which is installed in GitHub Actions runners by default) to configure a credential helper for Git to use the PAT for queries to repositories hosted on <code>github.com</code>.</p> <p>For example, if you called your repository secret <code>MY_PAT</code>:</p> example.yml<pre><code>steps:\n- name: Register the personal access token\nrun: echo \"${{ secrets.MY_PAT }}\" | gh auth login --with-token\n- name: Configure the Git credential helper\nrun: gh auth setup-git\n</code></pre>"},{"location":"guides/integration/github/#publishing-to-pypi","title":"Publishing to PyPI","text":"<p>uv can be used to build and publish your package to PyPI from GitHub Actions. We provide a standalone example alongside this guide in astral-sh/trusted-publishing-examples. The workflow uses trusted publishing, so no credentials need to be configured.</p> <p>In the example workflow, we use a script to test that the source distribution and the wheel are both functional and we didn't miss any files. This step is recommended, but optional.</p> <p>First, add a release workflow to your project:</p> .github/workflows/publish.yml<pre><code>name: \"Publish\"\non:\npush:\ntags:\n# Publish on any tag starting with a `v`, e.g., v0.1.0\n- v*\njobs:\nrun:\nruns-on: ubuntu-latest\nenvironment:\nname: pypi\npermissions:\nid-token: write\ncontents: read\nsteps:\n- name: Checkout\nuses: actions/checkout@v5\n- name: Install uv\nuses: astral-sh/setup-uv@v6\n- name: Install Python 3.13\nrun: uv python install 3.13\n- name: Build\nrun: uv build\n# Check that basic features work and we didn't miss to include crucial files\n- name: Smoke test (wheel)\nrun: uv run --isolated --no-project --with dist/*.whl tests/smoke_test.py\n- name: Smoke test (source distribution)\nrun: uv run --isolated --no-project --with dist/*.tar.gz tests/smoke_test.py\n- name: Publish\nrun: uv publish\n</code></pre> <p>Then, create the environment defined in the workflow in the GitHub repository under \"Settings\" -&gt; \"Environments\".</p> <p></p> <p>Add a trusted publisher to your PyPI project in the project settings under \"Publishing\". Ensure that all fields match with your GitHub configuration.</p> <p></p> <p>After saving:</p> <p></p> <p>Finally, tag a release and push it. Make sure it starts with <code>v</code> to match the pattern in the workflow.</p> <pre><code>$ git tag -a v0.1.0 -m v0.1.0\n$ git push --tags\n</code></pre>"},{"location":"guides/integration/gitlab/","title":"Using uv in GitLab CI/CD","text":""},{"location":"guides/integration/gitlab/#using-the-uv-image","title":"Using the uv image","text":"<p>Astral provides Docker images with uv preinstalled. Select a variant that is suitable for your workflow.</p> gitlab-ci.yml<pre><code>variables:\nUV_VERSION: \"0.5\"\nPYTHON_VERSION: \"3.12\"\nBASE_LAYER: bookworm-slim\n# GitLab CI creates a separate mountpoint for the build directory,\n# so we need to copy instead of using hard links.\nUV_LINK_MODE: copy\nuv:\nimage: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER\nscript:\n# your `uv` commands\n</code></pre> <p>Note</p> <p>If you are using a distroless image, you have to specify the entrypoint: <pre><code>uv:\nimage:\nname: ghcr.io/astral-sh/uv:$UV_VERSION\nentrypoint: [\"\"]\n# ...\n</code></pre></p>"},{"location":"guides/integration/gitlab/#caching","title":"Caching","text":"<p>Persisting the uv cache between workflow runs can improve performance.</p> <pre><code>uv-install:\nvariables:\nUV_CACHE_DIR: .uv-cache\ncache:\n- key:\nfiles:\n- uv.lock\npaths:\n- $UV_CACHE_DIR\nscript:\n# Your `uv` commands\n- uv cache prune --ci\n</code></pre> <p>See the GitLab caching documentation for more details on configuring caching.</p> <p>Using <code>uv cache prune --ci</code> at the end of the job is recommended to reduce cache size. See the uv cache documentation for more details.</p>"},{"location":"guides/integration/gitlab/#using-uv-pip","title":"Using <code>uv pip</code>","text":"<p>If using the <code>uv pip</code> interface instead of the uv project interface, uv requires a virtual environment by default. To allow installing packages into the system environment, use the <code>--system</code> flag on all uv invocations or set the <code>UV_SYSTEM_PYTHON</code> variable.</p> <p>The <code>UV_SYSTEM_PYTHON</code> variable can be defined in at different scopes. You can read more about how variables and their precedence works in GitLab here</p> <p>Opt-in for the entire workflow by defining it at the top level:</p> gitlab-ci.yml<pre><code>variables:\nUV_SYSTEM_PYTHON: 1\n# [...]\n</code></pre> <p>To opt-out again, the <code>--no-system</code> flag can be used in any uv invocation.</p> <p>When persisting the cache, you may want to use <code>requirements.txt</code> or <code>pyproject.toml</code> as your cache key files instead of <code>uv.lock</code>.</p>"},{"location":"guides/integration/jupyter/","title":"Using uv with Jupyter","text":"<p>The Jupyter notebook is a popular tool for interactive computing, data analysis, and visualization. You can use Jupyter with uv in a few different ways, either to interact with a project, or as a standalone tool.</p>"},{"location":"guides/integration/jupyter/#using-jupyter-within-a-project","title":"Using Jupyter within a project","text":"<p>If you're working within a project, you can start a Jupyter server with access to the project's virtual environment via the following:</p> <pre><code>$ uv run --with jupyter jupyter lab\n</code></pre> <p>By default, <code>jupyter lab</code> will start the server at http://localhost:8888/lab.</p> <p>Within a notebook, you can import your project's modules as you would in any other file in the project. For example, if your project depends on <code>requests</code>, <code>import requests</code> will import <code>requests</code> from the project's virtual environment.</p> <p>If you're looking for read-only access to the project's virtual environment, then there's nothing more to it. However, if you need to install additional packages from within the notebook, there are a few extra details to consider.</p>"},{"location":"guides/integration/jupyter/#creating-a-kernel","title":"Creating a kernel","text":"<p>If you need to install packages from within the notebook, we recommend creating a dedicated kernel for your project. Kernels enable the Jupyter server to run in one environment, with individual notebooks running in their own, separate environments.</p> <p>In the context of uv, we can create a kernel for a project while installing Jupyter itself in an isolated environment, as in <code>uv run --with jupyter jupyter lab</code>. Creating a kernel for the project ensures that the notebook is hooked up to the correct environment, and that any packages installed from within the notebook are installed into the project's virtual environment.</p> <p>To create a kernel, you'll need to install <code>ipykernel</code> as a development dependency:</p> <pre><code>$ uv add --dev ipykernel\n</code></pre> <p>Then, you can create the kernel for <code>project</code> with:</p> <pre><code>$ uv run ipython kernel install --user --env VIRTUAL_ENV $(pwd)/.venv --name=project\n</code></pre> <p>From there, start the server with:</p> <pre><code>$ uv run --with jupyter jupyter lab\n</code></pre> <p>When creating a notebook, select the <code>project</code> kernel from the dropdown. Then use <code>!uv add pydantic</code> to add <code>pydantic</code> to the project's dependencies, or <code>!uv pip install pydantic</code> to install <code>pydantic</code> into the project's virtual environment without persisting the change to the project <code>pyproject.toml</code> or <code>uv.lock</code> files. Either command will make <code>import pydantic</code> work within the notebook.</p>"},{"location":"guides/integration/jupyter/#installing-packages-without-a-kernel","title":"Installing packages without a kernel","text":"<p>If you don't want to create a kernel, you can still install packages from within the notebook. However, there are a few caveats to consider.</p> <p>Though <code>uv run --with jupyter</code> runs in an isolated environment, within the notebook itself, <code>!uv add</code> and related commands will modify the project's environment, even without a kernel.</p> <p>For example, running <code>!uv add pydantic</code> from within a notebook will add <code>pydantic</code> to the project's dependencies and virtual environment, such that <code>import pydantic</code> will work immediately, without further configuration or a server restart.</p> <p>However, since the Jupyter server is the \"active\" environment, <code>!uv pip install</code> will install package's into Jupyter's environment, not the project environment. Such dependencies will persist for the lifetime of the Jupyter server, but may disappear on subsequent <code>jupyter</code> invocations.</p> <p>If you're working with a notebook that relies on pip (e.g., via the <code>%pip</code> magic), you can include pip in your project's virtual environment by running <code>uv venv --seed</code> prior to starting the Jupyter server. For example, given:</p> <pre><code>$ uv venv --seed\n$ uv run --with jupyter jupyter lab\n</code></pre> <p>Subsequent <code>%pip install</code> invocations within the notebook will install packages into the project's virtual environment. However, such modifications will not be reflected in the project's <code>pyproject.toml</code> or <code>uv.lock</code> files.</p>"},{"location":"guides/integration/jupyter/#using-jupyter-as-a-standalone-tool","title":"Using Jupyter as a standalone tool","text":"<p>If you ever need ad hoc access to a notebook (i.e., to run a Python snippet interactively), you can start a Jupyter server at any time with <code>uv tool run jupyter lab</code>. This will run a Jupyter server in an isolated environment.</p>"},{"location":"guides/integration/jupyter/#using-jupyter-with-a-non-project-environment","title":"Using Jupyter with a non-project environment","text":"<p>If you need to run Jupyter in a virtual environment that isn't associated with a project (e.g., has no <code>pyproject.toml</code> or <code>uv.lock</code>), you can do so by adding Jupyter to the environment directly. For example:</p> macOS and LinuxWindows <pre><code>$ uv venv --seed\n$ uv pip install pydantic\n$ uv pip install jupyterlab\n$ .venv/bin/jupyter lab\n</code></pre> <pre><code>PS&gt; uv venv --seed\nPS&gt; uv pip install pydantic\nPS&gt; uv pip install jupyterlab\nPS&gt; .venv\\Scripts\\jupyter lab\n</code></pre> <p>From here, <code>import pydantic</code> will work within the notebook, and you can install additional packages via <code>!uv pip install</code>, or even <code>!pip install</code>.</p>"},{"location":"guides/integration/jupyter/#using-jupyter-from-vs-code","title":"Using Jupyter from VS Code","text":"<p>You can also engage with Jupyter notebooks from within an editor like VS Code. To connect a uv-managed project to a Jupyter notebook within VS Code, we recommend creating a kernel for the project, as in the following:</p> <pre><code># Create a project.\n$ uv init project\n\n# Move into the project directory.\n$ cd project\n\n# Add ipykernel as a dev dependency.\n$ uv add --dev ipykernel\n\n# Open the project in VS Code.\n$ code .\n</code></pre> <p>Once the project directory is open in VS Code, you can create a new Jupyter notebook by selecting \"Create: New Jupyter Notebook\" from the command palette. When prompted to select a kernel, choose \"Python Environments\" and select the virtual environment you created earlier (e.g., <code>.venv/bin/python</code> on macOS and Linux, or <code>.venv\\Scripts\\python</code> on Windows).</p> <p>Note</p> <p>VS Code requires <code>ipykernel</code> to be present in the project environment. If you'd prefer to avoid adding <code>ipykernel</code> as a dev dependency, you can install it directly into the project environment with <code>uv pip install ipykernel</code>.</p> <p>If you need to manipulate the project's environment from within the notebook, you may need to add <code>uv</code> as an explicit development dependency:</p> <pre><code>$ uv add --dev uv\n</code></pre> <p>From there, you can use <code>!uv add pydantic</code> to add <code>pydantic</code> to the project's dependencies, or <code>!uv pip install pydantic</code> to install <code>pydantic</code> into the project's virtual environment without updating the project's <code>pyproject.toml</code> or <code>uv.lock</code> files.</p>"},{"location":"guides/integration/marimo/","title":"Using uv with marimo","text":"<p>marimo is an open-source Python notebook that blends interactive computing with the reproducibility and reusability of traditional software, letting you version with Git, run as scripts, and share as apps. Because marimo notebooks are stored as pure Python scripts, they are able to integrate tightly with uv.</p> <p>You can readily use marimo as a standalone tool, as self-contained scripts, in projects, and in non-project environments.</p>"},{"location":"guides/integration/marimo/#using-marimo-as-a-standalone-tool","title":"Using marimo as a standalone tool","text":"<p>For ad-hoc access to marimo notebooks, start a marimo server at any time in an isolated environment with:</p> <pre><code>$ uvx marimo edit\n</code></pre> <p>Start a specific notebook with:</p> <pre><code>$ uvx marimo edit my_notebook.py\n</code></pre>"},{"location":"guides/integration/marimo/#using-marimo-with-inline-script-metadata","title":"Using marimo with inline script metadata","text":"<p>Because marimo notebooks are stored as Python scripts, they can encapsulate their own dependencies using inline script metadata, via uv's support for scripts. For example, to add <code>numpy</code> as a dependency to your notebook, use this command:</p> <pre><code>$ uv add --script my_notebook.py numpy\n</code></pre> <p>To interactively edit a notebook containing inline script metadata, use:</p> <pre><code>$ uvx marimo edit --sandbox my_notebook.py\n</code></pre> <p>marimo will automatically use uv to start your notebook in an isolated virtual environment with your script's dependencies. Packages installed from the marimo UI will automatically be added to the notebook's script metadata.</p> <p>You can optionally run these notebooks as Python scripts, without opening an interactive session:</p> <pre><code>$ uv run my_notebook.py\n</code></pre>"},{"location":"guides/integration/marimo/#using-marimo-within-a-project","title":"Using marimo within a project","text":"<p>If you're working within a project, you can start a marimo notebook with access to the project's virtual environment via the following command (assuming marimo is a project dependency):</p> <pre><code>$ uv run marimo edit my_notebook.py\n</code></pre> <p>To make additional packages available to your notebook, either add them to your project with <code>uv add</code>, or use marimo's built-in package installation UI, which will invoke <code>uv add</code> on your behalf.</p> <p>If marimo is not a project dependency, you can still run a notebook with the following command:</p> <pre><code>$ uv run --with marimo marimo edit my_notebook.py\n</code></pre> <p>This will let you import your project's modules while editing your notebook. However, packages installed via marimo's UI when running in this way will not be added to your project, and may disappear on subsequent marimo invocations.</p>"},{"location":"guides/integration/marimo/#using-marimo-in-a-non-project-environment","title":"Using marimo in a non-project environment","text":"<p>To run marimo in a virtual environment that isn't associated with a project, add marimo to the environment directly:</p> <pre><code>$ uv venv\n$ uv pip install numpy\n$ uv pip install marimo\n$ uv run marimo edit\n</code></pre> <p>From here, <code>import numpy</code> will work within the notebook, and marimo's UI installer will add packages to the environment with <code>uv pip install</code> on your behalf.</p>"},{"location":"guides/integration/marimo/#running-marimo-notebooks-as-scripts","title":"Running marimo notebooks as scripts","text":"<p>Regardless of how your dependencies are managed (with inline script metadata, within a project, or with a non-project environment), you can run marimo notebooks as scripts with:</p> <pre><code>$ uv run my_notebook.py\n</code></pre> <p>This executes your notebook as a Python script, without opening an interactive session in your browser.</p>"},{"location":"guides/integration/pre-commit/","title":"Using uv in pre-commit","text":"<p>An official pre-commit hook is provided at <code>astral-sh/uv-pre-commit</code>.</p> <p>To use uv with pre-commit, add one of the following examples to the <code>repos</code> list in the <code>.pre-commit-config.yaml</code>.</p> <p>To make sure your <code>uv.lock</code> file is up to date even if your <code>pyproject.toml</code> file was changed:</p> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.9.6\nhooks:\n- id: uv-lock\n</code></pre> <p>To keep a <code>requirements.txt</code> file in sync with your <code>uv.lock</code> file:</p> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.9.6\nhooks:\n- id: uv-export\n</code></pre> <p>To compile requirements files:</p> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.9.6\nhooks:\n# Compile requirements\n- id: pip-compile\nargs: [requirements.in, -o, requirements.txt]\n</code></pre> <p>To compile alternative requirements files, modify <code>args</code> and <code>files</code>:</p> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.9.6\nhooks:\n# Compile requirements\n- id: pip-compile\nargs: [requirements-dev.in, -o, requirements-dev.txt]\nfiles: ^requirements-dev\\.(in|txt)$\n</code></pre> <p>To run the hook over multiple files at the same time, add additional entries:</p> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.9.6\nhooks:\n# Compile requirements\n- id: pip-compile\nname: pip-compile requirements.in\nargs: [requirements.in, -o, requirements.txt]\n- id: pip-compile\nname: pip-compile requirements-dev.in\nargs: [requirements-dev.in, -o, requirements-dev.txt]\nfiles: ^requirements-dev\\.(in|txt)$\n</code></pre>"},{"location":"guides/integration/pytorch/","title":"Using uv with PyTorch","text":"<p>The PyTorch ecosystem is a popular choice for deep learning research and development. You can use uv to manage PyTorch projects and PyTorch dependencies across different Python versions and environments, even controlling for the choice of accelerator (e.g., CPU-only vs. CUDA).</p> <p>Note</p> <p>Some of the features outlined in this guide require uv version 0.5.3 or later. We recommend upgrading prior to configuring PyTorch.</p>"},{"location":"guides/integration/pytorch/#installing-pytorch","title":"Installing PyTorch","text":"<p>From a packaging perspective, PyTorch has a few uncommon characteristics:</p> <ul> <li>Many PyTorch wheels are hosted on a dedicated index, rather than the Python Package Index (PyPI).   As such, installing PyTorch often requires configuring a project to use the PyTorch index.</li> <li>PyTorch produces distinct builds for each accelerator (e.g., CPU-only, CUDA). Since there's no   standardized mechanism for specifying these accelerators when publishing or installing, PyTorch   encodes them in the local version specifier. As such, PyTorch versions will often look like   <code>2.5.1+cpu</code>, <code>2.5.1+cu121</code>, etc.</li> <li>Builds for different accelerators are published to different indexes. For example, the <code>+cpu</code>   builds are published on https://download.pytorch.org/whl/cpu, while the <code>+cu121</code> builds are   published on https://download.pytorch.org/whl/cu121.</li> </ul> <p>As such, the necessary packaging configuration will vary depending on both the platforms you need to support and the accelerators you want to enable.</p> <p>To start, consider the following (default) configuration, which would be generated by running <code>uv init --python 3.12</code> followed by <code>uv add torch torchvision</code>.</p> <p>In this case, PyTorch would be installed from PyPI, which hosts CPU-only wheels for Windows and macOS, and GPU-accelerated wheels on Linux (targeting CUDA 12.6):</p> <pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\n\"torch&gt;=2.7.0\",\n\"torchvision&gt;=0.22.0\",\n]\n</code></pre> <p>Supported Python versions</p> <p>At time of writing, PyTorch does not yet publish wheels for Python 3.14; as such projects with <code>requires-python = \"&gt;=3.14\"</code> may fail to resolve. See the compatibility matrix.</p> <p>This is a valid configuration for projects that want to use CPU builds on Windows and macOS, and CUDA-enabled builds on Linux. However, if you need to support different platforms or accelerators, you'll need to configure the project accordingly.</p>"},{"location":"guides/integration/pytorch/#using-a-pytorch-index","title":"Using a PyTorch index","text":"<p>In some cases, you may want to use a specific PyTorch variant across all platforms. For example, you may want to use the CPU-only builds on Linux too.</p> <p>In such cases, the first step is to add the relevant PyTorch index to your <code>pyproject.toml</code>:</p> CPU-onlyCUDA 11.8CUDA 12.6CUDA 12.8ROCm6Intel GPUs <pre><code>[[tool.uv.index]]\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n</code></pre> <pre><code>[[tool.uv.index]]\nname = \"pytorch-cu118\"\nurl = \"https://download.pytorch.org/whl/cu118\"\nexplicit = true\n</code></pre> <pre><code>[[tool.uv.index]]\nname = \"pytorch-cu126\"\nurl = \"https://download.pytorch.org/whl/cu126\"\nexplicit = true\n</code></pre> <pre><code>[[tool.uv.index]]\nname = \"pytorch-cu128\"\nurl = \"https://download.pytorch.org/whl/cu128\"\nexplicit = true\n</code></pre> <pre><code>[[tool.uv.index]]\nname = \"pytorch-rocm\"\nurl = \"https://download.pytorch.org/whl/rocm6.3\"\nexplicit = true\n</code></pre> <pre><code>[[tool.uv.index]]\nname = \"pytorch-xpu\"\nurl = \"https://download.pytorch.org/whl/xpu\"\nexplicit = true\n</code></pre> <p>We recommend the use of <code>explicit = true</code> to ensure that the index is only used for <code>torch</code>, <code>torchvision</code>, and other PyTorch-related packages, as opposed to generic dependencies like <code>jinja2</code>, which should continue to be sourced from the default index (PyPI).</p> <p>Next, update the <code>pyproject.toml</code> to point <code>torch</code> and <code>torchvision</code> to the desired index:</p> CPU-onlyCUDA 11.8CUDA 12.6CUDA 12.8ROCm6Intel GPUs <pre><code>[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cpu\" },\n]\ntorchvision = [\n{ index = \"pytorch-cpu\" },\n]\n</code></pre> <p>PyTorch doesn't publish CUDA builds for macOS. As such, we gate on <code>sys_platform</code> to instruct uv to use the PyTorch index on Linux and Windows, but fall back to PyPI on macOS:</p> <pre><code>[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cu118\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\ntorchvision = [\n{ index = \"pytorch-cu118\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\n</code></pre> <p>PyTorch doesn't publish CUDA builds for macOS. As such, we gate on <code>sys_platform</code> to instruct uv to limit the PyTorch index to Linux and Windows, falling back to PyPI on macOS:</p> <pre><code>[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cu126\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\ntorchvision = [\n{ index = \"pytorch-cu126\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\n</code></pre> <p>PyTorch doesn't publish CUDA builds for macOS. As such, we gate on <code>sys_platform</code> to instruct uv to limit the PyTorch index to Linux and Windows, falling back to PyPI on macOS:</p> <pre><code>[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cu128\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\ntorchvision = [\n{ index = \"pytorch-cu128\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\n</code></pre> <p>PyTorch doesn't publish ROCm6 builds for macOS or Windows. As such, we gate on <code>sys_platform</code> to instruct uv to limit the PyTorch index to Linux, falling back to PyPI on macOS and Windows:</p> <pre><code>[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-rocm\", marker = \"sys_platform == 'linux'\" },\n]\ntorchvision = [\n{ index = \"pytorch-rocm\", marker = \"sys_platform == 'linux'\" },\n]\n# ROCm6 support relies on `pytorch-triton-rocm`, which should also be installed from the PyTorch index\n# (and included in `project.dependencies`).\npytorch-triton-rocm = [\n{ index = \"pytorch-rocm\", marker = \"sys_platform == 'linux'\" },\n]\n</code></pre> <p>PyTorch doesn't publish Intel GPU builds for macOS. As such, we gate on <code>sys_platform</code> to instruct uv to limit the PyTorch index to Linux and Windows, falling back to PyPI on macOS:</p> <pre><code>[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-xpu\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\ntorchvision = [\n{ index = \"pytorch-xpu\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\n# Intel GPU support relies on `pytorch-triton-xpu`, which should also be installed from the PyTorch index\n# (and included in `project.dependencies`).\npytorch-triton-xpu = [\n{ index = \"pytorch-xpu\", marker = \"sys_platform == 'linux' or sys_platform == 'win32'\" },\n]\n</code></pre> <p>As a complete example, the following project would use PyTorch's CPU-only builds on all platforms:</p> <pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12.0\"\ndependencies = [\n\"torch&gt;=2.7.0\",\n\"torchvision&gt;=0.22.0\",\n]\n[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cpu\" },\n]\ntorchvision = [\n{ index = \"pytorch-cpu\" },\n]\n[[tool.uv.index]]\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n</code></pre>"},{"location":"guides/integration/pytorch/#configuring-accelerators-with-environment-markers","title":"Configuring accelerators with environment markers","text":"<p>In some cases, you may want to use CPU-only builds in one environment (e.g., macOS and Windows), and CUDA-enabled builds in another (e.g., Linux).</p> <p>With <code>tool.uv.sources</code>, you can use environment markers to specify the desired index for each platform. For example, the following configuration would use PyTorch's CUDA-enabled builds on Linux, and CPU-only builds on all other platforms (e.g., macOS and Windows):</p> <pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12.0\"\ndependencies = [\n\"torch&gt;=2.7.0\",\n\"torchvision&gt;=0.22.0\",\n]\n[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cpu\", marker = \"sys_platform != 'linux'\" },\n{ index = \"pytorch-cu128\", marker = \"sys_platform == 'linux'\" },\n]\ntorchvision = [\n{ index = \"pytorch-cpu\", marker = \"sys_platform != 'linux'\" },\n{ index = \"pytorch-cu128\", marker = \"sys_platform == 'linux'\" },\n]\n[[tool.uv.index]]\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n[[tool.uv.index]]\nname = \"pytorch-cu128\"\nurl = \"https://download.pytorch.org/whl/cu128\"\nexplicit = true\n</code></pre> <p>Similarly, the following configuration would use PyTorch's AMD GPU builds on Linux, and CPU-only builds on Windows and macOS (by way of falling back to PyPI):</p> <pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12.0\"\ndependencies = [\n\"torch&gt;=2.7.0\",\n\"torchvision&gt;=0.22.0\",\n\"pytorch-triton-rocm&gt;=3.3.0 ; sys_platform == 'linux'\",\n]\n[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-rocm\", marker = \"sys_platform == 'linux'\" },\n]\ntorchvision = [\n{ index = \"pytorch-rocm\", marker = \"sys_platform == 'linux'\" },\n]\npytorch-triton-rocm = [\n{ index = \"pytorch-rocm\", marker = \"sys_platform == 'linux'\" },\n]\n[[tool.uv.index]]\nname = \"pytorch-rocm\"\nurl = \"https://download.pytorch.org/whl/rocm6.3\"\nexplicit = true\n</code></pre> <p>Or, for Intel GPU builds:</p> <pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12.0\"\ndependencies = [\n\"torch&gt;=2.7.0\",\n\"torchvision&gt;=0.22.0\",\n\"pytorch-triton-xpu&gt;=3.3.0 ; sys_platform == 'win32' or sys_platform == 'linux'\",\n]\n[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-xpu\", marker = \"sys_platform == 'win32' or sys_platform == 'linux'\" },\n]\ntorchvision = [\n{ index = \"pytorch-xpu\", marker = \"sys_platform == 'win32' or sys_platform == 'linux'\" },\n]\npytorch-triton-xpu = [\n{ index = \"pytorch-xpu\", marker = \"sys_platform == 'win32' or sys_platform == 'linux'\" },\n]\n[[tool.uv.index]]\nname = \"pytorch-xpu\"\nurl = \"https://download.pytorch.org/whl/xpu\"\nexplicit = true\n</code></pre>"},{"location":"guides/integration/pytorch/#configuring-accelerators-with-optional-dependencies","title":"Configuring accelerators with optional dependencies","text":"<p>In some cases, you may want to use CPU-only builds in some cases, but CUDA-enabled builds in others, with the choice toggled by a user-provided extra (e.g., <code>uv sync --extra cpu</code> vs. <code>uv sync --extra cu128</code>).</p> <p>With <code>tool.uv.sources</code>, you can use extra markers to specify the desired index for each enabled extra. For example, the following configuration would use PyTorch's CPU-only for <code>uv sync --extra cpu</code> and CUDA-enabled builds for <code>uv sync --extra cu128</code>:</p> <pre><code>[project]\nname = \"project\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.12.0\"\ndependencies = []\n[project.optional-dependencies]\ncpu = [\n\"torch&gt;=2.7.0\",\n\"torchvision&gt;=0.22.0\",\n]\ncu128 = [\n\"torch&gt;=2.7.0\",\n\"torchvision&gt;=0.22.0\",\n]\n[tool.uv]\nconflicts = [\n[\n{ extra = \"cpu\" },\n{ extra = \"cu128\" },\n],\n]\n[tool.uv.sources]\ntorch = [\n{ index = \"pytorch-cpu\", extra = \"cpu\" },\n{ index = \"pytorch-cu128\", extra = \"cu128\" },\n]\ntorchvision = [\n{ index = \"pytorch-cpu\", extra = \"cpu\" },\n{ index = \"pytorch-cu128\", extra = \"cu128\" },\n]\n[[tool.uv.index]]\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n[[tool.uv.index]]\nname = \"pytorch-cu128\"\nurl = \"https://download.pytorch.org/whl/cu128\"\nexplicit = true\n</code></pre> <p>Note</p> <p>Since GPU-accelerated builds aren't available on macOS, the above configuration will fail to install on macOS when the <code>cu128</code> extra is enabled.</p>"},{"location":"guides/integration/pytorch/#the-uv-pip-interface","title":"The <code>uv pip</code> interface","text":"<p>While the above examples are focused on uv's project interface (<code>uv lock</code>, <code>uv sync</code>, <code>uv run</code>, etc.), PyTorch can also be installed via the <code>uv pip</code> interface.</p> <p>PyTorch itself offers a dedicated interface to determine the appropriate pip command to run for a given target configuration. For example, you can install stable, CPU-only PyTorch on Linux with:</p> <pre><code>$ pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\n</code></pre> <p>To use the same workflow with uv, replace <code>pip3</code> with <code>uv pip</code>:</p> <pre><code>$ uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\n</code></pre>"},{"location":"guides/integration/pytorch/#automatic-backend-selection","title":"Automatic backend selection","text":"<p>uv supports automatic selection of the appropriate PyTorch index via the <code>--torch-backend=auto</code> command-line argument (or the <code>UV_TORCH_BACKEND=auto</code> environment variable), as in:</p> <pre><code>$ # With a command-line argument.\n$ uv pip install torch --torch-backend=auto\n\n$ # With an environment variable.\n$ UV_TORCH_BACKEND=auto uv pip install torch\n</code></pre> <p>When enabled, uv will query for the installed CUDA driver, AMD GPU versions, and Intel GPU presence, then use the most-compatible PyTorch index for all relevant packages (e.g., <code>torch</code>, <code>torchvision</code>, etc.). If no such GPU is found, uv will fall back to the CPU-only index. uv will continue to respect existing index configuration for any packages outside the PyTorch ecosystem.</p> <p>You can also select a specific backend (e.g., CUDA 12.6) with <code>--torch-backend=cu126</code> (or <code>UV_TORCH_BACKEND=cu126</code>):</p> <pre><code>$ # With a command-line argument.\n$ uv pip install torch torchvision --torch-backend=cu126\n\n$ # With an environment variable.\n$ UV_TORCH_BACKEND=cu126 uv pip install torch torchvision\n</code></pre> <p>At present, <code>--torch-backend</code> is only available in the <code>uv pip</code> interface.</p>"},{"location":"guides/migration/","title":"Migration guides","text":"<p>Learn how to migrate from other tools to uv:</p> <ul> <li>Migrate from pip to uv projects</li> </ul> <p>Note</p> <p>Other guides, such as migrating from another project management tool, or from pip to <code>uv pip</code> are not yet available. See #5200 to track progress.</p> <p>Or, explore the integration guides to learn how to use uv with other software.</p>"},{"location":"guides/migration/pip-to-project/","title":"Migrating from pip to a uv project","text":"<p>This guide will discuss converting from a <code>pip</code> and <code>pip-tools</code> workflow centered on <code>requirements</code> files to uv's project workflow using a <code>pyproject.toml</code> and <code>uv.lock</code> file.</p> <p>Note</p> <p>If you're looking to migrate from <code>pip</code> and <code>pip-tools</code> to uv's drop-in interface or from an existing workflow where you're already using a <code>pyproject.toml</code>, those guides are not yet written. See #5200 to track progress.</p> <p>We'll start with an overview of developing with <code>pip</code>, then discuss migrating to uv.</p> <p>Tip</p> <p>If you're familiar with the ecosystem, you can jump ahead to the requirements file import instructions.</p>"},{"location":"guides/migration/pip-to-project/#understanding-pip-workflows","title":"Understanding pip workflows","text":""},{"location":"guides/migration/pip-to-project/#project-dependencies","title":"Project dependencies","text":"<p>When you want to use a package in your project, you need to install it first. <code>pip</code> supports imperative installation of packages, e.g.:</p> <pre><code>$ pip install fastapi\n</code></pre> <p>This installs the package into the environment that <code>pip</code> is installed in. This may be a virtual environment, or, the global environment of your system's Python installation.</p> <p>Then, you can run a Python script that requires the package:</p> example.py<pre><code>import fastapi\n</code></pre> <p>It's best practice to create a virtual environment for each project, to avoid mixing packages between them. For example:</p> <pre><code>$ python -m venv\n$ source .venv/bin/activate\n$ pip ...\n</code></pre> <p>We will revisit this topic in the project environments section below.</p>"},{"location":"guides/migration/pip-to-project/#requirements-files","title":"Requirements files","text":"<p>When sharing projects with others, it's useful to declare all the packages you require upfront. <code>pip</code> supports installing requirements from a file, e.g.:</p> requirements.txt<pre><code>fastapi\n</code></pre> <pre><code>$ pip install -r requirements.txt\n</code></pre> <p>Notice above that <code>fastapi</code> is not \"locked\" to a specific version \u2014 each person working on the project may have a different version of <code>fastapi</code> installed. <code>pip-tools</code> was created to improve this experience.</p> <p>When using <code>pip-tools</code>, requirements files specify both the dependencies for your project and lock dependencies to a specific version \u2014 the file extension is used to differentiate between the two. For example, if you require <code>fastapi</code> and <code>pydantic</code>, you'd specify these in a <code>requirements.in</code> file:</p> requirements.in<pre><code>fastapi\npydantic&gt;2\n</code></pre> <p>Notice there's a version constraint on <code>pydantic</code> \u2014 this means only <code>pydantic</code> versions later than <code>2.0.0</code> can be used. In contrast, <code>fastapi</code> does not have a version constraint \u2014 any version can be used.</p> <p>These dependencies can be compiled into a <code>requirements.txt</code> file:</p> <pre><code>$ pip-compile requirements.in -o requirements.txt\n</code></pre> requirements.txt<pre><code>annotated-types==0.7.0\n# via pydantic\nanyio==4.8.0\n# via starlette\nfastapi==0.115.11\n# via -r requirements.in\nidna==3.10\n# via anyio\npydantic==2.10.6\n# via\n#   -r requirements.in\n#   fastapi\npydantic-core==2.27.2\n# via pydantic\nsniffio==1.3.1\n# via anyio\nstarlette==0.46.1\n# via fastapi\ntyping-extensions==4.12.2\n# via\n#   fastapi\n#   pydantic\n#   pydantic-core\n</code></pre> <p>Here, all the versions constraints are exact. Only a single version of each package can be used. The above example was generated with <code>uv pip compile</code>, but could also be generated with <code>pip-compile</code> from <code>pip-tools</code>.</p> <p>Though less common, the <code>requirements.txt</code> can also be generated using <code>pip freeze</code>, by first installing the input dependencies into the environment then exporting the installed versions:</p> <pre><code>$ pip install -r requirements.in\n$ pip freeze &gt; requirements.txt\n</code></pre> requirements.txt<pre><code>annotated-types==0.7.0\nanyio==4.8.0\nfastapi==0.115.11\nidna==3.10\npydantic==2.10.6\npydantic-core==2.27.2\nsniffio==1.3.1\nstarlette==0.46.1\ntyping-extensions==4.12.2\n</code></pre> <p>After compiling dependencies into a locked set of versions, these files are committed to version control and distributed with the project.</p> <p>Then, when someone wants to use the project, they install from the requirements file:</p> <pre><code>$ pip install -r requirements.txt\n</code></pre>"},{"location":"guides/migration/pip-to-project/#development-dependencies","title":"Development dependencies","text":"<p>The requirements file format can only describe a single set of dependencies at once. This means if you have additional groups of dependencies, such as development dependencies, they need separate files. For example, we'll create a <code>-dev</code> dependency file:</p> requirements-dev.in<pre><code>-r requirements.in\n-c requirements.txt\npytest\n</code></pre> <p>Notice the base requirements are included with <code>-r requirements.in</code>. This ensures your development environment considers all of the dependencies together. The <code>-c requirements.txt</code> constrains the package version to ensure that the <code>requirements-dev.txt</code> uses the same versions as <code>requirements.txt</code>.</p> <p>Note</p> <p>It's common to use <code>-r requirements.txt</code> directly instead of using both <code>-r requirements.in</code>, and <code>-c requirements.txt</code>. There's no difference in the resulting package versions, but using both files produces annotations which allow you to determine which dependencies are direct (annotated with <code>-r requirements.in</code>) and which are indirect (only annotated with <code>-c requirements.txt</code>).</p> <p>The compiled development dependencies look like:</p> requirements-dev.txt<pre><code>annotated-types==0.7.0\n# via\n#   -c requirements.txt\n#   pydantic\nanyio==4.8.0\n# via\n#   -c requirements.txt\n#   starlette\nfastapi==0.115.11\n# via\n#   -c requirements.txt\n#   -r requirements.in\nidna==3.10\n# via\n#   -c requirements.txt\n#   anyio\niniconfig==2.0.0\n# via pytest\npackaging==24.2\n# via pytest\npluggy==1.5.0\n# via pytest\npydantic==2.10.6\n# via\n#   -c requirements.txt\n#   -r requirements.in\n#   fastapi\npydantic-core==2.27.2\n# via\n#   -c requirements.txt\n#   pydantic\npytest==8.3.5\n# via -r requirements-dev.in\nsniffio==1.3.1\n# via\n#   -c requirements.txt\n#   anyio\nstarlette==0.46.1\n# via\n#   -c requirements.txt\n#   fastapi\ntyping-extensions==4.12.2\n# via\n#   -c requirements.txt\n#   fastapi\n#   pydantic\n#   pydantic-core\n</code></pre> <p>As with the base dependency files, these are committed to version control and distributed with the project. When someone wants to work on the project, they'll install from the requirements file:</p> <pre><code>$ pip install -r requirements-dev.txt\n</code></pre>"},{"location":"guides/migration/pip-to-project/#platform-specific-dependencies","title":"Platform-specific dependencies","text":"<p>When compiling dependencies with <code>pip</code> or <code>pip-tools</code>, the result is only usable on the same platform as it is generated on. This poses a problem for projects which need to be usable on multiple platforms, such as Windows and macOS.</p> <p>For example, take a simple dependency:</p> requirements.in<pre><code>tqdm\n</code></pre> <p>On Linux, this compiles to:</p> requirements-linux.txt<pre><code>tqdm==4.67.1\n# via -r requirements.in\n</code></pre> <p>While on Windows, this compiles to:</p> requirements-win.txt<pre><code>colorama==0.4.6\n# via tqdm\ntqdm==4.67.1\n# via -r requirements.in\n</code></pre> <p><code>colorama</code> is a Windows-only dependency of <code>tqdm</code>.</p> <p>When using <code>pip</code> and <code>pip-tools</code>, a project needs to declare a requirements lock file for each supported platform.</p> <p>Note</p> <p>uv's resolver can compile dependencies for multiple platforms at once (see \"universal resolution\"), allowing you to use a single <code>requirements.txt</code> for all platforms:</p> <pre><code>$ uv pip compile --universal requirements.in\n</code></pre> requirements.txt<pre><code>colorama==0.4.6 ; sys_platform == 'win32'\n# via tqdm\ntqdm==4.67.1\n# via -r requirements.in\n</code></pre> <p>This resolution mode is also used when using a <code>pyproject.toml</code> and <code>uv.lock</code>.</p>"},{"location":"guides/migration/pip-to-project/#migrating-to-a-uv-project","title":"Migrating to a uv project","text":""},{"location":"guides/migration/pip-to-project/#the-pyprojecttoml","title":"The <code>pyproject.toml</code>","text":"<p>The <code>pyproject.toml</code> is a standardized file for Python project metadata. It replaces <code>requirements.in</code> files, allowing you to represent arbitrary groups of project dependencies. It also provides a centralized location for metadata about your project, such as the build system or tool settings.</p> <p>For example, the <code>requirements.in</code> and <code>requirements-dev.in</code> files above can be translated to a <code>pyproject.toml</code> as follows:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.0.1\"\ndependencies = [\n\"fastapi\",\n\"pydantic&gt;2\"\n]\n[dependency-groups]\ndev = [\"pytest\"]\n</code></pre> <p>We'll discuss the commands necessary to automate these imports below.</p>"},{"location":"guides/migration/pip-to-project/#the-uv-lockfile","title":"The uv lockfile","text":"<p>uv uses a lockfile (<code>uv.lock</code>) file to lock package versions. The format of this file is specific to uv, allowing uv to support advanced features. It replaces <code>requirements.txt</code> files.</p> <p>The lockfile will be automatically created and populated when adding dependencies, but you can explicitly create it with <code>uv lock</code>.</p> <p>Unlike <code>requirements.txt</code> files, the <code>uv.lock</code> file can represent arbitrary groups of dependencies, so multiple files are not needed to lock development dependencies.</p> <p>The uv lockfile is always universal, so multiple files are not needed to lock dependencies for each platform. This ensures that all developers are using consistent, locked versions of dependencies regardless of their machine.</p> <p>The uv lockfile also supports concepts like pinning packages to specific indexes, which is not representable in <code>requirements.txt</code> files.</p> <p>Tip</p> <p>If you only need to lock for a subset of platforms, use the <code>tool.uv.environments</code> setting to limit the resolution and lockfile.</p> <p>To learn more, see the lockfile documentation.</p>"},{"location":"guides/migration/pip-to-project/#importing-requirements-files","title":"Importing requirements files","text":"<p>First, create a <code>pyproject.toml</code> if you have not already:</p> <pre><code>$ uv init\n</code></pre> <p>Then, the easiest way to import requirements is with <code>uv add</code>:</p> <pre><code>$ uv add -r requirements.in\n</code></pre> <p>However, there is some nuance to this transition. Notice we used the <code>requirements.in</code> file, which does not pin to exact versions of packages so uv will solve for new versions of these packages. You may want to continue using your previously locked versions from your <code>requirements.txt</code> so, when switching over to uv, none of your dependency versions change.</p> <p>The solution is to add your locked versions as constraints. uv supports using these on <code>add</code> to preserve locked versions:</p> <pre><code>$ uv add -r requirements.in -c requirements.txt\n</code></pre> <p>Your existing versions will be retained when producing a <code>uv.lock</code> file.</p>"},{"location":"guides/migration/pip-to-project/#importing-platform-specific-constraints","title":"Importing platform-specific constraints","text":"<p>If your platform-specific dependencies have been compiled into separate files, you can still transition to a universal lockfile. However, you cannot just use <code>-c</code> to specify constraints from your existing platform-specific <code>requirements.txt</code> files because they do not include markers describing the environment and will consequently conflict.</p> <p>To add the necessary markers, use <code>uv pip compile</code> to convert your existing files. For example, given the following:</p> requirements-win.txt<pre><code>colorama==0.4.6\n# via tqdm\ntqdm==4.67.1\n# via -r requirements.in\n</code></pre> <p>The markers can be added with:</p> <pre><code>$ uv pip compile requirements.in -o requirements-win.txt --python-platform windows --no-strip-markers\n</code></pre> <p>Notice the resulting output includes a Windows marker on <code>colorama</code>:</p> requirements-win.txt<pre><code>colorama==0.4.6 ; sys_platform == 'win32'\n# via tqdm\ntqdm==4.67.1\n# via -r requirements.in\n</code></pre> <p>When using <code>-o</code>, uv will constrain the versions to match the existing output file, if it can.</p> <p>Markers can be added for other platforms by changing the <code>--python-platform</code> and <code>-o</code> values for each requirements file you need to import, e.g., to <code>linux</code> and <code>macos</code>.</p> <p>Once each <code>requirements.txt</code> file has been transformed, the dependencies can be imported to the <code>pyproject.toml</code> and <code>uv.lock</code> with <code>uv add</code>:</p> <pre><code>$ uv add -r requirements.in -c requirements-win.txt -c requirements-linux.txt\n</code></pre>"},{"location":"guides/migration/pip-to-project/#importing-development-dependency-files","title":"Importing development dependency files","text":"<p>As discussed in the development dependencies section, it's common to have groups of dependencies for development purposes.</p> <p>To import development dependencies, use the <code>--dev</code> flag during <code>uv add</code>:</p> <pre><code>$ uv add --dev -r requirements-dev.in -c requirements-dev.txt\n</code></pre> <p>If the <code>requirements-dev.in</code> includes the parent <code>requirements.in</code> via <code>-r</code>, it will need to be stripped to avoid adding the base requirements to the <code>dev</code> dependency group. The following example uses <code>sed</code> to strip lines that start with <code>-r</code>, then pipes the result to <code>uv add</code>:</p> <pre><code>$ sed '/^-r /d' requirements-dev.in | uv add --dev -r - -c requirements-dev.txt\n</code></pre> <p>In addition to the <code>dev</code> dependency group, uv supports arbitrary group names. For example, if you also have a dedicated set of dependencies for building your documentation, those can be imported to a <code>docs</code> group:</p> <pre><code>$ uv add -r requirements-docs.in -c requirements-docs.txt --group docs\n</code></pre>"},{"location":"guides/migration/pip-to-project/#project-environments","title":"Project environments","text":"<p>Unlike <code>pip</code>, uv is not centered around the concept of an \"active\" virtual environment. Instead, uv uses a dedicated virtual environment for each project in a <code>.venv</code> directory. This environment is automatically managed, so when you run a command, like <code>uv add</code>, the environment is synced with the project dependencies.</p> <p>The preferred way to execute commands in the environment is with <code>uv run</code>, e.g.:</p> <pre><code>$ uv run pytest\n</code></pre> <p>Prior to every <code>uv run</code> invocation, uv will verify that the lockfile is up-to-date with the <code>pyproject.toml</code>, and that the environment is up-to-date with the lockfile, keeping your project in-sync without the need for manual intervention. <code>uv run</code> guarantees that your command is run in a consistent, locked environment.</p> <p>The project environment can also be explicitly created with <code>uv sync</code>, e.g., for use with editors.</p> <p>Note</p> <p>When in projects, uv will prefer a <code>.venv</code> in the project directory and ignore the active environment as declared by the <code>VIRTUAL_ENV</code> variable by default. You can opt-in to using the active environment with the <code>--active</code> flag.</p> <p>To learn more, see the project environment documentation.</p>"},{"location":"guides/migration/pip-to-project/#next-steps","title":"Next steps","text":"<p>Now that you've migrated to uv, take a look at the project concept page for more details about uv projects.</p>"},{"location":"pip/","title":"The pip interface","text":"<p>uv provides a drop-in replacement for common <code>pip</code>, <code>pip-tools</code>, and <code>virtualenv</code> commands. These commands work directly with the virtual environment, in contrast to uv's primary interfaces where the virtual environment is managed automatically. The <code>uv pip</code> interface exposes the speed and functionality of uv to power users and projects that are not ready to transition away from <code>pip</code> and <code>pip-tools</code>.</p> <p>The following sections discuss the basics of using <code>uv pip</code>:</p> <ul> <li>Creating and using environments</li> <li>Installing and managing packages</li> <li>Inspecting environments and packages</li> <li>Declaring package dependencies</li> <li>Locking and syncing environments</li> </ul> <p>Please note these commands do not exactly implement the interfaces and behavior of the tools they are based on. The further you stray from common workflows, the more likely you are to encounter differences. Consult the pip-compatibility guide for details.</p> <p>Important</p> <p>uv does not rely on or invoke pip. The pip interface is named as such to highlight its dedicated purpose of providing low-level commands that match pip's interface and to separate it from the rest of uv's commands which operate at a higher level of abstraction.</p>"},{"location":"pip/compatibility/","title":"Compatibility with <code>pip</code> and <code>pip-tools</code>","text":"<p>uv is designed as a drop-in replacement for common <code>pip</code> and <code>pip-tools</code> workflows.</p> <p>Informally, the intent is such that existing <code>pip</code> and <code>pip-tools</code> users can switch to uv without making meaningful changes to their packaging workflows; and, in most cases, swapping out <code>pip install</code> for <code>uv pip install</code> should \"just work\".</p> <p>However, uv is not intended to be an exact clone of <code>pip</code>, and the further you stray from common <code>pip</code> workflows, the more likely you are to encounter differences in behavior. In some cases, those differences may be known and intentional; in others, they may be the result of implementation details; and in others, they may be bugs.</p> <p>This document outlines the known differences between uv and <code>pip</code>, along with rationale, workarounds, and a statement of intent for compatibility in the future.</p>"},{"location":"pip/compatibility/#configuration-files-and-environment-variables","title":"Configuration files and environment variables","text":"<p>uv does not read configuration files or environment variables that are specific to <code>pip</code>, like <code>pip.conf</code> or <code>PIP_INDEX_URL</code>.</p> <p>Reading configuration files and environment variables intended for other tools has a number of drawbacks:</p> <ol> <li>It requires bug-for-bug compatibility with the target tool, since users end up relying on bugs in    the format, the parser, etc.</li> <li>If the target tool changes the format in some way, uv is then locked-in to changing it in    equivalent ways.</li> <li>If that configuration is versioned in some way, uv would need to know which version of the    target tool the user is expecting to use.</li> <li>It prevents uv from introducing any settings or configuration that don't exist in the target    tool, since otherwise <code>pip.conf</code> (or similar) would no longer be usable with <code>pip</code>.</li> <li>It can lead to user confusion, since uv would be reading settings that don't actually affect its    behavior, and many users may not expect uv to read configuration files intended for other    tools.</li> </ol> <p>Instead, uv supports its own environment variables, like <code>UV_INDEX_URL</code>. uv also supports persistent configuration in a <code>uv.toml</code> file or a <code>[tool.uv.pip]</code> section of <code>pyproject.toml</code>. For more information, see Configuration files.</p>"},{"location":"pip/compatibility/#pre-release-compatibility","title":"Pre-release compatibility","text":"<p>By default, uv will accept pre-release versions during dependency resolution in two cases:</p> <ol> <li>If the package is a direct dependency, and its version markers include a pre-release specifier    (e.g., <code>flask&gt;=2.0.0rc1</code>).</li> <li>If all published versions of a package are pre-releases.</li> </ol> <p>If dependency resolution fails due to a transitive pre-release, uv will prompt the user to re-run with <code>--prerelease allow</code>, to allow pre-releases for all dependencies.</p> <p>Alternatively, you can add the transitive dependency to your <code>requirements.in</code> file with pre-release specifier (e.g., <code>flask&gt;=2.0.0rc1</code>) to opt in to pre-release support for that specific dependency.</p> <p>In sum, uv needs to know upfront whether the resolver should accept pre-releases for a given package. <code>pip</code>, meanwhile, may respect pre-release identifiers in transitive dependencies depending on the order in which the resolver encounters the relevant specifiers (#1641).</p> <p>Pre-releases are notoriously difficult to model, and are a frequent source of bugs in packaging tools. Even <code>pip</code>, which is viewed as a reference implementation, has a number of open questions around pre-release handling (#12469, #12470, #40505, etc.). uv's pre-release handling is intentionally limited and intentionally requires user opt-in for pre-releases, to ensure correctness.</p> <p>In the future, uv may support pre-release identifiers in transitive dependencies. However, it's likely contingent on evolution in the Python packaging specifications. The existing PEPs do not cover \"dependency resolution\" and are instead focused on behavior for a single version specifier. As such, there are unresolved questions around the correct and intended behavior for pre-releases in the packaging ecosystem more broadly.</p>"},{"location":"pip/compatibility/#packages-that-exist-on-multiple-indexes","title":"Packages that exist on multiple indexes","text":"<p>In both uv and <code>pip</code>, users can specify multiple package indexes from which to search for the available versions of a given package. However, uv and <code>pip</code> differ in how they handle packages that exist on multiple indexes.</p> <p>For example, imagine that a company publishes an internal version of <code>requests</code> on a private index (<code>--extra-index-url</code>), but also allows installing packages from PyPI by default. In this case, the private <code>requests</code> would conflict with the public <code>requests</code> on PyPI.</p> <p>When uv searches for a package across multiple indexes, it will iterate over the indexes in order (preferring the <code>--extra-index-url</code> over the default index), and stop searching as soon as it finds a match. This means that if a package exists on multiple indexes, uv will limit its candidate versions to those present in the first index that contains the package.</p> <p><code>pip</code>, meanwhile, will combine the candidate versions from all indexes, and select the best version from the combined set, though it makes no guarantees around the order in which it searches indexes, and expects that packages are unique up to name and version, even across indexes.</p> <p>uv's behavior is such that if a package exists on an internal index, it should always be installed from the internal index, and never from PyPI. The intent is to prevent \"dependency confusion\" attacks, in which an attacker publishes a malicious package on PyPI with the same name as an internal package, thus causing the malicious package to be installed instead of the internal package. See, for example, the <code>torchtriton</code> attack from December 2022.</p> <p>As of v0.1.39, users can opt in to <code>pip</code>-style behavior for multiple indexes via the <code>--index-strategy</code> command-line option, or the <code>UV_INDEX_STRATEGY</code> environment variable, which supports the following values:</p> <ul> <li><code>first-index</code> (default): Search for each package across all indexes, limiting the candidate   versions to those present in the first index that contains the package, prioritizing the   <code>--extra-index-url</code> indexes over the default index URL.</li> <li><code>unsafe-first-match</code>: Search for each package across all indexes, but prefer the first index with   a compatible version, even if newer versions are available on other indexes.</li> <li><code>unsafe-best-match</code>: Search for each package across all indexes, and select the best version from   the combined set of candidate versions.</li> </ul> <p>While <code>unsafe-best-match</code> is the closest to <code>pip</code>'s behavior, it exposes users to the risk of \"dependency confusion\" attacks.</p> <p>uv also supports pinning packages to dedicated indexes (see: Indexes), such that a given package is always installed from a specific index.</p>"},{"location":"pip/compatibility/#pep-517-build-isolation","title":"PEP 517 build isolation","text":"<p>uv uses PEP 517 build isolation by default (akin to <code>pip install --use-pep517</code>), following <code>pypa/build</code> and in anticipation of <code>pip</code> defaulting to PEP 517 builds in the future (pypa/pip#9175).</p> <p>If a package fails to install due to a missing build-time dependency, try using a newer version of the package; if the problem persists, consider filing an issue with the package maintainer, requesting that they update the packaging setup to declare the correct PEP 517 build-time dependencies.</p> <p>As an escape hatch, you can preinstall a package's build dependencies, then run <code>uv pip install</code> with <code>--no-build-isolation</code>, as in:</p> <pre><code>uv pip install wheel &amp;&amp; uv pip install --no-build-isolation biopython==1.77\n</code></pre> <p>For a list of packages that are known to fail under PEP 517 build isolation, see #2252.</p>"},{"location":"pip/compatibility/#transitive-url-dependencies","title":"Transitive URL dependencies","text":"<p>While uv includes first-class support for URL dependencies (e.g., <code>ruff @ https://...</code>), it differs from pip in its handling of transitive URL dependencies in two ways.</p> <p>First, uv makes the assumption that non-URL dependencies do not introduce URL dependencies into the resolution. In other words, it assumes that dependencies fetched from a registry do not themselves depend on URLs. If a non-URL dependency does introduce a URL dependency, uv will reject the URL dependency during resolution. (Note that PyPI does not allow published packages to depend on URL dependencies; other registries may be more permissive.)</p> <p>Second, if a constraint (<code>--constraint</code>) or override (<code>--override</code>) is defined using a direct URL dependency, and the constrained package has a direct URL dependency of its own, uv may reject that transitive direct URL dependency during resolution, if the URL isn't referenced elsewhere in the set of input requirements.</p> <p>If uv rejects a transitive URL dependency, the best course of action is to provide the URL dependency as a direct dependency in the relevant <code>pyproject.toml</code> or <code>requirement.in</code> file, as the above constraints do not apply to direct dependencies.</p>"},{"location":"pip/compatibility/#virtual-environments-by-default","title":"Virtual environments by default","text":"<p><code>uv pip install</code> and <code>uv pip sync</code> are designed to work with virtual environments by default.</p> <p>Specifically, uv will always install packages into the currently active virtual environment, or search for a virtual environment named <code>.venv</code> in the current directory or any parent directory (even if it is not activated).</p> <p>This differs from <code>pip</code>, which will install packages into a global environment if no virtual environment is active, and will not search for inactive virtual environments.</p> <p>In uv, you can install into non-virtual environments by providing a path to a Python executable via the <code>--python /path/to/python</code> option, or via the <code>--system</code> flag, which installs into the first Python interpreter found on the <code>PATH</code>, like <code>pip</code>.</p> <p>In other words, uv inverts the default, requiring explicit opt-in to installing into the system Python, which can lead to breakages and other complications, and should only be done in limited circumstances.</p> <p>For more, see \"Using arbitrary Python environments\".</p>"},{"location":"pip/compatibility/#resolution-strategy","title":"Resolution strategy","text":"<p>For a given set of dependency specifiers, it's often the case that there is no single \"correct\" set of packages to install. Instead, there are many valid sets of packages that satisfy the specifiers.</p> <p>Neither <code>pip</code> nor uv make any guarantees about the exact set of packages that will be installed; only that the resolution will be consistent, deterministic, and compliant with the specifiers. As such, in some cases, <code>pip</code> and uv will yield different resolutions; however, both resolutions should be equally valid.</p> <p>For example, consider:</p> requirements.in<pre><code>starlette\nfastapi\n</code></pre> <p>At time of writing, the most recent <code>starlette</code> version is <code>0.37.2</code>, and the most recent <code>fastapi</code> version is <code>0.110.0</code>. However, <code>fastapi==0.110.0</code> also depends on <code>starlette</code>, and introduces an upper bound: <code>starlette&gt;=0.36.3,&lt;0.37.0</code>.</p> <p>If a resolver prioritizes including the most recent version of <code>starlette</code>, it would need to use an older version of <code>fastapi</code> that excludes the upper bound on <code>starlette</code>. In practice, this requires falling back to <code>fastapi==0.1.17</code>:</p> requirements.txt<pre><code># This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in\nannotated-types==0.6.0\n# via pydantic\nanyio==4.3.0\n# via starlette\nfastapi==0.1.17\nidna==3.6\n# via anyio\npydantic==2.6.3\n# via fastapi\npydantic-core==2.16.3\n# via pydantic\nsniffio==1.3.1\n# via anyio\nstarlette==0.37.2\n# via fastapi\ntyping-extensions==4.10.0\n# via\n#   pydantic\n#   pydantic-core\n</code></pre> <p>Alternatively, if a resolver prioritizes including the most recent version of <code>fastapi</code>, it would need to use an older version of <code>starlette</code> that satisfies the upper bound. In practice, this requires falling back to <code>starlette==0.36.3</code>:</p> requirements.txt<pre><code># This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in\nannotated-types==0.6.0\n# via pydantic\nanyio==4.3.0\n# via starlette\nfastapi==0.110.0\nidna==3.6\n# via anyio\npydantic==2.6.3\n# via fastapi\npydantic-core==2.16.3\n# via pydantic\nsniffio==1.3.1\n# via anyio\nstarlette==0.36.3\n# via fastapi\ntyping-extensions==4.10.0\n# via\n#   fastapi\n#   pydantic\n#   pydantic-core\n</code></pre> <p>When uv resolutions differ from <code>pip</code> in undesirable ways, it's often a sign that the specifiers are too loose, and that the user should consider tightening them. For example, in the case of <code>starlette</code> and <code>fastapi</code>, the user could require <code>fastapi&gt;=0.110.0</code>.</p>"},{"location":"pip/compatibility/#pip-check","title":"<code>pip check</code>","text":"<p>At present, <code>uv pip check</code> will surface the following diagnostics:</p> <ul> <li>A package has no <code>METADATA</code> file, or the <code>METADATA</code> file can't be parsed.</li> <li>A package has a <code>Requires-Python</code> that doesn't match the Python version of the running   interpreter.</li> <li>A package has a dependency on a package that isn't installed.</li> <li>A package has a dependency on a package that's installed, but at an incompatible version.</li> <li>Multiple versions of a package are installed in the virtual environment.</li> </ul> <p>In some cases, <code>uv pip check</code> will surface diagnostics that <code>pip check</code> does not, and vice versa. For example, unlike <code>uv pip check</code>, <code>pip check</code> will not warn when multiple versions of a package are installed in the current environment.</p>"},{"location":"pip/compatibility/#-user-and-the-user-install-scheme","title":"<code>--user</code> and the <code>user</code> install scheme","text":"<p>uv does not support the <code>--user</code> flag, which installs packages based on the <code>user</code> install scheme. Instead, we recommend the use of virtual environments to isolate package installations.</p> <p>Additionally, pip will fall back to the <code>user</code> install scheme if it detects that the user does not have write permissions to the target directory, as is the case on some systems when installing into the system Python. uv does not implement any such fallback.</p> <p>For more, see #2077.</p>"},{"location":"pip/compatibility/#-only-binary-enforcement","title":"<code>--only-binary</code> enforcement","text":"<p>The <code>--only-binary</code> argument is used to restrict installation to pre-built binary distributions. When <code>--only-binary :all:</code> is provided, both pip and uv will refuse to build source distributions from PyPI and other registries.</p> <p>However, when a dependency is provided as a direct URL (e.g., <code>uv pip install https://...</code>), pip does not enforce <code>--only-binary</code>, and will build source distributions for all such packages.</p> <p>uv, meanwhile, does enforce <code>--only-binary</code> for direct URL dependencies, with one exception: given <code>uv pip install https://... --only-binary flask</code>, uv will build the source distribution at the given URL if it cannot infer the package name ahead of time, since uv can't determine whether the package is \"allowed\" in such cases without building its metadata.</p> <p>Both pip and uv allow editables requirements to be built and installed even when <code>--only-binary</code> is provided. For example, <code>uv pip install -e . --only-binary :all:</code> is allowed.</p>"},{"location":"pip/compatibility/#-no-binary-enforcement","title":"<code>--no-binary</code> enforcement","text":"<p>The <code>--no-binary</code> argument is used to restrict installation to source distributions. When <code>--no-binary</code> is provided, uv will refuse to install pre-built binary distributions, but will reuse any binary distributions that are already present in the local cache.</p> <p>Additionally, and in contrast to pip, uv's resolver will still read metadata from pre-built binary distributions when <code>--no-binary</code> is provided.</p>"},{"location":"pip/compatibility/#manylinux_compatible-enforcement","title":"<code>manylinux_compatible</code> enforcement","text":"<p>PEP 600 describes a mechanism through which Python distributors can opt out of <code>manylinux</code> compatibility by defining a <code>manylinux_compatible</code> function on the <code>_manylinux</code> standard library module.</p> <p>uv respects <code>manylinux_compatible</code>, but only tests against the current glibc version, and applies the return value of <code>manylinux_compatible</code> globally.</p> <p>In other words, if <code>manylinux_compatible</code> returns <code>True</code>, uv will treat the system as <code>manylinux</code>-compatible; if it returns <code>False</code>, uv will treat the system as <code>manylinux</code>-incompatible, without calling <code>manylinux_compatible</code> for every glibc version.</p> <p>This approach is not a complete implementation of the spec, but is compatible with common blanket <code>manylinux_compatible</code> implementations like <code>no-manylinux</code>:</p> <pre><code>from __future__ import annotations\nmanylinux1_compatible = False\nmanylinux2010_compatible = False\nmanylinux2014_compatible = False\ndef manylinux_compatible(*_, **__):  # PEP 600\nreturn False\n</code></pre>"},{"location":"pip/compatibility/#bytecode-compilation","title":"Bytecode compilation","text":"<p>Unlike <code>pip</code>, uv does not compile <code>.py</code> files to <code>.pyc</code> files during installation by default (i.e., uv does not create or populate <code>__pycache__</code> directories). To enable bytecode compilation during installs, pass the <code>--compile-bytecode</code> flag to <code>uv pip install</code> or <code>uv pip sync</code>, or set the <code>UV_COMPILE_BYTECODE</code> environment variable to <code>1</code>.</p> <p>Skipping bytecode compilation can be undesirable in workflows; for example, we recommend enabling bytecode compilation in Docker builds to improve startup times (at the cost of increased build times).</p> <p>As bytecode compilation suppresses various warnings issued by the Python interpreter, in rare cases you may seen <code>SyntaxWarning</code> or <code>DeprecationWarning</code> messages when running Python code that was installed with uv that do not appear when using <code>pip</code>. These are valid warnings, but are typically hidden by the bytecode compilation process, and can either be ignored, fixed upstream, or similarly suppressed by enabling bytecode compilation in uv.</p>"},{"location":"pip/compatibility/#strictness-and-spec-enforcement","title":"Strictness and spec enforcement","text":"<p>uv tends to be stricter than <code>pip</code>, and will often reject packages that <code>pip</code> would install. For example, uv rejects HTML indexes with invalid URL fragments (see: PEP 503), while <code>pip</code> will ignore such fragments.</p> <p>In some cases, uv implements lenient behavior for popular packages that are known to have specific spec compliance issues.</p> <p>If uv rejects a package that <code>pip</code> would install due to a spec violation, the best course of action is to first attempt to install a newer version of the package; and, if that fails, to report the issue to the package maintainer.</p>"},{"location":"pip/compatibility/#pip-command-line-options-and-subcommands","title":"<code>pip</code> command-line options and subcommands","text":"<p>uv does not support the complete set of <code>pip</code>'s command-line options and subcommands, although it does support a large subset.</p> <p>Missing options and subcommands are prioritized based on user demand and the complexity of the implementation, and tend to be tracked in individual issues. For example:</p> <ul> <li><code>--trusted-host</code></li> <li><code>--user</code></li> </ul> <p>If you encounter a missing option or subcommand, please search the issue tracker to see if it has already been reported, and if not, consider opening a new issue. Feel free to upvote any existing issues to convey your interest.</p>"},{"location":"pip/compatibility/#registry-authentication","title":"Registry authentication","text":"<p>uv does not support <code>pip</code>'s <code>auto</code> or <code>import</code> options for <code>--keyring-provider</code>. At present, only the <code>subprocess</code> option is supported.</p> <p>Unlike <code>pip</code>, uv does not enable keyring authentication by default.</p> <p>Unlike <code>pip</code>, uv does not wait until a request returns an HTTP 401 before searching for authentication. uv attaches authentication to all requests for hosts with credentials available.</p>"},{"location":"pip/compatibility/#egg-support","title":"<code>egg</code> support","text":"<p>uv does not support features that are considered legacy or deprecated in <code>pip</code>. For example, uv does not support <code>.egg</code>-style distributions.</p> <p>However, uv does have partial support for (1) <code>.egg-info</code>-style distributions (which are occasionally found in Docker images and Conda environments) and (2) legacy editable <code>.egg-link</code>-style distributions.</p> <p>Specifically, uv does not support installing new <code>.egg-info</code>- or <code>.egg-link</code>-style distributions, but will respect any such existing distributions during resolution, list them with <code>uv pip list</code> and <code>uv pip freeze</code>, and uninstall them with <code>uv pip uninstall</code>.</p>"},{"location":"pip/compatibility/#build-constraints","title":"Build constraints","text":"<p>When constraints are provided via <code>--constraint</code> (or <code>UV_CONSTRAINT</code>), uv will not apply the constraints when resolving build dependencies (i.e., to build a source distribution). Instead, build constraints should be provided via the dedicated <code>--build-constraint</code> (or <code>UV_BUILD_CONSTRAINT</code>) setting.</p> <p>pip, meanwhile, applies constraints to build dependencies when specified via <code>PIP_CONSTRAINT</code>, but not when provided via <code>--constraint</code> on the command line.</p> <p>For example, to ensure that <code>setuptools 60.0.0</code> is used to build any packages with a build dependency on <code>setuptools</code>, use <code>--build-constraint</code>, rather than <code>--constraint</code>.</p>"},{"location":"pip/compatibility/#pip-compile-defaults","title":"<code>pip compile</code> defaults","text":"<p>There are a few small but notable differences in the default behaviors of <code>pip compile</code> and <code>pip-tools</code>.</p> <p>By default, uv does not write the compiled requirements to an output file. Instead, uv requires that the user specify an output file explicitly with the <code>-o</code> or <code>--output-file</code> option.</p> <p>By default, uv strips extras when outputting the compiled requirements. In other words, uv defaults to <code>--strip-extras</code>, while <code>pip-compile</code> defaults to <code>--no-strip-extras</code>. <code>pip-compile</code> is scheduled to change this default in the next major release (v8.0.0), at which point both tools will default to <code>--strip-extras</code>. To retain extras with uv, pass the <code>--no-strip-extras</code> flag to <code>uv pip compile</code>.</p> <p>By default, uv does not write any index URLs to the output file, while <code>pip-compile</code> outputs any <code>--index-url</code> or <code>--extra-index-url</code> that does not match the default (PyPI). To include index URLs in the output file, pass the <code>--emit-index-url</code> flag to <code>uv pip compile</code>. Unlike <code>pip-compile</code>, uv will include all index URLs when <code>--emit-index-url</code> is passed, including the default index URL.</p>"},{"location":"pip/compatibility/#requires-python-upper-bounds","title":"<code>requires-python</code> upper bounds","text":"<p>When evaluating <code>requires-python</code> ranges for dependencies, uv only considers lower bounds and ignores upper bounds entirely. For example, <code>&gt;=3.8, &lt;4</code> is treated as <code>&gt;=3.8</code>. Respecting upper bounds on <code>requires-python</code> often leads to formally correct but practically incorrect resolutions, as, e.g., resolvers will backtrack to the first published version that omits the upper bound (see: <code>Requires-Python</code> upper limits).</p>"},{"location":"pip/compatibility/#requires-python-specifiers","title":"<code>requires-python</code> specifiers","text":"<p>When evaluating Python versions against <code>requires-python</code> specifiers, uv truncates the candidate version to the major, minor, and patch components, ignoring (e.g.) pre-release and post-release identifiers.</p> <p>For example, a project that declares <code>requires-python: &gt;=3.13</code> will accept Python 3.13.0b1. While 3.13.0b1 is not strictly greater than 3.13, it is greater than 3.13 when the pre-release identifier is omitted.</p> <p>While this is not strictly compliant with PEP 440, it is consistent with pip.</p>"},{"location":"pip/compatibility/#package-priority","title":"Package priority","text":"<p>There are usually many possible solutions given a set of requirements, and a resolver must choose between them. uv's resolver and pip's resolver have a different set of package priorities. While both resolvers use the user-provided order as one of their priorities, pip has additional priorities that uv does not have. Hence, uv is more likely to be affected by a change in user order than pip is.</p> <p>For example, <code>uv pip install foo bar</code> prioritizes newer versions of <code>foo</code> over <code>bar</code> and could result in a different resolution than <code>uv pip install bar foo</code>. Similarly, this behavior applies to the ordering of requirements in input files for <code>uv pip compile</code>.</p>"},{"location":"pip/compatibility/#wheel-filename-and-metadata-validation","title":"Wheel filename and metadata validation","text":"<p>By default, uv will reject wheels whose filenames are inconsistent with the wheel metadata inside the file. For example, a wheel named <code>foo-1.0.0-py3-none-any.whl</code> that contains metadata indicating the version is <code>1.0.1</code> will be rejected by uv, but accepted by pip.</p> <p>To force uv to accept such wheels, set <code>UV_SKIP_WHEEL_FILENAME_CHECK=1</code> in the environment.</p>"},{"location":"pip/compile/","title":"Locking environments","text":"<p>Locking is to take a dependency, e.g., <code>ruff</code>, and write an exact version to use to a file. When working with many dependencies, it is useful to lock the exact versions so the environment can be reproduced. Without locking, the versions of dependencies could change over time, when using a different tool, or across platforms.</p>"},{"location":"pip/compile/#locking-requirements","title":"Locking requirements","text":"<p>uv allows dependencies to be locked in the <code>requirements.txt</code> format. It is recommended to use the standard <code>pyproject.toml</code> to define dependencies, but other dependency formats are supported as well. See the documentation on declaring dependencies for more details on how to define dependencies.</p> <p>To lock dependencies declared in a <code>pyproject.toml</code>:</p> <pre><code>$ uv pip compile pyproject.toml -o requirements.txt\n</code></pre> <p>Note by default the <code>uv pip compile</code> output is just displayed and <code>--output-file</code> / <code>-o</code> argument is needed to write to a file.</p> <p>To lock dependencies declared in a <code>requirements.in</code>:</p> <pre><code>$ uv pip compile requirements.in -o requirements.txt\n</code></pre> <p>To lock dependencies declared in multiple files:</p> <pre><code>$ uv pip compile pyproject.toml requirements-dev.in -o requirements-dev.txt\n</code></pre> <p>uv also supports legacy <code>setup.py</code> and <code>setup.cfg</code> formats. To lock dependencies declared in a <code>setup.py</code>:</p> <pre><code>$ uv pip compile setup.py -o requirements.txt\n</code></pre> <p>To lock dependencies from stdin, use <code>-</code>:</p> <pre><code>$ echo \"ruff\" | uv pip compile -\n</code></pre> <p>To lock with optional dependencies enabled, e.g., the \"foo\" extra:</p> <pre><code>$ uv pip compile pyproject.toml --extra foo\n</code></pre> <p>To lock with all optional dependencies enabled:</p> <pre><code>$ uv pip compile pyproject.toml --all-extras\n</code></pre> <p>Note extras are not supported with the <code>requirements.in</code> format.</p> <p>To lock a dependency group in the current project directory's <code>pyproject.toml</code>, for example the group <code>foo</code>:</p> <pre><code>$ uv pip compile --group foo\n</code></pre> <p>Important</p> <p>A <code>--group</code> flag has to be added to pip-tools' <code>pip compile</code>, although they're considering it. We expect to support whatever syntax and semantics they adopt.</p> <p>To specify the project directory where groups should be sourced from:</p> <pre><code>$ uv pip compile --project some/path/ --group foo --group bar\n</code></pre> <p>Alternatively, you can specify a path to a <code>pyproject.toml</code> for each group:</p> <pre><code>$ uv pip compile --group some/path/pyproject.toml:foo --group other/pyproject.toml:bar\n</code></pre> <p>Note</p> <p><code>--group</code> flags do not apply to other specified sources. For instance, <code>uv pip compile some/path/pyproject.toml --group foo</code> sources <code>foo</code> from <code>./pyproject.toml</code> and not <code>some/path/pyproject.toml</code>.</p>"},{"location":"pip/compile/#upgrading-requirements","title":"Upgrading requirements","text":"<p>When using an output file, uv will consider the versions pinned in an existing output file. If a dependency is pinned it will not be upgraded on a subsequent compile run. For example:</p> <pre><code>$ echo \"ruff==0.3.0\" &gt; requirements.txt\n$ echo \"ruff\" | uv pip compile - -o requirements.txt\n# This file was autogenerated by uv via the following command:\n#    uv pip compile - -o requirements.txt\nruff==0.3.0\n</code></pre> <p>To upgrade a dependency, use the <code>--upgrade-package</code> flag:</p> <pre><code>$ uv pip compile - -o requirements.txt --upgrade-package ruff\n</code></pre> <p>To upgrade all dependencies, there is an <code>--upgrade</code> flag.</p>"},{"location":"pip/compile/#syncing-an-environment","title":"Syncing an environment","text":"<p>Dependencies can be installed directly from their definition files or from compiled <code>requirements.txt</code> files with <code>uv pip install</code>. See the documentation on installing packages from files for more details.</p> <p>When installing with <code>uv pip install</code>, packages that are already installed will not be removed unless they conflict with the lockfile. This means that the environment can have dependencies that aren't declared in the lockfile, which isn't great for reproducibility. To ensure the environment exactly matches the lockfile, use <code>uv pip sync</code> instead.</p> <p>To sync an environment with a <code>requirements.txt</code> file:</p> <pre><code>$ uv pip sync requirements.txt\n</code></pre> <p>To sync an environment with a PEP 751 <code>pylock.toml</code> file:</p> <pre><code>$ uv pip sync pylock.toml\n</code></pre>"},{"location":"pip/compile/#adding-constraints","title":"Adding constraints","text":"<p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package. Constraints can be used to add bounds to dependencies that are not dependencies of the current project.</p> <p>To define a constraint, define a bound for a package:</p> constraints.txt<pre><code>pydantic&lt;2.0\n</code></pre> <p>To use a constraints file:</p> <pre><code>$ uv pip compile requirements.in --constraint constraints.txt\n</code></pre> <p>Note that multiple constraints can be defined in each file and multiple files can be used.</p> <p>uv will also read <code>constraint-dependencies</code> from the <code>pyproject.toml</code> at the workspace root, and append them to those specified in the constraints file.</p>"},{"location":"pip/compile/#adding-build-constraints","title":"Adding build constraints","text":"<p>Similar to <code>constraints</code>, but specifically for build-time dependencies, including those required when building runtime dependencies.</p> <p>Build constraint files are <code>requirements.txt</code>-like files that only control the version of a build-time requirement. However, including a package in a build constraints file will not trigger its installation at build time; instead, constraints apply only when the package is required as a direct or transitive build-time dependency. Build constraints can be used to add bounds to dependencies that are not explicitly declared as build-time dependencies of the current project.</p> <p>For example, if a package defines its build dependencies as follows:</p> pyproject.toml<pre><code>[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n</code></pre> <p>Build constraints could be used to ensure that a specific version of <code>setuptools</code> is used for every package in the workspace:</p> build-constraints.txt<pre><code>setuptools==75.0.0\n</code></pre> <p>uv will also read <code>build-constraint-dependencies</code> from the <code>pyproject.toml</code> at the workspace root, and append them to those specified in the build constraints file.</p>"},{"location":"pip/compile/#overriding-dependency-versions","title":"Overriding dependency versions","text":"<p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they're combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <p>Overrides are most often used to remove upper bounds from a transitive dependency. For example, if <code>a</code> requires <code>c&gt;=1.0,&lt;2.0</code> and <code>b</code> requires <code>c&gt;=2.0</code> and the current project requires <code>a</code> and <code>b</code> then the dependencies cannot be resolved.</p> <p>To define an override, define the new requirement for the problematic package:</p> overrides.txt<pre><code>c&gt;=2.0\n</code></pre> <p>To use an overrides file:</p> <pre><code>$ uv pip compile requirements.in --override overrides.txt\n</code></pre> <p>Now, resolution can succeed. However, note that if <code>a</code> is correct that it does not support <code>c&gt;=2.0</code> then a runtime error will likely be encountered when using the packages.</p> <p>Note that multiple overrides can be defined in each file and multiple files can be used.</p>"},{"location":"pip/dependencies/","title":"Declaring dependencies","text":"<p>It is best practice to declare dependencies in a static file instead of modifying environments with ad-hoc installations. Once dependencies are defined, they can be locked to create a consistent, reproducible environment.</p>"},{"location":"pip/dependencies/#using-pyprojecttoml","title":"Using <code>pyproject.toml</code>","text":"<p>The <code>pyproject.toml</code> file is the Python standard for defining configuration for a project.</p> <p>To define project dependencies in a <code>pyproject.toml</code> file:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n\"httpx\",\n\"ruff&gt;=0.3.0\"\n]\n</code></pre> <p>To define optional dependencies in a <code>pyproject.toml</code> file:</p> pyproject.toml<pre><code>[project.optional-dependencies]\ncli = [\n\"rich\",\n\"click\",\n]\n</code></pre> <p>Each of the keys defines an \"extra\", which can be installed using the <code>--extra</code> and <code>--all-extras</code> flags or <code>package[&lt;extra&gt;]</code> syntax. See the documentation on installing packages for more details.</p> <p>See the official <code>pyproject.toml</code> guide for more details on getting started with a <code>pyproject.toml</code>.</p>"},{"location":"pip/dependencies/#using-requirementsin","title":"Using <code>requirements.in</code>","text":"<p>It is also common to use a lightweight <code>requirements.txt</code> format to declare the dependencies for the project. Each requirement is defined on its own line. Commonly, this file is called <code>requirements.in</code> to distinguish it from <code>requirements.txt</code> which is used for the locked dependencies.</p> <p>To define dependencies in a <code>requirements.in</code> file:</p> requirements.in<pre><code>httpx\nruff&gt;=0.3.0\n</code></pre> <p>Optional dependencies groups are not supported in this format.</p>"},{"location":"pip/environments/","title":"Using Python environments","text":"<p>Each Python installation has an environment that is active when Python is used. Packages can be installed into an environment to make their modules available from your Python scripts. Generally, it is considered best practice not to modify a Python installation's environment. This is especially important for Python installations that come with the operating system which often manage the packages themselves. A virtual environment is a lightweight way to isolate packages from a Python installation's environment. Unlike <code>pip</code>, uv requires using a virtual environment by default.</p>"},{"location":"pip/environments/#creating-a-virtual-environment","title":"Creating a virtual environment","text":"<p>uv supports creating virtual environments, e.g., to create a virtual environment at <code>.venv</code>:</p> <pre><code>$ uv venv\n</code></pre> <p>A specific name or path can be specified, e.g., to create a virtual environment at <code>my-name</code>:</p> <pre><code>$ uv venv my-name\n</code></pre> <p>A Python version can be requested, e.g., to create a virtual environment with Python 3.11:</p> <pre><code>$ uv venv --python 3.11\n</code></pre> <p>Note this requires the requested Python version to be available on the system. However, if unavailable, uv will download Python for you. See the Python version documentation for more details.</p>"},{"location":"pip/environments/#using-a-virtual-environment","title":"Using a virtual environment","text":"<p>When using the default virtual environment name, uv will automatically find and use the virtual environment during subsequent invocations.</p> <pre><code>$ uv venv\n\n$ # Install a package in the new virtual environment\n$ uv pip install ruff\n</code></pre> <p>The virtual environment can be \"activated\" to make its packages available:</p> macOS and LinuxWindows <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>PS&gt; .venv\\Scripts\\activate\n</code></pre> <p>Note</p> <p>The default activation script on Unix is for POSIX compliant shells like <code>sh</code>, <code>bash</code>, or <code>zsh</code>. There are additional activation scripts for common alternative shells.</p> fishcsh / tcshNushell <pre><code>$ source .venv/bin/activate.fish\n</code></pre> <pre><code>$ source .venv/bin/activate.csh\n</code></pre> <pre><code>$ use .venv\\Scripts\\activate.nu\n</code></pre>"},{"location":"pip/environments/#deactivating-an-environment","title":"Deactivating an environment","text":"<p>To exit a virtual environment, use the <code>deactivate</code> command:</p> <pre><code>$ deactivate\n</code></pre>"},{"location":"pip/environments/#using-arbitrary-python-environments","title":"Using arbitrary Python environments","text":"<p>Since uv has no dependency on Python, it can install into virtual environments other than its own. For example, setting <code>VIRTUAL_ENV=/path/to/venv</code> will cause uv to install into <code>/path/to/venv</code>, regardless of where uv is installed. Note that if <code>VIRTUAL_ENV</code> is set to a directory that is not a PEP 405 compliant virtual environment, it will be ignored.</p> <p>uv can also install into arbitrary, even non-virtual environments, with the <code>--python</code> argument provided to <code>uv pip sync</code> or <code>uv pip install</code>. For example, <code>uv pip install --python /path/to/python</code> will install into the environment linked to the <code>/path/to/python</code> interpreter.</p> <p>For convenience, <code>uv pip install --system</code> will install into the system Python environment. Using <code>--system</code> is roughly equivalent to <code>uv pip install --python $(which python)</code>, but note that executables that are linked to virtual environments will be skipped. Although we generally recommend using virtual environments for dependency management, <code>--system</code> is appropriate in continuous integration and containerized environments.</p> <p>The <code>--system</code> flag is also used to opt in to mutating system environments. For example, the <code>--python</code> argument can be used to request a Python version (e.g., <code>--python 3.12</code>), and uv will search for an interpreter that meets the request. If uv finds a system interpreter (e.g., <code>/usr/lib/python3.12</code>), then the <code>--system</code> flag is required to allow modification of this non-virtual Python environment. Without the <code>--system</code> flag, uv will ignore any interpreters that are not in virtual environments. Conversely, when the <code>--system</code> flag is provided, uv will ignore any interpreters that are in virtual environments.</p> <p>Installing into system Python across platforms and distributions is notoriously difficult. uv supports the common cases, but will not work in all cases. For example, installing into system Python on Debian prior to Python 3.10 is unsupported due to the distribution's patching of <code>distutils</code> (but not <code>sysconfig</code>). While we always recommend the use of virtual environments, uv considers them to be required in these non-standard environments.</p> <p>If uv is installed in a Python environment, e.g., with <code>pip</code>, it can still be used to modify other environments. However, when invoked with <code>python -m uv</code>, uv will default to using the parent interpreter's environment. Invoking uv via Python adds startup overhead and is not recommended for general usage.</p> <p>uv itself does not depend on Python, but it does need to locate a Python environment to (1) install dependencies into the environment and (2) build source distributions.</p>"},{"location":"pip/environments/#discovery-of-python-environments","title":"Discovery of Python environments","text":"<p>When running a command that mutates an environment such as <code>uv pip sync</code> or <code>uv pip install</code>, uv will search for a virtual environment in the following order:</p> <ul> <li>An activated virtual environment based on the <code>VIRTUAL_ENV</code> environment variable.</li> <li>An activated Conda environment based on the <code>CONDA_PREFIX</code> environment variable.</li> <li>A virtual environment at <code>.venv</code> in the current directory, or in the nearest parent directory.</li> </ul> <p>If no virtual environment is found, uv will prompt the user to create one in the current directory via <code>uv venv</code>.</p> <p>If the <code>--system</code> flag is included, uv will skip virtual environments search for an installed Python version. Similarly, when running a command that does not mutate the environment such as <code>uv pip compile</code>, uv does not require a virtual environment \u2014 however, a Python interpreter is still required. See the documentation on Python discovery for details on the discovery of installed Python versions.</p>"},{"location":"pip/inspection/","title":"Inspecting environments","text":""},{"location":"pip/inspection/#listing-installed-packages","title":"Listing installed packages","text":"<p>To list all the packages in the environment:</p> <pre><code>$ uv pip list\n</code></pre> <p>To list the packages in a JSON format:</p> <pre><code>$ uv pip list --format json\n</code></pre> <p>To list all the packages in the environment in a <code>requirements.txt</code> format:</p> <pre><code>$ uv pip freeze\n</code></pre>"},{"location":"pip/inspection/#inspecting-a-package","title":"Inspecting a package","text":"<p>To show information about an installed package, e.g., <code>numpy</code>:</p> <pre><code>$ uv pip show numpy\n</code></pre> <p>Multiple packages can be inspected at once.</p>"},{"location":"pip/inspection/#verifying-an-environment","title":"Verifying an environment","text":"<p>It is possible to install packages with conflicting requirements into an environment if installed in multiple steps.</p> <p>To check for conflicts or missing dependencies in the environment:</p> <pre><code>$ uv pip check\n</code></pre>"},{"location":"pip/packages/","title":"Managing packages","text":""},{"location":"pip/packages/#installing-a-package","title":"Installing a package","text":"<p>To install a package into the virtual environment, e.g., Flask:</p> <pre><code>$ uv pip install flask\n</code></pre> <p>To install a package with optional dependencies enabled, e.g., Flask with the \"dotenv\" extra:</p> <pre><code>$ uv pip install \"flask[dotenv]\"\n</code></pre> <p>To install multiple packages, e.g., Flask and Ruff:</p> <pre><code>$ uv pip install flask ruff\n</code></pre> <p>To install a package with a constraint, e.g., Ruff v0.2.0 or newer:</p> <pre><code>$ uv pip install 'ruff&gt;=0.2.0'\n</code></pre> <p>To install a package at a specific version, e.g., Ruff v0.3.0:</p> <pre><code>$ uv pip install 'ruff==0.3.0'\n</code></pre> <p>To install a package from the disk:</p> <pre><code>$ uv pip install \"ruff @ ./projects/ruff\"\n</code></pre> <p>To install a package from GitHub:</p> <pre><code>$ uv pip install \"git+https://github.com/astral-sh/ruff\"\n</code></pre> <p>To install a package from GitHub at a specific reference:</p> <pre><code>$ # Install a tag\n$ uv pip install \"git+https://github.com/astral-sh/ruff@v0.2.0\"\n$ # Install a commit\n$ uv pip install \"git+https://github.com/astral-sh/ruff@1fadefa67b26508cc59cf38e6130bde2243c929d\"\n$ # Install a branch\n$ uv pip install \"git+https://github.com/astral-sh/ruff@main\"\n</code></pre> <p>See the Git authentication documentation for installation from a private repository.</p>"},{"location":"pip/packages/#editable-packages","title":"Editable packages","text":"<p>Editable packages do not need to be reinstalled for changes to their source code to be active.</p> <p>To install the current project as an editable package</p> <pre><code>$ uv pip install -e .\n</code></pre> <p>To install a project in another directory as an editable package:</p> <pre><code>$ uv pip install -e \"ruff @ ./project/ruff\"\n</code></pre>"},{"location":"pip/packages/#installing-packages-from-files","title":"Installing packages from files","text":"<p>Multiple packages can be installed at once from standard file formats.</p> <p>Install from a <code>requirements.txt</code> file:</p> <pre><code>$ uv pip install -r requirements.txt\n</code></pre> <p>See the <code>uv pip compile</code> documentation for more information on <code>requirements.txt</code> files.</p> <p>Install from a <code>pyproject.toml</code> file:</p> <pre><code>$ uv pip install -r pyproject.toml\n</code></pre> <p>Install from a <code>pyproject.toml</code> file with optional dependencies enabled, e.g., the \"foo\" extra:</p> <pre><code>$ uv pip install -r pyproject.toml --extra foo\n</code></pre> <p>Install from a <code>pyproject.toml</code> file with all optional dependencies enabled:</p> <pre><code>$ uv pip install -r pyproject.toml --all-extras\n</code></pre> <p>To install dependency groups in the current project directory's <code>pyproject.toml</code>, for example the group <code>foo</code>:</p> <pre><code>$ uv pip install --group foo\n</code></pre> <p>To specify the project directory where groups should be sourced from:</p> <pre><code>$ uv pip install --project some/path/ --group foo --group bar\n</code></pre> <p>Alternatively, you can specify a path to a <code>pyproject.toml</code> for each group:</p> <pre><code>$ uv pip install --group some/path/pyproject.toml:foo --group other/pyproject.toml:bar\n</code></pre> <p>Note</p> <p>As in pip, <code>--group</code> flags do not apply to other sources specified with flags like <code>-r</code> or <code>-e</code>. For instance, <code>uv pip install -r some/path/pyproject.toml --group foo</code> sources <code>foo</code> from <code>./pyproject.toml</code> and not <code>some/path/pyproject.toml</code>.</p>"},{"location":"pip/packages/#uninstalling-a-package","title":"Uninstalling a package","text":"<p>To uninstall a package, e.g., Flask:</p> <pre><code>$ uv pip uninstall flask\n</code></pre> <p>To uninstall multiple packages, e.g., Flask and Ruff:</p> <pre><code>$ uv pip uninstall flask ruff\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>The reference section provides information about specific parts of uv:</p> <ul> <li>Commands: A reference for uv's command line interface.</li> <li>Settings: A reference for uv's configuration schema.</li> <li>Resolver: Details about the internals of uv's resolver.</li> <li>Policies: uv's versioning policy, platform support policy, and license.</li> </ul> <p>Looking for a broader overview? Check out the concepts documentation.</p>"},{"location":"reference/benchmarks/","title":"Benchmarks","text":"<p>uv's performance is continually benchmarked against previous releases, and regularly compared to other tools in the space, like pip and Poetry.</p> <p>The latest benchmarks and details on the benchmarking process can be found in the GitHub repository.</p>"},{"location":"reference/cli/","title":"CLI Reference","text":""},{"location":"reference/cli/#uv","title":"uv","text":"<p>An extremely fast Python package manager.</p> Usage <pre><code>uv [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv auth</code><p>Manage authentication</p> <code>uv run</code><p>Run a command or script</p> <code>uv init</code><p>Create a new project</p> <code>uv add</code><p>Add dependencies to the project</p> <code>uv remove</code><p>Remove dependencies from the project</p> <code>uv version</code><p>Read or update the project's version</p> <code>uv sync</code><p>Update the project's environment</p> <code>uv lock</code><p>Update the project's lockfile</p> <code>uv export</code><p>Export the project's lockfile to an alternate format</p> <code>uv tree</code><p>Display the project's dependency tree</p> <code>uv format</code><p>Format Python code in the project</p> <code>uv tool</code><p>Run and install commands provided by Python packages</p> <code>uv python</code><p>Manage Python versions and installations</p> <code>uv pip</code><p>Manage Python packages with a pip-compatible interface</p> <code>uv venv</code><p>Create a virtual environment</p> <code>uv build</code><p>Build Python packages into source distributions and wheels</p> <code>uv publish</code><p>Upload distributions to an index</p> <code>uv cache</code><p>Manage uv's cache</p> <code>uv self</code><p>Manage the uv executable</p> <code>uv help</code><p>Display documentation for a command</p>"},{"location":"reference/cli/#uv-auth","title":"uv auth","text":"<p>Manage authentication</p> Usage <pre><code>uv auth [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv auth login</code><p>Login to a service</p> <code>uv auth logout</code><p>Logout of a service</p> <code>uv auth token</code><p>Show the authentication token for a service</p> <code>uv auth dir</code><p>Show the path to the uv credentials directory</p>"},{"location":"reference/cli/#uv-auth-login","title":"uv auth loginUsageArgumentsOptions","text":"<p>Login to a service</p> <pre><code>uv auth login [OPTIONS] &lt;SERVICE&gt;\n</code></pre> SERVICE<p>The domain or URL of the service to log into</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--keyring-provider</code> keyring-provider<p>The keyring provider to use for storage of credentials.</p> <p>Only <code>--keyring-provider native</code> is supported for <code>login</code>, which uses the system keyring via an integration built into uv.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--password</code> password<p>The password to use for the service.</p> <p>Use <code>-</code> to read the password from stdin.</p> <code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--token</code>, <code>-t</code> token<p>The token to use for the service.</p> <p>The username will be set to <code>__token__</code>.</p> <p>Use <code>-</code> to read the token from stdin.</p> <code>--username</code>, <code>-u</code> username<p>The username to use for the service</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-auth-logout","title":"uv auth logoutUsageArgumentsOptions","text":"<p>Logout of a service</p> <pre><code>uv auth logout [OPTIONS] &lt;SERVICE&gt;\n</code></pre> SERVICE<p>The domain or URL of the service to logout from</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--keyring-provider</code> keyring-provider<p>The keyring provider to use for storage of credentials.</p> <p>Only <code>--keyring-provider native</code> is supported for <code>logout</code>, which uses the system keyring via an integration built into uv.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--username</code>, <code>-u</code> username<p>The username to logout</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-auth-token","title":"uv auth tokenUsageArgumentsOptions","text":"<p>Show the authentication token for a service</p> <pre><code>uv auth token [OPTIONS] &lt;SERVICE&gt;\n</code></pre> SERVICE<p>The domain or URL of the service to lookup</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--keyring-provider</code> keyring-provider<p>The keyring provider to use for reading credentials</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--username</code>, <code>-u</code> username<p>The username to lookup</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-auth-dir","title":"uv auth dirUsageArgumentsOptions","text":"<p>Show the path to the uv credentials directory.</p> <p>By default, credentials are stored in the uv data directory at <code>$XDG_DATA_HOME/uv/credentials</code> or <code>$HOME/.local/share/uv/credentials</code> on Unix and <code>%APPDATA%\\uv\\data\\credentials</code> on Windows.</p> <p>The credentials directory may be overridden with <code>$UV_CREDENTIALS_DIR</code>.</p> <p>Credentials are only stored in this directory when the plaintext backend is used, as opposed to the native backend, which uses the system keyring.</p> <pre><code>uv auth dir [OPTIONS] [SERVICE]\n</code></pre> SERVICE<p>The domain or URL of the service to lookup</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-run","title":"uv run","text":"<p>Run a command or script.</p> <p>Ensures that the command runs in a Python environment.</p> <p>When used with a file ending in <code>.py</code> or an HTTP(S) URL, the file will be treated as a script and run with a Python interpreter, i.e., <code>uv run file.py</code> is equivalent to <code>uv run python file.py</code>. For URLs, the script is temporarily downloaded before execution. If the script contains inline dependency metadata, it will be installed into an isolated, ephemeral environment. When used with <code>-</code>, the input will be read from stdin, and treated as a Python script.</p> <p>When used in a project, the project environment will be created and updated before invoking the command.</p> <p>When used outside a project, if a virtual environment can be found in the current directory or a parent directory, the command will be run in that environment. Otherwise, the command will be run in the environment of the discovered interpreter.</p> <p>Arguments following the command (or script) are not interpreted as arguments to uv. All options to uv must be provided before the command, e.g., <code>uv run --verbose foo</code>. A <code>--</code> can be used to separate the command from uv options for clarity, e.g., <code>uv run --python 3.12 -- python</code>.</p> Usage <pre><code>uv run [OPTIONS] [COMMAND]\n</code></pre> Options <code>--active</code><p>Prefer the active virtual environment over the project's virtual environment.</p> <p>If the project virtual environment is active or no virtual environment is active, this has no effect.</p> <code>--all-extras</code><p>Include all optional dependencies.</p> <p>Optional dependencies are defined via <code>project.optional-dependencies</code> in a <code>pyproject.toml</code>.</p> <p>This option is only available when running in a project.</p> <code>--all-groups</code><p>Include dependencies from all dependency groups.</p> <p><code>--no-group</code> can be used to exclude specific groups.</p> <code>--all-packages</code><p>Run the command with all workspace members installed.</p> <p>The workspace's environment (<code>.venv</code>) is updated to include all workspace members.</p> <p>Any extras or groups specified via <code>--extra</code>, <code>--group</code>, or related options will be applied to all workspace members.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--env-file</code> env-file<p>Load environment variables from a <code>.env</code> file.</p> <p>Can be provided multiple times, with subsequent files overriding values defined in previous files.</p> <p>May also be set with the <code>UV_ENV_FILE</code> environment variable.</p><code>--exact</code><p>Perform an exact sync, removing extraneous packages.</p> <p>When enabled, uv will remove any extraneous packages from the environment. By default, <code>uv run</code> will make the minimum necessary changes to satisfy the requirements.</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra</code> extra<p>Include optional dependencies from the specified extra name.</p> <p>May be provided more than once.</p> <p>Optional dependencies are defined via <code>project.optional-dependencies</code> in a <code>pyproject.toml</code>.</p> <p>This option is only available when running in a project.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--frozen</code><p>Run without updating the <code>uv.lock</code> file.</p> <p>Instead of checking if the lockfile is up-to-date, uses the versions in the lockfile as the source of truth. If the lockfile is missing, uv will exit with an error. If the <code>pyproject.toml</code> includes changes to dependencies that have not been included in the lockfile yet, they will not be present in the environment.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--group</code> group<p>Include dependencies from the specified dependency group.</p> <p>May be provided multiple times.</p> <code>--gui-script</code><p>Run the given path as a Python GUI script.</p> <p>Using <code>--gui-script</code> will attempt to parse the path as a PEP 723 script and run it with <code>pythonw.exe</code>, irrespective of its extension. Only available on Windows.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--isolated</code><p>Run the command in an isolated virtual environment.</p> <p>Usually, the project environment is reused for performance. This option forces a fresh environment to be used for the project, enforcing strict isolation between dependencies and declaration of requirements.</p> <p>An editable installation is still used for the project.</p> <p>When used with <code>--with</code> or <code>--with-requirements</code>, the additional dependencies will still be layered in a second environment.</p> <p>May also be set with the <code>UV_ISOLATED</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--module</code>, <code>-m</code><p>Run a Python module.</p> <p>Equivalent to <code>python -m &lt;module&gt;</code>.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-default-groups</code><p>Ignore the default dependency groups.</p> <p>uv includes the groups defined in <code>tool.uv.default-groups</code> by default. This disables that option, however, specific groups can still be included with <code>--group</code>.</p> <code>--no-dev</code><p>Disable the development dependency group.</p> <p>This option is an alias of <code>--no-group dev</code>. See <code>--no-default-groups</code> to disable all default groups instead.</p> <p>This option is only available when running in a project.</p> <p>May also be set with the <code>UV_NO_DEV</code> environment variable.</p><code>--no-editable</code><p>Install any editable dependencies, including the project and any workspace members, as non-editable</p> <p>May also be set with the <code>UV_NO_EDITABLE</code> environment variable.</p><code>--no-env-file</code><p>Avoid reading environment variables from a <code>.env</code> file</p> <p>May also be set with the <code>UV_NO_ENV_FILE</code> environment variable.</p><code>--no-extra</code> no-extra<p>Exclude the specified optional dependencies, if <code>--all-extras</code> is supplied.</p> <p>May be provided multiple times.</p> <code>--no-group</code> no-group<p>Disable the specified dependency group.</p> <p>This option always takes precedence over default groups, <code>--all-groups</code>, and <code>--group</code>.</p> <p>May be provided multiple times.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-project</code>, <code>--no_workspace</code><p>Avoid discovering the project or workspace.</p> <p>Instead of searching for projects in the current directory and parent directories, run in an isolated, ephemeral environment populated by the <code>--with</code> requirements.</p> <p>If a virtual environment is active or found in a current or parent directory, it will be used as if there was no project or workspace.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-sync</code><p>Avoid syncing the virtual environment.</p> <p>Implies <code>--frozen</code>, as the project dependencies will be ignored (i.e., the lockfile will not be updated, since the environment will not be synced regardless).</p> <p>May also be set with the <code>UV_NO_SYNC</code> environment variable.</p><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-dev</code><p>Only include the development dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>This option is an alias for <code>--only-group dev</code>. Implies <code>--no-default-groups</code>.</p> <code>--only-group</code> only-group<p>Only include dependencies from the specified dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>May be provided multiple times. Implies <code>--no-default-groups</code>.</p> <code>--package</code> package<p>Run the command in a specific package in the workspace.</p> <p>If the workspace member does not exist, uv will exit with an error.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for the run environment.</p> <p>If the interpreter request is satisfied by a discovered environment, the environment will be used.</p> <p>See uv python to view supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--script</code>, <code>-s</code><p>Run the given path as a Python script.</p> <p>Using <code>--script</code> will attempt to parse the path as a PEP 723 script, irrespective of its extension.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p> <code>--with</code>, <code>-w</code> with<p>Run with the given packages installed.</p> <p>When used in a project, these dependencies will be layered on top of the project environment in a separate, ephemeral environment. These dependencies are allowed to conflict with those specified by the project.</p> <code>--with-editable</code> with-editable<p>Run with the given packages installed in editable mode.</p> <p>When used in a project, these dependencies will be layered on top of the project environment in a separate, ephemeral environment. These dependencies are allowed to conflict with those specified by the project.</p> <code>--with-requirements</code> with-requirements<p>Run with the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, and <code>pylock.toml</code>.</p> <p>The same environment semantics as <code>--with</code> apply.</p> <p>Using <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> files is not allowed.</p>"},{"location":"reference/cli/#uv-init","title":"uv init","text":"<p>Create a new project.</p> <p>Follows the <code>pyproject.toml</code> specification.</p> <p>If a <code>pyproject.toml</code> already exists at the target, uv will exit with an error.</p> <p>If a <code>pyproject.toml</code> is found in any of the parent directories of the target path, the project will be added as a workspace member of the parent.</p> <p>Some project state is not created until needed, e.g., the project virtual environment (<code>.venv</code>) and lockfile (<code>uv.lock</code>) are lazily created during the first sync.</p> Usage <pre><code>uv init [OPTIONS] [PATH]\n</code></pre> Arguments PATH<p>The path to use for the project/script.</p> <p>Defaults to the current working directory when initializing an app or library; required when initializing a script. Accepts relative and absolute paths.</p> <p>If a <code>pyproject.toml</code> is found in any of the parent directories of the target path, the project will be added as a workspace member of the parent, unless <code>--no-workspace</code> is provided.</p> Options <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--app</code>, <code>--application</code><p>Create a project for an application.</p> <p>This is the default behavior if <code>--lib</code> is not requested.</p> <p>This project kind is for web servers, scripts, and command-line interfaces.</p> <p>By default, an application is not intended to be built and distributed as a Python package. The <code>--package</code> option can be used to create an application that is distributable, e.g., if you want to distribute a command-line interface via PyPI.</p> <code>--author-from</code> author-from<p>Fill in the <code>authors</code> field in the <code>pyproject.toml</code>.</p> <p>By default, uv will attempt to infer the author information from some sources (e.g., Git) (<code>auto</code>). Use <code>--author-from git</code> to only infer from Git configuration. Use <code>--author-from none</code> to avoid inferring the author information.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Fetch the author information from some sources (e.g., Git) automatically</li> <li><code>git</code>:  Fetch the author information from Git configuration only</li> <li><code>none</code>:  Do not infer the author information</li> </ul><code>--bare</code><p>Only create a <code>pyproject.toml</code>.</p> <p>Disables creating extra files like <code>README.md</code>, the <code>src/</code> tree, <code>.python-version</code> files, etc.</p> <code>--build-backend</code> build-backend<p>Initialize a build-backend of choice for the project.</p> <p>Implicitly sets <code>--package</code>.</p> <p>May also be set with the <code>UV_INIT_BUILD_BACKEND</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>uv</code>:  Use uv as the project build backend</li> <li><code>hatch</code>:  Use hatchling as the project build backend</li> <li><code>flit</code>:  Use flit-core as the project build backend</li> <li><code>pdm</code>:  Use pdm-backend as the project build backend</li> <li><code>poetry</code>:  Use poetry-core as the project build backend</li> <li><code>setuptools</code>:  Use setuptools as the project build backend</li> <li><code>maturin</code>:  Use maturin as the project build backend</li> <li><code>scikit</code>:  Use scikit-build-core as the project build backend</li> </ul><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--description</code> description<p>Set the project description</p> <code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--lib</code>, <code>--library</code><p>Create a project for a library.</p> <p>A library is a project that is intended to be built and distributed as a Python package.</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--name</code> name<p>The name of the project.</p> <p>Defaults to the name of the directory.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-description</code><p>Disable the description for the project</p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-package</code><p>Do not set up the project to be built as a Python package.</p> <p>Does not include a <code>[build-system]</code> for the project.</p> <p>This is the default behavior when using <code>--app</code>.</p> <code>--no-pin-python</code><p>Do not create a <code>.python-version</code> file for the project.</p> <p>By default, uv will create a <code>.python-version</code> file containing the minor version of the discovered Python interpreter, which will cause subsequent uv commands to use that version.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-readme</code><p>Do not create a <code>README.md</code> file</p> <code>--no-workspace</code>, <code>--no-project</code><p>Avoid discovering a workspace and create a standalone project.</p> <p>By default, uv searches for workspaces in the current directory or any parent directory.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--package</code><p>Set up the project to be built as a Python package.</p> <p>Defines a <code>[build-system]</code> for the project.</p> <p>This is the default behavior when using <code>--lib</code> or <code>--build-backend</code>.</p> <p>When using <code>--app</code>, this will include a <code>[project.scripts]</code> entrypoint and use a <code>src/</code> project structure.</p> <code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use to determine the minimum supported Python version.</p> <p>See uv python to view supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--script</code><p>Create a script.</p> <p>A script is a standalone file with embedded metadata enumerating its dependencies, along with any Python version requirements, as defined in the PEP 723 specification.</p> <p>PEP 723 scripts can be executed directly with <code>uv run</code>.</p> <p>By default, adds a requirement on the system Python version; use <code>--python</code> to specify an alternative Python version requirement.</p> <code>--vcs</code> vcs<p>Initialize a version control system for the project.</p> <p>By default, uv will initialize a Git repository (<code>git</code>). Use <code>--vcs none</code> to explicitly avoid initializing a version control system.</p> <p>Possible values:</p> <ul> <li><code>git</code>:  Use Git for version control</li> <li><code>none</code>:  Do not use any version control system</li> </ul><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-add","title":"uv add","text":"<p>Add dependencies to the project.</p> <p>Dependencies are added to the project's <code>pyproject.toml</code> file.</p> <p>If a given dependency exists already, it will be updated to the new version specifier unless it includes markers that differ from the existing specifier in which case another entry for the dependency will be added.</p> <p>The lockfile and project environment will be updated to reflect the added dependencies. To skip updating the lockfile, use <code>--frozen</code>. To skip updating the environment, use <code>--no-sync</code>.</p> <p>If any of the requested dependencies cannot be found, uv will exit with an error, unless the <code>--frozen</code> flag is provided, in which case uv will add the dependencies verbatim without checking that they exist or are compatible with the project.</p> <p>uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.</p> Usage <pre><code>uv add [OPTIONS] &lt;PACKAGES|--requirements &lt;REQUIREMENTS&gt;&gt;\n</code></pre> Arguments PACKAGES<p>The packages to add, as PEP 508 requirements (e.g., <code>ruff==0.5.0</code>)</p> Options <code>--active</code><p>Prefer the active virtual environment over the project's virtual environment.</p> <p>If the project virtual environment is active or no virtual environment is active, this has no effect.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--bounds</code> bounds<p>The kind of version specifier to use when adding dependencies.</p> <p>When adding a dependency to the project, if no constraint or URL is provided, a constraint is added based on the latest compatible version of the package. By default, a lower bound constraint is used, e.g., <code>&gt;=1.2.3</code>.</p> <p>When <code>--frozen</code> is provided, no resolution is performed, and dependencies are always added without constraints.</p> <p>This option is in preview and may change in any future release.</p> <p>Possible values:</p> <ul> <li><code>lower</code>:  Only a lower bound, e.g., <code>&gt;=1.2.3</code></li> <li><code>major</code>:  Allow the same major version, similar to the semver caret, e.g., <code>&gt;=1.2.3, &lt;2.0.0</code></li> <li><code>minor</code>:  Allow the same minor version, similar to the semver tilde, e.g., <code>&gt;=1.2.3, &lt;1.3.0</code></li> <li><code>exact</code>:  Pin the exact version, e.g., <code>==1.2.3</code></li> </ul><code>--branch</code> branch<p>Branch to use when adding a dependency from Git</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--constraints</code>, <code>--constraint</code>, <code>-c</code> constraints<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. The constraints will not be added to the project's <code>pyproject.toml</code> file, but will be respected during dependency resolution.</p> <p>This is equivalent to pip's <code>--constraint</code> option.</p> <p>May also be set with the <code>UV_CONSTRAINT</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--dev</code><p>Add the requirements to the development dependency group.</p> <p>This option is an alias for <code>--group dev</code>.</p> <p>May also be set with the <code>UV_DEV</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--editable</code><p>Add the requirements as editable</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra</code> extra<p>Extras to enable for the dependency.</p> <p>May be provided more than once.</p> <p>To add this dependency to an optional extra instead, see <code>--optional</code>.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--frozen</code><p>Add dependencies without re-locking the project.</p> <p>The project environment will not be synced.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--group</code> group<p>Add the requirements to the specified dependency group.</p> <p>These requirements will not be included in the published metadata for the project.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--marker</code>, <code>-m</code> marker<p>Apply this marker to all added packages</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-install-local</code><p>Do not install local path dependencies</p> <p>Skips the current project, workspace members, and any other local (path or editable) packages. Only remote/indexed dependencies are installed. Useful in Docker builds to cache heavy third-party dependencies first and layer local packages separately.</p> <code>--no-install-project</code><p>Do not install the current project.</p> <p>By default, the current project is installed into the environment with all of its dependencies. The <code>--no-install-project</code> option allows the project to be excluded, but all of its dependencies are still installed. This is particularly useful in situations like building Docker images where installing the project separately from its dependencies allows optimal layer caching.</p> <code>--no-install-workspace</code><p>Do not install any workspace members, including the current project.</p> <p>By default, all of the workspace members and their dependencies are installed into the environment. The <code>--no-install-workspace</code> option allows exclusion of all the workspace members while retaining their dependencies. This is particularly useful in situations like building Docker images where installing the workspace separately from its dependencies allows optimal layer caching.</p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-sync</code><p>Avoid syncing the virtual environment</p> <p>May also be set with the <code>UV_NO_SYNC</code> environment variable.</p><code>--no-workspace</code><p>Don't add the dependency as a workspace member.</p> <p>By default, when adding a dependency that's a local path and is within the workspace directory, uv will add it as a workspace member; pass <code>--no-workspace</code> to add the package as direct path dependency instead.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--optional</code> optional<p>Add the requirements to the package's optional dependencies for the specified extra.</p> <p>The group may then be activated when installing the project with the <code>--extra</code> flag.</p> <p>To enable an optional extra for this requirement instead, see <code>--extra</code>.</p> <code>--package</code> package<p>Add the dependency to a specific package in the workspace</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for resolving and syncing.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--raw</code>, <code>--raw-sources</code><p>Add a dependency as provided.</p> <p>By default, uv will use the <code>tool.uv.sources</code> section to record source information for Git, local, editable, and direct URL requirements. When <code>--raw</code> is provided, uv will add source requirements to <code>project.dependencies</code>, rather than <code>tool.uv.sources</code>.</p> <p>Additionally, by default, uv will add bounds to your dependency, e.g., <code>foo&gt;=1.0.0</code>. When <code>--raw</code> is provided, uv will add the dependency without bounds.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--requirements</code>, <code>--requirement</code>, <code>-r</code> requirements<p>Add the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code>.</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--rev</code> rev<p>Commit to use when adding a dependency from Git</p> <code>--script</code> script<p>Add the dependency to the specified Python script, rather than to a project.</p> <p>If provided, uv will add the dependency to the script's inline metadata table, in adherence with PEP 723. If no such inline metadata table is present, a new one will be created and added to the script. When executed via <code>uv run</code>, uv will create a temporary environment for the script with all inline dependencies installed.</p> <code>--tag</code> tag<p>Tag to use when adding a dependency from Git</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p> <code>--workspace</code><p>Add the dependency as a workspace member.</p> <p>By default, uv will add path dependencies that are within the workspace directory as workspace members. When used with a path dependency, the package will be added to the workspace's <code>members</code> list in the root <code>pyproject.toml</code> file.</p>"},{"location":"reference/cli/#uv-remove","title":"uv remove","text":"<p>Remove dependencies from the project.</p> <p>Dependencies are removed from the project's <code>pyproject.toml</code> file.</p> <p>If multiple entries exist for a given dependency, i.e., each with different markers, all of the entries will be removed.</p> <p>The lockfile and project environment will be updated to reflect the removed dependencies. To skip updating the lockfile, use <code>--frozen</code>. To skip updating the environment, use <code>--no-sync</code>.</p> <p>If any of the requested dependencies are not present in the project, uv will exit with an error.</p> <p>If a package has been manually installed in the environment, i.e., with <code>uv pip install</code>, it will not be removed by <code>uv remove</code>.</p> <p>uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.</p> Usage <pre><code>uv remove [OPTIONS] &lt;PACKAGES&gt;...\n</code></pre> Arguments PACKAGES<p>The names of the dependencies to remove (e.g., <code>ruff</code>)</p> Options <code>--active</code><p>Prefer the active virtual environment over the project's virtual environment.</p> <p>If the project virtual environment is active or no virtual environment is active, this has no effect.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--dev</code><p>Remove the packages from the development dependency group.</p> <p>This option is an alias for <code>--group dev</code>.</p> <p>May also be set with the <code>UV_DEV</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--frozen</code><p>Remove dependencies without re-locking the project.</p> <p>The project environment will not be synced.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--group</code> group<p>Remove the packages from the specified dependency group</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-sync</code><p>Avoid syncing the virtual environment after re-locking the project</p> <p>May also be set with the <code>UV_NO_SYNC</code> environment variable.</p><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--optional</code> optional<p>Remove the packages from the project's optional dependencies for the specified extra</p> <code>--package</code> package<p>Remove the dependencies from a specific package in the workspace</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for resolving and syncing.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--script</code> script<p>Remove the dependency from the specified Python script, rather than from a project.</p> <p>If provided, uv will remove the dependency from the script's inline metadata table, in adherence with PEP 723.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-version","title":"uv version","text":"<p>Read or update the project's version</p> Usage <pre><code>uv version [OPTIONS] [VALUE]\n</code></pre> Arguments VALUE<p>Set the project version to this value</p> <p>To update the project using semantic versioning components instead, use <code>--bump</code>.</p> Options <code>--active</code><p>Prefer the active virtual environment over the project's virtual environment.</p> <p>If the project virtual environment is active or no virtual environment is active, this has no effect.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--bump</code> bump<p>Update the project version using the given semantics</p> <p>This flag can be passed multiple times.</p> <p>Possible values:</p> <ul> <li><code>major</code>:  Increase the major version (e.g., 1.2.3 =&gt; 2.0.0)</li> <li><code>minor</code>:  Increase the minor version (e.g., 1.2.3 =&gt; 1.3.0)</li> <li><code>patch</code>:  Increase the patch version (e.g., 1.2.3 =&gt; 1.2.4)</li> <li><code>stable</code>:  Move from a pre-release to stable version (e.g., 1.2.3b4.post5.dev6 =&gt; 1.2.3)</li> <li><code>alpha</code>:  Increase the alpha version (e.g., 1.2.3a4 =&gt; 1.2.3a5)</li> <li><code>beta</code>:  Increase the beta version (e.g., 1.2.3b4 =&gt; 1.2.3b5)</li> <li><code>rc</code>:  Increase the rc version (e.g., 1.2.3rc4 =&gt; 1.2.3rc5)</li> <li><code>post</code>:  Increase the post version (e.g., 1.2.3.post5 =&gt; 1.2.3.post6)</li> <li><code>dev</code>:  Increase the dev version (e.g., 1.2.3a4.dev6 =&gt; 1.2.3.dev7)</li> </ul><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Don't write a new version to the <code>pyproject.toml</code></p> <p>Instead, the version will be displayed.</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--frozen</code><p>Update the version without re-locking the project.</p> <p>The project environment will not be synced.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-sync</code><p>Avoid syncing the virtual environment after re-locking the project</p> <p>May also be set with the <code>UV_NO_SYNC</code> environment variable.</p><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--output-format</code> output-format<p>The format of the output</p> <p>[default: text]</p><p>Possible values:</p> <ul> <li><code>text</code>:  Display the version as plain text</li> <li><code>json</code>:  Display the version as JSON</li> </ul><code>--package</code> package<p>Update the version of a specific package in the workspace</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for resolving and syncing.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--short</code><p>Only show the version</p> <p>By default, uv will show the project name before the version.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-sync","title":"uv sync","text":"<p>Update the project's environment.</p> <p>Syncing ensures that all project dependencies are installed and up-to-date with the lockfile.</p> <p>By default, an exact sync is performed: uv removes packages that are not declared as dependencies of the project. Use the <code>--inexact</code> flag to keep extraneous packages. Note that if an extraneous package conflicts with a project dependency, it will still be removed. Additionally, if <code>--no-build-isolation</code> is used, uv will not remove extraneous packages to avoid removing possible build dependencies.</p> <p>If the project virtual environment (<code>.venv</code>) does not exist, it will be created.</p> <p>The project is re-locked before syncing unless the <code>--locked</code> or <code>--frozen</code> flag is provided.</p> <p>uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.</p> <p>Note that, when installing from a lockfile, uv will not provide warnings for yanked package versions.</p> Usage <pre><code>uv sync [OPTIONS]\n</code></pre> Options <code>--active</code><p>Sync dependencies to the active virtual environment.</p> <p>Instead of creating or updating the virtual environment for the project or script, the active virtual environment will be preferred, if the <code>VIRTUAL_ENV</code> environment variable is set.</p> <code>--all-extras</code><p>Include all optional dependencies.</p> <p>When two or more extras are declared as conflicting in <code>tool.uv.conflicts</code>, using this flag will always result in an error.</p> <p>Note that all optional dependencies are always included in the resolution; this option only affects the selection of packages to install.</p> <code>--all-groups</code><p>Include dependencies from all dependency groups.</p> <p><code>--no-group</code> can be used to exclude specific groups.</p> <code>--all-packages</code><p>Sync all packages in the workspace.</p> <p>The workspace's environment (<code>.venv</code>) is updated to include all workspace members.</p> <p>Any extras or groups specified via <code>--extra</code>, <code>--group</code>, or related options will be applied to all workspace members.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--check</code><p>Check if the Python environment is synchronized with the project.</p> <p>If the environment is not up to date, uv will exit with an error.</p> <code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Perform a dry run, without writing the lockfile or modifying the project environment.</p> <p>In dry-run mode, uv will resolve the project's dependencies and report on the resulting changes to both the lockfile and the project environment, but will not modify either.</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra</code> extra<p>Include optional dependencies from the specified extra name.</p> <p>May be provided more than once.</p> <p>When multiple extras or groups are specified that appear in <code>tool.uv.conflicts</code>, uv will report an error.</p> <p>Note that all optional dependencies are always included in the resolution; this option only affects the selection of packages to install.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--frozen</code><p>Sync without updating the <code>uv.lock</code> file.</p> <p>Instead of checking if the lockfile is up-to-date, uses the versions in the lockfile as the source of truth. If the lockfile is missing, uv will exit with an error. If the <code>pyproject.toml</code> includes changes to dependencies that have not been included in the lockfile yet, they will not be present in the environment.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--group</code> group<p>Include dependencies from the specified dependency group.</p> <p>When multiple extras or groups are specified that appear in <code>tool.uv.conflicts</code>, uv will report an error.</p> <p>May be provided multiple times.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--inexact</code>, <code>--no-exact</code><p>Do not remove extraneous packages present in the environment.</p> <p>When enabled, uv will make the minimum necessary changes to satisfy the requirements. By default, syncing will remove any extraneous packages from the environment</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-default-groups</code><p>Ignore the default dependency groups.</p> <p>uv includes the groups defined in <code>tool.uv.default-groups</code> by default. This disables that option, however, specific groups can still be included with <code>--group</code>.</p> <code>--no-dev</code><p>Disable the development dependency group.</p> <p>This option is an alias of <code>--no-group dev</code>. See <code>--no-default-groups</code> to disable all default groups instead.</p> <p>May also be set with the <code>UV_NO_DEV</code> environment variable.</p><code>--no-editable</code><p>Install any editable dependencies, including the project and any workspace members, as non-editable</p> <p>May also be set with the <code>UV_NO_EDITABLE</code> environment variable.</p><code>--no-extra</code> no-extra<p>Exclude the specified optional dependencies, if <code>--all-extras</code> is supplied.</p> <p>May be provided multiple times.</p> <code>--no-group</code> no-group<p>Disable the specified dependency group.</p> <p>This option always takes precedence over default groups, <code>--all-groups</code>, and <code>--group</code>.</p> <p>May be provided multiple times.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-install-local</code><p>Do not install local path dependencies</p> <p>Skips the current project, workspace members, and any other local (path or editable) packages. Only remote/indexed dependencies are installed. Useful in Docker builds to cache heavy third-party dependencies first and layer local packages separately.</p> <code>--no-install-package</code> no-install-package<p>Do not install the given package(s).</p> <p>By default, all of the project's dependencies are installed into the environment. The <code>--no-install-package</code> option allows exclusion of specific packages. Note this can result in a broken environment, and should be used with caution.</p> <code>--no-install-project</code><p>Do not install the current project.</p> <p>By default, the current project is installed into the environment with all of its dependencies. The <code>--no-install-project</code> option allows the project to be excluded, but all of its dependencies are still installed. This is particularly useful in situations like building Docker images where installing the project separately from its dependencies allows optimal layer caching.</p> <code>--no-install-workspace</code><p>Do not install any workspace members, including the root project.</p> <p>By default, all of the workspace members and their dependencies are installed into the environment. The <code>--no-install-workspace</code> option allows exclusion of all the workspace members while retaining their dependencies. This is particularly useful in situations like building Docker images where installing the workspace separately from its dependencies allows optimal layer caching.</p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-dev</code><p>Only include the development dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>This option is an alias for <code>--only-group dev</code>. Implies <code>--no-default-groups</code>.</p> <code>--only-group</code> only-group<p>Only include dependencies from the specified dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>May be provided multiple times. Implies <code>--no-default-groups</code>.</p> <code>--output-format</code> output-format<p>Select the output format</p> <p>[default: text]</p><p>Possible values:</p> <ul> <li><code>text</code>:  Display the result in a human-readable format</li> <li><code>json</code>:  Display the result in JSON format</li> </ul><code>--package</code> package<p>Sync for a specific package in the workspace.</p> <p>The workspace's environment (<code>.venv</code>) is updated to reflect the subset of dependencies declared by the specified workspace member package.</p> <p>If the workspace member does not exist, uv will exit with an error.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for the project environment.</p> <p>By default, the first interpreter that meets the project's <code>requires-python</code> constraint is used.</p> <p>If a Python interpreter in a virtual environment is provided, the packages will not be synced to the given environment. The interpreter will be used to create a virtual environment in the project.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--script</code> script<p>Sync the environment for a Python script, rather than the current project.</p> <p>If provided, uv will sync the dependencies based on the script's inline metadata table, in adherence with PEP 723.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-lock","title":"uv lock","text":"<p>Update the project's lockfile.</p> <p>If the project lockfile (<code>uv.lock</code>) does not exist, it will be created. If a lockfile is present, its contents will be used as preferences for the resolution.</p> <p>If there are no changes to the project's dependencies, locking will have no effect unless the <code>--upgrade</code> flag is provided.</p> Usage <pre><code>uv lock [OPTIONS]\n</code></pre> Options <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--check</code><p>Check if the lockfile is up-to-date.</p> <p>Asserts that the <code>uv.lock</code> would remain unchanged after a resolution. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>Equivalent to <code>--locked</code>.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--check-exists</code>, <code>--frozen</code><p>Assert that a <code>uv.lock</code> exists without checking if it is up-to-date.</p> <p>Equivalent to <code>--frozen</code>.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Perform a dry run, without writing the lockfile.</p> <p>In dry-run mode, uv will resolve the project's dependencies and report on the resulting changes, but will not write the lockfile to disk.</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for a specific package to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use during resolution.</p> <p>A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.</p> <p>The interpreter is also used as the fallback value for the minimum Python version if <code>requires-python</code> is not set.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--script</code> script<p>Lock the specified Python script, rather than the current project.</p> <p>If provided, uv will lock the script (based on its inline metadata table, in adherence with PEP 723) to a <code>.lock</code> file adjacent to the script itself.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-export","title":"uv export","text":"<p>Export the project's lockfile to an alternate format.</p> <p>At present, both <code>requirements.txt</code> and <code>pylock.toml</code> (PEP 751) formats are supported.</p> <p>The project is re-locked before exporting unless the <code>--locked</code> or <code>--frozen</code> flag is provided.</p> <p>uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.</p> <p>If operating in a workspace, the root will be exported by default; however, a specific member can be selected using the <code>--package</code> option.</p> Usage <pre><code>uv export [OPTIONS]\n</code></pre> Options <code>--all-extras</code><p>Include all optional dependencies</p> <code>--all-groups</code><p>Include dependencies from all dependency groups.</p> <p><code>--no-group</code> can be used to exclude specific groups.</p> <code>--all-packages</code><p>Export the entire workspace.</p> <p>The dependencies for all workspace members will be included in the exported requirements file.</p> <p>Any extras or groups specified via <code>--extra</code>, <code>--group</code>, or related options will be applied to all workspace members.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for a specific package to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra</code> extra<p>Include optional dependencies from the specified extra name.</p> <p>May be provided more than once.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--format</code> format<p>The format to which <code>uv.lock</code> should be exported.</p> <p>Supports both <code>requirements.txt</code> and <code>pylock.toml</code> (PEP 751) output formats.</p> <p>uv will infer the output format from the file extension of the output file, if provided. Otherwise, defaults to <code>requirements.txt</code>.</p> <p>Possible values:</p> <ul> <li><code>requirements.txt</code>:  Export in <code>requirements.txt</code> format</li> <li><code>pylock.toml</code>:  Export in <code>pylock.toml</code> format</li> </ul><code>--frozen</code><p>Do not update the <code>uv.lock</code> before exporting.</p> <p>If a <code>uv.lock</code> does not exist, uv will exit with an error.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--group</code> group<p>Include dependencies from the specified dependency group.</p> <p>May be provided multiple times.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-annotate</code><p>Exclude comment annotations indicating the source of each package</p> <code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-default-groups</code><p>Ignore the default dependency groups.</p> <p>uv includes the groups defined in <code>tool.uv.default-groups</code> by default. This disables that option, however, specific groups can still be included with <code>--group</code>.</p> <code>--no-dev</code><p>Disable the development dependency group.</p> <p>This option is an alias of <code>--no-group dev</code>. See <code>--no-default-groups</code> to disable all default groups instead.</p> <p>May also be set with the <code>UV_NO_DEV</code> environment variable.</p><code>--no-editable</code><p>Export any editable dependencies, including the project and any workspace members, as non-editable</p> <p>May also be set with the <code>UV_NO_EDITABLE</code> environment variable.</p><code>--no-emit-local</code>, <code>--no-install-local</code><p>Do not include local path dependencies in the exported requirements.</p> <p>Omits the current project, workspace members, and any other local (path or editable) packages from the export. Only remote/indexed dependencies are written. Useful for Docker and CI flows that want to export and cache third-party dependencies first.</p> <code>--no-emit-package</code>, <code>--no-install-package</code> no-emit-package<p>Do not emit the given package(s).</p> <p>By default, all of the project's dependencies are included in the exported requirements file. The <code>--no-emit-package</code> option allows exclusion of specific packages.</p> <code>--no-emit-project</code>, <code>--no-install-project</code><p>Do not emit the current project.</p> <p>By default, the current project is included in the exported requirements file with all of its dependencies. The <code>--no-emit-project</code> option allows the project to be excluded, but all of its dependencies to remain included.</p> <code>--no-emit-workspace</code>, <code>--no-install-workspace</code><p>Do not emit any workspace members, including the root project.</p> <p>By default, all workspace members and their dependencies are included in the exported requirements file, with all of their dependencies. The <code>--no-emit-workspace</code> option allows exclusion of all the workspace members while retaining their dependencies.</p> <code>--no-extra</code> no-extra<p>Exclude the specified optional dependencies, if <code>--all-extras</code> is supplied.</p> <p>May be provided multiple times.</p> <code>--no-group</code> no-group<p>Disable the specified dependency group.</p> <p>This option always takes precedence over default groups, <code>--all-groups</code>, and <code>--group</code>.</p> <p>May be provided multiple times.</p> <code>--no-hashes</code><p>Omit hashes in the generated output</p> <code>--no-header</code><p>Exclude the comment header at the top of the generated output file</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-dev</code><p>Only include the development dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>This option is an alias for <code>--only-group dev</code>. Implies <code>--no-default-groups</code>.</p> <code>--only-group</code> only-group<p>Only include dependencies from the specified dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>May be provided multiple times. Implies <code>--no-default-groups</code>.</p> <code>--output-file</code>, <code>-o</code> output-file<p>Write the exported requirements to the given file</p> <code>--package</code> package<p>Export the dependencies for a specific package in the workspace.</p> <p>If the workspace member does not exist, uv will exit with an error.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--prune</code> package<p>Prune the given package from the dependency tree.</p> <p>Pruned packages will be excluded from the exported requirements file, as will any dependencies that are no longer required after the pruned package is removed.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use during resolution.</p> <p>A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.</p> <p>The interpreter is also used as the fallback value for the minimum Python version if <code>requires-python</code> is not set.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--script</code> script<p>Export the dependencies for the specified PEP 723 Python script, rather than the current project.</p> <p>If provided, uv will resolve the dependencies based on its inline metadata table, in adherence with PEP 723.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-tree","title":"uv tree","text":"<p>Display the project's dependency tree</p> Usage <pre><code>uv tree [OPTIONS]\n</code></pre> Options <code>--all-groups</code><p>Include dependencies from all dependency groups.</p> <p><code>--no-group</code> can be used to exclude specific groups.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--depth</code>, <code>-d</code> depth<p>Maximum display depth of the dependency tree</p> <p>[default: 255]</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for a specific package to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--frozen</code><p>Display the requirements without locking the project.</p> <p>If the lockfile is missing, uv will exit with an error.</p> <p>May also be set with the <code>UV_FROZEN</code> environment variable.</p><code>--group</code> group<p>Include dependencies from the specified dependency group.</p> <p>May be provided multiple times.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--invert</code>, <code>--reverse</code><p>Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <p>May also be set with the <code>UV_LOCKED</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-dedupe</code><p>Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated</p> <code>--no-default-groups</code><p>Ignore the default dependency groups.</p> <p>uv includes the groups defined in <code>tool.uv.default-groups</code> by default. This disables that option, however, specific groups can still be included with <code>--group</code>.</p> <code>--no-dev</code><p>Disable the development dependency group.</p> <p>This option is an alias of <code>--no-group dev</code>. See <code>--no-default-groups</code> to disable all default groups instead.</p> <p>May also be set with the <code>UV_NO_DEV</code> environment variable.</p><code>--no-group</code> no-group<p>Disable the specified dependency group.</p> <p>This option always takes precedence over default groups, <code>--all-groups</code>, and <code>--group</code>.</p> <p>May be provided multiple times.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-dev</code><p>Only include the development dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>This option is an alias for <code>--only-group dev</code>. Implies <code>--no-default-groups</code>.</p> <code>--only-group</code> only-group<p>Only include dependencies from the specified dependency group.</p> <p>The project and its dependencies will be omitted.</p> <p>May be provided multiple times. Implies <code>--no-default-groups</code>.</p> <code>--outdated</code><p>Show the latest available version of each package in the tree</p> <code>--package</code> package<p>Display only the specified packages</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--prune</code> prune<p>Prune the given package from the display of the dependency tree</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for locking and filtering.</p> <p>By default, the tree is filtered to match the platform as reported by the Python interpreter. Use <code>--universal</code> to display the tree for all platforms, or use <code>--python-version</code> or <code>--python-platform</code> to override a subset of markers.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform to use when filtering the tree.</p> <p>For example, pass <code>--platform windows</code> to display the dependencies that would be included when installing on Windows.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--python-version</code> python-version<p>The Python version to use when filtering the tree.</p> <p>For example, pass <code>--python-version 3.10</code> to display the dependencies that would be included when installing on Python 3.10.</p> <p>Defaults to the version of the discovered Python interpreter.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--script</code> script<p>Show the dependency tree the specified PEP 723 Python script, rather than the current project.</p> <p>If provided, uv will resolve the dependencies based on its inline metadata table, in adherence with PEP 723.</p> <code>--show-sizes</code><p>Show compressed wheel sizes for packages in the tree</p> <code>--universal</code><p>Show a platform-independent dependency tree.</p> <p>Shows resolved package versions for all Python versions and platforms, rather than filtering to those that are relevant for the current environment.</p> <p>Multiple versions may be shown for a each package.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-format","title":"uv format","text":"<p>Format Python code in the project.</p> <p>Formats Python code using the Ruff formatter. By default, all Python files in the project are formatted. This command has the same behavior as running <code>ruff format</code> in the project root.</p> <p>To check if files are formatted without modifying them, use <code>--check</code>. To see a diff of formatting changes, use <code>--diff</code>.</p> <p>Additional arguments can be passed to Ruff after <code>--</code>.</p> Usage <pre><code>uv format [OPTIONS] [-- &lt;EXTRA_ARGS&gt;...]\n</code></pre> Arguments EXTRA_ARGS<p>Additional arguments to pass to Ruff.</p> <p>For example, use <code>uv format -- --line-length 100</code> to set the line length or <code>uv format -- src/module/foo.py</code> to format a specific file.</p> Options <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--check</code><p>Check if files are formatted without applying changes</p> <code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--diff</code><p>Show a diff of formatting changes without applying them.</p> <p>Implies <code>--check</code>.</p> <code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-project</code><p>Avoid discovering a project or workspace.</p> <p>Instead of running the formatter in the context of the current project, run it in the context of the current directory. This is useful when the current directory is not a project.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p> <code>--version</code> version<p>The version of Ruff to use for formatting.</p> <p>By default, a version of Ruff pinned by uv will be used.</p>"},{"location":"reference/cli/#uv-tool","title":"uv tool","text":"<p>Run and install commands provided by Python packages</p> Usage <pre><code>uv tool [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv tool run</code><p>Run a command provided by a Python package</p> <code>uv tool install</code><p>Install commands provided by a Python package</p> <code>uv tool upgrade</code><p>Upgrade installed tools</p> <code>uv tool list</code><p>List installed tools</p> <code>uv tool uninstall</code><p>Uninstall a tool</p> <code>uv tool update-shell</code><p>Ensure that the tool executable directory is on the <code>PATH</code></p> <code>uv tool dir</code><p>Show the path to the uv tools directory</p>"},{"location":"reference/cli/#uv-tool-run","title":"uv tool runUsageOptions","text":"<p>Run a command provided by a Python package.</p> <p>By default, the package to install is assumed to match the command name.</p> <p>The name of the command can include an exact version in the format <code>&lt;package&gt;@&lt;version&gt;</code>, e.g., <code>uv tool run ruff@0.3.0</code>. If more complex version specification is desired or if the command is provided by a different package, use <code>--from</code>.</p> <p><code>uvx</code> can be used to invoke Python, e.g., with <code>uvx python</code> or <code>uvx python@&lt;version&gt;</code>. A Python interpreter will be started in an isolated virtual environment.</p> <p>If the tool was previously installed, i.e., via <code>uv tool install</code>, the installed version will be used unless a version is requested or the <code>--isolated</code> flag is used.</p> <p><code>uvx</code> is provided as a convenient alias for <code>uv tool run</code>, their behavior is identical.</p> <p>If no command is provided, the installed tools are displayed.</p> <p>Packages are installed into an ephemeral virtual environment in the uv cache directory.</p> <pre><code>uv tool run [OPTIONS] [COMMAND]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--build-constraints</code>, <code>--build-constraint</code>, <code>-b</code> build-constraints<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>May also be set with the <code>UV_BUILD_CONSTRAINT</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--constraints</code>, <code>--constraint</code>, <code>-c</code> constraints<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip's <code>--constraint</code> option.</p> <p>May also be set with the <code>UV_CONSTRAINT</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--env-file</code> env-file<p>Load environment variables from a <code>.env</code> file.</p> <p>Can be provided multiple times, with subsequent files overriding values defined in previous files.</p> <p>May also be set with the <code>UV_ENV_FILE</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--from</code> from<p>Use the given package to provide the command.</p> <p>By default, the package name is assumed to match the command name.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--isolated</code><p>Run the tool in an isolated virtual environment, ignoring any already-installed tools</p> <p>May also be set with the <code>UV_ISOLATED</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-env-file</code><p>Avoid reading environment variables from a <code>.env</code> file</p> <p>May also be set with the <code>UV_NO_ENV_FILE</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--overrides</code>, <code>--override</code> overrides<p>Override versions using the given requirements files.</p> <p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they're combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <p>May also be set with the <code>UV_OVERRIDE</code> environment variable.</p><code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use to build the run environment.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p> <code>--with</code>, <code>-w</code> with<p>Run with the given packages installed</p> <code>--with-editable</code> with-editable<p>Run with the given packages installed in editable mode</p> <p>When used in a project, these dependencies will be layered on top of the uv tool's environment in a separate, ephemeral environment. These dependencies are allowed to conflict with those specified.</p> <code>--with-requirements</code> with-requirements<p>Run with the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, and <code>pylock.toml</code>.</p>"},{"location":"reference/cli/#uv-tool-install","title":"uv tool installUsageArgumentsOptions","text":"<p>Install commands provided by a Python package.</p> <p>Packages are installed into an isolated virtual environment in the uv tools directory. The executables are linked the tool executable directory, which is determined according to the XDG standard and can be retrieved with <code>uv tool dir --bin</code>.</p> <p>If the tool was previously installed, the existing tool will generally be replaced.</p> <pre><code>uv tool install [OPTIONS] &lt;PACKAGE&gt;\n</code></pre> PACKAGE<p>The package to install commands from</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--build-constraints</code>, <code>--build-constraint</code>, <code>-b</code> build-constraints<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>May also be set with the <code>UV_BUILD_CONSTRAINT</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--constraints</code>, <code>--constraint</code>, <code>-c</code> constraints<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip's <code>--constraint</code> option.</p> <p>May also be set with the <code>UV_CONSTRAINT</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--editable</code>, <code>-e</code><p>Install the target package in editable mode, such that changes in the package's source directory are reflected without reinstallation</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--force</code><p>Force installation of the tool.</p> <p>Will replace any existing entry points with the same name in the executable directory.</p> <code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--overrides</code>, <code>--override</code> overrides<p>Override versions using the given requirements files.</p> <p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they're combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <p>May also be set with the <code>UV_OVERRIDE</code> environment variable.</p><code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use to build the tool environment.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p> <code>--with</code>, <code>-w</code> with<p>Include the following additional requirements</p> <code>--with-editable</code> with-editable<p>Include the given packages in editable mode</p> <code>--with-executables-from</code> with-executables-from<p>Install executables from the following packages</p> <code>--with-requirements</code> with-requirements<p>Run with the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, and <code>pylock.toml</code>.</p>"},{"location":"reference/cli/#uv-tool-upgrade","title":"uv tool upgradeUsageArgumentsOptions","text":"<p>Upgrade installed tools.</p> <p>If a tool was installed with version constraints, they will be respected on upgrade \u2014 to upgrade a tool beyond the originally provided constraints, use <code>uv tool install</code> again.</p> <p>If a tool was installed with specific settings, they will be respected on upgraded. For example, if <code>--prereleases allow</code> was provided during installation, it will continue to be respected in upgrades.</p> <pre><code>uv tool upgrade [OPTIONS] &lt;NAME&gt;...\n</code></pre> NAME<p>The name of the tool to upgrade, along with an optional version specifier</p> <code>--all</code><p>Upgrade all tools</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-setting-package</code>, <code>--config-settings-package</code> config-setting-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>Upgrade a tool, and specify it to use the given Python interpreter to build its environment. Use with <code>--all</code> to apply to all tools.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-tool-list","title":"uv tool listUsageOptions","text":"<p>List installed tools</p> <pre><code>uv tool list [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--show-extras</code><p>Whether to display the extra requirements installed with each tool</p> <code>--show-paths</code><p>Whether to display the path to each tool environment and installed executable</p> <code>--show-python</code><p>Whether to display the Python version associated with run each tool</p> <code>--show-version-specifiers</code><p>Whether to display the version specifier(s) used to install each tool</p> <code>--show-with</code><p>Whether to display the additional requirements installed with each tool</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-tool-uninstall","title":"uv tool uninstallUsageArgumentsOptions","text":"<p>Uninstall a tool</p> <pre><code>uv tool uninstall [OPTIONS] &lt;NAME&gt;...\n</code></pre> NAME<p>The name of the tool to uninstall</p> <code>--all</code><p>Uninstall all tools</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-tool-update-shell","title":"uv tool update-shellUsageOptions","text":"<p>Ensure that the tool executable directory is on the <code>PATH</code>.</p> <p>If the tool executable directory is not present on the <code>PATH</code>, uv will attempt to add it to the relevant shell configuration files.</p> <p>If the shell configuration files already include a blurb to add the executable directory to the path, but the directory is not present on the <code>PATH</code>, uv will exit with an error.</p> <p>The tool executable directory is determined according to the XDG standard and can be retrieved with <code>uv tool dir --bin</code>.</p> <pre><code>uv tool update-shell [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-tool-dir","title":"uv tool dirUsageOptions","text":"<p>Show the path to the uv tools directory.</p> <p>The tools directory is used to store environments and metadata for installed tools.</p> <p>By default, tools are stored in the uv data directory at <code>$XDG_DATA_HOME/uv/tools</code> or <code>$HOME/.local/share/uv/tools</code> on Unix and <code>%APPDATA%\\uv\\data\\tools</code> on Windows.</p> <p>The tool installation directory may be overridden with <code>$UV_TOOL_DIR</code>.</p> <p>To instead view the directory uv installs executables into, use the <code>--bin</code> flag.</p> <pre><code>uv tool dir [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--bin</code><p>Show the directory into which <code>uv tool</code> will install executables.</p> <p>By default, <code>uv tool dir</code> shows the directory into which the tool Python environments themselves are installed, rather than the directory containing the linked executables.</p> <p>The tool executable directory is determined according to the XDG standard and is derived from the following environment variables, in order of preference:</p> <ul> <li><code>$UV_TOOL_BIN_DIR</code></li> <li><code>$XDG_BIN_HOME</code></li> <li><code>$XDG_DATA_HOME/../bin</code></li> <li><code>$HOME/.local/bin</code></li> </ul> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python","title":"uv python","text":"<p>Manage Python versions and installations</p> <p>Generally, uv first searches for Python in a virtual environment, either active or in a <code>.venv</code> directory in the current working directory or any parent directory. If a virtual environment is not required, uv will then search for a Python interpreter. Python interpreters are found by searching for Python executables in the <code>PATH</code> environment variable.</p> <p>On Windows, the registry is also searched for Python executables.</p> <p>By default, uv will download Python if a version cannot be found. This behavior can be disabled with the <code>--no-python-downloads</code> flag or the <code>python-downloads</code> setting.</p> <p>The <code>--python</code> option allows requesting a different interpreter.</p> <p>The following Python version request formats are supported:</p> <ul> <li><code>&lt;version&gt;</code> e.g. <code>3</code>, <code>3.12</code>, <code>3.12.3</code></li> <li><code>&lt;version-specifier&gt;</code> e.g. <code>&gt;=3.12,&lt;3.13</code></li> <li><code>&lt;version&gt;&lt;short-variant&gt;</code> (e.g., <code>3.13t</code>, <code>3.12.0d</code>)</li> <li><code>&lt;version&gt;+&lt;variant&gt;</code> (e.g., <code>3.13+freethreaded</code>, <code>3.12.0+debug</code>)</li> <li><code>&lt;implementation&gt;</code> e.g. <code>cpython</code> or <code>cp</code></li> <li><code>&lt;implementation&gt;@&lt;version&gt;</code> e.g. <code>cpython@3.12</code></li> <li><code>&lt;implementation&gt;&lt;version&gt;</code> e.g. <code>cpython3.12</code> or <code>cp312</code></li> <li><code>&lt;implementation&gt;&lt;version-specifier&gt;</code> e.g. <code>cpython&gt;=3.12,&lt;3.13</code></li> <li><code>&lt;implementation&gt;-&lt;version&gt;-&lt;os&gt;-&lt;arch&gt;-&lt;libc&gt;</code> e.g. <code>cpython-3.12.3-macos-aarch64-none</code></li> </ul> <p>Additionally, a specific system Python interpreter can often be requested with:</p> <ul> <li><code>&lt;executable-path&gt;</code> e.g. <code>/opt/homebrew/bin/python3</code></li> <li><code>&lt;executable-name&gt;</code> e.g. <code>mypython3</code></li> <li><code>&lt;install-dir&gt;</code> e.g. <code>/some/environment/</code></li> </ul> <p>When the <code>--python</code> option is used, normal discovery rules apply but discovered interpreters are checked for compatibility with the request, e.g., if <code>pypy</code> is requested, uv will first check if the virtual environment contains a PyPy interpreter then check if each executable in the path is a PyPy interpreter.</p> <p>uv supports discovering CPython, PyPy, and GraalPy interpreters. Unsupported interpreters will be skipped during discovery. If an unsupported interpreter implementation is requested, uv will exit with an error.</p> Usage <pre><code>uv python [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv python list</code><p>List the available Python installations</p> <code>uv python install</code><p>Download and install Python versions</p> <code>uv python upgrade</code><p>Upgrade installed Python versions</p> <code>uv python find</code><p>Search for a Python installation</p> <code>uv python pin</code><p>Pin to a specific Python version</p> <code>uv python dir</code><p>Show the uv Python installation directory</p> <code>uv python uninstall</code><p>Uninstall Python versions</p> <code>uv python update-shell</code><p>Ensure that the Python executable directory is on the <code>PATH</code></p>"},{"location":"reference/cli/#uv-python-list","title":"uv python listUsageArgumentsOptions","text":"<p>List the available Python installations.</p> <p>By default, installed Python versions and the downloads for latest available patch version of each supported Python major version are shown.</p> <p>Use <code>--managed-python</code> to view only managed Python versions.</p> <p>Use <code>--no-managed-python</code> to omit managed Python versions.</p> <p>Use <code>--all-versions</code> to view all available patch versions.</p> <p>Use <code>--only-installed</code> to omit available downloads.</p> <pre><code>uv python list [OPTIONS] [REQUEST]\n</code></pre> REQUEST<p>A Python request to filter by.</p> <p>See uv python to view supported request formats.</p> <code>--all-arches</code>, <code>--all_architectures</code><p>List Python downloads for all architectures.</p> <p>By default, only downloads for the current architecture are shown.</p> <code>--all-platforms</code><p>List Python downloads for all platforms.</p> <p>By default, only downloads for the current platform are shown.</p> <code>--all-versions</code><p>List all Python versions, including old patch versions.</p> <p>By default, only the latest patch version is shown for each minor version.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-downloads</code><p>Only show available Python downloads.</p> <p>By default, installed distributions and available downloads for the current platform are shown.</p> <code>--only-installed</code><p>Only show installed Python versions.</p> <p>By default, installed distributions and available downloads for the current platform are shown.</p> <code>--output-format</code> output-format<p>Select the output format</p> <p>[default: text]</p><p>Possible values:</p> <ul> <li><code>text</code>:  Plain text (for humans)</li> <li><code>json</code>:  JSON (for computers)</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python-downloads-json-url</code> python-downloads-json-url<p>URL pointing to JSON of custom Python installations.</p> <p>Note that currently, only local paths are supported.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--show-urls</code><p>Show the URLs of available Python downloads.</p> <p>By default, these display as <code>&lt;download available&gt;</code>.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python-install","title":"uv python installUsageArgumentsOptions","text":"<p>Download and install Python versions.</p> <p>Supports CPython and PyPy. CPython distributions are downloaded from the Astral <code>python-build-standalone</code> project. PyPy distributions are downloaded from <code>python.org</code>. The available Python versions are bundled with each uv release. To install new Python versions, you may need upgrade uv.</p> <p>Python versions are installed into the uv Python directory, which can be retrieved with <code>uv python dir</code>.</p> <p>By default, Python executables are added to a directory on the path with a minor version suffix, e.g., <code>python3.13</code>. To install <code>python3</code> and <code>python</code>, use the <code>--default</code> flag. Use <code>uv python dir --bin</code> to see the target directory.</p> <p>Multiple Python versions may be requested.</p> <p>See <code>uv help python</code> to view supported request formats.</p> <pre><code>uv python install [OPTIONS] [TARGETS]...\n</code></pre> TARGETS<p>The Python version(s) to install.</p> <p>If not provided, the requested Python version(s) will be read from the <code>UV_PYTHON</code> environment variable then <code>.python-versions</code> or <code>.python-version</code> files. If none of the above are present, uv will check if it has installed any Python versions. If not, it will install the latest stable version of Python.</p> <p>See uv python to view supported request formats.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--default</code><p>Use as the default Python version.</p> <p>By default, only a <code>python{major}.{minor}</code> executable is installed, e.g., <code>python3.10</code>. When the <code>--default</code> flag is used, <code>python{major}</code>, e.g., <code>python3</code>, and <code>python</code> executables are also installed.</p> <p>Alternative Python variants will still include their tag. For example, installing 3.13+freethreaded with <code>--default</code> will include in <code>python3t</code> and <code>pythont</code>, not <code>python3</code> and <code>python</code>.</p> <p>If multiple Python versions are requested, uv will exit with an error.</p> <code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--force</code>, <code>-f</code><p>Replace existing Python executables during installation.</p> <p>By default, uv will refuse to replace executables that it does not manage.</p> <p>Implies <code>--reinstall</code>.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--install-dir</code>, <code>-i</code> install-dir<p>The directory to store the Python installation in.</p> <p>If provided, <code>UV_PYTHON_INSTALL_DIR</code> will need to be set for subsequent operations for uv to discover the Python installation.</p> <p>See <code>uv python dir</code> to view the current Python installation directory. Defaults to <code>~/.local/share/uv/python</code>.</p> <p>May also be set with the <code>UV_PYTHON_INSTALL_DIR</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--mirror</code> mirror<p>Set the URL to use as the source for downloading Python installations.</p> <p>The provided URL will replace <code>https://github.com/astral-sh/python-build-standalone/releases/download</code> in, e.g., <code>https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz</code>.</p> <p>Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-bin</code><p>Do not install a Python executable into the <code>bin</code> directory.</p> <p>This can also be set with <code>UV_PYTHON_INSTALL_BIN=0</code>.</p> <code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-registry</code><p>Do not register the Python installation in the Windows registry.</p> <p>This can also be set with <code>UV_PYTHON_INSTALL_REGISTRY=0</code>.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--pypy-mirror</code> pypy-mirror<p>Set the URL to use as the source for downloading PyPy installations.</p> <p>The provided URL will replace <code>https://downloads.python.org/pypy</code> in, e.g., <code>https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2</code>.</p> <p>Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p> <code>--python-downloads-json-url</code> python-downloads-json-url<p>URL pointing to JSON of custom Python installations.</p> <p>Note that currently, only local paths are supported.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--reinstall</code>, <code>-r</code><p>Reinstall the requested Python version, if it's already installed.</p> <p>By default, uv will exit successfully if the version is already installed.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python-upgrade","title":"uv python upgradeUsageArgumentsOptions","text":"<p>Upgrade installed Python versions.</p> <p>Upgrades versions to the latest supported patch release. Requires the <code>python-upgrade</code> preview feature.</p> <p>A target Python minor version to upgrade may be provided, e.g., <code>3.13</code>. Multiple versions may be provided to perform more than one upgrade.</p> <p>If no target version is provided, then uv will upgrade all managed CPython versions.</p> <p>During an upgrade, uv will not uninstall outdated patch versions.</p> <p>When an upgrade is performed, virtual environments created by uv will automatically use the new version. However, if the virtual environment was created before the upgrade functionality was added, it will continue to use the old Python version; to enable upgrades, the environment must be recreated.</p> <p>Upgrades are not yet supported for alternative implementations, like PyPy.</p> <pre><code>uv python upgrade [OPTIONS] [TARGETS]...\n</code></pre> TARGETS<p>The Python minor version(s) to upgrade.</p> <p>If no target version is provided, then uv will upgrade all managed CPython versions.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--install-dir</code>, <code>-i</code> install-dir<p>The directory Python installations are stored in.</p> <p>If provided, <code>UV_PYTHON_INSTALL_DIR</code> will need to be set for subsequent operations for uv to discover the Python installation.</p> <p>See <code>uv python dir</code> to view the current Python installation directory. Defaults to <code>~/.local/share/uv/python</code>.</p> <p>May also be set with the <code>UV_PYTHON_INSTALL_DIR</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--mirror</code> mirror<p>Set the URL to use as the source for downloading Python installations.</p> <p>The provided URL will replace <code>https://github.com/astral-sh/python-build-standalone/releases/download</code> in, e.g., <code>https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz</code>.</p> <p>Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--pypy-mirror</code> pypy-mirror<p>Set the URL to use as the source for downloading PyPy installations.</p> <p>The provided URL will replace <code>https://downloads.python.org/pypy</code> in, e.g., <code>https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2</code>.</p> <p>Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p> <code>--python-downloads-json-url</code> python-downloads-json-url<p>URL pointing to JSON of custom Python installations.</p> <p>Note that currently, only local paths are supported.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--reinstall</code>, <code>-r</code><p>Reinstall the latest Python patch, if it's already installed.</p> <p>By default, uv will exit successfully if the latest patch is already installed.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python-find","title":"uv python findUsageArgumentsOptions","text":"<p>Search for a Python installation.</p> <p>Displays the path to the Python executable.</p> <p>See <code>uv help python</code> to view supported request formats and details on discovery behavior.</p> <pre><code>uv python find [OPTIONS] [REQUEST]\n</code></pre> REQUEST<p>The Python request.</p> <p>See uv python to view supported request formats.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-project</code>, <code>--no_workspace</code><p>Avoid discovering a project or workspace.</p> <p>Otherwise, when no request is provided, the Python requirement of a project in the current directory or parent directories will be used.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--script</code> script<p>Find the environment for a Python script, rather than the current project</p> <code>--show-version</code><p>Show the Python version that would be used instead of the path to the interpreter</p> <code>--system</code><p>Only find system Python interpreters.</p> <p>By default, uv will report the first Python interpreter it would use, including those in an active virtual environment or a virtual environment in the current working directory or any parent directory.</p> <p>The <code>--system</code> option instructs uv to skip virtual environment Python interpreters and restrict its search to the system path.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python-pin","title":"uv python pinUsageArgumentsOptions","text":"<p>Pin to a specific Python version.</p> <p>Writes the pinned Python version to a <code>.python-version</code> file, which is used by other uv commands to determine the required Python version.</p> <p>If no version is provided, uv will look for an existing <code>.python-version</code> file and display the currently pinned version. If no <code>.python-version</code> file is found, uv will exit with an error.</p> <p>See <code>uv help python</code> to view supported request formats.</p> <pre><code>uv python pin [OPTIONS] [REQUEST]\n</code></pre> REQUEST<p>The Python version request.</p> <p>uv supports more formats than other tools that read <code>.python-version</code> files, i.e., <code>pyenv</code>. If compatibility with those tools is needed, only use version numbers instead of complex requests such as <code>cpython@3.10</code>.</p> <p>If no request is provided, the currently pinned version will be shown.</p> <p>See uv python to view supported request formats.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--global</code><p>Update the global Python version pin.</p> <p>Writes the pinned Python version to a <code>.python-version</code> file in the uv user configuration directory: <code>XDG_CONFIG_HOME/uv</code> on Linux/macOS and <code>%APPDATA%/uv</code> on Windows.</p> <p>When a local Python version pin is not found in the working directory or an ancestor directory, this version will be used instead.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-project</code>, <code>--no-workspace</code><p>Avoid validating the Python pin is compatible with the project or workspace.</p> <p>By default, a project or workspace is discovered in the current directory or any parent directory. If a workspace is found, the Python pin is validated against the workspace's <code>requires-python</code> constraint.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--resolved</code><p>Write the resolved Python interpreter path instead of the request.</p> <p>Ensures that the exact same interpreter is used.</p> <p>This option is usually not safe to use when committing the <code>.python-version</code> file to version control.</p> <code>--rm</code><p>Remove the Python version pin</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python-dir","title":"uv python dirUsageOptions","text":"<p>Show the uv Python installation directory.</p> <p>By default, Python installations are stored in the uv data directory at <code>$XDG_DATA_HOME/uv/python</code> or <code>$HOME/.local/share/uv/python</code> on Unix and <code>%APPDATA%\\uv\\data\\python</code> on Windows.</p> <p>The Python installation directory may be overridden with <code>$UV_PYTHON_INSTALL_DIR</code>.</p> <p>To view the directory where uv installs Python executables instead, use the <code>--bin</code> flag. The Python executable directory may be overridden with <code>$UV_PYTHON_BIN_DIR</code>. Note that Python executables are only installed when preview mode is enabled.</p> <pre><code>uv python dir [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--bin</code><p>Show the directory into which <code>uv python</code> will install Python executables.</p> <p>Note that this directory is only used when installing Python with preview mode enabled.</p> <p>The Python executable directory is determined according to the XDG standard and is derived from the following environment variables, in order of preference:</p> <ul> <li><code>$UV_PYTHON_BIN_DIR</code></li> <li><code>$XDG_BIN_HOME</code></li> <li><code>$XDG_DATA_HOME/../bin</code></li> <li><code>$HOME/.local/bin</code></li> </ul> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python-uninstall","title":"uv python uninstallUsageArgumentsOptions","text":"<p>Uninstall Python versions</p> <pre><code>uv python uninstall [OPTIONS] &lt;TARGETS&gt;...\n</code></pre> TARGETS<p>The Python version(s) to uninstall.</p> <p>See uv python to view supported request formats.</p> <code>--all</code><p>Uninstall all managed Python versions</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--install-dir</code>, <code>-i</code> install-dir<p>The directory where the Python was installed</p> <p>May also be set with the <code>UV_PYTHON_INSTALL_DIR</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-python-update-shell","title":"uv python update-shellUsageOptions","text":"<p>Ensure that the Python executable directory is on the <code>PATH</code>.</p> <p>If the Python executable directory is not present on the <code>PATH</code>, uv will attempt to add it to the relevant shell configuration files.</p> <p>If the shell configuration files already include a blurb to add the executable directory to the path, but the directory is not present on the <code>PATH</code>, uv will exit with an error.</p> <p>The Python executable directory is determined according to the XDG standard and can be retrieved with <code>uv python dir --bin</code>.</p> <pre><code>uv python update-shell [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip","title":"uv pip","text":"<p>Manage Python packages with a pip-compatible interface</p> Usage <pre><code>uv pip [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv pip compile</code><p>Compile a <code>requirements.in</code> file to a <code>requirements.txt</code> or <code>pylock.toml</code> file</p> <code>uv pip sync</code><p>Sync an environment with a <code>requirements.txt</code> or <code>pylock.toml</code> file</p> <code>uv pip install</code><p>Install packages into an environment</p> <code>uv pip uninstall</code><p>Uninstall packages from an environment</p> <code>uv pip freeze</code><p>List, in requirements format, packages installed in an environment</p> <code>uv pip list</code><p>List, in tabular format, packages installed in an environment</p> <code>uv pip show</code><p>Show information about one or more installed packages</p> <code>uv pip tree</code><p>Display the dependency tree for an environment</p> <code>uv pip check</code><p>Verify installed packages have compatible dependencies</p>"},{"location":"reference/cli/#uv-pip-compile","title":"uv pip compileUsageArgumentsOptions","text":"<p>Compile a <code>requirements.in</code> file to a <code>requirements.txt</code> or <code>pylock.toml</code> file</p> <pre><code>uv pip compile [OPTIONS] &lt;SRC_FILE|--group &lt;GROUP&gt;&gt;\n</code></pre> SRC_FILE<p>Include the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code>.</p> <p>If a <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file is provided, uv will extract the requirements for the relevant project.</p> <p>If <code>-</code> is provided, then requirements will be read from stdin.</p> <p>The order of the requirements files and the requirements in them is used to determine priority during resolution.</p> <code>--all-extras</code><p>Include all optional dependencies.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--annotation-style</code> annotation-style<p>The style of the annotation comments included in the output file, used to indicate the source of each package.</p> <p>Defaults to <code>split</code>.</p> <p>Possible values:</p> <ul> <li><code>line</code>:  Render the annotations on a single, comma-separated line</li> <li><code>split</code>:  Render each annotation on its own line</li> </ul><code>--build-constraints</code>, <code>--build-constraint</code>, <code>-b</code> build-constraints<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>May also be set with the <code>UV_BUILD_CONSTRAINT</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--constraints</code>, <code>--constraint</code>, <code>-c</code> constraints<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip's <code>--constraint</code> option.</p> <p>May also be set with the <code>UV_CONSTRAINT</code> environment variable.</p><code>--custom-compile-command</code> custom-compile-command<p>The header comment to include at the top of the output file generated by <code>uv pip compile</code>.</p> <p>Used to reflect custom build scripts and commands that wrap <code>uv pip compile</code>.</p> <p>May also be set with the <code>UV_CUSTOM_COMPILE_COMMAND</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--emit-build-options</code><p>Include <code>--no-binary</code> and <code>--only-binary</code> entries in the generated output file</p> <code>--emit-find-links</code><p>Include <code>--find-links</code> entries in the generated output file</p> <code>--emit-index-annotation</code><p>Include comment annotations indicating the index used to resolve each package (e.g., <code># from https://pypi.org/simple</code>)</p> <code>--emit-index-url</code><p>Include <code>--index-url</code> and <code>--extra-index-url</code> entries in the generated output file</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for a specific package to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra</code> extra<p>Include optional dependencies from the specified extra name; may be provided more than once.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--format</code> format<p>The format in which the resolution should be output.</p> <p>Supports both <code>requirements.txt</code> and <code>pylock.toml</code> (PEP 751) output formats.</p> <p>uv will infer the output format from the file extension of the output file, if provided. Otherwise, defaults to <code>requirements.txt</code>.</p> <p>Possible values:</p> <ul> <li><code>requirements.txt</code>:  Export in <code>requirements.txt</code> format</li> <li><code>pylock.toml</code>:  Export in <code>pylock.toml</code> format</li> </ul><code>--generate-hashes</code><p>Include distribution hashes in the output file</p> <code>--group</code> group<p>Install the specified dependency group from a <code>pyproject.toml</code>.</p> <p>If no path is provided, the <code>pyproject.toml</code> in the working directory is used.</p> <p>May be provided multiple times.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-annotate</code><p>Exclude comment annotations indicating the source of each package</p> <code>--no-binary</code> no-binary<p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-deps</code><p>Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting requirements file</p> <code>--no-emit-package</code>, <code>--unsafe-package</code> no-emit-package<p>Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile's <code>--unsafe-package</code> option</p> <code>--no-header</code><p>Exclude the comment header at the top of the generated output file</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-strip-extras</code><p>Include extras in the output file.</p> <p>By default, uv strips extras, as any packages pulled in by the extras are already included as dependencies in the output file directly. Further, output files generated with <code>--no-strip-extras</code> cannot be used as constraints files in <code>install</code> and <code>sync</code> invocations.</p> <code>--no-strip-markers</code><p>Include environment markers in the output file.</p> <p>By default, uv strips environment markers, as the resolution generated by <code>compile</code> is only guaranteed to be correct for the target environment.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-binary</code> only-binary<p>Only use pre-built wheels; don't build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--output-file</code>, <code>-o</code> output-file<p>Write the compiled requirements to the given <code>requirements.txt</code> or <code>pylock.toml</code> file.</p> <p>If the file already exists, the existing versions will be preferred when resolving dependencies, unless <code>--upgrade</code> is also specified.</p> <code>--overrides</code>, <code>--override</code> overrides<p>Override versions using the given requirements files.</p> <p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they're combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <p>May also be set with the <code>UV_OVERRIDE</code> environment variable.</p><code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use during resolution.</p> <p>A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.</p> <p>The interpreter is also used to determine the default minimum Python version, unless <code>--python-version</code> is provided.</p> <p>This option respects <code>UV_PYTHON</code>, but when set via environment variable, it is overridden by <code>--python-version</code>.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-platform</code> python-platform<p>The platform for which requirements should be resolved.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--python-version</code> python-version<p>The Python version to use for resolution.</p> <p>For example, <code>3.8</code> or <code>3.8.17</code>.</p> <p>Defaults to the version of the Python interpreter used for resolution.</p> <p>Defines the minimum Python version that must be supported by the resolved requirements.</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.8</code> is mapped to <code>3.8.0</code>.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--system</code><p>Install packages into the system Python environment.</p> <p>By default, uv uses the virtual environment in the current working directory or any parent directory, falling back to searching for a Python executable in <code>PATH</code>. The <code>--system</code> option instructs uv to avoid using a virtual environment Python and restrict its search to the system path.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--torch-backend</code> torch-backend<p>The backend to use when fetching packages in the PyTorch ecosystem (e.g., <code>cpu</code>, <code>cu126</code>, or <code>auto</code>).</p> <p>When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem, and will instead use the defined backend.</p> <p>For example, when set to <code>cpu</code>, uv will use the CPU-only PyTorch index; when set to <code>cu126</code>, uv will use the PyTorch index for CUDA 12.6.</p> <p>The <code>auto</code> mode will attempt to detect the appropriate PyTorch index based on the currently installed CUDA drivers.</p> <p>This option is in preview and may change in any future release.</p> <p>May also be set with the <code>UV_TORCH_BACKEND</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>auto</code>:  Select the appropriate PyTorch index based on the operating system and CUDA driver version</li> <li><code>cpu</code>:  Use the CPU-only PyTorch index</li> <li><code>cu130</code>:  Use the PyTorch index for CUDA 13.0</li> <li><code>cu129</code>:  Use the PyTorch index for CUDA 12.9</li> <li><code>cu128</code>:  Use the PyTorch index for CUDA 12.8</li> <li><code>cu126</code>:  Use the PyTorch index for CUDA 12.6</li> <li><code>cu125</code>:  Use the PyTorch index for CUDA 12.5</li> <li><code>cu124</code>:  Use the PyTorch index for CUDA 12.4</li> <li><code>cu123</code>:  Use the PyTorch index for CUDA 12.3</li> <li><code>cu122</code>:  Use the PyTorch index for CUDA 12.2</li> <li><code>cu121</code>:  Use the PyTorch index for CUDA 12.1</li> <li><code>cu120</code>:  Use the PyTorch index for CUDA 12.0</li> <li><code>cu118</code>:  Use the PyTorch index for CUDA 11.8</li> <li><code>cu117</code>:  Use the PyTorch index for CUDA 11.7</li> <li><code>cu116</code>:  Use the PyTorch index for CUDA 11.6</li> <li><code>cu115</code>:  Use the PyTorch index for CUDA 11.5</li> <li><code>cu114</code>:  Use the PyTorch index for CUDA 11.4</li> <li><code>cu113</code>:  Use the PyTorch index for CUDA 11.3</li> <li><code>cu112</code>:  Use the PyTorch index for CUDA 11.2</li> <li><code>cu111</code>:  Use the PyTorch index for CUDA 11.1</li> <li><code>cu110</code>:  Use the PyTorch index for CUDA 11.0</li> <li><code>cu102</code>:  Use the PyTorch index for CUDA 10.2</li> <li><code>cu101</code>:  Use the PyTorch index for CUDA 10.1</li> <li><code>cu100</code>:  Use the PyTorch index for CUDA 10.0</li> <li><code>cu92</code>:  Use the PyTorch index for CUDA 9.2</li> <li><code>cu91</code>:  Use the PyTorch index for CUDA 9.1</li> <li><code>cu90</code>:  Use the PyTorch index for CUDA 9.0</li> <li><code>cu80</code>:  Use the PyTorch index for CUDA 8.0</li> <li><code>rocm6.3</code>:  Use the PyTorch index for ROCm 6.3</li> <li><code>rocm6.2.4</code>:  Use the PyTorch index for ROCm 6.2.4</li> <li><code>rocm6.2</code>:  Use the PyTorch index for ROCm 6.2</li> <li><code>rocm6.1</code>:  Use the PyTorch index for ROCm 6.1</li> <li><code>rocm6.0</code>:  Use the PyTorch index for ROCm 6.0</li> <li><code>rocm5.7</code>:  Use the PyTorch index for ROCm 5.7</li> <li><code>rocm5.6</code>:  Use the PyTorch index for ROCm 5.6</li> <li><code>rocm5.5</code>:  Use the PyTorch index for ROCm 5.5</li> <li><code>rocm5.4.2</code>:  Use the PyTorch index for ROCm 5.4.2</li> <li><code>rocm5.4</code>:  Use the PyTorch index for ROCm 5.4</li> <li><code>rocm5.3</code>:  Use the PyTorch index for ROCm 5.3</li> <li><code>rocm5.2</code>:  Use the PyTorch index for ROCm 5.2</li> <li><code>rocm5.1.1</code>:  Use the PyTorch index for ROCm 5.1.1</li> <li><code>rocm4.2</code>:  Use the PyTorch index for ROCm 4.2</li> <li><code>rocm4.1</code>:  Use the PyTorch index for ROCm 4.1</li> <li><code>rocm4.0.1</code>:  Use the PyTorch index for ROCm 4.0.1</li> <li><code>xpu</code>:  Use the PyTorch index for Intel XPU</li> </ul><code>--universal</code><p>Perform a universal resolution, attempting to generate a single <code>requirements.txt</code> output file that is compatible with all operating systems, architectures, and Python implementations.</p> <p>In universal mode, the current Python version (or user-provided <code>--python-version</code>) will be treated as a lower bound. For example, <code>--universal --python-version 3.7</code> would produce a universal resolution for Python 3.7 and later.</p> <p>Implies <code>--no-strip-markers</code>.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-sync","title":"uv pip syncUsageArgumentsOptions","text":"<p>Sync an environment with a <code>requirements.txt</code> or <code>pylock.toml</code> file.</p> <p>When syncing an environment, any packages not listed in the <code>requirements.txt</code> or <code>pylock.toml</code> file will be removed. To retain extraneous packages, use <code>uv pip install</code> instead.</p> <p>The input file is presumed to be the output of a <code>pip compile</code> or <code>uv export</code> operation, in which it will include all transitive dependencies. If transitive dependencies are not present in the file, they will not be installed. Use <code>--strict</code> to warn if any transitive dependencies are missing.</p> <pre><code>uv pip sync [OPTIONS] &lt;SRC_FILE&gt;...\n</code></pre> SRC_FILE<p>Include the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code>.</p> <p>If a <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file is provided, uv will extract the requirements for the relevant project.</p> <p>If <code>-</code> is provided, then requirements will be read from stdin.</p> <code>--all-extras</code><p>Include all optional dependencies.</p> <p>Only applies to <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--allow-empty-requirements</code><p>Allow sync of empty requirements, which will clear the environment of all packages</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--break-system-packages</code><p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or <code>pip</code>).</p> <p>May also be set with the <code>UV_BREAK_SYSTEM_PACKAGES</code> environment variable.</p><code>--build-constraints</code>, <code>--build-constraint</code>, <code>-b</code> build-constraints<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>May also be set with the <code>UV_BUILD_CONSTRAINT</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--constraints</code>, <code>--constraint</code>, <code>-c</code> constraints<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip's <code>--constraint</code> option.</p> <p>May also be set with the <code>UV_CONSTRAINT</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Perform a dry run, i.e., don't actually install anything but resolve the dependencies and print the resulting plan</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra</code> extra<p>Include optional dependencies from the specified extra name; may be provided more than once.</p> <p>Only applies to <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--group</code> group<p>Install the specified dependency group from a <code>pylock.toml</code> or <code>pyproject.toml</code>.</p> <p>If no path is provided, the <code>pylock.toml</code> or <code>pyproject.toml</code> in the working directory is used.</p> <p>May be provided multiple times.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-allow-empty-requirements</code><code>--no-binary</code> no-binary<p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--no-break-system-packages</code><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-verify-hashes</code><p>Disable validation of hashes in the requirements file.</p> <p>By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash. To enforce hash validation, use <code>--require-hashes</code>.</p> <p>May also be set with the <code>UV_NO_VERIFY_HASHES</code> environment variable.</p><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-binary</code> only-binary<p>Only use pre-built wheels; don't build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--prefix</code> prefix<p>Install packages into <code>lib</code>, <code>bin</code>, and other top-level folders under the specified directory, as if a virtual environment were present at that location.</p> <p>In general, prefer the use of <code>--python</code> to install into an alternate environment, as scripts and other artifacts installed via <code>--prefix</code> will reference the installing interpreter, rather than any interpreter added to the <code>--prefix</code> directory, rendering them non-portable.</p> <code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter into which packages should be installed.</p> <p>By default, syncing requires a virtual environment. A path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--python-version</code> python-version<p>The minimum Python version that should be supported by the requirements (e.g., <code>3.7</code> or <code>3.7.9</code>).</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.7</code> is mapped to <code>3.7.0</code>.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--require-hashes</code><p>Require a matching hash for each requirement.</p> <p>By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash.</p> <p>When <code>--require-hashes</code> is enabled, all requirements must include a hash or set of hashes, and all requirements must either be pinned to exact versions (e.g., <code>==1.0.0</code>), or be specified via direct URL.</p> <p>Hash-checking mode introduces a number of additional constraints:</p> <ul> <li>Git dependencies are not supported. - Editable installations are not supported. - Local dependencies are not supported, unless they point to a specific wheel (<code>.whl</code>) or source archive (<code>.zip</code>, <code>.tar.gz</code>), as opposed to a directory.</li> </ul> <p>May also be set with the <code>UV_REQUIRE_HASHES</code> environment variable.</p><code>--strict</code><p>Validate the Python environment after completing the installation, to detect packages with missing dependencies or other issues</p> <code>--system</code><p>Install packages into the system Python environment.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--target</code> target<p>Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory</p> <code>--torch-backend</code> torch-backend<p>The backend to use when fetching packages in the PyTorch ecosystem (e.g., <code>cpu</code>, <code>cu126</code>, or <code>auto</code>).</p> <p>When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem, and will instead use the defined backend.</p> <p>For example, when set to <code>cpu</code>, uv will use the CPU-only PyTorch index; when set to <code>cu126</code>, uv will use the PyTorch index for CUDA 12.6.</p> <p>The <code>auto</code> mode will attempt to detect the appropriate PyTorch index based on the currently installed CUDA drivers.</p> <p>This option is in preview and may change in any future release.</p> <p>May also be set with the <code>UV_TORCH_BACKEND</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>auto</code>:  Select the appropriate PyTorch index based on the operating system and CUDA driver version</li> <li><code>cpu</code>:  Use the CPU-only PyTorch index</li> <li><code>cu130</code>:  Use the PyTorch index for CUDA 13.0</li> <li><code>cu129</code>:  Use the PyTorch index for CUDA 12.9</li> <li><code>cu128</code>:  Use the PyTorch index for CUDA 12.8</li> <li><code>cu126</code>:  Use the PyTorch index for CUDA 12.6</li> <li><code>cu125</code>:  Use the PyTorch index for CUDA 12.5</li> <li><code>cu124</code>:  Use the PyTorch index for CUDA 12.4</li> <li><code>cu123</code>:  Use the PyTorch index for CUDA 12.3</li> <li><code>cu122</code>:  Use the PyTorch index for CUDA 12.2</li> <li><code>cu121</code>:  Use the PyTorch index for CUDA 12.1</li> <li><code>cu120</code>:  Use the PyTorch index for CUDA 12.0</li> <li><code>cu118</code>:  Use the PyTorch index for CUDA 11.8</li> <li><code>cu117</code>:  Use the PyTorch index for CUDA 11.7</li> <li><code>cu116</code>:  Use the PyTorch index for CUDA 11.6</li> <li><code>cu115</code>:  Use the PyTorch index for CUDA 11.5</li> <li><code>cu114</code>:  Use the PyTorch index for CUDA 11.4</li> <li><code>cu113</code>:  Use the PyTorch index for CUDA 11.3</li> <li><code>cu112</code>:  Use the PyTorch index for CUDA 11.2</li> <li><code>cu111</code>:  Use the PyTorch index for CUDA 11.1</li> <li><code>cu110</code>:  Use the PyTorch index for CUDA 11.0</li> <li><code>cu102</code>:  Use the PyTorch index for CUDA 10.2</li> <li><code>cu101</code>:  Use the PyTorch index for CUDA 10.1</li> <li><code>cu100</code>:  Use the PyTorch index for CUDA 10.0</li> <li><code>cu92</code>:  Use the PyTorch index for CUDA 9.2</li> <li><code>cu91</code>:  Use the PyTorch index for CUDA 9.1</li> <li><code>cu90</code>:  Use the PyTorch index for CUDA 9.0</li> <li><code>cu80</code>:  Use the PyTorch index for CUDA 8.0</li> <li><code>rocm6.3</code>:  Use the PyTorch index for ROCm 6.3</li> <li><code>rocm6.2.4</code>:  Use the PyTorch index for ROCm 6.2.4</li> <li><code>rocm6.2</code>:  Use the PyTorch index for ROCm 6.2</li> <li><code>rocm6.1</code>:  Use the PyTorch index for ROCm 6.1</li> <li><code>rocm6.0</code>:  Use the PyTorch index for ROCm 6.0</li> <li><code>rocm5.7</code>:  Use the PyTorch index for ROCm 5.7</li> <li><code>rocm5.6</code>:  Use the PyTorch index for ROCm 5.6</li> <li><code>rocm5.5</code>:  Use the PyTorch index for ROCm 5.5</li> <li><code>rocm5.4.2</code>:  Use the PyTorch index for ROCm 5.4.2</li> <li><code>rocm5.4</code>:  Use the PyTorch index for ROCm 5.4</li> <li><code>rocm5.3</code>:  Use the PyTorch index for ROCm 5.3</li> <li><code>rocm5.2</code>:  Use the PyTorch index for ROCm 5.2</li> <li><code>rocm5.1.1</code>:  Use the PyTorch index for ROCm 5.1.1</li> <li><code>rocm4.2</code>:  Use the PyTorch index for ROCm 4.2</li> <li><code>rocm4.1</code>:  Use the PyTorch index for ROCm 4.1</li> <li><code>rocm4.0.1</code>:  Use the PyTorch index for ROCm 4.0.1</li> <li><code>xpu</code>:  Use the PyTorch index for Intel XPU</li> </ul><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-install","title":"uv pip installUsageArgumentsOptions","text":"<p>Install packages into an environment</p> <pre><code>uv pip install [OPTIONS] &lt;PACKAGE|--requirements &lt;REQUIREMENTS&gt;|--editable &lt;EDITABLE&gt;|--group &lt;GROUP&gt;&gt;\n</code></pre> PACKAGE<p>Install all listed packages.</p> <p>The order of the packages is used to determine priority during resolution.</p> <code>--all-extras</code><p>Include all optional dependencies.</p> <p>Only applies to <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--break-system-packages</code><p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or <code>pip</code>).</p> <p>May also be set with the <code>UV_BREAK_SYSTEM_PACKAGES</code> environment variable.</p><code>--build-constraints</code>, <code>--build-constraint</code>, <code>-b</code> build-constraints<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>May also be set with the <code>UV_BUILD_CONSTRAINT</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--compile-bytecode</code>, <code>--compile</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>May also be set with the <code>UV_COMPILE_BYTECODE</code> environment variable.</p><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--constraints</code>, <code>--constraint</code>, <code>-c</code> constraints<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip's <code>--constraint</code> option.</p> <p>May also be set with the <code>UV_CONSTRAINT</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Perform a dry run, i.e., don't actually install anything but resolve the dependencies and print the resulting plan</p> <code>--editable</code>, <code>-e</code> editable<p>Install the editable package based on the provided local file path</p> <code>--exact</code><p>Perform an exact sync, removing extraneous packages.</p> <p>By default, installing will make the minimum necessary changes to satisfy the requirements. When enabled, uv will update the environment to exactly match the requirements, removing packages that are not included in the requirements.</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra</code> extra<p>Include optional dependencies from the specified extra name; may be provided more than once.</p> <p>Only applies to <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--group</code> group<p>Install the specified dependency group from a <code>pylock.toml</code> or <code>pyproject.toml</code>.</p> <p>If no path is provided, the <code>pylock.toml</code> or <code>pyproject.toml</code> in the working directory is used.</p> <p>May be provided multiple times.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code> no-binary<p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--no-break-system-packages</code><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-deps</code><p>Ignore package dependencies, instead only installing those packages explicitly listed on the command line or in the requirements files</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-verify-hashes</code><p>Disable validation of hashes in the requirements file.</p> <p>By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash. To enforce hash validation, use <code>--require-hashes</code>.</p> <p>May also be set with the <code>UV_NO_VERIFY_HASHES</code> environment variable.</p><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--only-binary</code> only-binary<p>Only use pre-built wheels; don't build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--overrides</code>, <code>--override</code> overrides<p>Override versions using the given requirements files.</p> <p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they're combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <p>May also be set with the <code>UV_OVERRIDE</code> environment variable.</p><code>--prefix</code> prefix<p>Install packages into <code>lib</code>, <code>bin</code>, and other top-level folders under the specified directory, as if a virtual environment were present at that location.</p> <p>In general, prefer the use of <code>--python</code> to install into an alternate environment, as scripts and other artifacts installed via <code>--prefix</code> will reference the installing interpreter, rather than any interpreter added to the <code>--prefix</code> directory, rendering them non-portable.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter into which packages should be installed.</p> <p>By default, installation requires a virtual environment. A path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--python-version</code> python-version<p>The minimum Python version that should be supported by the requirements (e.g., <code>3.7</code> or <code>3.7.9</code>).</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.7</code> is mapped to <code>3.7.0</code>.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code>, <code>--force-reinstall</code><p>Reinstall all packages, regardless of whether they're already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>--refresh-package</code></p> <code>--require-hashes</code><p>Require a matching hash for each requirement.</p> <p>By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash.</p> <p>When <code>--require-hashes</code> is enabled, all requirements must include a hash or set of hashes, and all requirements must either be pinned to exact versions (e.g., <code>==1.0.0</code>), or be specified via direct URL.</p> <p>Hash-checking mode introduces a number of additional constraints:</p> <ul> <li>Git dependencies are not supported. - Editable installations are not supported. - Local dependencies are not supported, unless they point to a specific wheel (<code>.whl</code>) or source archive (<code>.zip</code>, <code>.tar.gz</code>), as opposed to a directory.</li> </ul> <p>May also be set with the <code>UV_REQUIRE_HASHES</code> environment variable.</p><code>--requirements</code>, <code>--requirement</code>, <code>-r</code> requirements<p>Install the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code>.</p> <p>If a <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file is provided, uv will extract the requirements for the relevant project.</p> <p>If <code>-</code> is provided, then requirements will be read from stdin.</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--strict</code><p>Validate the Python environment after completing the installation, to detect packages with missing dependencies or other issues</p> <code>--system</code><p>Install packages into the system Python environment.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--target</code> target<p>Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory</p> <code>--torch-backend</code> torch-backend<p>The backend to use when fetching packages in the PyTorch ecosystem (e.g., <code>cpu</code>, <code>cu126</code>, or <code>auto</code>)</p> <p>When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem, and will instead use the defined backend.</p> <p>For example, when set to <code>cpu</code>, uv will use the CPU-only PyTorch index; when set to <code>cu126</code>, uv will use the PyTorch index for CUDA 12.6.</p> <p>The <code>auto</code> mode will attempt to detect the appropriate PyTorch index based on the currently installed CUDA drivers.</p> <p>This option is in preview and may change in any future release.</p> <p>May also be set with the <code>UV_TORCH_BACKEND</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>auto</code>:  Select the appropriate PyTorch index based on the operating system and CUDA driver version</li> <li><code>cpu</code>:  Use the CPU-only PyTorch index</li> <li><code>cu130</code>:  Use the PyTorch index for CUDA 13.0</li> <li><code>cu129</code>:  Use the PyTorch index for CUDA 12.9</li> <li><code>cu128</code>:  Use the PyTorch index for CUDA 12.8</li> <li><code>cu126</code>:  Use the PyTorch index for CUDA 12.6</li> <li><code>cu125</code>:  Use the PyTorch index for CUDA 12.5</li> <li><code>cu124</code>:  Use the PyTorch index for CUDA 12.4</li> <li><code>cu123</code>:  Use the PyTorch index for CUDA 12.3</li> <li><code>cu122</code>:  Use the PyTorch index for CUDA 12.2</li> <li><code>cu121</code>:  Use the PyTorch index for CUDA 12.1</li> <li><code>cu120</code>:  Use the PyTorch index for CUDA 12.0</li> <li><code>cu118</code>:  Use the PyTorch index for CUDA 11.8</li> <li><code>cu117</code>:  Use the PyTorch index for CUDA 11.7</li> <li><code>cu116</code>:  Use the PyTorch index for CUDA 11.6</li> <li><code>cu115</code>:  Use the PyTorch index for CUDA 11.5</li> <li><code>cu114</code>:  Use the PyTorch index for CUDA 11.4</li> <li><code>cu113</code>:  Use the PyTorch index for CUDA 11.3</li> <li><code>cu112</code>:  Use the PyTorch index for CUDA 11.2</li> <li><code>cu111</code>:  Use the PyTorch index for CUDA 11.1</li> <li><code>cu110</code>:  Use the PyTorch index for CUDA 11.0</li> <li><code>cu102</code>:  Use the PyTorch index for CUDA 10.2</li> <li><code>cu101</code>:  Use the PyTorch index for CUDA 10.1</li> <li><code>cu100</code>:  Use the PyTorch index for CUDA 10.0</li> <li><code>cu92</code>:  Use the PyTorch index for CUDA 9.2</li> <li><code>cu91</code>:  Use the PyTorch index for CUDA 9.1</li> <li><code>cu90</code>:  Use the PyTorch index for CUDA 9.0</li> <li><code>cu80</code>:  Use the PyTorch index for CUDA 8.0</li> <li><code>rocm6.3</code>:  Use the PyTorch index for ROCm 6.3</li> <li><code>rocm6.2.4</code>:  Use the PyTorch index for ROCm 6.2.4</li> <li><code>rocm6.2</code>:  Use the PyTorch index for ROCm 6.2</li> <li><code>rocm6.1</code>:  Use the PyTorch index for ROCm 6.1</li> <li><code>rocm6.0</code>:  Use the PyTorch index for ROCm 6.0</li> <li><code>rocm5.7</code>:  Use the PyTorch index for ROCm 5.7</li> <li><code>rocm5.6</code>:  Use the PyTorch index for ROCm 5.6</li> <li><code>rocm5.5</code>:  Use the PyTorch index for ROCm 5.5</li> <li><code>rocm5.4.2</code>:  Use the PyTorch index for ROCm 5.4.2</li> <li><code>rocm5.4</code>:  Use the PyTorch index for ROCm 5.4</li> <li><code>rocm5.3</code>:  Use the PyTorch index for ROCm 5.3</li> <li><code>rocm5.2</code>:  Use the PyTorch index for ROCm 5.2</li> <li><code>rocm5.1.1</code>:  Use the PyTorch index for ROCm 5.1.1</li> <li><code>rocm4.2</code>:  Use the PyTorch index for ROCm 4.2</li> <li><code>rocm4.1</code>:  Use the PyTorch index for ROCm 4.1</li> <li><code>rocm4.0.1</code>:  Use the PyTorch index for ROCm 4.0.1</li> <li><code>xpu</code>:  Use the PyTorch index for Intel XPU</li> </ul><code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--user</code><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-uninstall","title":"uv pip uninstallUsageArgumentsOptions","text":"<p>Uninstall packages from an environment</p> <pre><code>uv pip uninstall [OPTIONS] &lt;PACKAGE|--requirements &lt;REQUIREMENTS&gt;&gt;\n</code></pre> PACKAGE<p>Uninstall all listed packages</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--break-system-packages</code><p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or <code>pip</code>).</p> <p>May also be set with the <code>UV_BREAK_SYSTEM_PACKAGES</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Perform a dry run, i.e., don't actually uninstall anything but print the resulting plan</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for remote requirements files.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-break-system-packages</code><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--prefix</code> prefix<p>Uninstall packages from the specified <code>--prefix</code> directory</p> <code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter from which packages should be uninstalled.</p> <p>By default, uninstallation requires a virtual environment. A path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--requirements</code>, <code>--requirement</code>, <code>-r</code> requirements<p>Uninstall the packages listed in the given files.</p> <p>The following formats are supported: <code>requirements.txt</code>, <code>.py</code> files with inline metadata, <code>pylock.toml</code>, <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code>.</p> <code>--system</code><p>Use the system Python to uninstall packages.</p> <p>By default, uv uninstalls from the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--target</code> target<p>Uninstall packages from the specified <code>--target</code> directory</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-freeze","title":"uv pip freezeUsageOptions","text":"<p>List, in requirements format, packages installed in an environment</p> <pre><code>uv pip freeze [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-editable</code><p>Exclude any editable packages from output</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--path</code> paths<p>Restrict to the specified installation path for listing packages (can be used multiple times)</p> <code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be listed.</p> <p>By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>List packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-list","title":"uv pip listUsageOptions","text":"<p>List, in tabular format, packages installed in an environment</p> <pre><code>uv pip list [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--editable</code>, <code>-e</code><p>Only include editable projects</p> <code>--exclude</code> exclude<p>Exclude the specified package(s) from the output</p> <code>--exclude-editable</code><p>Exclude any editable packages from output</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--format</code> format<p>Select the output format</p> <p>[default: columns]</p><p>Possible values:</p> <ul> <li><code>columns</code>:  Display the list of packages in a human-readable table</li> <li><code>freeze</code>:  Display the list of packages in a <code>pip freeze</code>-like format, with one package per line alongside its version</li> <li><code>json</code>:  Display the list of packages in a machine-readable JSON format</li> </ul><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--outdated</code><p>List outdated packages.</p> <p>The latest version of each package will be shown alongside the installed version. Up-to-date packages will be omitted from the output.</p> <code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be listed.</p> <p>By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>List packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-show","title":"uv pip showUsageArgumentsOptions","text":"<p>Show information about one or more installed packages</p> <pre><code>uv pip show [OPTIONS] [PACKAGE]...\n</code></pre> PACKAGE<p>The package(s) to display</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--files</code>, <code>-f</code><p>Show the full list of installed files for each package</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to find the package in.</p> <p>By default, uv looks for packages in a virtual environment but will look for packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>Show a package in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-tree","title":"uv pip treeUsageOptions","text":"<p>Display the dependency tree for an environment</p> <pre><code>uv pip tree [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--depth</code>, <code>-d</code> depth<p>Maximum display depth of the dependency tree</p> <p>[default: 255]</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--invert</code>, <code>--reverse</code><p>Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-dedupe</code><p>Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--outdated</code><p>Show the latest available version of each package in the tree</p> <code>--package</code> package<p>Display only the specified packages</p> <code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--prune</code> prune<p>Prune the given package from the display of the dependency tree</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be listed.</p> <p>By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--show-sizes</code><p>Show compressed wheel sizes for packages in the tree</p> <code>--show-version-specifiers</code><p>Show the version constraint(s) imposed on each package</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>List packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-pip-check","title":"uv pip checkUsageOptions","text":"<p>Verify installed packages have compatible dependencies</p> <pre><code>uv pip check [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be checked.</p> <p>By default, uv checks packages in a virtual environment but will check packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--python-platform</code> python-platform<p>The platform for which packages should be checked.</p> <p>By default, the installed packages are checked against the platform of the current interpreter.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>When targeting macOS (Darwin), the default minimum version is <code>13.0</code>. Use <code>MACOSX_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting iOS, the default minimum version is <code>13.0</code>. Use <code>IPHONEOS_DEPLOYMENT_TARGET</code> to specify a different minimum version, e.g., <code>14.0</code>.</p> <p>When targeting Android, the default minimum Android API level is <code>24</code>. Use <code>ANDROID_API_LEVEL</code> to specify a different minimum version, e.g., <code>26</code>.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  A 64-bit x86 Windows target</li> <li><code>aarch64-pc-windows-msvc</code>:  An ARM64 Windows target</li> <li><code>i686-pc-windows-msvc</code>:  A 32-bit x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_28</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_28</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>riscv64-unknown-linux</code>:  A RISCV64 Linux target</li> <li><code>x86_64-manylinux2014</code>:  An <code>x86_64</code> target for the <code>manylinux2014</code> platform. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>x86_64-manylinux_2_32</code>:  An <code>x86_64</code> target for the <code>manylinux_2_32</code> platform</li> <li><code>x86_64-manylinux_2_33</code>:  An <code>x86_64</code> target for the <code>manylinux_2_33</code> platform</li> <li><code>x86_64-manylinux_2_34</code>:  An <code>x86_64</code> target for the <code>manylinux_2_34</code> platform</li> <li><code>x86_64-manylinux_2_35</code>:  An <code>x86_64</code> target for the <code>manylinux_2_35</code> platform</li> <li><code>x86_64-manylinux_2_36</code>:  An <code>x86_64</code> target for the <code>manylinux_2_36</code> platform</li> <li><code>x86_64-manylinux_2_37</code>:  An <code>x86_64</code> target for the <code>manylinux_2_37</code> platform</li> <li><code>x86_64-manylinux_2_38</code>:  An <code>x86_64</code> target for the <code>manylinux_2_38</code> platform</li> <li><code>x86_64-manylinux_2_39</code>:  An <code>x86_64</code> target for the <code>manylinux_2_39</code> platform</li> <li><code>x86_64-manylinux_2_40</code>:  An <code>x86_64</code> target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-manylinux2014</code>:  An ARM64 target for the <code>manylinux2014</code> platform. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_32</code>:  An ARM64 target for the <code>manylinux_2_32</code> platform</li> <li><code>aarch64-manylinux_2_33</code>:  An ARM64 target for the <code>manylinux_2_33</code> platform</li> <li><code>aarch64-manylinux_2_34</code>:  An ARM64 target for the <code>manylinux_2_34</code> platform</li> <li><code>aarch64-manylinux_2_35</code>:  An ARM64 target for the <code>manylinux_2_35</code> platform</li> <li><code>aarch64-manylinux_2_36</code>:  An ARM64 target for the <code>manylinux_2_36</code> platform</li> <li><code>aarch64-manylinux_2_37</code>:  An ARM64 target for the <code>manylinux_2_37</code> platform</li> <li><code>aarch64-manylinux_2_38</code>:  An ARM64 target for the <code>manylinux_2_38</code> platform</li> <li><code>aarch64-manylinux_2_39</code>:  An ARM64 target for the <code>manylinux_2_39</code> platform</li> <li><code>aarch64-manylinux_2_40</code>:  An ARM64 target for the <code>manylinux_2_40</code> platform</li> <li><code>aarch64-linux-android</code>:  An ARM64 Android target</li> <li><code>x86_64-linux-android</code>:  An <code>x86_64</code> Android target</li> <li><code>wasm32-pyodide2024</code>:  A wasm32 target using the Pyodide 2024 platform. Meant for use with Python 3.12</li> <li><code>arm64-apple-ios</code>:  An ARM64 target for iOS device</li> <li><code>arm64-apple-ios-simulator</code>:  An ARM64 target for iOS simulator</li> <li><code>x86_64-apple-ios-simulator</code>:  An <code>x86_64</code> target for iOS simulator</li> </ul><code>--python-version</code> python-version<p>The Python version against which packages should be checked.</p> <p>By default, the installed packages are checked against the version of the current interpreter.</p> <code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--system</code><p>Check packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <p>May also be set with the <code>UV_SYSTEM_PYTHON</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-venv","title":"uv venv","text":"<p>Create a virtual environment.</p> <p>By default, creates a virtual environment named <code>.venv</code> in the working directory. An alternative path may be provided positionally.</p> <p>If in a project, the default environment name can be changed with the <code>UV_PROJECT_ENVIRONMENT</code> environment variable; this only applies when run from the project root directory.</p> <p>If a virtual environment exists at the target path, it will be removed and a new, empty virtual environment will be created.</p> <p>When using uv, the virtual environment does not need to be activated. uv will find a virtual environment (named <code>.venv</code>) in the working directory or any parent directories.</p> Usage <pre><code>uv venv [OPTIONS] [PATH]\n</code></pre> Arguments PATH<p>The path to the virtual environment to create.</p> <p>Default to <code>.venv</code> in the working directory.</p> <p>Relative paths are resolved relative to the working directory.</p> Options <code>--allow-existing</code><p>Preserve any existing files or directories at the target path.</p> <p>By default, <code>uv venv</code> will exit with an error if the given path is non-empty. The <code>--allow-existing</code> option will instead write to the given path, regardless of its contents, and without clearing it beforehand.</p> <p>WARNING: This option can lead to unexpected behavior if the existing virtual environment and the newly-created virtual environment are linked to different Python interpreters.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--clear</code>, <code>-c</code><p>Remove any existing files or directories at the target path.</p> <p>By default, <code>uv venv</code> will exit with an error if the given path is non-empty. The <code>--clear</code> option will instead clear a non-empty path before creating a new virtual environment.</p> <p>May also be set with the <code>UV_VENV_CLEAR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for a specific package to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used for installing seed packages.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-project</code>, <code>--no-workspace</code><p>Avoid discovering a project or workspace.</p> <p>By default, uv searches for projects in the current directory or any parent directory to determine the default path of the virtual environment and check for Python version constraints, if any.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--prompt</code> prompt<p>Provide an alternative prompt prefix for the virtual environment.</p> <p>By default, the prompt is dependent on whether a path was provided to <code>uv venv</code>. If provided (e.g, <code>uv venv project</code>), the prompt is set to the directory name. If not provided (<code>uv venv</code>), the prompt is set to the current directory's name.</p> <p>If \".\" is provided, the current directory name will be used regardless of whether a path was provided to <code>uv venv</code>.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for the virtual environment.</p> <p>During virtual environment creation, uv will not look for Python interpreters in virtual environments.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--relocatable</code><p>Make the virtual environment relocatable.</p> <p>A relocatable virtual environment can be moved around and redistributed without invalidating its associated entrypoint and activation scripts.</p> <p>Note that this can only be guaranteed for standard <code>console_scripts</code> and <code>gui_scripts</code>. Other scripts may be adjusted if they ship with a generic <code>#!python[w]</code> shebang, and binaries are left as-is.</p> <p>As a result of making the environment relocatable (by way of writing relative, rather than absolute paths), the entrypoints and scripts themselves will not be relocatable. In other words, copying those entrypoints and scripts to a location outside the environment will not work, as they reference paths relative to the environment itself.</p> <code>--seed</code><p>Install seed packages (one or more of: <code>pip</code>, <code>setuptools</code>, and <code>wheel</code>) into the virtual environment.</p> <p>Note that <code>setuptools</code> and <code>wheel</code> are not included in Python 3.12+ environments.</p> <p>May also be set with the <code>UV_VENV_SEED</code> environment variable.</p><code>--system-site-packages</code><p>Give the virtual environment access to the system site packages directory.</p> <p>Unlike <code>pip</code>, when a virtual environment is created with <code>--system-site-packages</code>, uv will not take system site packages into account when running commands like <code>uv pip list</code> or <code>uv pip install</code>. The <code>--system-site-packages</code> flag will provide the virtual environment with access to the system site packages directory at runtime, but will not affect the behavior of uv commands.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-build","title":"uv build","text":"<p>Build Python packages into source distributions and wheels.</p> <p><code>uv build</code> accepts a path to a directory or source distribution, which defaults to the current working directory.</p> <p>By default, if passed a directory, <code>uv build</code> will build a source distribution (\"sdist\") from the source directory, and a binary distribution (\"wheel\") from the source distribution.</p> <p><code>uv build --sdist</code> can be used to build only the source distribution, <code>uv build --wheel</code> can be used to build only the binary distribution, and <code>uv build --sdist --wheel</code> can be used to build both distributions from source.</p> <p>If passed a source distribution, <code>uv build --wheel</code> will build a wheel from the source distribution.</p> Usage <pre><code>uv build [OPTIONS] [SRC]\n</code></pre> Arguments SRC<p>The directory from which distributions should be built, or a source distribution archive to build into a wheel.</p> <p>Defaults to the current working directory.</p> Options <code>--all-packages</code>, <code>--all</code><p>Builds all packages in the workspace.</p> <p>The workspace will be discovered from the provided source directory, or the current directory if no source directory is provided.</p> <p>If the workspace member does not exist, uv will exit with an error.</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--build-constraints</code>, <code>--build-constraint</code>, <code>-b</code> build-constraints<p>Constrain build dependencies using the given requirements files when building distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a build dependency that's installed. However, including a package in a constraints file will not trigger the inclusion of that package on its own.</p> <p>May also be set with the <code>UV_BUILD_CONSTRAINT</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--clear</code><p>Clear the output directory before the build, removing stale artifacts</p> <code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--config-setting</code>, <code>--config-settings</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--config-settings-package</code>, <code>--config-settings-package</code> config-settings-package<p>Settings to pass to the PEP 517 build backend for a specific package, specified as <code>PACKAGE:KEY=VALUE</code> pairs</p> <code>--default-index</code> default-index<p>The URL of the default package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--index</code> flag.</p> <p>May also be set with the <code>UV_DEFAULT_INDEX</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and local dates in the same format (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>May also be set with the <code>UV_EXCLUDE_NEWER</code> environment variable.</p><code>--exclude-newer-package</code> exclude-newer-package<p>Limit candidate packages for a specific package to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in the format <code>PACKAGE=DATE</code>, where <code>DATE</code> is an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or local date (e.g., <code>2006-12-02</code>) in your system's configured time zone.</p> <p>Can be provided multiple times for different packages.</p> <code>--extra-index-url</code> extra-index-url<p>(Deprecated: use <code>--index</code> instead) Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <p>May also be set with the <code>UV_EXTRA_INDEX_URL</code> environment variable.</p><code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>May also be set with the <code>UV_FIND_LINKS</code> environment variable.</p><code>--force-pep517</code><p>Always build through PEP 517, don't use the fast path for the uv build backend.</p> <p>By default, uv won't create a PEP 517 build environment for packages using the uv build backend, but use a fast path that calls into the build backend directly. This option forces always using PEP 517.</p> <code>--fork-strategy</code> fork-strategy<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>May also be set with the <code>UV_FORK_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>fewest</code>:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>requires-python</code>:  Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The URLs to use when resolving dependencies, in addition to the default index.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--default-index</code> (which defaults to PyPI). When multiple <code>--index</code> flags are provided, earlier values take priority.</p> <p>Index names are not supported as values. Relative paths must be disambiguated from index names with <code>./</code> or <code>../</code> on Unix or <code>.\\\\</code>, <code>..\\\\</code>, <code>./</code> or <code>../</code> on Windows.</p> <p>May also be set with the <code>UV_INDEX</code> environment variable.</p><code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>May also be set with the <code>UV_INDEX_STRATEGY</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul><code>--index-url</code>, <code>-i</code> index-url<p>(Deprecated: use <code>--default-index</code> instead) The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <p>May also be set with the <code>UV_INDEX_URL</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>May also be set with the <code>UV_LINK_MODE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-binary</code><p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>May also be set with the <code>UV_NO_BINARY</code> environment variable.</p><code>--no-binary-package</code> no-binary-package<p>Don't install pre-built wheels for a specific package</p> <p>May also be set with the <code>UV_NO_BINARY_PACKAGE</code> environment variable.</p><code>--no-build</code><p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>May also be set with the <code>UV_NO_BUILD</code> environment variable.</p><code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>May also be set with the <code>UV_NO_BUILD_ISOLATION</code> environment variable.</p><code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-logs</code><p>Hide logs from the build backend</p> <code>--no-build-package</code> no-build-package<p>Don't build source distributions for a specific package</p> <p>May also be set with the <code>UV_NO_BUILD_PACKAGE</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-create-gitignore</code><p>Do not create a <code>.gitignore</code> file in the output directory.</p> <p>By default, uv creates a <code>.gitignore</code> file in the output directory to exclude build artifacts from version control. When this flag is used, the file will be omitted.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources</p> <code>--no-verify-hashes</code><p>Disable validation of hashes in the requirements file.</p> <p>By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash. To enforce hash validation, use <code>--require-hashes</code>.</p> <p>May also be set with the <code>UV_NO_VERIFY_HASHES</code> environment variable.</p><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--out-dir</code>, <code>-o</code> out-dir<p>The output directory to which distributions should be written.</p> <p>Defaults to the <code>dist</code> subdirectory within the source directory, or the directory containing the source distribution archive.</p> <code>--package</code> package<p>Build a specific package in the workspace.</p> <p>The workspace will be discovered from the provided source directory, or the current directory if no source directory is provided.</p> <p>If the workspace member does not exist, uv will exit with an error.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>May also be set with the <code>UV_PRERELEASE</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for the build environment.</p> <p>By default, builds are executed in isolated virtual environments. The discovered interpreter will be used to create those environments, and will be symlinked or copied in depending on the platform.</p> <p>See uv python to view supported request formats.</p> <p>May also be set with the <code>UV_PYTHON</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--require-hashes</code><p>Require a matching hash for each requirement.</p> <p>By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash.</p> <p>When <code>--require-hashes</code> is enabled, all requirements must include a hash or set of hashes, and all requirements must either be pinned to exact versions (e.g., <code>==1.0.0</code>), or be specified via direct URL.</p> <p>Hash-checking mode introduces a number of additional constraints:</p> <ul> <li>Git dependencies are not supported. - Editable installations are not supported. - Local dependencies are not supported, unless they point to a specific wheel (<code>.whl</code>) or source archive (<code>.zip</code>, <code>.tar.gz</code>), as opposed to a directory.</li> </ul> <p>May also be set with the <code>UV_REQUIRE_HASHES</code> environment variable.</p><code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>May also be set with the <code>UV_RESOLUTION</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul><code>--sdist</code><p>Build a source distribution (\"sdist\") from the given directory</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p> <code>--wheel</code><p>Build a binary distribution (\"wheel\") from the given directory</p>"},{"location":"reference/cli/#uv-publish","title":"uv publish","text":"<p>Upload distributions to an index</p> Usage <pre><code>uv publish [OPTIONS] [FILES]...\n</code></pre> Arguments FILES<p>Paths to the files to upload. Accepts glob expressions.</p> <p>Defaults to the <code>dist</code> directory. Selects only wheels and source distributions, while ignoring other files.</p> Options <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--check-url</code> check-url<p>Check an index URL for existing files to skip duplicate uploads.</p> <p>This option allows retrying publishing that failed after only some, but not all files have been uploaded, and handles errors due to parallel uploads of the same file.</p> <p>Before uploading, the index is checked. If the exact same file already exists in the index, the file will not be uploaded. If an error occurred during the upload, the index is checked again, to handle cases where the identical file was uploaded twice in parallel.</p> <p>The exact behavior will vary based on the index. When uploading to PyPI, uploading the same file succeeds even without <code>--check-url</code>, while most other indexes error. When uploading to pyx, the index URL can be inferred automatically from the publish URL.</p> <p>The index must provide one of the supported hashes (SHA-256, SHA-384, or SHA-512).</p> <p>May also be set with the <code>UV_PUBLISH_CHECK_URL</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Perform a dry run without uploading files.</p> <p>When enabled, the command will check for existing files if <code>--check-url</code> is provided, and will perform validation against the index if supported, but will not upload any files.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index</code> index<p>The name of an index in the configuration to use for publishing.</p> <p>The index must have a <code>publish-url</code> setting, for example:</p> <pre><code>[[tool.uv.index]]\nname = \"pypi\"\nurl = \"https://pypi.org/simple\"\npublish-url = \"https://upload.pypi.org/legacy/\"\n</code></pre> <p>The index <code>url</code> will be used to check for existing files to skip duplicate uploads.</p> <p>With these settings, the following two calls are equivalent:</p> <pre><code>uv publish --index pypi\nuv publish --publish-url https://upload.pypi.org/legacy/ --check-url https://pypi.org/simple\n</code></pre> <p>May also be set with the <code>UV_PUBLISH_INDEX</code> environment variable.</p><code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for remote requirements files.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>May also be set with the <code>UV_KEYRING_PROVIDER</code> environment variable.</p><p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--password</code>, <code>-p</code> password<p>The password for the upload</p> <p>May also be set with the <code>UV_PUBLISH_PASSWORD</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--publish-url</code> publish-url<p>The URL of the upload endpoint (not the index URL).</p> <p>Note that there are typically different URLs for index access (e.g., <code>https:://.../simple</code>) and index upload.</p> <p>Defaults to PyPI's publish URL (https://upload.pypi.org/legacy/).</p> <p>May also be set with the <code>UV_PUBLISH_URL</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--token</code>, <code>-t</code> token<p>The token for the upload.</p> <p>Using a token is equivalent to passing <code>__token__</code> as <code>--username</code> and the token as <code>--password</code> password.</p> <p>May also be set with the <code>UV_PUBLISH_TOKEN</code> environment variable.</p><code>--trusted-publishing</code> trusted-publishing<p>Configure trusted publishing.</p> <p>By default, uv checks for trusted publishing when running in a supported environment, but ignores it if it isn't configured.</p> <p>uv's supported environments for trusted publishing include GitHub Actions and GitLab CI/CD.</p> <p>Possible values:</p> <ul> <li><code>automatic</code>:  Attempt trusted publishing when we're in a supported environment, continue if that fails</li> <li><code>always</code></li> <li><code>never</code></li> </ul><code>--username</code>, <code>-u</code> username<p>The username for the upload</p> <p>May also be set with the <code>UV_PUBLISH_USERNAME</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-cache","title":"uv cache","text":"<p>Manage uv's cache</p> Usage <pre><code>uv cache [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv cache clean</code><p>Clear the cache, removing all entries or those linked to specific packages</p> <code>uv cache prune</code><p>Prune all unreachable objects from the cache</p> <code>uv cache dir</code><p>Show the cache directory</p>"},{"location":"reference/cli/#uv-cache-clean","title":"uv cache cleanUsageArgumentsOptions","text":"<p>Clear the cache, removing all entries or those linked to specific packages</p> <pre><code>uv cache clean [OPTIONS] [PACKAGE]...\n</code></pre> PACKAGE<p>The packages to remove from the cache</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--force</code><p>Force removal of the cache, ignoring in-use checks.</p> <p>By default, <code>uv cache clean</code> will block until no process is reading the cache. When <code>--force</code> is used, <code>uv cache clean</code> will proceed without taking a lock.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-cache-prune","title":"uv cache pruneUsageOptions","text":"<p>Prune all unreachable objects from the cache</p> <pre><code>uv cache prune [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--ci</code><p>Optimize the cache for persistence in a continuous integration environment, like GitHub Actions.</p> <p>By default, uv caches both the wheels that it builds from source and the pre-built wheels that it downloads directly, to enable high-performance package installation. In some scenarios, though, persisting pre-built wheels may be undesirable. For example, in GitHub Actions, it's faster to omit pre-built wheels from the cache and instead have re-download them on each run. However, it typically is faster to cache wheels that are built from source, since the wheel building process can be expensive, especially for extension modules.</p> <p>In <code>--ci</code> mode, uv will prune any pre-built wheels from the cache, but retain any wheels that were built from source.</p> <code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--force</code><p>Force removal of the cache, ignoring in-use checks.</p> <p>By default, <code>uv cache prune</code> will block until no process is reading the cache. When <code>--force</code> is used, <code>uv cache prune</code> will proceed without taking a lock.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-cache-dir","title":"uv cache dirUsageOptions","text":"<p>Show the cache directory.</p> <p>By default, the cache is stored in <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Unix and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>When <code>--no-cache</code> is used, the cache is stored in a temporary directory and discarded when the process exits.</p> <p>An alternative cache directory may be specified via the <code>cache-dir</code> setting, the <code>--cache-dir</code> option, or the <code>$UV_CACHE_DIR</code> environment variable.</p> <p>Note that it is important for performance for the cache directory to be located on the same file system as the Python environment uv is operating on.</p> <pre><code>uv cache dir [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-self","title":"uv self","text":"<p>Manage the uv executable</p> Usage <pre><code>uv self [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv self update</code><p>Update uv</p> <code>uv self version</code><p>Display uv's version</p>"},{"location":"reference/cli/#uv-self-update","title":"uv self updateUsageArgumentsOptions","text":"<p>Update uv</p> <pre><code>uv self update [OPTIONS] [TARGET_VERSION]\n</code></pre> TARGET_VERSION<p>Update to the specified version. If not provided, uv will update to the latest version</p> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--dry-run</code><p>Run without performing the update</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--token</code> token<p>A GitHub token for authentication. A token is not required but can be used to reduce the chance of encountering rate limits</p> <p>May also be set with the <code>UV_GITHUB_TOKEN</code> environment variable.</p><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-self-version","title":"uv self versionUsageOptions","text":"<p>Display uv's version</p> <pre><code>uv self version [OPTIONS]\n</code></pre> <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--output-format</code> output-format<code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--short</code><p>Only print the version</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/cli/#uv-generate-shell-completion","title":"uv generate-shell-completion","text":"<p>Generate shell completion</p> Usage <pre><code>uv generate-shell-completion [OPTIONS] &lt;SHELL&gt;\n</code></pre> Arguments SHELL<p>The shell to generate the completion script for</p> Options <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p>"},{"location":"reference/cli/#uv-help","title":"uv help","text":"<p>Display documentation for a command</p> Usage <pre><code>uv help [OPTIONS] [COMMAND]...\n</code></pre> Arguments COMMAND Options <code>--allow-insecure-host</code>, <code>--trusted-host</code> allow-insecure-host<p>Allow insecure connections to a host.</p> <p>Can be provided multiple times.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>May also be set with the <code>UV_INSECURE_HOST</code> environment variable.</p><code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on macOS and Linux, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>To view the location of the cache directory, run <code>uv cache dir</code>.</p> <p>May also be set with the <code>UV_CACHE_DIR</code> environment variable.</p><code>--color</code> color-choice<p>Control the use of color in output.</p> <p>By default, uv will automatically detect support for colors when writing to a terminal.</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul><code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <p>May also be set with the <code>UV_CONFIG_FILE</code> environment variable.</p><code>--directory</code> directory<p>Change to the given directory prior to running the command.</p> <p>Relative paths are resolved with the given directory as the base.</p> <p>See <code>--project</code> to only change the project root directory.</p> <p>May also be set with the <code>UV_WORKING_DIRECTORY</code> environment variable.</p><code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--managed-python</code><p>Require use of uv-managed Python versions.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.</p> <p>May also be set with the <code>UV_MANAGED_PYTHON</code> environment variable.</p><code>--native-tls</code><p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>May also be set with the <code>UV_NATIVE_TLS</code> environment variable.</p><code>--no-cache</code>, <code>--no-cache-dir</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <p>May also be set with the <code>UV_NO_CACHE</code> environment variable.</p><code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <p>May also be set with the <code>UV_NO_CONFIG</code> environment variable.</p><code>--no-managed-python</code><p>Disable use of uv-managed Python versions.</p> <p>Instead, uv will search for a suitable Python version on the system.</p> <p>May also be set with the <code>UV_NO_MANAGED_PYTHON</code> environment variable.</p><code>--no-pager</code><p>Disable pager when printing help</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <p>May also be set with the <code>UV_NO_PROGRESS</code> environment variable.</p><code>--no-python-downloads</code><p>Disable automatic downloads of Python.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <p>May also be set with the <code>UV_OFFLINE</code> environment variable.</p><code>--project</code> project<p>Run the command within the given project directory.</p> <p>All <code>pyproject.toml</code>, <code>uv.toml</code>, and <code>.python-version</code> files will be discovered by walking up the directory tree from the project root, as will the project's virtual environment (<code>.venv</code>).</p> <p>Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.</p> <p>See <code>--directory</code> to change the working directory entirely.</p> <p>This setting has no effect when used in the <code>uv pip</code> interface.</p> <p>May also be set with the <code>UV_PROJECT</code> environment variable.</p><code>--quiet</code>, <code>-q</code><p>Use quiet output.</p> <p>Repeating this option, e.g., <code>-qq</code>, will enable a silent mode in which uv will write no output to stdout.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)</p>"},{"location":"reference/environment/","title":"Environment variables","text":"<p>uv defines and respects the following environment variables:</p>"},{"location":"reference/environment/#uv_break_system_packages","title":"<code>UV_BREAK_SYSTEM_PACKAGES</code>","text":"<p>added in <code>0.1.32</code></p> <p>Equivalent to the <code>--break-system-packages</code> command-line argument. If set to <code>true</code>, uv will allow the installation of packages that conflict with system-installed packages.</p> <p>WARNING: <code>UV_BREAK_SYSTEM_PACKAGES=true</code> is intended for use in continuous integration (CI) or containerized environments and should be used with caution, as modifying the system Python can lead to unexpected behavior.</p>"},{"location":"reference/environment/#uv_build_constraint","title":"<code>UV_BUILD_CONSTRAINT</code>","text":"<p>added in <code>0.2.34</code></p> <p>Equivalent to the <code>--build-constraint</code> command-line argument. If set, uv will use this file as constraints for any source distribution builds. Uses space-separated list of files.</p>"},{"location":"reference/environment/#uv_cache_dir","title":"<code>UV_CACHE_DIR</code>","text":"<p>added in <code>0.0.5</code></p> <p>Equivalent to the <code>--cache-dir</code> command-line argument. If set, uv will use this directory for caching instead of the default cache directory.</p>"},{"location":"reference/environment/#uv_compile_bytecode","title":"<code>UV_COMPILE_BYTECODE</code>","text":"<p>added in <code>0.3.3</code></p> <p>Equivalent to the <code>--compile-bytecode</code> command-line argument. If set, uv will compile Python source files to bytecode after installation.</p>"},{"location":"reference/environment/#uv_compile_bytecode_timeout","title":"<code>UV_COMPILE_BYTECODE_TIMEOUT</code>","text":"<p>added in <code>0.7.22</code></p> <p>Timeout (in seconds) for bytecode compilation.</p>"},{"location":"reference/environment/#uv_concurrent_builds","title":"<code>UV_CONCURRENT_BUILDS</code>","text":"<p>added in <code>0.1.43</code></p> <p>Sets the maximum number of source distributions that uv will build concurrently at any given time.</p>"},{"location":"reference/environment/#uv_concurrent_downloads","title":"<code>UV_CONCURRENT_DOWNLOADS</code>","text":"<p>added in <code>0.1.43</code></p> <p>Sets the maximum number of in-flight concurrent downloads that uv will perform at any given time.</p>"},{"location":"reference/environment/#uv_concurrent_installs","title":"<code>UV_CONCURRENT_INSTALLS</code>","text":"<p>added in <code>0.1.45</code></p> <p>Controls the number of threads used when installing and unzipping packages.</p>"},{"location":"reference/environment/#uv_config_file","title":"<code>UV_CONFIG_FILE</code>","text":"<p>added in <code>0.1.34</code></p> <p>Equivalent to the <code>--config-file</code> command-line argument. Expects a path to a local <code>uv.toml</code> file to use as the configuration file.</p>"},{"location":"reference/environment/#uv_constraint","title":"<code>UV_CONSTRAINT</code>","text":"<p>added in <code>0.1.36</code></p> <p>Equivalent to the <code>--constraint</code> command-line argument. If set, uv will use this file as the constraints file. Uses space-separated list of files.</p>"},{"location":"reference/environment/#uv_credentials_dir","title":"<code>UV_CREDENTIALS_DIR</code>","text":"<p>added in <code>0.8.15</code></p> <p>The directory for storage of credentials when using a plain text backend.</p>"},{"location":"reference/environment/#uv_custom_compile_command","title":"<code>UV_CUSTOM_COMPILE_COMMAND</code>","text":"<p>added in <code>0.1.23</code></p> <p>Equivalent to the <code>--custom-compile-command</code> command-line argument.</p> <p>Used to override uv in the output header of the <code>requirements.txt</code> files generated by <code>uv pip compile</code>. Intended for use-cases in which <code>uv pip compile</code> is called from within a wrapper script, to include the name of the wrapper script in the output file.</p>"},{"location":"reference/environment/#uv_default_index","title":"<code>UV_DEFAULT_INDEX</code>","text":"<p>added in <code>0.4.23</code></p> <p>Equivalent to the <code>--default-index</code> command-line argument. If set, uv will use this URL as the default index when searching for packages.</p>"},{"location":"reference/environment/#uv_dev","title":"<code>UV_DEV</code>","text":"<p>added in <code>0.8.7</code></p> <p>Equivalent to the <code>--dev</code> command-line argument. If set, uv will include development dependencies.</p>"},{"location":"reference/environment/#uv_download_url","title":"<code>UV_DOWNLOAD_URL</code>","text":"<p>added in <code>0.8.4</code></p> <p>The URL from which to download uv using the standalone installer. By default, installs from uv's GitHub Releases. <code>INSTALLER_DOWNLOAD_URL</code> is also supported as an alias, for backwards compatibility.</p>"},{"location":"reference/environment/#uv_env_file","title":"<code>UV_ENV_FILE</code>","text":"<p>added in <code>0.4.30</code></p> <p><code>.env</code> files from which to load environment variables when executing <code>uv run</code> commands.</p>"},{"location":"reference/environment/#uv_exclude_newer","title":"<code>UV_EXCLUDE_NEWER</code>","text":"<p>added in <code>0.2.12</code></p> <p>Equivalent to the <code>--exclude-newer</code> command-line argument. If set, uv will exclude distributions published after the specified date.</p>"},{"location":"reference/environment/#uv_extra_index_url","title":"<code>UV_EXTRA_INDEX_URL</code>","text":"<p>added in <code>0.1.3</code></p> <p>Equivalent to the <code>--extra-index-url</code> command-line argument. If set, uv will use this space-separated list of URLs as additional indexes when searching for packages. (Deprecated: use <code>UV_INDEX</code> instead.)</p>"},{"location":"reference/environment/#uv_find_links","title":"<code>UV_FIND_LINKS</code>","text":"<p>added in <code>0.4.19</code></p> <p>Equivalent to the <code>--find-links</code> command-line argument. If set, uv will use this comma-separated list of additional locations to search for packages.</p>"},{"location":"reference/environment/#uv_fork_strategy","title":"<code>UV_FORK_STRATEGY</code>","text":"<p>added in <code>0.5.9</code></p> <p>Equivalent to the <code>--fork-strategy</code> argument. Controls version selection during universal resolution.</p>"},{"location":"reference/environment/#uv_frozen","title":"<code>UV_FROZEN</code>","text":"<p>added in <code>0.4.25</code></p> <p>Equivalent to the <code>--frozen</code> command-line argument. If set, uv will run without updating the <code>uv.lock</code> file.</p>"},{"location":"reference/environment/#uv_github_token","title":"<code>UV_GITHUB_TOKEN</code>","text":"<p>added in <code>0.4.10</code></p> <p>Equivalent to the <code>--token</code> argument for self update. A GitHub token for authentication.</p>"},{"location":"reference/environment/#uv_git_lfs","title":"<code>UV_GIT_LFS</code>","text":"<p>added in <code>0.5.19</code></p> <p>Enables fetching files stored in Git LFS when installing a package from a Git repository.</p>"},{"location":"reference/environment/#uv_http_retries","title":"<code>UV_HTTP_RETRIES</code>","text":"<p>added in <code>0.7.21</code></p> <p>The number of retries for HTTP requests. (default: 3)</p>"},{"location":"reference/environment/#uv_http_timeout","title":"<code>UV_HTTP_TIMEOUT</code>","text":"<p>added in <code>0.1.7</code></p> <p>Timeout (in seconds) for HTTP requests. (default: 30 s)</p>"},{"location":"reference/environment/#uv_index","title":"<code>UV_INDEX</code>","text":"<p>added in <code>0.4.23</code></p> <p>Equivalent to the <code>--index</code> command-line argument. If set, uv will use this space-separated list of URLs as additional indexes when searching for packages.</p>"},{"location":"reference/environment/#uv_index_strategy","title":"<code>UV_INDEX_STRATEGY</code>","text":"<p>added in <code>0.1.29</code></p> <p>Equivalent to the <code>--index-strategy</code> command-line argument.</p> <p>For example, if set to <code>unsafe-best-match</code>, uv will consider versions of a given package available across all index URLs, rather than limiting its search to the first index URL that contains the package.</p>"},{"location":"reference/environment/#uv_index_url","title":"<code>UV_INDEX_URL</code>","text":"<p>added in <code>0.0.5</code></p> <p>Equivalent to the <code>--index-url</code> command-line argument. If set, uv will use this URL as the default index when searching for packages. (Deprecated: use <code>UV_DEFAULT_INDEX</code> instead.)</p>"},{"location":"reference/environment/#uv_index_name_password","title":"<code>UV_INDEX_{name}_PASSWORD</code>","text":"<p>added in <code>0.4.23</code></p> <p>Provides the HTTP Basic authentication password for a named index.</p> <p>The <code>name</code> parameter is the name of the index. For example, given an index named <code>foo</code>, the environment variable key would be <code>UV_INDEX_FOO_PASSWORD</code>.</p>"},{"location":"reference/environment/#uv_index_name_username","title":"<code>UV_INDEX_{name}_USERNAME</code>","text":"<p>added in <code>0.4.23</code></p> <p>Provides the HTTP Basic authentication username for a named index.</p> <p>The <code>name</code> parameter is the name of the index. For example, given an index named <code>foo</code>, the environment variable key would be <code>UV_INDEX_FOO_USERNAME</code>.</p>"},{"location":"reference/environment/#uv_init_build_backend","title":"<code>UV_INIT_BUILD_BACKEND</code>","text":"<p>added in <code>0.8.2</code></p> <p>Equivalent to the <code>--build-backend</code> argument for <code>uv init</code>. Determines the default backend to use when creating a new project.</p>"},{"location":"reference/environment/#uv_insecure_host","title":"<code>UV_INSECURE_HOST</code>","text":"<p>added in <code>0.3.5</code></p> <p>Equivalent to the <code>--allow-insecure-host</code> argument.</p>"},{"location":"reference/environment/#uv_insecure_no_zip_validation","title":"<code>UV_INSECURE_NO_ZIP_VALIDATION</code>","text":"<p>added in <code>0.8.6</code></p> <p>Disable ZIP validation for streamed wheels and ZIP-based source distributions.</p> <p>WARNING: Disabling ZIP validation can expose your system to security risks by bypassing integrity checks and allowing uv to install potentially malicious ZIP files. If uv rejects a ZIP file due to failing validation, it is likely that the file is malformed; consider filing an issue with the package maintainer.</p>"},{"location":"reference/environment/#uv_installer_ghe_base_url","title":"<code>UV_INSTALLER_GHE_BASE_URL</code>","text":"<p>added in <code>0.5.0</code></p> <p>The URL from which to download uv using the standalone installer and <code>self update</code> feature, in lieu of the default GitHub Enterprise URL.</p>"},{"location":"reference/environment/#uv_installer_github_base_url","title":"<code>UV_INSTALLER_GITHUB_BASE_URL</code>","text":"<p>added in <code>0.5.0</code></p> <p>The URL from which to download uv using the standalone installer and <code>self update</code> feature, in lieu of the default GitHub URL.</p>"},{"location":"reference/environment/#uv_install_dir","title":"<code>UV_INSTALL_DIR</code>","text":"<p>added in <code>0.5.0</code></p> <p>The directory in which to install uv using the standalone installer and <code>self update</code> feature. Defaults to <code>~/.local/bin</code>.</p>"},{"location":"reference/environment/#uv_isolated","title":"<code>UV_ISOLATED</code>","text":"<p>added in <code>0.8.14</code></p> <p>Equivalent to the <code>--isolated</code> command-line argument. If set, uv will avoid discovering a <code>pyproject.toml</code> or <code>uv.toml</code> file.</p>"},{"location":"reference/environment/#uv_keyring_provider","title":"<code>UV_KEYRING_PROVIDER</code>","text":"<p>added in <code>0.1.19</code></p> <p>Equivalent to the <code>--keyring-provider</code> command-line argument. If set, uv will use this value as the keyring provider.</p>"},{"location":"reference/environment/#uv_libc","title":"<code>UV_LIBC</code>","text":"<p>added in <code>0.7.22</code></p> <p>Overrides the environment-determined libc on linux systems when filling in the current platform within Python version requests. Options are: <code>gnu</code>, <code>gnueabi</code>, <code>gnueabihf</code>, <code>musl</code>, and <code>none</code>.</p>"},{"location":"reference/environment/#uv_link_mode","title":"<code>UV_LINK_MODE</code>","text":"<p>added in <code>0.1.40</code></p> <p>Equivalent to the <code>--link-mode</code> command-line argument. If set, uv will use this as a link mode.</p>"},{"location":"reference/environment/#uv_locked","title":"<code>UV_LOCKED</code>","text":"<p>added in <code>0.4.25</code></p> <p>Equivalent to the <code>--locked</code> command-line argument. If set, uv will assert that the <code>uv.lock</code> remains unchanged.</p>"},{"location":"reference/environment/#uv_log_context","title":"<code>UV_LOG_CONTEXT</code>","text":"<p>added in <code>0.6.4</code></p> <p>Add additional context and structure to log messages.</p> <p>If logging is not enabled, e.g., with <code>RUST_LOG</code> or <code>-v</code>, this has no effect.</p>"},{"location":"reference/environment/#uv_managed_python","title":"<code>UV_MANAGED_PYTHON</code>","text":"<p>added in <code>0.6.8</code></p> <p>Require use of uv-managed Python versions.</p>"},{"location":"reference/environment/#uv_native_tls","title":"<code>UV_NATIVE_TLS</code>","text":"<p>added in <code>0.1.19</code></p> <p>Equivalent to the <code>--native-tls</code> command-line argument. If set to <code>true</code>, uv will use the system's trust store instead of the bundled <code>webpki-roots</code> crate.</p>"},{"location":"reference/environment/#uv_no_binary","title":"<code>UV_NO_BINARY</code>","text":"<p>added in <code>0.5.30</code></p> <p>Equivalent to the <code>--no-binary</code> command-line argument. If set, uv will install all packages from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p>"},{"location":"reference/environment/#uv_no_binary_package","title":"<code>UV_NO_BINARY_PACKAGE</code>","text":"<p>added in <code>0.5.30</code></p> <p>Equivalent to the <code>--no-binary-package</code> command line argument. If set, uv will not use pre-built wheels for the given space-delimited list of packages.</p>"},{"location":"reference/environment/#uv_no_build","title":"<code>UV_NO_BUILD</code>","text":"<p>added in <code>0.1.40</code></p> <p>Equivalent to the <code>--no-build</code> command-line argument. If set, uv will not build source distributions.</p>"},{"location":"reference/environment/#uv_no_build_isolation","title":"<code>UV_NO_BUILD_ISOLATION</code>","text":"<p>added in <code>0.1.40</code></p> <p>Equivalent to the <code>--no-build-isolation</code> command-line argument. If set, uv will skip isolation when building source distributions.</p>"},{"location":"reference/environment/#uv_no_build_package","title":"<code>UV_NO_BUILD_PACKAGE</code>","text":"<p>added in <code>0.6.5</code></p> <p>Equivalent to the <code>--no-build-package</code> command line argument. If set, uv will not build source distributions for the given space-delimited list of packages.</p>"},{"location":"reference/environment/#uv_no_cache","title":"<code>UV_NO_CACHE</code>","text":"<p>added in <code>0.1.2</code></p> <p>Equivalent to the <code>--no-cache</code> command-line argument. If set, uv will not use the cache for any operations.</p>"},{"location":"reference/environment/#uv_no_config","title":"<code>UV_NO_CONFIG</code>","text":"<p>added in <code>0.2.30</code></p> <p>Equivalent to the <code>--no-config</code> command-line argument. If set, uv will not read any configuration files from the current directory, parent directories, or user configuration directories.</p>"},{"location":"reference/environment/#uv_no_dev","title":"<code>UV_NO_DEV</code>","text":"<p>added in <code>0.8.7</code></p> <p>Equivalent to the <code>--no-dev</code> command-line argument. If set, uv will exclude development dependencies.</p>"},{"location":"reference/environment/#uv_no_editable","title":"<code>UV_NO_EDITABLE</code>","text":"<p>added in <code>0.6.15</code></p> <p>Equivalent to the <code>--no-editable</code> command-line argument. If set, uv installs or exports any editable dependencies, including the project and any workspace members, as non-editable.</p>"},{"location":"reference/environment/#uv_no_env_file","title":"<code>UV_NO_ENV_FILE</code>","text":"<p>added in <code>0.4.30</code></p> <p>Ignore <code>.env</code> files when executing <code>uv run</code> commands.</p>"},{"location":"reference/environment/#uv_no_github_fast_path","title":"<code>UV_NO_GITHUB_FAST_PATH</code>","text":"<p>added in <code>0.7.13</code></p> <p>Disable GitHub-specific requests that allow uv to skip <code>git fetch</code> in some circumstances.</p>"},{"location":"reference/environment/#uv_no_hf_token","title":"<code>UV_NO_HF_TOKEN</code>","text":"<p>added in <code>0.8.1</code></p> <p>Disable Hugging Face authentication, even if <code>HF_TOKEN</code> is set.</p>"},{"location":"reference/environment/#uv_no_installer_metadata","title":"<code>UV_NO_INSTALLER_METADATA</code>","text":"<p>added in <code>0.5.7</code></p> <p>Skip writing <code>uv</code> installer metadata files (e.g., <code>INSTALLER</code>, <code>REQUESTED</code>, and <code>direct_url.json</code>) to site-packages <code>.dist-info</code> directories.</p>"},{"location":"reference/environment/#uv_no_managed_python","title":"<code>UV_NO_MANAGED_PYTHON</code>","text":"<p>added in <code>0.6.8</code></p> <p>Disable use of uv-managed Python versions.</p>"},{"location":"reference/environment/#uv_no_modify_path","title":"<code>UV_NO_MODIFY_PATH</code>","text":"<p>added in <code>0.8.4</code></p> <p>Avoid modifying the <code>PATH</code> environment variable when installing uv using the standalone installer and <code>self update</code> feature. <code>INSTALLER_NO_MODIFY_PATH</code> is also supported as an alias, for backwards compatibility.</p>"},{"location":"reference/environment/#uv_no_progress","title":"<code>UV_NO_PROGRESS</code>","text":"<p>added in <code>0.2.28</code></p> <p>Equivalent to the <code>--no-progress</code> command-line argument. Disables all progress output. For example, spinners and progress bars.</p>"},{"location":"reference/environment/#uv_no_sync","title":"<code>UV_NO_SYNC</code>","text":"<p>added in <code>0.4.18</code></p> <p>Equivalent to the <code>--no-sync</code> command-line argument. If set, uv will skip updating the environment.</p>"},{"location":"reference/environment/#uv_no_verify_hashes","title":"<code>UV_NO_VERIFY_HASHES</code>","text":"<p>added in <code>0.5.3</code></p> <p>Equivalent to the <code>--no-verify-hashes</code> argument. Disables hash verification for <code>requirements.txt</code> files.</p>"},{"location":"reference/environment/#uv_no_wrap","title":"<code>UV_NO_WRAP</code>","text":"<p>added in <code>0.0.5</code></p> <p>Use to disable line wrapping for diagnostics.</p>"},{"location":"reference/environment/#uv_offline","title":"<code>UV_OFFLINE</code>","text":"<p>added in <code>0.5.9</code></p> <p>Equivalent to the <code>--offline</code> command-line argument. If set, uv will disable network access.</p>"},{"location":"reference/environment/#uv_override","title":"<code>UV_OVERRIDE</code>","text":"<p>added in <code>0.2.22</code></p> <p>Equivalent to the <code>--override</code> command-line argument. If set, uv will use this file as the overrides file. Uses space-separated list of files.</p>"},{"location":"reference/environment/#uv_prerelease","title":"<code>UV_PRERELEASE</code>","text":"<p>added in <code>0.1.16</code></p> <p>Equivalent to the <code>--prerelease</code> command-line argument. For example, if set to <code>allow</code>, uv will allow pre-release versions for all dependencies.</p>"},{"location":"reference/environment/#uv_preview","title":"<code>UV_PREVIEW</code>","text":"<p>added in <code>0.1.37</code></p> <p>Equivalent to the <code>--preview</code> argument. Enables preview mode.</p>"},{"location":"reference/environment/#uv_preview_features","title":"<code>UV_PREVIEW_FEATURES</code>","text":"<p>added in <code>0.8.4</code></p> <p>Equivalent to the <code>--preview-features</code> argument. Enables specific preview features.</p>"},{"location":"reference/environment/#uv_project","title":"<code>UV_PROJECT</code>","text":"<p>added in <code>0.4.4</code></p> <p>Equivalent to the <code>--project</code> command-line argument.</p>"},{"location":"reference/environment/#uv_project_environment","title":"<code>UV_PROJECT_ENVIRONMENT</code>","text":"<p>added in <code>0.4.4</code></p> <p>Specifies the path to the directory to use for a project virtual environment.</p> <p>See the project documentation for more details.</p>"},{"location":"reference/environment/#uv_publish_check_url","title":"<code>UV_PUBLISH_CHECK_URL</code>","text":"<p>added in <code>0.4.30</code></p> <p>Don't upload a file if it already exists on the index. The value is the URL of the index.</p>"},{"location":"reference/environment/#uv_publish_index","title":"<code>UV_PUBLISH_INDEX</code>","text":"<p>added in <code>0.5.8</code></p> <p>Equivalent to the <code>--index</code> command-line argument in <code>uv publish</code>. If set, uv the index with this name in the configuration for publishing.</p>"},{"location":"reference/environment/#uv_publish_password","title":"<code>UV_PUBLISH_PASSWORD</code>","text":"<p>added in <code>0.4.16</code></p> <p>Equivalent to the <code>--password</code> command-line argument in <code>uv publish</code>. If set, uv will use this password for publishing.</p>"},{"location":"reference/environment/#uv_publish_token","title":"<code>UV_PUBLISH_TOKEN</code>","text":"<p>added in <code>0.4.16</code></p> <p>Equivalent to the <code>--token</code> command-line argument in <code>uv publish</code>. If set, uv will use this token (with the username <code>__token__</code>) for publishing.</p>"},{"location":"reference/environment/#uv_publish_url","title":"<code>UV_PUBLISH_URL</code>","text":"<p>added in <code>0.4.16</code></p> <p>Equivalent to the <code>--publish-url</code> command-line argument. The URL of the upload endpoint of the index to use with <code>uv publish</code>.</p>"},{"location":"reference/environment/#uv_publish_username","title":"<code>UV_PUBLISH_USERNAME</code>","text":"<p>added in <code>0.4.16</code></p> <p>Equivalent to the <code>--username</code> command-line argument in <code>uv publish</code>. If set, uv will use this username for publishing.</p>"},{"location":"reference/environment/#uv_pypy_install_mirror","title":"<code>UV_PYPY_INSTALL_MIRROR</code>","text":"<p>added in <code>0.2.35</code></p> <p>Managed PyPy installations are downloaded from python.org.</p> <p>This variable can be set to a mirror URL to use a different source for PyPy installations. The provided URL will replace <code>https://downloads.python.org/pypy</code> in, e.g., <code>https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2</code>. Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p>"},{"location":"reference/environment/#uv_python","title":"<code>UV_PYTHON</code>","text":"<p>added in <code>0.1.40</code></p> <p>Equivalent to the <code>--python</code> command-line argument. If set to a path, uv will use this Python interpreter for all operations.</p>"},{"location":"reference/environment/#uv_python_bin_dir","title":"<code>UV_PYTHON_BIN_DIR</code>","text":"<p>added in <code>0.4.29</code></p> <p>Specifies the directory to place links to installed, managed Python executables.</p>"},{"location":"reference/environment/#uv_python_cache_dir","title":"<code>UV_PYTHON_CACHE_DIR</code>","text":"<p>added in <code>0.7.0</code></p> <p>Specifies the directory for caching the archives of managed Python installations before installation.</p>"},{"location":"reference/environment/#uv_python_cpython_build","title":"<code>UV_PYTHON_CPYTHON_BUILD</code>","text":"<p>added in <code>0.8.14</code></p> <p>Pin managed CPython versions to a specific build version.</p> <p>For CPython, this should be the build date (e.g., \"20250814\").</p>"},{"location":"reference/environment/#uv_python_downloads","title":"<code>UV_PYTHON_DOWNLOADS</code>","text":"<p>added in <code>0.3.2</code></p> <p>Equivalent to the <code>python-downloads</code> setting and, when disabled, the <code>--no-python-downloads</code> option. Whether uv should allow Python downloads.</p>"},{"location":"reference/environment/#uv_python_downloads_json_url","title":"<code>UV_PYTHON_DOWNLOADS_JSON_URL</code>","text":"<p>added in <code>0.6.13</code></p> <p>Managed Python installations information is hardcoded in the <code>uv</code> binary.</p> <p>This variable can be set to a URL pointing to JSON to use as a list for Python installations. This will allow for setting each property of the Python installation, mostly the url part for offline mirror.</p> <p>Note that currently, only local paths are supported.</p>"},{"location":"reference/environment/#uv_python_graalpy_build","title":"<code>UV_PYTHON_GRAALPY_BUILD</code>","text":"<p>added in <code>0.8.14</code></p> <p>Pin managed GraalPy versions to a specific build version.</p> <p>For GraalPy, this should be the GraalPy version (e.g., \"24.2.2\").</p>"},{"location":"reference/environment/#uv_python_install_bin","title":"<code>UV_PYTHON_INSTALL_BIN</code>","text":"<p>added in <code>0.8.0</code></p> <p>Whether to install the Python executable into the <code>UV_PYTHON_BIN_DIR</code> directory.</p>"},{"location":"reference/environment/#uv_python_install_dir","title":"<code>UV_PYTHON_INSTALL_DIR</code>","text":"<p>added in <code>0.2.22</code></p> <p>Specifies the directory for storing managed Python installations.</p>"},{"location":"reference/environment/#uv_python_install_mirror","title":"<code>UV_PYTHON_INSTALL_MIRROR</code>","text":"<p>added in <code>0.2.35</code></p> <p>Managed Python installations are downloaded from the Astral <code>python-build-standalone</code> project.</p> <p>This variable can be set to a mirror URL to use a different source for Python installations. The provided URL will replace <code>https://github.com/astral-sh/python-build-standalone/releases/download</code> in, e.g., <code>https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz</code>. Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p>"},{"location":"reference/environment/#uv_python_install_registry","title":"<code>UV_PYTHON_INSTALL_REGISTRY</code>","text":"<p>added in <code>0.8.0</code></p> <p>Whether to install the Python executable into the Windows registry.</p>"},{"location":"reference/environment/#uv_python_preference","title":"<code>UV_PYTHON_PREFERENCE</code>","text":"<p>added in <code>0.3.2</code></p> <p>Whether uv should prefer system or managed Python versions.</p>"},{"location":"reference/environment/#uv_python_pyodide_build","title":"<code>UV_PYTHON_PYODIDE_BUILD</code>","text":"<p>added in <code>0.8.14</code></p> <p>Pin managed Pyodide versions to a specific build version.</p> <p>For Pyodide, this should be the Pyodide version (e.g., \"0.28.1\").</p>"},{"location":"reference/environment/#uv_python_pypy_build","title":"<code>UV_PYTHON_PYPY_BUILD</code>","text":"<p>added in <code>0.8.14</code></p> <p>Pin managed PyPy versions to a specific build version.</p> <p>For PyPy, this should be the PyPy version (e.g., \"7.3.20\").</p>"},{"location":"reference/environment/#uv_request_timeout","title":"<code>UV_REQUEST_TIMEOUT</code>","text":"<p>added in <code>0.1.6</code></p> <p>Timeout (in seconds) for HTTP requests. Equivalent to <code>UV_HTTP_TIMEOUT</code>.</p>"},{"location":"reference/environment/#uv_require_hashes","title":"<code>UV_REQUIRE_HASHES</code>","text":"<p>added in <code>0.1.34</code></p> <p>Equivalent to the <code>--require-hashes</code> command-line argument. If set to <code>true</code>, uv will require that all dependencies have a hash specified in the requirements file.</p>"},{"location":"reference/environment/#uv_resolution","title":"<code>UV_RESOLUTION</code>","text":"<p>added in <code>0.1.27</code></p> <p>Equivalent to the <code>--resolution</code> command-line argument. For example, if set to <code>lowest-direct</code>, uv will install the lowest compatible versions of all direct dependencies.</p>"},{"location":"reference/environment/#uv_s3_endpoint_url","title":"<code>UV_S3_ENDPOINT_URL</code>","text":"<p>added in <code>0.8.21</code></p> <p>The URL to treat as an S3-compatible storage endpoint. Requests to this endpoint will be signed using AWS Signature Version 4 based on the <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, <code>AWS_PROFILE</code>, and <code>AWS_CONFIG_FILE</code> environment variables.</p>"},{"location":"reference/environment/#uv_skip_wheel_filename_check","title":"<code>UV_SKIP_WHEEL_FILENAME_CHECK</code>","text":"<p>added in <code>0.8.23</code></p> <p>Avoid verifying that wheel filenames match their contents when installing wheels. This is not recommended, as wheels with inconsistent filenames should be considered invalid and corrected by the relevant package maintainers; however, this option can be used to work around invalid artifacts in rare cases.</p>"},{"location":"reference/environment/#uv_stack_size","title":"<code>UV_STACK_SIZE</code>","text":"<p>added in <code>0.0.5</code></p> <p>Use to set the stack size used by uv.</p> <p>The value is in bytes, and if both <code>UV_STACK_SIZE</code> are <code>RUST_MIN_STACK</code> unset, uv uses a 4MB (4194304) stack. <code>UV_STACK_SIZE</code> takes precedence over <code>RUST_MIN_STACK</code>.</p> <p>Unlike the normal <code>RUST_MIN_STACK</code> semantics, this can affect main thread stack size, because we actually spawn our own main2 thread to work around the fact that Windows' real main thread is only 1MB. That thread has size <code>max(UV_STACK_SIZE, 1MB)</code>.</p>"},{"location":"reference/environment/#uv_system_python","title":"<code>UV_SYSTEM_PYTHON</code>","text":"<p>added in <code>0.1.18</code></p> <p>Equivalent to the <code>--system</code> command-line argument. If set to <code>true</code>, uv will use the first Python interpreter found in the system <code>PATH</code>.</p> <p>WARNING: <code>UV_SYSTEM_PYTHON=true</code> is intended for use in continuous integration (CI) or containerized environments and should be used with caution, as modifying the system Python can lead to unexpected behavior.</p>"},{"location":"reference/environment/#uv_test_no_http_retry_delay","title":"<code>UV_TEST_NO_HTTP_RETRY_DELAY</code>","text":"<p>added in <code>0.7.21</code></p> <p>Used to disable delay for HTTP retries in tests.</p>"},{"location":"reference/environment/#uv_tool_bin_dir","title":"<code>UV_TOOL_BIN_DIR</code>","text":"<p>added in <code>0.3.0</code></p> <p>Specifies the \"bin\" directory for installing tool executables.</p>"},{"location":"reference/environment/#uv_tool_dir","title":"<code>UV_TOOL_DIR</code>","text":"<p>added in <code>0.2.16</code></p> <p>Specifies the directory where uv stores managed tools.</p>"},{"location":"reference/environment/#uv_torch_backend","title":"<code>UV_TORCH_BACKEND</code>","text":"<p>added in <code>0.6.9</code></p> <p>Equivalent to the <code>--torch-backend</code> command-line argument (e.g., <code>cpu</code>, <code>cu126</code>, or <code>auto</code>).</p>"},{"location":"reference/environment/#uv_unmanaged_install","title":"<code>UV_UNMANAGED_INSTALL</code>","text":"<p>added in <code>0.5.0</code></p> <p>Used ephemeral environments like CI to install uv to a specific path while preventing the installer from modifying shell profiles or environment variables.</p>"},{"location":"reference/environment/#uv_upload_http_timeout","title":"<code>UV_UPLOAD_HTTP_TIMEOUT</code>","text":"<p>added in <code>0.9.1</code></p> <p>Timeout (in seconds) for only upload HTTP requests. (default: 900 s)</p>"},{"location":"reference/environment/#uv_venv_clear","title":"<code>UV_VENV_CLEAR</code>","text":"<p>added in <code>0.8.0</code></p> <p>Equivalent to the <code>--clear</code> command-line argument. If set, uv will remove any existing files or directories at the target path.</p>"},{"location":"reference/environment/#uv_venv_seed","title":"<code>UV_VENV_SEED</code>","text":"<p>added in <code>0.5.21</code></p> <p>Install seed packages (one or more of: <code>pip</code>, <code>setuptools</code>, and <code>wheel</code>) into the virtual environment created by <code>uv venv</code>.</p> <p>Note that <code>setuptools</code> and <code>wheel</code> are not included in Python 3.12+ environments.</p>"},{"location":"reference/environment/#uv_working_directory","title":"<code>UV_WORKING_DIRECTORY</code>","text":"<p>added in <code>0.9.1</code></p> <p>Equivalent to the <code>--directory</code> command-line argument.</p>"},{"location":"reference/environment/#externally-defined-variables","title":"Externally defined variables","text":"<p>uv also reads the following externally defined environment variables:</p>"},{"location":"reference/environment/#all_proxy","title":"<code>ALL_PROXY</code>","text":"<p>added in <code>0.1.38</code></p> <p>General proxy for all network requests.</p>"},{"location":"reference/environment/#android_api_level","title":"<code>ANDROID_API_LEVEL</code>","text":"<p>added in <code>0.8.16</code></p> <p>Used with <code>--python-platform aarch64-linux-android</code> and related variants to set the Android API level. (i.e., the minimum supported Android API level).</p> <p>Defaults to <code>24</code>.</p>"},{"location":"reference/environment/#appdata","title":"<code>APPDATA</code>","text":"<p>added in <code>0.1.42</code></p> <p>Path to user-level configuration directory on Windows systems.</p>"},{"location":"reference/environment/#aws_access_key_id","title":"<code>AWS_ACCESS_KEY_ID</code>","text":"<p>added in <code>0.8.21</code></p> <p>The AWS access key ID to use when signing S3 requests.</p>"},{"location":"reference/environment/#aws_config_file","title":"<code>AWS_CONFIG_FILE</code>","text":"<p>added in <code>0.8.21</code></p> <p>The AWS config file to use when signing S3 requests.</p>"},{"location":"reference/environment/#aws_default_region","title":"<code>AWS_DEFAULT_REGION</code>","text":"<p>added in <code>0.8.21</code></p> <p>The default AWS region to use when signing S3 requests, if <code>AWS_REGION</code> is not set.</p>"},{"location":"reference/environment/#aws_profile","title":"<code>AWS_PROFILE</code>","text":"<p>added in <code>0.8.21</code></p> <p>The AWS profile to use when signing S3 requests.</p>"},{"location":"reference/environment/#aws_region","title":"<code>AWS_REGION</code>","text":"<p>added in <code>0.8.21</code></p> <p>The AWS region to use when signing S3 requests.</p>"},{"location":"reference/environment/#aws_secret_access_key","title":"<code>AWS_SECRET_ACCESS_KEY</code>","text":"<p>added in <code>0.8.21</code></p> <p>The AWS secret access key to use when signing S3 requests.</p>"},{"location":"reference/environment/#aws_session_token","title":"<code>AWS_SESSION_TOKEN</code>","text":"<p>added in <code>0.8.21</code></p> <p>The AWS session token to use when signing S3 requests.</p>"},{"location":"reference/environment/#aws_shared_credentials_file","title":"<code>AWS_SHARED_CREDENTIALS_FILE</code>","text":"<p>added in <code>0.8.21</code></p> <p>The AWS shared credentials file to use when signing S3 requests.</p>"},{"location":"reference/environment/#bash_version","title":"<code>BASH_VERSION</code>","text":"<p>added in <code>0.1.28</code></p> <p>Used to detect Bash shell usage.</p>"},{"location":"reference/environment/#clicolor_force","title":"<code>CLICOLOR_FORCE</code>","text":"<p>added in <code>0.1.32</code></p> <p>Use to control color via <code>anstyle</code>.</p>"},{"location":"reference/environment/#columns","title":"<code>COLUMNS</code>","text":"<p>added in <code>0.6.2</code></p> <p>Overrides terminal width used for wrapping. This variable is not read by uv directly.</p> <p>This is a quasi-standard variable, described, e.g., in <code>ncurses(3x)</code>.</p>"},{"location":"reference/environment/#conda_default_env","title":"<code>CONDA_DEFAULT_ENV</code>","text":"<p>added in <code>0.5.0</code></p> <p>Used to determine the name of the active Conda environment.</p>"},{"location":"reference/environment/#conda_prefix","title":"<code>CONDA_PREFIX</code>","text":"<p>added in <code>0.0.5</code></p> <p>Used to detect the path of an active Conda environment.</p>"},{"location":"reference/environment/#fish_version","title":"<code>FISH_VERSION</code>","text":"<p>added in <code>0.1.28</code></p> <p>Used to detect Fish shell usage.</p>"},{"location":"reference/environment/#force_color","title":"<code>FORCE_COLOR</code>","text":"<p>added in <code>0.2.7</code></p> <p>Forces colored output regardless of terminal support.</p> <p>See force-color.org.</p>"},{"location":"reference/environment/#github_actions","title":"<code>GITHUB_ACTIONS</code>","text":"<p>added in <code>0.4.16</code></p> <p>Indicates that the current process is running in GitHub Actions.</p> <p><code>uv publish</code> may attempt trusted publishing flows when set to <code>true</code>.</p>"},{"location":"reference/environment/#gitlab_ci","title":"<code>GITLAB_CI</code>","text":"<p>added in <code>0.8.18</code></p> <p>Indicates that the current process is running in GitLab CI.</p> <p><code>uv publish</code> may attempt trusted publishing flows when set to <code>true</code>.</p>"},{"location":"reference/environment/#hf_token","title":"<code>HF_TOKEN</code>","text":"<p>added in <code>0.8.1</code></p> <p>Authentication token for Hugging Face requests. When set, uv will use this token when making requests to <code>https://huggingface.co/</code> and any subdomains.</p>"},{"location":"reference/environment/#home","title":"<code>HOME</code>","text":"<p>added in <code>0.0.5</code></p> <p>The standard <code>HOME</code> env var.</p>"},{"location":"reference/environment/#https_proxy","title":"<code>HTTPS_PROXY</code>","text":"<p>added in <code>0.1.38</code></p> <p>Proxy for HTTPS requests.</p>"},{"location":"reference/environment/#http_proxy","title":"<code>HTTP_PROXY</code>","text":"<p>added in <code>0.1.38</code></p> <p>Proxy for HTTP requests.</p>"},{"location":"reference/environment/#http_timeout","title":"<code>HTTP_TIMEOUT</code>","text":"<p>added in <code>0.1.7</code></p> <p>Timeout (in seconds) for HTTP requests. Equivalent to <code>UV_HTTP_TIMEOUT</code>.</p>"},{"location":"reference/environment/#iphoneos_deployment_target","title":"<code>IPHONEOS_DEPLOYMENT_TARGET</code>","text":"<p>added in <code>0.8.16</code></p> <p>Used with <code>--python-platform arm64-apple-ios</code> and related variants to set the deployment target (i.e., the minimum supported iOS version).</p> <p>Defaults to <code>13.0</code>.</p>"},{"location":"reference/environment/#jpy_session_name","title":"<code>JPY_SESSION_NAME</code>","text":"<p>added in <code>0.2.6</code></p> <p>Used to detect when running inside a Jupyter notebook.</p>"},{"location":"reference/environment/#ksh_version","title":"<code>KSH_VERSION</code>","text":"<p>added in <code>0.2.33</code></p> <p>Used to detect Ksh shell usage.</p>"},{"location":"reference/environment/#localappdata","title":"<code>LOCALAPPDATA</code>","text":"<p>added in <code>0.3.3</code></p> <p>Used to look for Microsoft Store Pythons installations.</p>"},{"location":"reference/environment/#macosx_deployment_target","title":"<code>MACOSX_DEPLOYMENT_TARGET</code>","text":"<p>added in <code>0.1.42</code></p> <p>Used with <code>--python-platform macos</code> and related variants to set the deployment target (i.e., the minimum supported macOS version).</p> <p>Defaults to <code>13.0</code>, the least-recent non-EOL macOS version at time of writing.</p>"},{"location":"reference/environment/#netrc","title":"<code>NETRC</code>","text":"<p>added in <code>0.1.16</code></p> <p>Use to set the .netrc file location.</p>"},{"location":"reference/environment/#no_color","title":"<code>NO_COLOR</code>","text":"<p>added in <code>0.2.7</code></p> <p>Disables colored output (takes precedence over <code>FORCE_COLOR</code>).</p> <p>See no-color.org.</p>"},{"location":"reference/environment/#no_proxy","title":"<code>NO_PROXY</code>","text":"<p>added in <code>0.1.38</code></p> <p>Comma-separated list of hostnames (e.g., <code>example.com</code>) and/or patterns (e.g., <code>192.168.1.0/24</code>) that should bypass the proxy.</p>"},{"location":"reference/environment/#nu_version","title":"<code>NU_VERSION</code>","text":"<p>added in <code>0.1.16</code></p> <p>Used to detect <code>NuShell</code> usage.</p>"},{"location":"reference/environment/#pager","title":"<code>PAGER</code>","text":"<p>added in <code>0.4.18</code></p> <p>The standard <code>PAGER</code> posix env var. Used by <code>uv</code> to configure the appropriate pager.</p>"},{"location":"reference/environment/#path","title":"<code>PATH</code>","text":"<p>added in <code>0.0.5</code></p> <p>The standard <code>PATH</code> env var.</p>"},{"location":"reference/environment/#prompt","title":"<code>PROMPT</code>","text":"<p>added in <code>0.1.16</code></p> <p>Used to detect the use of the Windows Command Prompt (as opposed to PowerShell).</p>"},{"location":"reference/environment/#pwd","title":"<code>PWD</code>","text":"<p>added in <code>0.0.5</code></p> <p>The standard <code>PWD</code> posix env var.</p>"},{"location":"reference/environment/#pyc_invalidation_mode","title":"<code>PYC_INVALIDATION_MODE</code>","text":"<p>added in <code>0.1.7</code></p> <p>The validation modes to use when run with <code>--compile</code>.</p> <p>See <code>PycInvalidationMode</code>.</p>"},{"location":"reference/environment/#pythonpath","title":"<code>PYTHONPATH</code>","text":"<p>added in <code>0.1.22</code></p> <p>Adds directories to Python module search path (e.g., <code>PYTHONPATH=/path/to/modules</code>).</p>"},{"location":"reference/environment/#pyx_api_key","title":"<code>PYX_API_KEY</code>","text":"<p>added in <code>0.8.15</code></p> <p>The pyx API key (e.g., <code>sk-pyx-...</code>).</p>"},{"location":"reference/environment/#pyx_api_url","title":"<code>PYX_API_URL</code>","text":"<p>added in <code>0.8.15</code></p> <p>The URL of the pyx Simple API server.</p>"},{"location":"reference/environment/#pyx_auth_token","title":"<code>PYX_AUTH_TOKEN</code>","text":"<p>added in <code>0.8.15</code></p> <p>The pyx authentication token (e.g., <code>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...</code>), as output by <code>uv auth token</code>.</p>"},{"location":"reference/environment/#pyx_cdn_domain","title":"<code>PYX_CDN_DOMAIN</code>","text":"<p>added in <code>0.8.15</code></p> <p>The domain of the pyx CDN.</p>"},{"location":"reference/environment/#pyx_credentials_dir","title":"<code>PYX_CREDENTIALS_DIR</code>","text":"<p>added in <code>0.8.15</code></p> <p>Specifies the directory where uv stores pyx credentials.</p>"},{"location":"reference/environment/#rust_backtrace","title":"<code>RUST_BACKTRACE</code>","text":"<p>added in <code>0.7.22</code></p> <p>If set, it can be used to display more stack trace details when a panic occurs. This is used by uv particularly on windows to show more details during a platform exception.</p> <p>For example:</p> <ul> <li><code>RUST_BACKTRACE=1</code> will print a short backtrace.</li> <li><code>RUST_BACKTRACE=full</code> will print a full backtrace.</li> </ul> <p>See the Rust backtrace documentation for more.</p>"},{"location":"reference/environment/#rust_log","title":"<code>RUST_LOG</code>","text":"<p>added in <code>0.0.5</code></p> <p>If set, uv will use this value as the log level for its <code>--verbose</code> output. Accepts any filter compatible with the <code>tracing_subscriber</code> crate.</p> <p>For example:</p> <ul> <li><code>RUST_LOG=uv=debug</code> is the equivalent of adding <code>--verbose</code> to the command line</li> <li><code>RUST_LOG=trace</code> will enable trace-level logging.</li> </ul> <p>See the tracing documentation for more.</p>"},{"location":"reference/environment/#rust_min_stack","title":"<code>RUST_MIN_STACK</code>","text":"<p>added in <code>0.5.19</code></p> <p>Use to set the stack size used by uv.</p> <p>The value is in bytes, and if both <code>UV_STACK_SIZE</code> are <code>RUST_MIN_STACK</code> unset, uv uses a 4MB (4194304) stack. <code>UV_STACK_SIZE</code> takes precedence over <code>RUST_MIN_STACK</code>.</p> <p>Prefer setting <code>UV_STACK_SIZE</code>, since <code>RUST_MIN_STACK</code> also affects subprocesses, such as build backends that use Rust code.</p> <p>Unlike the normal <code>RUST_MIN_STACK</code> semantics, this can affect main thread stack size, because we actually spawn our own main2 thread to work around the fact that Windows' real main thread is only 1MB. That thread has size <code>max(RUST_MIN_STACK, 1MB)</code>.</p>"},{"location":"reference/environment/#shell","title":"<code>SHELL</code>","text":"<p>added in <code>0.1.16</code></p> <p>The standard <code>SHELL</code> posix env var.</p>"},{"location":"reference/environment/#ssl_cert_file","title":"<code>SSL_CERT_FILE</code>","text":"<p>added in <code>0.1.14</code></p> <p>Custom certificate bundle file path for SSL connections.</p>"},{"location":"reference/environment/#ssl_client_cert","title":"<code>SSL_CLIENT_CERT</code>","text":"<p>added in <code>0.2.11</code></p> <p>If set, uv will use this file for mTLS authentication. This should be a single file containing both the certificate and the private key in PEM format.</p>"},{"location":"reference/environment/#systemdrive","title":"<code>SYSTEMDRIVE</code>","text":"<p>added in <code>0.4.26</code></p> <p>Path to system-level configuration directory on Windows systems.</p>"},{"location":"reference/environment/#tracing_durations_file","title":"<code>TRACING_DURATIONS_FILE</code>","text":"<p>added in <code>0.0.5</code></p> <p>Use to create the tracing durations file via the <code>tracing-durations-export</code> feature.</p>"},{"location":"reference/environment/#userprofile","title":"<code>USERPROFILE</code>","text":"<p>added in <code>0.0.5</code></p> <p>Path to root directory of user's profile on Windows systems.</p>"},{"location":"reference/environment/#uv","title":"<code>UV</code>","text":"<p>added in <code>0.6.0</code></p> <p>The path to the binary that was used to invoke uv.</p> <p>This is propagated to all subprocesses spawned by uv.</p> <p>If the executable was invoked through a symbolic link, some platforms will return the path of the symbolic link and other platforms will return the path of the symbolic link\u2019s target.</p> <p>See https://doc.rust-lang.org/std/env/fn.current_exe.html#security for security considerations.</p>"},{"location":"reference/environment/#virtual_env","title":"<code>VIRTUAL_ENV</code>","text":"<p>added in <code>0.0.5</code></p> <p>Used to detect an activated virtual environment.</p>"},{"location":"reference/environment/#virtual_env_disable_prompt","title":"<code>VIRTUAL_ENV_DISABLE_PROMPT</code>","text":"<p>added in <code>0.0.5</code></p> <p>If set to <code>1</code> before a virtual environment is activated, then the virtual environment name will not be prepended to the terminal prompt.</p>"},{"location":"reference/environment/#xdg_bin_home","title":"<code>XDG_BIN_HOME</code>","text":"<p>added in <code>0.2.16</code></p> <p>Path to directory where executables are installed.</p>"},{"location":"reference/environment/#xdg_cache_home","title":"<code>XDG_CACHE_HOME</code>","text":"<p>added in <code>0.1.17</code></p> <p>Path to cache directory on Unix systems.</p>"},{"location":"reference/environment/#xdg_config_dirs","title":"<code>XDG_CONFIG_DIRS</code>","text":"<p>added in <code>0.4.26</code></p> <p>Path to system-level configuration directory on Unix systems.</p>"},{"location":"reference/environment/#xdg_config_home","title":"<code>XDG_CONFIG_HOME</code>","text":"<p>added in <code>0.1.34</code></p> <p>Path to user-level configuration directory on Unix systems.</p>"},{"location":"reference/environment/#xdg_data_home","title":"<code>XDG_DATA_HOME</code>","text":"<p>added in <code>0.2.16</code></p> <p>Path to directory for storing managed Python installations and tools.</p>"},{"location":"reference/environment/#zdotdir","title":"<code>ZDOTDIR</code>","text":"<p>added in <code>0.2.25</code></p> <p>Used to determine which <code>.zshenv</code> to use when Zsh is being used.</p>"},{"location":"reference/environment/#zsh_version","title":"<code>ZSH_VERSION</code>","text":"<p>added in <code>0.1.28</code></p> <p>Used to detect Zsh shell usage.</p>"},{"location":"reference/environment/#_conda_root","title":"<code>_CONDA_ROOT</code>","text":"<p>added in <code>0.8.18</code></p> <p>Used to determine the root install path of Conda.</p>"},{"location":"reference/installer/","title":"The uv installer","text":""},{"location":"reference/installer/#changing-the-installation-path","title":"Changing the installation path","text":"<p>By default, uv is installed to <code>~/.local/bin</code>. If <code>XDG_BIN_HOME</code> is set, it will be used instead. Similarly, if <code>XDG_DATA_HOME</code> is set, the target directory will be inferred as <code>XDG_DATA_HOME/../bin</code>.</p> <p>To change the installation path, use <code>UV_INSTALL_DIR</code>:</p> macOS and LinuxWindows <pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=\"/custom/path\" sh\n</code></pre> <pre><code>PS&gt; powershell -ExecutionPolicy ByPass -c {$env:UV_INSTALL_DIR = \"C:\\Custom\\Path\";irm https://astral.sh/uv/install.ps1 | iex}\n</code></pre>"},{"location":"reference/installer/#disabling-shell-modifications","title":"Disabling shell modifications","text":"<p>The installer may also update your shell profiles to ensure the uv binary is on your <code>PATH</code>. To disable this behavior, use <code>UV_NO_MODIFY_PATH</code>. For example:</p> <pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | env UV_NO_MODIFY_PATH=1 sh\n</code></pre> <p>If installed with <code>UV_NO_MODIFY_PATH</code>, subsequent operations, like <code>uv self update</code>, will not modify your shell profiles.</p>"},{"location":"reference/installer/#unmanaged-installations","title":"Unmanaged installations","text":"<p>In ephemeral environments like CI, use <code>UV_UNMANAGED_INSTALL</code> to install uv to a specific path while preventing the installer from modifying shell profiles or environment variables:</p> <pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | env UV_UNMANAGED_INSTALL=\"/custom/path\" sh\n</code></pre> <p>The use of <code>UV_UNMANAGED_INSTALL</code> will also disable self-updates (via <code>uv self update</code>).</p>"},{"location":"reference/installer/#passing-options-to-the-installation-script","title":"Passing options to the installation script","text":"<p>Using environment variables is recommended because they are consistent across platforms. However, options can be passed directly to the installation script. For example, to see the available options:</p> <pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | sh -s -- --help\n</code></pre>"},{"location":"reference/settings/","title":"Settings","text":""},{"location":"reference/settings/#project-metadata","title":"Project metadata","text":""},{"location":"reference/settings/#build-constraint-dependencies","title":"<code>build-constraint-dependencies</code>","text":"<p>Constraints to apply when solving build dependencies.</p> <p>Build constraints are used to restrict the versions of build dependencies that are selected when building a package during resolution or installation.</p> <p>Including a package as a constraint will not trigger installation of the package during a build; instead, the package must be requested elsewhere in the project's build dependency graph.</p> <p>Note</p> <p>In <code>uv lock</code>, <code>uv sync</code>, and <code>uv run</code>, uv will only read <code>build-constraint-dependencies</code> from the <code>pyproject.toml</code> at the workspace root, and will ignore any declarations in other workspace members or <code>uv.toml</code> files.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\n# Ensure that the setuptools v60.0.0 is used whenever a package has a build dependency\n# on setuptools.\nbuild-constraint-dependencies = [\"setuptools==60.0.0\"]\n</code></pre>"},{"location":"reference/settings/#conflicts","title":"<code>conflicts</code>","text":"<p>Declare collections of extras or dependency groups that are conflicting (i.e., mutually exclusive).</p> <p>It's useful to declare conflicts when two or more extras have mutually incompatible dependencies. For example, extra <code>foo</code> might depend on <code>numpy==2.0.0</code> while extra <code>bar</code> depends on <code>numpy==2.1.0</code>. While these dependencies conflict, it may be the case that users are not expected to activate both <code>foo</code> and <code>bar</code> at the same time, making it possible to generate a universal resolution for the project despite the incompatibility.</p> <p>By making such conflicts explicit, uv can generate a universal resolution for a project, taking into account that certain combinations of extras and groups are mutually exclusive. In exchange, installation will fail if a user attempts to activate both conflicting extras.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[list[dict]]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\n# Require that `package[extra1]` and `package[extra2]` are resolved\n# in different forks so that they cannot conflict with one another.\nconflicts = [\n[\n{ extra = \"extra1\" },\n{ extra = \"extra2\" },\n]\n]\n# Require that the dependency groups `group1` and `group2`\n# are resolved in different forks so that they cannot conflict\n# with one another.\nconflicts = [\n[\n{ group = \"group1\" },\n{ group = \"group2\" },\n]\n]\n</code></pre>"},{"location":"reference/settings/#constraint-dependencies","title":"<code>constraint-dependencies</code>","text":"<p>Constraints to apply when resolving the project's dependencies.</p> <p>Constraints are used to restrict the versions of dependencies that are selected during resolution.</p> <p>Including a package as a constraint will not trigger installation of the package on its own; instead, the package must be requested elsewhere in the project's first-party or transitive dependencies.</p> <p>Note</p> <p>In <code>uv lock</code>, <code>uv sync</code>, and <code>uv run</code>, uv will only read <code>constraint-dependencies</code> from the <code>pyproject.toml</code> at the workspace root, and will ignore any declarations in other workspace members or <code>uv.toml</code> files.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\n# Ensure that the grpcio version is always less than 1.65, if it's requested by a\n# direct or transitive dependency.\nconstraint-dependencies = [\"grpcio&lt;1.65\"]\n</code></pre>"},{"location":"reference/settings/#default-groups","title":"<code>default-groups</code>","text":"<p>The list of <code>dependency-groups</code> to install by default.</p> <p>Can also be the literal <code>\"all\"</code> to default enable all groups.</p> <p>Default value: <code>[\"dev\"]</code></p> <p>Type: <code>str | list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\ndefault-groups = [\"docs\"]\n</code></pre>"},{"location":"reference/settings/#dependency-groups","title":"<code>dependency-groups</code>","text":"<p>Additional settings for <code>dependency-groups</code>.</p> <p>Currently this can only be used to add <code>requires-python</code> constraints to dependency groups (typically to inform uv that your dev tooling has a higher python requirement than your actual project).</p> <p>This cannot be used to define dependency groups, use the top-level <code>[dependency-groups]</code> table for that.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.dependency-groups]\nmy-group = {requires-python = \"&gt;=3.12\"}\n</code></pre>"},{"location":"reference/settings/#dev-dependencies","title":"<code>dev-dependencies</code>","text":"<p>The project's development dependencies.</p> <p>Development dependencies will be installed by default in <code>uv run</code> and <code>uv sync</code>, but will not appear in the project's published metadata.</p> <p>Use of this field is not recommend anymore. Instead, use the <code>dependency-groups.dev</code> field which is a standardized way to declare development dependencies. The contents of <code>tool.uv.dev-dependencies</code> and <code>dependency-groups.dev</code> are combined to determine the final requirements of the <code>dev</code> dependency group.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\ndev-dependencies = [\"ruff==0.5.0\"]\n</code></pre>"},{"location":"reference/settings/#environments","title":"<code>environments</code>","text":"<p>A list of supported environments against which to resolve dependencies.</p> <p>By default, uv will resolve for all possible environments during a <code>uv lock</code> operation. However, you can restrict the set of supported environments to improve performance and avoid unsatisfiable branches in the solution space.</p> <p>These environments will also be respected when <code>uv pip compile</code> is invoked with the <code>--universal</code> flag.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>str | list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\n# Resolve for macOS, but not for Linux or Windows.\nenvironments = [\"sys_platform == 'darwin'\"]\n</code></pre>"},{"location":"reference/settings/#index","title":"<code>index</code>","text":"<p>The indexes to use when resolving dependencies.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>Indexes are considered in the order in which they're defined, such that the first-defined index has the highest priority. Further, the indexes provided by this setting are given higher priority than any indexes specified via <code>index_url</code> or <code>extra_index_url</code>. uv will only consider the first index that contains a given package, unless an alternative index strategy is specified.</p> <p>If an index is marked as <code>explicit = true</code>, it will be used exclusively for the dependencies that select it explicitly via <code>[tool.uv.sources]</code>, as in:</p> <pre><code>[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\nexplicit = true\n[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n</code></pre> <p>If an index is marked as <code>default = true</code>, it will be moved to the end of the prioritized list, such that it is given the lowest priority when resolving packages. Additionally, marking an index as default will disable the PyPI default index.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\n</code></pre>"},{"location":"reference/settings/#managed","title":"<code>managed</code>","text":"<p>Whether the project is managed by uv. If <code>false</code>, uv will ignore the project when <code>uv run</code> is invoked.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\nmanaged = false\n</code></pre>"},{"location":"reference/settings/#override-dependencies","title":"<code>override-dependencies</code>","text":"<p>Overrides to apply when resolving the project's dependencies.</p> <p>Overrides are used to force selection of a specific version of a package, regardless of the version requested by any other package, and regardless of whether choosing that version would typically constitute an invalid resolution.</p> <p>While constraints are additive, in that they're combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of any constituent packages.</p> <p>Including a package as an override will not trigger installation of the package on its own; instead, the package must be requested elsewhere in the project's first-party or transitive dependencies.</p> <p>Note</p> <p>In <code>uv lock</code>, <code>uv sync</code>, and <code>uv run</code>, uv will only read <code>override-dependencies</code> from the <code>pyproject.toml</code> at the workspace root, and will ignore any declarations in other workspace members or <code>uv.toml</code> files.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\n# Always install Werkzeug 2.3.0, regardless of whether transitive dependencies request\n# a different version.\noverride-dependencies = [\"werkzeug==2.3.0\"]\n</code></pre>"},{"location":"reference/settings/#package","title":"<code>package</code>","text":"<p>Whether the project should be considered a Python package, or a non-package (\"virtual\") project.</p> <p>Packages are built and installed into the virtual environment in editable mode and thus require a build backend, while virtual projects are not built or installed; instead, only their dependencies are included in the virtual environment.</p> <p>Creating a package requires that a <code>build-system</code> is present in the <code>pyproject.toml</code>, and that the project adheres to a structure that adheres to the build backend's expectations (e.g., a <code>src</code> layout).</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\npackage = false\n</code></pre>"},{"location":"reference/settings/#required-environments","title":"<code>required-environments</code>","text":"<p>A list of required platforms, for packages that lack source distributions.</p> <p>When a package does not have a source distribution, it's availability will be limited to the platforms supported by its built distributions (wheels). For example, if a package only publishes wheels for Linux, then it won't be installable on macOS or Windows.</p> <p>By default, uv requires each package to include at least one wheel that is compatible with the designated Python version. The <code>required-environments</code> setting can be used to ensure that the resulting resolution contains wheels for specific platforms, or fails if no such wheels are available.</p> <p>While the <code>environments</code> setting limits the set of environments that uv will consider when resolving dependencies, <code>required-environments</code> expands the set of platforms that uv must support when resolving dependencies.</p> <p>For example, <code>environments = [\"sys_platform == 'darwin'\"]</code> would limit uv to solving for macOS (and ignoring Linux and Windows). On the other hand, <code>required-environments = [\"sys_platform == 'darwin'\"]</code> would require that any package without a source distribution include a wheel for macOS in order to be installable.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>str | list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv]\n# Require that the package is available for macOS ARM and x86 (Intel).\nrequired-environments = [\n\"sys_platform == 'darwin' and platform_machine == 'arm64'\",\n\"sys_platform == 'darwin' and platform_machine == 'x86_64'\",\n]\n</code></pre>"},{"location":"reference/settings/#sources","title":"<code>sources</code>","text":"<p>The sources to use when resolving dependencies.</p> <p><code>tool.uv.sources</code> enriches the dependency metadata with additional sources, incorporated during development. A dependency source can be a Git repository, a URL, a local path, or an alternative registry.</p> <p>See Dependencies for more.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\", tag = \"0.27.0\" }\npytest = { url = \"https://files.pythonhosted.org/packages/6b/77/7440a06a8ead44c7757a64362dd22df5760f9b12dc5f11b6188cd2fc27a0/pytest-8.3.3-py3-none-any.whl\" }\npydantic = { path = \"/path/to/pydantic\", editable = true }\n</code></pre>"},{"location":"reference/settings/#build-backend","title":"<code>build-backend</code>","text":"<p>Settings for the uv build backend (<code>uv_build</code>).</p> <p>Note that those settings only apply when using the <code>uv_build</code> backend, other build backends (such as hatchling) have their own configuration.</p> <p>All options that accept globs use the portable glob patterns from PEP 639.</p>"},{"location":"reference/settings/#build-backend_data","title":"<code>data</code>","text":"<p>Data includes for wheels.</p> <p>Each entry is a directory, whose contents are copied to the matching directory in the wheel in <code>&lt;name&gt;-&lt;version&gt;.data/(purelib|platlib|headers|scripts|data)</code>. Upon installation, this data is moved to its target location, as defined by https://docs.python.org/3.12/library/sysconfig.html#installation-paths. Usually, small data files are included by placing them in the Python module instead of using data includes.</p> <ul> <li><code>scripts</code>: Installed to the directory for executables, <code>&lt;venv&gt;/bin</code> on Unix or   <code>&lt;venv&gt;\\Scripts</code> on Windows. This directory is added to <code>PATH</code> when the virtual   environment  is activated or when using <code>uv run</code>, so this data type can be used to install   additional binaries. Consider using <code>project.scripts</code> instead for Python entrypoints.</li> <li> <p><code>data</code>: Installed over the virtualenv environment root.</p> <p>Warning: This may override existing files!</p> </li> <li> <p><code>headers</code>: Installed to the include directory. Compilers building Python packages   with this package as build requirement use the include directory to find additional header   files.</p> </li> <li><code>purelib</code> and <code>platlib</code>: Installed to the <code>site-packages</code> directory. It is not recommended   to use these two options.</li> </ul> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\ndata = { headers = \"include/headers\", scripts = \"bin\" }\n</code></pre>"},{"location":"reference/settings/#build-backend_default-excludes","title":"<code>default-excludes</code>","text":"<p>If set to <code>false</code>, the default excludes aren't applied.</p> <p>Default excludes: <code>__pycache__</code>, <code>*.pyc</code>, and <code>*.pyo</code>.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\ndefault-excludes = false\n</code></pre>"},{"location":"reference/settings/#build-backend_module-name","title":"<code>module-name</code>","text":"<p>The name of the module directory inside <code>module-root</code>.</p> <p>The default module name is the package name with dots and dashes replaced by underscores.</p> <p>Package names need to be valid Python identifiers, and the directory needs to contain a <code>__init__.py</code>. An exception are stubs packages, whose name ends with <code>-stubs</code>, with the stem being the module name, and which contain a <code>__init__.pyi</code> file.</p> <p>For namespace packages with a single module, the path can be dotted, e.g., <code>foo.bar</code> or <code>foo-stubs.bar</code>.</p> <p>For namespace packages with multiple modules, the path can be a list, e.g., <code>[\"foo\", \"bar\"]</code>. We recommend using a single module per package, splitting multiple packages into a workspace.</p> <p>Note that using this option runs the risk of creating two packages with different names but the same module names. Installing such packages together leads to unspecified behavior, often with corrupted files or directory trees.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str | list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nmodule-name = \"sklearn\"\n</code></pre>"},{"location":"reference/settings/#build-backend_module-root","title":"<code>module-root</code>","text":"<p>The directory that contains the module directory.</p> <p>Common values are <code>src</code> (src layout, the default) or an empty path (flat layout).</p> <p>Default value: <code>\"src\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nmodule-root = \"\"\n</code></pre>"},{"location":"reference/settings/#build-backend_namespace","title":"<code>namespace</code>","text":"<p>Build a namespace package.</p> <p>Build a PEP 420 implicit namespace package, allowing more than one root <code>__init__.py</code>.</p> <p>Use this option when the namespace package contains multiple root <code>__init__.py</code>, for namespace packages with a single root <code>__init__.py</code> use a dotted <code>module-name</code> instead.</p> <p>To compare dotted <code>module-name</code> and <code>namespace = true</code>, the first example below can be expressed with <code>module-name = \"cloud.database\"</code>: There is one root <code>__init__.py</code> <code>database</code>. In the second example, we have three roots (<code>cloud.database</code>, <code>cloud.database_pro</code>, <code>billing.modules.database_pro</code>), so <code>namespace = true</code> is required.</p> <pre><code>src\n\u2514\u2500\u2500 cloud\n    \u2514\u2500\u2500 database\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 query_builder\n        \u2502   \u2514\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 sql\n            \u251c\u2500\u2500 parser.py\n            \u2514\u2500\u2500 __init__.py\n</code></pre> <pre><code>src\n\u251c\u2500\u2500 cloud\n\u2502   \u251c\u2500\u2500 database\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 query_builder\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 sql\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2514\u2500\u2500 parser.py\n\u2502   \u2514\u2500\u2500 database_pro\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 query_builder.py\n\u2514\u2500\u2500 billing\n    \u2514\u2500\u2500 modules\n        \u2514\u2500\u2500 database_pro\n            \u251c\u2500\u2500 __init__.py\n            \u2514\u2500\u2500 sql.py\n</code></pre> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nnamespace = true\n</code></pre>"},{"location":"reference/settings/#build-backend_source-exclude","title":"<code>source-exclude</code>","text":"<p>Glob expressions which files and directories to exclude from the source distribution.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nsource-exclude = [\"*.bin\"]\n</code></pre>"},{"location":"reference/settings/#build-backend_source-include","title":"<code>source-include</code>","text":"<p>Glob expressions which files and directories to additionally include in the source distribution.</p> <p><code>pyproject.toml</code> and the contents of the module directory are always included.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nsource-include = [\"tests/**\"]\n</code></pre>"},{"location":"reference/settings/#build-backend_wheel-exclude","title":"<code>wheel-exclude</code>","text":"<p>Glob expressions which files and directories to exclude from the wheel.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.build-backend]\nwheel-exclude = [\"*.bin\"]\n</code></pre>"},{"location":"reference/settings/#workspace","title":"<code>workspace</code>","text":""},{"location":"reference/settings/#workspace_exclude","title":"<code>exclude</code>","text":"<p>Packages to exclude as workspace members. If a package matches both <code>members</code> and <code>exclude</code>, it will be excluded.</p> <p>Supports both globs and explicit paths.</p> <p>For more information on the glob syntax, refer to the <code>glob</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.workspace]\nexclude = [\"member1\", \"path/to/member2\", \"libs/*\"]\n</code></pre>"},{"location":"reference/settings/#workspace_members","title":"<code>members</code>","text":"<p>Packages to include as workspace members.</p> <p>Supports both globs and explicit paths.</p> <p>For more information on the glob syntax, refer to the <code>glob</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.toml<pre><code>[tool.uv.workspace]\nmembers = [\"member1\", \"path/to/member2\", \"libs/*\"]\n</code></pre>"},{"location":"reference/settings/#configuration","title":"Configuration","text":""},{"location":"reference/settings/#add-bounds","title":"<code>add-bounds</code>","text":"<p>The default version specifier when adding a dependency.</p> <p>When adding a dependency to the project, if no constraint or URL is provided, a constraint is added based on the latest compatible version of the package. By default, a lower bound constraint is used, e.g., <code>&gt;=1.2.3</code>.</p> <p>When <code>--frozen</code> is provided, no resolution is performed, and dependencies are always added without constraints.</p> <p>This option is in preview and may change in any future release.</p> <p>Default value: <code>\"lower\"</code></p> <p>Possible values:</p> <ul> <li><code>\"lower\"</code>: Only a lower bound, e.g., <code>&gt;=1.2.3</code></li> <li><code>\"major\"</code>: Allow the same major version, similar to the semver caret, e.g., <code>&gt;=1.2.3, &lt;2.0.0</code></li> <li><code>\"minor\"</code>: Allow the same minor version, similar to the semver tilde, e.g., <code>&gt;=1.2.3, &lt;1.3.0</code></li> <li><code>\"exact\"</code>: Pin the exact version, e.g., <code>==1.2.3</code></li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nadd-bounds = \"major\"\n</code></pre> <pre><code>add-bounds = \"major\"\n</code></pre>"},{"location":"reference/settings/#allow-insecure-host","title":"<code>allow-insecure-host</code>","text":"<p>Allow insecure connections to host.</p> <p>Expects to receive either a hostname (e.g., <code>localhost</code>), a host-port pair (e.g., <code>localhost:8080</code>), or a URL (e.g., <code>https://localhost</code>).</p> <p>WARNING: Hosts included in this list will not be verified against the system's certificate store. Only use <code>--allow-insecure-host</code> in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nallow-insecure-host = [\"localhost:8080\"]\n</code></pre> <pre><code>allow-insecure-host = [\"localhost:8080\"]\n</code></pre>"},{"location":"reference/settings/#cache-dir","title":"<code>cache-dir</code>","text":"<p>Path to the cache directory.</p> <p>Defaults to <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux and macOS, and <code>%LOCALAPPDATA%\\uv\\cache</code> on Windows.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ncache-dir = \"./.uv_cache\"\n</code></pre> <pre><code>cache-dir = \"./.uv_cache\"\n</code></pre>"},{"location":"reference/settings/#cache-keys","title":"<code>cache-keys</code>","text":"<p>The keys to consider when caching builds for the project.</p> <p>Cache keys enable you to specify the files or directories that should trigger a rebuild when modified. By default, uv will rebuild a project whenever the <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> files in the project directory are modified, or if a <code>src</code> directory is added or removed, i.e.:</p> <pre><code>cache-keys = [{ file = \"pyproject.toml\" }, { file = \"setup.py\" }, { file = \"setup.cfg\" }, { dir = \"src\" }]\n</code></pre> <p>As an example: if a project uses dynamic metadata to read its dependencies from a <code>requirements.txt</code> file, you can specify <code>cache-keys = [{ file = \"requirements.txt\" }, { file = \"pyproject.toml\" }]</code> to ensure that the project is rebuilt whenever the <code>requirements.txt</code> file is modified (in addition to watching the <code>pyproject.toml</code>).</p> <p>Globs are supported, following the syntax of the <code>glob</code> crate. For example, to invalidate the cache whenever a <code>.toml</code> file in the project directory or any of its subdirectories is modified, you can specify <code>cache-keys = [{ file = \"**/*.toml\" }]</code>. Note that the use of globs can be expensive, as uv may need to walk the filesystem to determine whether any files have changed.</p> <p>Cache keys can also include version control information. For example, if a project uses <code>setuptools_scm</code> to read its version from a Git commit, you can specify <code>cache-keys = [{ git = { commit = true }, { file = \"pyproject.toml\" }]</code> to include the current Git commit hash in the cache key (in addition to the <code>pyproject.toml</code>). Git tags are also supported via <code>cache-keys = [{ git = { commit = true, tags = true } }]</code>.</p> <p>Cache keys can also include environment variables. For example, if a project relies on <code>MACOSX_DEPLOYMENT_TARGET</code> or other environment variables to determine its behavior, you can specify <code>cache-keys = [{ env = \"MACOSX_DEPLOYMENT_TARGET\" }]</code> to invalidate the cache whenever the environment variable changes.</p> <p>Cache keys only affect the project defined by the <code>pyproject.toml</code> in which they're specified (as opposed to, e.g., affecting all members in a workspace), and all paths and globs are interpreted as relative to the project directory.</p> <p>Default value: <code>[{ file = \"pyproject.toml\" }, { file = \"setup.py\" }, { file = \"setup.cfg\" }]</code></p> <p>Type: <code>list[dict]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ncache-keys = [{ file = \"pyproject.toml\" }, { file = \"requirements.txt\" }, { git = { commit = true } }]\n</code></pre> <pre><code>cache-keys = [{ file = \"pyproject.toml\" }, { file = \"requirements.txt\" }, { git = { commit = true } }]\n</code></pre>"},{"location":"reference/settings/#check-url","title":"<code>check-url</code>","text":"<p>Check an index URL for existing files to skip duplicate uploads.</p> <p>This option allows retrying publishing that failed after only some, but not all files have been uploaded, and handles error due to parallel uploads of the same file.</p> <p>Before uploading, the index is checked. If the exact same file already exists in the index, the file will not be uploaded. If an error occurred during the upload, the index is checked again, to handle cases where the identical file was uploaded twice in parallel.</p> <p>The exact behavior will vary based on the index. When uploading to PyPI, uploading the same file succeeds even without <code>--check-url</code>, while most other indexes error.</p> <p>The index must provide one of the supported hashes (SHA-256, SHA-384, or SHA-512).</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ncheck-url = \"https://test.pypi.org/simple\"\n</code></pre> <pre><code>check-url = \"https://test.pypi.org/simple\"\n</code></pre>"},{"location":"reference/settings/#compile-bytecode","title":"<code>compile-bytecode</code>","text":"<p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ncompile-bytecode = true\n</code></pre> <pre><code>compile-bytecode = true\n</code></pre>"},{"location":"reference/settings/#concurrent-builds","title":"<code>concurrent-builds</code>","text":"<p>The maximum number of source distributions that uv will build concurrently at any given time.</p> <p>Defaults to the number of available CPU cores.</p> <p>Default value: <code>None</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nconcurrent-builds = 4\n</code></pre> <pre><code>concurrent-builds = 4\n</code></pre>"},{"location":"reference/settings/#concurrent-downloads","title":"<code>concurrent-downloads</code>","text":"<p>The maximum number of in-flight concurrent downloads that uv will perform at any given time.</p> <p>Default value: <code>50</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nconcurrent-downloads = 4\n</code></pre> <pre><code>concurrent-downloads = 4\n</code></pre>"},{"location":"reference/settings/#concurrent-installs","title":"<code>concurrent-installs</code>","text":"<p>The number of threads used when installing and unzipping packages.</p> <p>Defaults to the number of available CPU cores.</p> <p>Default value: <code>None</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nconcurrent-installs = 4\n</code></pre> <pre><code>concurrent-installs = 4\n</code></pre>"},{"location":"reference/settings/#config-settings","title":"<code>config-settings</code>","text":"<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nconfig-settings = { editable_mode = \"compat\" }\n</code></pre> <pre><code>config-settings = { editable_mode = \"compat\" }\n</code></pre>"},{"location":"reference/settings/#config-settings-package","title":"<code>config-settings-package</code>","text":"<p>Settings to pass to the PEP 517 build backend for specific packages, specified as <code>KEY=VALUE</code> pairs.</p> <p>Accepts a map from package names to string key-value pairs.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nconfig-settings-package = { numpy = { editable_mode = \"compat\" } }\n</code></pre> <pre><code>config-settings-package = { numpy = { editable_mode = \"compat\" } }\n</code></pre>"},{"location":"reference/settings/#dependency-metadata","title":"<code>dependency-metadata</code>","text":"<p>Pre-defined static metadata for dependencies of the project (direct or transitive). When provided, enables the resolver to use the specified metadata instead of querying the registry or building the relevant package from source.</p> <p>Metadata should be provided in adherence with the Metadata 2.3 standard, though only the following fields are respected:</p> <ul> <li><code>name</code>: The name of the package.</li> <li>(Optional) <code>version</code>: The version of the package. If omitted, the metadata will be applied   to all versions of the package.</li> <li>(Optional) <code>requires-dist</code>: The dependencies of the package (e.g., <code>werkzeug&gt;=0.14</code>).</li> <li>(Optional) <code>requires-python</code>: The Python version required by the package (e.g., <code>&gt;=3.10</code>).</li> <li>(Optional) <code>provides-extra</code>: The extras provided by the package.</li> </ul> <p>Default value: <code>[]</code></p> <p>Type: <code>list[dict]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ndependency-metadata = [\n{ name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \"&gt;=3.6\" },\n]\n</code></pre> <pre><code>dependency-metadata = [\n{ name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \"&gt;=3.6\" },\n]\n</code></pre>"},{"location":"reference/settings/#exclude-newer","title":"<code>exclude-newer</code>","text":"<p>Limit candidate packages to those that were uploaded prior to a given point in time.</p> <p>Accepts a superset of RFC 3339 (e.g., <code>2006-12-02T02:07:43Z</code>). A full timestamp is required to ensure that the resolver will behave consistently across timezones.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nexclude-newer = \"2006-12-02T02:07:43Z\"\n</code></pre> <pre><code>exclude-newer = \"2006-12-02T02:07:43Z\"\n</code></pre>"},{"location":"reference/settings/#exclude-newer-package","title":"<code>exclude-newer-package</code>","text":"<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in a dictionary format.</p> <p>Default value: <code>None</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nexclude-newer-package = { tqdm = \"2022-04-04T00:00:00Z\" }\n</code></pre> <pre><code>exclude-newer-package = { tqdm = \"2022-04-04T00:00:00Z\" }\n</code></pre>"},{"location":"reference/settings/#extra-build-dependencies","title":"<code>extra-build-dependencies</code>","text":"<p>Additional build dependencies for packages.</p> <p>This allows extending the PEP 517 build environment for the project's dependencies with additional packages. This is useful for packages that assume the presence of packages like <code>pip</code>, and do not declare them as build dependencies.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nextra-build-dependencies = { pytest = [\"setuptools\"] }\n</code></pre> <pre><code>extra-build-dependencies = { pytest = [\"setuptools\"] }\n</code></pre>"},{"location":"reference/settings/#extra-build-variables","title":"<code>extra-build-variables</code>","text":"<p>Extra environment variables to set when building certain packages.</p> <p>Environment variables will be added to the environment when building the specified packages.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, dict[str, str]]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nextra-build-variables = { flash-attn = { FLASH_ATTENTION_SKIP_CUDA_BUILD = \"TRUE\" } }\n</code></pre> <pre><code>extra-build-variables = { flash-attn = { FLASH_ATTENTION_SKIP_CUDA_BUILD = \"TRUE\" } }\n</code></pre>"},{"location":"reference/settings/#extra-index-url","title":"<code>extra-index-url</code>","text":"<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>index_url</code> or <code>index</code> with <code>default = true</code>. When multiple indexes are provided, earlier values take priority.</p> <p>To control uv's resolution strategy when multiple indexes are present, see <code>index_strategy</code>.</p> <p>(Deprecated: use <code>index</code> instead.)</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre> <pre><code>extra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre>"},{"location":"reference/settings/#find-links","title":"<code>find-links</code>","text":"<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre> <pre><code>find-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre>"},{"location":"reference/settings/#fork-strategy","title":"<code>fork-strategy</code>","text":"<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>Default value: <code>\"requires-python\"</code></p> <p>Possible values:</p> <ul> <li><code>\"fewest\"</code>: Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>\"requires-python\"</code>: Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nfork-strategy = \"fewest\"\n</code></pre> <pre><code>fork-strategy = \"fewest\"\n</code></pre>"},{"location":"reference/settings/#index","title":"<code>index</code>","text":"<p>The package indexes to use when resolving dependencies.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>Indexes are considered in the order in which they're defined, such that the first-defined index has the highest priority. Further, the indexes provided by this setting are given higher priority than any indexes specified via <code>index_url</code> or <code>extra_index_url</code>. uv will only consider the first index that contains a given package, unless an alternative index strategy is specified.</p> <p>If an index is marked as <code>explicit = true</code>, it will be used exclusively for those dependencies that select it explicitly via <code>[tool.uv.sources]</code>, as in:</p> <pre><code>[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\nexplicit = true\n[tool.uv.sources]\ntorch = { index = \"pytorch\" }\n</code></pre> <p>If an index is marked as <code>default = true</code>, it will be moved to the end of the prioritized list, such that it is given the lowest priority when resolving packages. Additionally, marking an index as default will disable the PyPI default index.</p> <p>Default value: <code>\"[]\"</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\n</code></pre> <pre><code>[[tool.uv.index]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/cu121\"\n</code></pre>"},{"location":"reference/settings/#index-strategy","title":"<code>index-strategy</code>","text":"<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>Default value: <code>\"first-index\"</code></p> <p>Possible values:</p> <ul> <li><code>\"first-index\"</code>: Only use results from the first index that returns a match for a given package name</li> <li><code>\"unsafe-first-match\"</code>: Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>\"unsafe-best-match\"</code>: Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nindex-strategy = \"unsafe-best-match\"\n</code></pre> <pre><code>index-strategy = \"unsafe-best-match\"\n</code></pre>"},{"location":"reference/settings/#index-url","title":"<code>index-url</code>","text":"<p>The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index provided by this setting is given lower priority than any indexes specified via <code>extra_index_url</code> or <code>index</code>.</p> <p>(Deprecated: use <code>index</code> instead.)</p> <p>Default value: <code>\"https://pypi.org/simple\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre> <pre><code>index-url = \"https://test.pypi.org/simple\"\n</code></pre>"},{"location":"reference/settings/#keyring-provider","title":"<code>keyring-provider</code>","text":"<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Default value: <code>\"disabled\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nkeyring-provider = \"subprocess\"\n</code></pre> <pre><code>keyring-provider = \"subprocess\"\n</code></pre>"},{"location":"reference/settings/#link-mode","title":"<code>link-mode</code>","text":"<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>Default value: <code>\"clone\" (macOS) or \"hardlink\" (Linux, Windows)</code></p> <p>Possible values:</p> <ul> <li><code>\"clone\"</code>: Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"copy\"</code>: Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"hardlink\"</code>: Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"symlink\"</code>: Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nlink-mode = \"copy\"\n</code></pre> <pre><code>link-mode = \"copy\"\n</code></pre>"},{"location":"reference/settings/#native-tls","title":"<code>native-tls</code>","text":"<p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nnative-tls = true\n</code></pre> <pre><code>native-tls = true\n</code></pre>"},{"location":"reference/settings/#no-binary","title":"<code>no-binary</code>","text":"<p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-binary = true\n</code></pre> <pre><code>no-binary = true\n</code></pre>"},{"location":"reference/settings/#no-binary-package","title":"<code>no-binary-package</code>","text":"<p>Don't install pre-built wheels for a specific package.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-binary-package = [\"ruff\"]\n</code></pre> <pre><code>no-binary-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#no-build","title":"<code>no-build</code>","text":"<p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build = true\n</code></pre> <pre><code>no-build = true\n</code></pre>"},{"location":"reference/settings/#no-build-isolation","title":"<code>no-build-isolation</code>","text":"<p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build-isolation = true\n</code></pre> <pre><code>no-build-isolation = true\n</code></pre>"},{"location":"reference/settings/#no-build-isolation-package","title":"<code>no-build-isolation-package</code>","text":"<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre> <pre><code>no-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre>"},{"location":"reference/settings/#no-build-package","title":"<code>no-build-package</code>","text":"<p>Don't build source distributions for a specific package.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build-package = [\"ruff\"]\n</code></pre> <pre><code>no-build-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#no-cache","title":"<code>no-cache</code>","text":"<p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-cache = true\n</code></pre> <pre><code>no-cache = true\n</code></pre>"},{"location":"reference/settings/#no-index","title":"<code>no-index</code>","text":"<p>Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-index = true\n</code></pre> <pre><code>no-index = true\n</code></pre>"},{"location":"reference/settings/#no-sources","title":"<code>no-sources</code>","text":"<p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-sources = true\n</code></pre> <pre><code>no-sources = true\n</code></pre>"},{"location":"reference/settings/#offline","title":"<code>offline</code>","text":"<p>Disable network access, relying only on locally cached data and locally available files.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\noffline = true\n</code></pre> <pre><code>offline = true\n</code></pre>"},{"location":"reference/settings/#prerelease","title":"<code>prerelease</code>","text":"<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Default value: <code>\"if-necessary-or-explicit\"</code></p> <p>Possible values:</p> <ul> <li><code>\"disallow\"</code>: Disallow all pre-release versions</li> <li><code>\"allow\"</code>: Allow all pre-release versions</li> <li><code>\"if-necessary\"</code>: Allow pre-release versions if all versions of a package are pre-release</li> <li><code>\"explicit\"</code>: Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>\"if-necessary-or-explicit\"</code>: Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nprerelease = \"allow\"\n</code></pre> <pre><code>prerelease = \"allow\"\n</code></pre>"},{"location":"reference/settings/#preview","title":"<code>preview</code>","text":"<p>Whether to enable experimental, preview features.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npreview = true\n</code></pre> <pre><code>preview = true\n</code></pre>"},{"location":"reference/settings/#publish-url","title":"<code>publish-url</code>","text":"<p>The URL for publishing packages to the Python package index (by default: https://upload.pypi.org/legacy/).</p> <p>Default value: <code>\"https://upload.pypi.org/legacy/\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npublish-url = \"https://test.pypi.org/legacy/\"\n</code></pre> <pre><code>publish-url = \"https://test.pypi.org/legacy/\"\n</code></pre>"},{"location":"reference/settings/#pypy-install-mirror","title":"<code>pypy-install-mirror</code>","text":"<p>Mirror URL to use for downloading managed PyPy installations.</p> <p>By default, managed PyPy installations are downloaded from downloads.python.org. This variable can be set to a mirror URL to use a different source for PyPy installations. The provided URL will replace <code>https://downloads.python.org/pypy</code> in, e.g., <code>https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2</code>.</p> <p>Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npypy-install-mirror = \"https://downloads.python.org/pypy\"\n</code></pre> <pre><code>pypy-install-mirror = \"https://downloads.python.org/pypy\"\n</code></pre>"},{"location":"reference/settings/#python-downloads","title":"<code>python-downloads</code>","text":"<p>Whether to allow Python downloads.</p> <p>Default value: <code>\"automatic\"</code></p> <p>Possible values:</p> <ul> <li><code>\"automatic\"</code>: Automatically download managed Python installations when needed</li> <li><code>\"manual\"</code>: Do not automatically download managed Python installations; require explicit installation</li> <li><code>\"never\"</code>: Do not ever allow Python downloads</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npython-downloads = \"manual\"\n</code></pre> <pre><code>python-downloads = \"manual\"\n</code></pre>"},{"location":"reference/settings/#python-downloads-json-url","title":"<code>python-downloads-json-url</code>","text":"<p>URL pointing to JSON of custom Python installations.</p> <p>Note that currently, only local paths are supported.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npython-downloads-json-url = \"/etc/uv/python-downloads.json\"\n</code></pre> <pre><code>python-downloads-json-url = \"/etc/uv/python-downloads.json\"\n</code></pre>"},{"location":"reference/settings/#python-install-mirror","title":"<code>python-install-mirror</code>","text":"<p>Mirror URL for downloading managed Python installations.</p> <p>By default, managed Python installations are downloaded from <code>python-build-standalone</code>. This variable can be set to a mirror URL to use a different source for Python installations. The provided URL will replace <code>https://github.com/astral-sh/python-build-standalone/releases/download</code> in, e.g., <code>https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz</code>.</p> <p>Distributions can be read from a local directory by using the <code>file://</code> URL scheme.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npython-install-mirror = \"https://github.com/astral-sh/python-build-standalone/releases/download\"\n</code></pre> <pre><code>python-install-mirror = \"https://github.com/astral-sh/python-build-standalone/releases/download\"\n</code></pre>"},{"location":"reference/settings/#python-preference","title":"<code>python-preference</code>","text":"<p>Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv.</p> <p>Default value: <code>\"managed\"</code></p> <p>Possible values:</p> <ul> <li><code>\"only-managed\"</code>: Only use managed Python installations; never use system Python installations</li> <li><code>\"managed\"</code>: Prefer managed Python installations over system Python installations</li> <li><code>\"system\"</code>: Prefer system Python installations over managed Python installations</li> <li><code>\"only-system\"</code>: Only use system Python installations; never use managed Python installations</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npython-preference = \"managed\"\n</code></pre> <pre><code>python-preference = \"managed\"\n</code></pre>"},{"location":"reference/settings/#reinstall","title":"<code>reinstall</code>","text":"<p>Reinstall all packages, regardless of whether they're already installed. Implies <code>refresh</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nreinstall = true\n</code></pre> <pre><code>reinstall = true\n</code></pre>"},{"location":"reference/settings/#reinstall-package","title":"<code>reinstall-package</code>","text":"<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>refresh-package</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nreinstall-package = [\"ruff\"]\n</code></pre> <pre><code>reinstall-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#required-version","title":"<code>required-version</code>","text":"<p>Enforce a requirement on the version of uv.</p> <p>If the version of uv does not meet the requirement at runtime, uv will exit with an error.</p> <p>Accepts a PEP 440 specifier, like <code>==0.5.0</code> or <code>&gt;=0.5.0</code>.</p> <p>Default value: <code>null</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nrequired-version = \"&gt;=0.5.0\"\n</code></pre> <pre><code>required-version = \"&gt;=0.5.0\"\n</code></pre>"},{"location":"reference/settings/#resolution","title":"<code>resolution</code>","text":"<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Default value: <code>\"highest\"</code></p> <p>Possible values:</p> <ul> <li><code>\"highest\"</code>: Resolve the highest compatible version of each package</li> <li><code>\"lowest\"</code>: Resolve the lowest compatible version of each package</li> <li><code>\"lowest-direct\"</code>: Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nresolution = \"lowest-direct\"\n</code></pre> <pre><code>resolution = \"lowest-direct\"\n</code></pre>"},{"location":"reference/settings/#trusted-publishing","title":"<code>trusted-publishing</code>","text":"<p>Configure trusted publishing.</p> <p>By default, uv checks for trusted publishing when running in a supported environment, but ignores it if it isn't configured.</p> <p>uv's supported environments for trusted publishing include GitHub Actions and GitLab CI/CD.</p> <p>Default value: <code>automatic</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ntrusted-publishing = \"always\"\n</code></pre> <pre><code>trusted-publishing = \"always\"\n</code></pre>"},{"location":"reference/settings/#upgrade","title":"<code>upgrade</code>","text":"<p>Allow package upgrades, ignoring pinned versions in any existing output file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nupgrade = true\n</code></pre> <pre><code>upgrade = true\n</code></pre>"},{"location":"reference/settings/#upgrade-package","title":"<code>upgrade-package</code>","text":"<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file.</p> <p>Accepts both standalone package names (<code>ruff</code>) and version specifiers (<code>ruff&lt;0.5.0</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nupgrade-package = [\"ruff\"]\n</code></pre> <pre><code>upgrade-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip","title":"<code>pip</code>","text":"<p>Settings that are specific to the <code>uv pip</code> command-line interface.</p> <p>These values will be ignored when running commands outside the <code>uv pip</code> namespace (e.g., <code>uv lock</code>, <code>uvx</code>).</p>"},{"location":"reference/settings/#pip_all-extras","title":"<code>all-extras</code>","text":"<p>Include all optional dependencies.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nall-extras = true\n</code></pre> <pre><code>[pip]\nall-extras = true\n</code></pre>"},{"location":"reference/settings/#pip_allow-empty-requirements","title":"<code>allow-empty-requirements</code>","text":"<p>Allow <code>uv pip sync</code> with empty requirements, which will clear the environment of all packages.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nallow-empty-requirements = true\n</code></pre> <pre><code>[pip]\nallow-empty-requirements = true\n</code></pre>"},{"location":"reference/settings/#pip_annotation-style","title":"<code>annotation-style</code>","text":"<p>The style of the annotation comments included in the output file, used to indicate the source of each package.</p> <p>Default value: <code>\"split\"</code></p> <p>Possible values:</p> <ul> <li><code>\"line\"</code>: Render the annotations on a single, comma-separated line</li> <li><code>\"split\"</code>: Render each annotation on its own line</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nannotation-style = \"line\"\n</code></pre> <pre><code>[pip]\nannotation-style = \"line\"\n</code></pre>"},{"location":"reference/settings/#pip_break-system-packages","title":"<code>break-system-packages</code>","text":"<p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or pip).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nbreak-system-packages = true\n</code></pre> <pre><code>[pip]\nbreak-system-packages = true\n</code></pre>"},{"location":"reference/settings/#pip_compile-bytecode","title":"<code>compile-bytecode</code>","text":"<p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ncompile-bytecode = true\n</code></pre> <pre><code>[pip]\ncompile-bytecode = true\n</code></pre>"},{"location":"reference/settings/#pip_config-settings","title":"<code>config-settings</code>","text":"<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nconfig-settings = { editable_mode = \"compat\" }\n</code></pre> <pre><code>[pip]\nconfig-settings = { editable_mode = \"compat\" }\n</code></pre>"},{"location":"reference/settings/#pip_config-settings-package","title":"<code>config-settings-package</code>","text":"<p>Settings to pass to the PEP 517 build backend for specific packages, specified as <code>KEY=VALUE</code> pairs.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nconfig-settings-package = { numpy = { editable_mode = \"compat\" } }\n</code></pre> <pre><code>[pip]\nconfig-settings-package = { numpy = { editable_mode = \"compat\" } }\n</code></pre>"},{"location":"reference/settings/#pip_custom-compile-command","title":"<code>custom-compile-command</code>","text":"<p>The header comment to include at the top of the output file generated by <code>uv pip compile</code>.</p> <p>Used to reflect custom build scripts and commands that wrap <code>uv pip compile</code>.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ncustom-compile-command = \"./custom-uv-compile.sh\"\n</code></pre> <pre><code>[pip]\ncustom-compile-command = \"./custom-uv-compile.sh\"\n</code></pre>"},{"location":"reference/settings/#pip_dependency-metadata","title":"<code>dependency-metadata</code>","text":"<p>Pre-defined static metadata for dependencies of the project (direct or transitive). When provided, enables the resolver to use the specified metadata instead of querying the registry or building the relevant package from source.</p> <p>Metadata should be provided in adherence with the Metadata 2.3 standard, though only the following fields are respected:</p> <ul> <li><code>name</code>: The name of the package.</li> <li>(Optional) <code>version</code>: The version of the package. If omitted, the metadata will be applied   to all versions of the package.</li> <li>(Optional) <code>requires-dist</code>: The dependencies of the package (e.g., <code>werkzeug&gt;=0.14</code>).</li> <li>(Optional) <code>requires-python</code>: The Python version required by the package (e.g., <code>&gt;=3.10</code>).</li> <li>(Optional) <code>provides-extra</code>: The extras provided by the package.</li> </ul> <p>Default value: <code>[]</code></p> <p>Type: <code>list[dict]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ndependency-metadata = [\n{ name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \"&gt;=3.6\" },\n]\n</code></pre> <pre><code>[pip]\ndependency-metadata = [\n{ name = \"flask\", version = \"1.0.0\", requires-dist = [\"werkzeug\"], requires-python = \"&gt;=3.6\" },\n]\n</code></pre>"},{"location":"reference/settings/#pip_emit-build-options","title":"<code>emit-build-options</code>","text":"<p>Include <code>--no-binary</code> and <code>--only-binary</code> entries in the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-build-options = true\n</code></pre> <pre><code>[pip]\nemit-build-options = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-find-links","title":"<code>emit-find-links</code>","text":"<p>Include <code>--find-links</code> entries in the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-find-links = true\n</code></pre> <pre><code>[pip]\nemit-find-links = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-index-annotation","title":"<code>emit-index-annotation</code>","text":"<p>Include comment annotations indicating the index used to resolve each package (e.g., <code># from https://pypi.org/simple</code>).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-index-annotation = true\n</code></pre> <pre><code>[pip]\nemit-index-annotation = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-index-url","title":"<code>emit-index-url</code>","text":"<p>Include <code>--index-url</code> and <code>--extra-index-url</code> entries in the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-index-url = true\n</code></pre> <pre><code>[pip]\nemit-index-url = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-marker-expression","title":"<code>emit-marker-expression</code>","text":"<p>Whether to emit a marker string indicating the conditions under which the set of pinned dependencies is valid.</p> <p>The pinned dependencies may be valid even when the marker expression is false, but when the expression is true, the requirements are known to be correct.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-marker-expression = true\n</code></pre> <pre><code>[pip]\nemit-marker-expression = true\n</code></pre>"},{"location":"reference/settings/#pip_exclude-newer","title":"<code>exclude-newer</code>","text":"<p>Limit candidate packages to those that were uploaded prior to a given point in time.</p> <p>Accepts a superset of RFC 3339 (e.g., <code>2006-12-02T02:07:43Z</code>). A full timestamp is required to ensure that the resolver will behave consistently across timezones.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nexclude-newer = \"2006-12-02T02:07:43Z\"\n</code></pre> <pre><code>[pip]\nexclude-newer = \"2006-12-02T02:07:43Z\"\n</code></pre>"},{"location":"reference/settings/#pip_exclude-newer-package","title":"<code>exclude-newer-package</code>","text":"<p>Limit candidate packages for specific packages to those that were uploaded prior to the given date.</p> <p>Accepts package-date pairs in a dictionary format.</p> <p>Default value: <code>None</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nexclude-newer-package = { tqdm = \"2022-04-04T00:00:00Z\" }\n</code></pre> <pre><code>[pip]\nexclude-newer-package = { tqdm = \"2022-04-04T00:00:00Z\" }\n</code></pre>"},{"location":"reference/settings/#pip_extra","title":"<code>extra</code>","text":"<p>Include optional dependencies from the specified extra; may be provided more than once.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nextra = [\"dev\", \"docs\"]\n</code></pre> <pre><code>[pip]\nextra = [\"dev\", \"docs\"]\n</code></pre>"},{"location":"reference/settings/#pip_extra-build-dependencies","title":"<code>extra-build-dependencies</code>","text":"<p>Additional build dependencies for packages.</p> <p>This allows extending the PEP 517 build environment for the project's dependencies with additional packages. This is useful for packages that assume the presence of packages like <code>pip</code>, and do not declare them as build dependencies.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nextra-build-dependencies = { pytest = [\"setuptools\"] }\n</code></pre> <pre><code>[pip]\nextra-build-dependencies = { pytest = [\"setuptools\"] }\n</code></pre>"},{"location":"reference/settings/#pip_extra-build-variables","title":"<code>extra-build-variables</code>","text":"<p>Extra environment variables to set when building certain packages.</p> <p>Environment variables will be added to the environment when building the specified packages.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict[str, dict[str, str]]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nextra-build-variables = { flash-attn = { FLASH_ATTENTION_SKIP_CUDA_BUILD = \"TRUE\" } }\n</code></pre> <pre><code>[pip]\nextra-build-variables = { flash-attn = { FLASH_ATTENTION_SKIP_CUDA_BUILD = \"TRUE\" } }\n</code></pre>"},{"location":"reference/settings/#pip_extra-index-url","title":"<code>extra-index-url</code>","text":"<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>index_url</code>. When multiple indexes are provided, earlier values take priority.</p> <p>To control uv's resolution strategy when multiple indexes are present, see <code>index_strategy</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre> <pre><code>[pip]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre>"},{"location":"reference/settings/#pip_find-links","title":"<code>find-links</code>","text":"<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (e.g., <code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre> <pre><code>[pip]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre>"},{"location":"reference/settings/#pip_fork-strategy","title":"<code>fork-strategy</code>","text":"<p>The strategy to use when selecting multiple versions of a given package across Python versions and platforms.</p> <p>By default, uv will optimize for selecting the latest version of each package for each supported Python version (<code>requires-python</code>), while minimizing the number of selected versions across platforms.</p> <p>Under <code>fewest</code>, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.</p> <p>Default value: <code>\"requires-python\"</code></p> <p>Possible values:</p> <ul> <li><code>\"fewest\"</code>: Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms</li> <li><code>\"requires-python\"</code>: Optimize for selecting latest supported version of each package, for each supported Python version</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nfork-strategy = \"fewest\"\n</code></pre> <pre><code>[pip]\nfork-strategy = \"fewest\"\n</code></pre>"},{"location":"reference/settings/#pip_generate-hashes","title":"<code>generate-hashes</code>","text":"<p>Include distribution hashes in the output file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ngenerate-hashes = true\n</code></pre> <pre><code>[pip]\ngenerate-hashes = true\n</code></pre>"},{"location":"reference/settings/#pip_group","title":"<code>group</code>","text":"<p>Include the following dependency groups.</p> <p>Default value: <code>None</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ngroup = [\"dev\", \"docs\"]\n</code></pre> <pre><code>[pip]\ngroup = [\"dev\", \"docs\"]\n</code></pre>"},{"location":"reference/settings/#pip_index-strategy","title":"<code>index-strategy</code>","text":"<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-index</code>). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.</p> <p>Default value: <code>\"first-index\"</code></p> <p>Possible values:</p> <ul> <li><code>\"first-index\"</code>: Only use results from the first index that returns a match for a given package name</li> <li><code>\"unsafe-first-match\"</code>: Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>\"unsafe-best-match\"</code>: Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nindex-strategy = \"unsafe-best-match\"\n</code></pre> <pre><code>[pip]\nindex-strategy = \"unsafe-best-match\"\n</code></pre>"},{"location":"reference/settings/#pip_index-url","title":"<code>index-url</code>","text":"<p>The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index provided by this setting is given lower priority than any indexes specified via <code>extra_index_url</code>.</p> <p>Default value: <code>\"https://pypi.org/simple\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre> <pre><code>[pip]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre>"},{"location":"reference/settings/#pip_keyring-provider","title":"<code>keyring-provider</code>","text":"<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Default value: <code>disabled</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nkeyring-provider = \"subprocess\"\n</code></pre> <pre><code>[pip]\nkeyring-provider = \"subprocess\"\n</code></pre>"},{"location":"reference/settings/#pip_link-mode","title":"<code>link-mode</code>","text":"<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>WARNING: The use of symlink link mode is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (<code>uv cache clean</code>) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.</p> <p>Default value: <code>\"clone\" (macOS) or \"hardlink\" (Linux, Windows)</code></p> <p>Possible values:</p> <ul> <li><code>\"clone\"</code>: Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"copy\"</code>: Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"hardlink\"</code>: Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"symlink\"</code>: Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nlink-mode = \"copy\"\n</code></pre> <pre><code>[pip]\nlink-mode = \"copy\"\n</code></pre>"},{"location":"reference/settings/#pip_no-annotate","title":"<code>no-annotate</code>","text":"<p>Exclude comment annotations indicating the source of each package from the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-annotate = true\n</code></pre> <pre><code>[pip]\nno-annotate = true\n</code></pre>"},{"location":"reference/settings/#pip_no-binary","title":"<code>no-binary</code>","text":"<p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-binary = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nno-binary = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_no-build","title":"<code>no-build</code>","text":"<p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-build = true\n</code></pre> <pre><code>[pip]\nno-build = true\n</code></pre>"},{"location":"reference/settings/#pip_no-build-isolation","title":"<code>no-build-isolation</code>","text":"<p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-build-isolation = true\n</code></pre> <pre><code>[pip]\nno-build-isolation = true\n</code></pre>"},{"location":"reference/settings/#pip_no-build-isolation-package","title":"<code>no-build-isolation-package</code>","text":"<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre> <pre><code>[pip]\nno-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre>"},{"location":"reference/settings/#pip_no-deps","title":"<code>no-deps</code>","text":"<p>Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting requirements file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-deps = true\n</code></pre> <pre><code>[pip]\nno-deps = true\n</code></pre>"},{"location":"reference/settings/#pip_no-emit-package","title":"<code>no-emit-package</code>","text":"<p>Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile's <code>--unsafe-package</code> option.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-emit-package = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nno-emit-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_no-extra","title":"<code>no-extra</code>","text":"<p>Exclude the specified optional dependencies if <code>all-extras</code> is supplied.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nall-extras = true\nno-extra = [\"dev\", \"docs\"]\n</code></pre> <pre><code>[pip]\nall-extras = true\nno-extra = [\"dev\", \"docs\"]\n</code></pre>"},{"location":"reference/settings/#pip_no-header","title":"<code>no-header</code>","text":"<p>Exclude the comment header at the top of output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-header = true\n</code></pre> <pre><code>[pip]\nno-header = true\n</code></pre>"},{"location":"reference/settings/#pip_no-index","title":"<code>no-index</code>","text":"<p>Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-index = true\n</code></pre> <pre><code>[pip]\nno-index = true\n</code></pre>"},{"location":"reference/settings/#pip_no-sources","title":"<code>no-sources</code>","text":"<p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-sources = true\n</code></pre> <pre><code>[pip]\nno-sources = true\n</code></pre>"},{"location":"reference/settings/#pip_no-strip-extras","title":"<code>no-strip-extras</code>","text":"<p>Include extras in the output file.</p> <p>By default, uv strips extras, as any packages pulled in by the extras are already included as dependencies in the output file directly. Further, output files generated with <code>--no-strip-extras</code> cannot be used as constraints files in <code>install</code> and <code>sync</code> invocations.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-strip-extras = true\n</code></pre> <pre><code>[pip]\nno-strip-extras = true\n</code></pre>"},{"location":"reference/settings/#pip_no-strip-markers","title":"<code>no-strip-markers</code>","text":"<p>Include environment markers in the output file generated by <code>uv pip compile</code>.</p> <p>By default, uv strips environment markers, as the resolution generated by <code>compile</code> is only guaranteed to be correct for the target environment.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-strip-markers = true\n</code></pre> <pre><code>[pip]\nno-strip-markers = true\n</code></pre>"},{"location":"reference/settings/#pip_only-binary","title":"<code>only-binary</code>","text":"<p>Only use pre-built wheels; don't build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nonly-binary = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nonly-binary = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_output-file","title":"<code>output-file</code>","text":"<p>Write the requirements generated by <code>uv pip compile</code> to the given <code>requirements.txt</code> file.</p> <p>If the file already exists, the existing versions will be preferred when resolving dependencies, unless <code>--upgrade</code> is also specified.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\noutput-file = \"requirements.txt\"\n</code></pre> <pre><code>[pip]\noutput-file = \"requirements.txt\"\n</code></pre>"},{"location":"reference/settings/#pip_prefix","title":"<code>prefix</code>","text":"<p>Install packages into <code>lib</code>, <code>bin</code>, and other top-level folders under the specified directory, as if a virtual environment were present at that location.</p> <p>In general, prefer the use of <code>--python</code> to install into an alternate environment, as scripts and other artifacts installed via <code>--prefix</code> will reference the installing interpreter, rather than any interpreter added to the <code>--prefix</code> directory, rendering them non-portable.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nprefix = \"./prefix\"\n</code></pre> <pre><code>[pip]\nprefix = \"./prefix\"\n</code></pre>"},{"location":"reference/settings/#pip_prerelease","title":"<code>prerelease</code>","text":"<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Default value: <code>\"if-necessary-or-explicit\"</code></p> <p>Possible values:</p> <ul> <li><code>\"disallow\"</code>: Disallow all pre-release versions</li> <li><code>\"allow\"</code>: Allow all pre-release versions</li> <li><code>\"if-necessary\"</code>: Allow pre-release versions if all versions of a package are pre-release</li> <li><code>\"explicit\"</code>: Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>\"if-necessary-or-explicit\"</code>: Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nprerelease = \"allow\"\n</code></pre> <pre><code>[pip]\nprerelease = \"allow\"\n</code></pre>"},{"location":"reference/settings/#pip_python","title":"<code>python</code>","text":"<p>The Python interpreter into which packages should be installed.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--python</code> option allows you to specify a different interpreter, which is intended for use in continuous integration (CI) environments or other automated workflows.</p> <p>Supported formats: - <code>3.10</code> looks for an installed Python 3.10 in the registry on Windows (see   <code>py --list-paths</code>), or <code>python3.10</code> on Linux and macOS. - <code>python3.10</code> or <code>python.exe</code> looks for a binary with the given name in <code>PATH</code>. - <code>/home/ferris/.local/bin/python3.10</code> uses the exact Python at the given path.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\npython = \"3.10\"\n</code></pre> <pre><code>[pip]\npython = \"3.10\"\n</code></pre>"},{"location":"reference/settings/#pip_python-platform","title":"<code>python-platform</code>","text":"<p>The platform for which requirements should be resolved.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aarch64-apple-darwin</code>.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\npython-platform = \"x86_64-unknown-linux-gnu\"\n</code></pre> <pre><code>[pip]\npython-platform = \"x86_64-unknown-linux-gnu\"\n</code></pre>"},{"location":"reference/settings/#pip_python-version","title":"<code>python-version</code>","text":"<p>The minimum Python version that should be supported by the resolved requirements (e.g., <code>3.8</code> or <code>3.8.17</code>).</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.8</code> is mapped to <code>3.8.0</code>.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\npython-version = \"3.8\"\n</code></pre> <pre><code>[pip]\npython-version = \"3.8\"\n</code></pre>"},{"location":"reference/settings/#pip_reinstall","title":"<code>reinstall</code>","text":"<p>Reinstall all packages, regardless of whether they're already installed. Implies <code>refresh</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nreinstall = true\n</code></pre> <pre><code>[pip]\nreinstall = true\n</code></pre>"},{"location":"reference/settings/#pip_reinstall-package","title":"<code>reinstall-package</code>","text":"<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>refresh-package</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nreinstall-package = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nreinstall-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_require-hashes","title":"<code>require-hashes</code>","text":"<p>Require a matching hash for each requirement.</p> <p>Hash-checking mode is all or nothing. If enabled, all requirements must be provided with a corresponding hash or set of hashes. Additionally, if enabled, all requirements must either be pinned to exact versions (e.g., <code>==1.0.0</code>), or be specified via direct URL.</p> <p>Hash-checking mode introduces a number of additional constraints:</p> <ul> <li>Git dependencies are not supported.</li> <li>Editable installations are not supported.</li> <li>Local dependencies are not supported, unless they point to a specific wheel (<code>.whl</code>) or   source archive (<code>.zip</code>, <code>.tar.gz</code>), as opposed to a directory.</li> </ul> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nrequire-hashes = true\n</code></pre> <pre><code>[pip]\nrequire-hashes = true\n</code></pre>"},{"location":"reference/settings/#pip_resolution","title":"<code>resolution</code>","text":"<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Default value: <code>\"highest\"</code></p> <p>Possible values:</p> <ul> <li><code>\"highest\"</code>: Resolve the highest compatible version of each package</li> <li><code>\"lowest\"</code>: Resolve the lowest compatible version of each package</li> <li><code>\"lowest-direct\"</code>: Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nresolution = \"lowest-direct\"\n</code></pre> <pre><code>[pip]\nresolution = \"lowest-direct\"\n</code></pre>"},{"location":"reference/settings/#pip_strict","title":"<code>strict</code>","text":"<p>Validate the Python environment, to detect packages with missing dependencies and other issues.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nstrict = true\n</code></pre> <pre><code>[pip]\nstrict = true\n</code></pre>"},{"location":"reference/settings/#pip_system","title":"<code>system</code>","text":"<p>Install packages into the system Python environment.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nsystem = true\n</code></pre> <pre><code>[pip]\nsystem = true\n</code></pre>"},{"location":"reference/settings/#pip_target","title":"<code>target</code>","text":"<p>Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ntarget = \"./target\"\n</code></pre> <pre><code>[pip]\ntarget = \"./target\"\n</code></pre>"},{"location":"reference/settings/#pip_torch-backend","title":"<code>torch-backend</code>","text":"<p>The backend to use when fetching packages in the PyTorch ecosystem.</p> <p>When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem, and will instead use the defined backend.</p> <p>For example, when set to <code>cpu</code>, uv will use the CPU-only PyTorch index; when set to <code>cu126</code>, uv will use the PyTorch index for CUDA 12.6.</p> <p>The <code>auto</code> mode will attempt to detect the appropriate PyTorch index based on the currently installed CUDA drivers.</p> <p>This option is in preview and may change in any future release.</p> <p>Default value: <code>null</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ntorch-backend = \"auto\"\n</code></pre> <pre><code>[pip]\ntorch-backend = \"auto\"\n</code></pre>"},{"location":"reference/settings/#pip_universal","title":"<code>universal</code>","text":"<p>Perform a universal resolution, attempting to generate a single <code>requirements.txt</code> output file that is compatible with all operating systems, architectures, and Python implementations.</p> <p>In universal mode, the current Python version (or user-provided <code>--python-version</code>) will be treated as a lower bound. For example, <code>--universal --python-version 3.7</code> would produce a universal resolution for Python 3.7 and later.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nuniversal = true\n</code></pre> <pre><code>[pip]\nuniversal = true\n</code></pre>"},{"location":"reference/settings/#pip_upgrade","title":"<code>upgrade</code>","text":"<p>Allow package upgrades, ignoring pinned versions in any existing output file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nupgrade = true\n</code></pre> <pre><code>[pip]\nupgrade = true\n</code></pre>"},{"location":"reference/settings/#pip_upgrade-package","title":"<code>upgrade-package</code>","text":"<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file.</p> <p>Accepts both standalone package names (<code>ruff</code>) and version specifiers (<code>ruff&lt;0.5.0</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nupgrade-package = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nupgrade-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_verify-hashes","title":"<code>verify-hashes</code>","text":"<p>Validate any hashes provided in the requirements file.</p> <p>Unlike <code>--require-hashes</code>, <code>--verify-hashes</code> does not require that all requirements have hashes; instead, it will limit itself to verifying the hashes of those requirements that do include them.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nverify-hashes = true\n</code></pre> <pre><code>[pip]\nverify-hashes = true\n</code></pre>"},{"location":"reference/internals/","title":"Internals","text":"<p>The internals section provides details about uv's internal components and implementation details.</p> <ul> <li>Resolver</li> </ul>"},{"location":"reference/internals/resolver/","title":"Resolver internals","text":"<p>Tip</p> <p>This document focuses on the internal workings of uv's resolver. For using uv, see the resolution concept documentation.</p>"},{"location":"reference/internals/resolver/#resolver","title":"Resolver","text":"<p>As defined in a textbook, resolution, or finding a set of version to install from a given set of requirements, is equivalent to the SAT problem and thereby NP-complete: in the worst case you have to try all possible combinations of all versions of all packages and there are no general, fast algorithms. In practice, this is misleading for a number of reasons:</p> <ul> <li>The slowest part of resolution in uv is loading package and version metadata, even if it's cached.</li> <li>There are many possible solutions, but some are preferable to others. For example, we generally   prefer using the latest version of packages.</li> <li>Package dependencies are complex, e.g., there are contiguous versions ranges \u2014 not arbitrary   boolean inclusion/exclusions of versions, adjacent releases often have the same or similar   requirements, etc.</li> <li>For most resolutions, the resolver doesn't need to backtrack, picking versions iteratively is   sufficient. If there are version preferences from a previous resolution, barely any work needs to   be done.</li> <li>When resolution fails, more information is needed than a message that there is no solution (as is   seen in SAT solvers). Instead, the resolver should produce an understandable error trace that   states which packages are involved in away to allows a user to remove the conflict.</li> <li>The most important heuristic for performance and user experience is determining the order in which   decisions are made through prioritization.</li> </ul> <p>uv uses pubgrub-rs, the Rust implementation of PubGrub, an incremental version solver. PubGrub in uv works in the following steps:</p> <ul> <li>Start with a partial solution that declares which packages versions have been selected and which   are undecided. Initially, only a virtual root package is decided.</li> <li>The highest priority package is selected from the undecided packages. Roughly, packages with URLs   (including file, git, etc.) have the highest priority, then those with more exact specifiers (such   as <code>==</code>), then those with less strict specifiers. Inside each category, packages are ordered by   when they were first seen (i.e. order in a file), making the resolution deterministic.</li> <li>A version is picked for the selected package. The version must works with all specifiers from the   requirements in the partial solution and must not be previously marked as incompatible. The   resolver prefers versions from a lockfile (<code>uv.lock</code> or <code>-o requirements.txt</code>) and those installed   in the current environment. Versions are checked from highest to lowest (unless using an   alternative resolution strategy).</li> <li>All requirements of the selected package version are added to the undecided packages. uv   prefetches their metadata in the background to improve performance.</li> <li>The process is either repeated with the next package unless a conflict is detected, in which the   resolver will backtrack. For example, the partial solution contains, among other packages, <code>a 2</code>   then <code>b 2</code> with the requirements <code>a 2 -&gt; c 1</code> and <code>b 2 -&gt; c 2</code>. No compatible version of <code>c</code> can   be found. PubGrub can determine this was caused by <code>a 2</code> and <code>b 2</code> and add the incompatibility   <code>{a 2, b 2}</code>, meaning that when either is picked, the other cannot be selected. The partial   solution is restored to <code>a 2</code> with the tracked incompatibility and the resolver attempts to pick a   new version for <code>b</code>.</li> </ul> <p>Eventually, the resolver either picks compatible versions for all packages (a successful resolution) or there is an incompatibility including the virtual \"root\" package which defines the versions requested by the user. An incompatibility with the root package indicates that whatever versions of the root dependencies and their transitive dependencies are picked, there will always be a conflict. From the incompatibilities tracked in PubGrub, an error message is constructed to enumerate the involved packages.</p> <p>Tip</p> <p>For more details on the PubGrub algorithm, see Internals of the PubGrub algorithm.</p> <p>In addition to PubGrub's base algorithm, we also use a heuristic that backtracks and switches the order of two packages if they have been conflicting too much.</p>"},{"location":"reference/internals/resolver/#forking","title":"Forking","text":"<p>Python resolvers historically didn't support backtracking, and even with backtracking, resolution was usually limited to single environment, which one specific architecture, operating system, Python version, and Python implementation. Some packages use contradictory requirements for different environments, for example:</p> <pre><code>numpy&gt;=2,&lt;3 ; python_version &gt;= \"3.11\"\nnumpy&gt;=1.16,&lt;2 ; python_version &lt; \"3.11\"\n</code></pre> <p>Since Python only allows one version of each package, a naive resolver would error here. Inspired by Poetry, uv uses a forking resolver: whenever there are multiple requirements for a package with different markers, the resolution is split.</p> <p>In the above example, the partial solution would be split into two resolutions, one for <code>python_version &gt;= \"3.11\"</code> and one for <code>python_version &lt; \"3.11\"</code>.</p> <p>If markers overlap or are missing a part of the marker space, the resolver splits additional times \u2014 there can be many forks per package. For example, given:</p> <pre><code>flask &gt; 1 ; sys_platform == 'darwin'\nflask &gt; 2 ; sys_platform == 'win32'\nflask\n</code></pre> <p>A fork would be created for <code>sys_platform == 'darwin'</code>, for <code>sys_platform == 'win32'</code>, and for <code>sys_platform != 'darwin' and sys_platform != 'win32'</code>.</p> <p>Forks can be nested, e.g., each fork is dependent on any previous forks that occurred. Forks with identical packages are merged to keep the number of forks low.</p> <p>Tip</p> <p>Forking can be observed in the logs of <code>uv lock -v</code> by looking for <code>Splitting resolution on ...</code>, <code>Solving split ... (requires-python: ...)</code> and <code>Split ... resolution took ...</code>.</p> <p>One difficulty in a forking resolver is that where splits occur is dependent on the order packages are seen, which is in turn dependent on the preferences, e.g., from <code>uv.lock</code>. So it is possible for the resolver to solve the requirements with specific forks, write this to the lockfile, and when the resolver is invoked again, a different solution is found because the preferences result in different fork points. To avoid this, the <code>resolution-markers</code> of each fork and each package that diverges between forks is written to the lockfile. When performing a new resolution, the forks from the lockfile are used to ensure the resolution is stable. When requirements change, new forks may be added to the saved forks.</p>"},{"location":"reference/internals/resolver/#wheel-tags","title":"Wheel tags","text":"<p>While uv's resolution is universal with respect to environment markers, this doesn't extend to wheel tags. Wheel tags can encode the Python version, Python implementation, operating system, and architecture. For example, <code>torch-2.4.0-cp312-cp312-manylinux2014_aarch64.whl</code> is only compatible with CPython 3.12 on arm64 Linux with <code>glibc&gt;=2.17</code> (per the <code>manylinux2014</code> policy), while <code>tqdm-4.66.4-py3-none-any.whl</code> works with all Python 3 versions and interpreters on any operating system and architecture. Most projects have a universally compatible source distribution that can be used when attempted to install a package that has no compatible wheel, but some packages, such as <code>torch</code>, don't publish a source distribution. In this case an installation on, e.g., Python 3.13, an uncommon operating system, or architecture, will fail and complain that there is no matching wheel.</p>"},{"location":"reference/internals/resolver/#marker-and-wheel-tag-filtering","title":"Marker and wheel tag filtering","text":"<p>In every fork, we know what markers are possible. In non-universal resolution, we know their exact values. In universal mode, we know at least a constraint for the python requirement, e.g., <code>requires-python = \"&gt;=3.12\"</code> means that <code>importlib_metadata; python_version &lt; \"3.10\"</code> can be discarded because it can never be installed. If additionally <code>tool.uv.environments</code> is set, we can filter out requirements with markers disjoint with those environments. Inside each fork, we can additionally filter by the fork markers.</p> <p>There is some redundancy in the marker expressions, where the value of one marker field implies the value of another field. Internally, we normalize <code>python_version</code> and <code>python_full_version</code> as well as known values of <code>platform_system</code> and <code>sys_platform</code> to a shared canonical representation, so they can match against each other.</p> <p>When we selected a version with a local tag (e.g.,<code>1.2.3+localtag</code>) and the wheels don't cover support for Windows, Linux and macOS, and there is a base version without tag (e.g.,<code>1.2.3</code>) with support for a missing platform, we fork trying to extend the platform support by using both the version with local tag and without local tag depending on the platform. This helps with packages that use the local tag for different hardware accelerators such as torch. While there is no 1:1 mapping between wheel tags and markers, we can do a mapping for well-known platforms, including Windows, Linux and macOS.</p>"},{"location":"reference/internals/resolver/#metadata-consistency","title":"Metadata consistency","text":"<p>uv, similar to poetry, requires that wheels of a single version of a package in a specific index have the same dependencies (<code>Requires-Dist</code> in <code>METADATA</code>), including wheels build from a source distribution. More generally, uv assumes that each wheel has the same <code>METADATA</code> file in its dist-info directory.</p> <p>numpy 2.3.2 for example has 73 wheels. Without this assumption, uv would have to make 73 network requests to fetch its metadata, instead of a single one. Another problem we would have without metadata consistency is the lack of a 1:1 mapping between markers and wheel tags. Wheel tags can include the glibc version while the PEP 508 markers cannot represent it. If wheels had different metadata, a universal resolver would have to track two dimensions simultaneously, PEP 508 markers and wheel tags. This would increase complexity a lot, and the correspondence between the two is not properly specified. PEP 508 markers have been introduced specifically to allow different dependencies between different platform, i.e. to have a single dependency declaration for all wheels, such as <code>project.[optional-]dependencies</code>. If the markers are not sufficient, we should extend PEP 508 markers instead of using a parallel system of wheel tags.</p> <p>Another aspect of metadata consistency is that a source distribution must build into a wheel with the same metadata as the wheels, or if there are no wheels, into the same metadata each time. If this assumption is violated, sound dependency locking becomes impossible: Consider a package A has a source distribution. During resolution, we build A v1 and obtain the dependencies <code>B&gt;=2,&lt;3</code>. We lock <code>A==1</code> and <code>B==2</code>. When installing the lockfile on the target machine, we build again and obtain dependencies <code>B&gt;=3,&lt;4</code> and <code>C&gt;=1,&lt;2</code>. The lockfile fails to install: Due to the changed constraints, the locked version of <code>B</code> is incompatible, and there's no locked candidate for <code>C</code>. Re-resolving after this would both be a reproducibility problem (the lockfile is effectively ignored) and a security concern (<code>C</code> has not been reviewed, neither was <code>B==3</code>). It's possible to fail on installation if that happens, but a late error, possibly during deployment, is a bad user experience. There is already a case where uv fails on installation, packages with no source distribution and only platform specific wheels incompatible with the current platform. While uv has required environments as mitigation, this requires a not well known configuration option, and questions around (un)supported environments are one of the most common problem for uv users. A similar situation with source distributions should be avoided.</p> <p>While older versions of torch and tensorflow had inconsistent metadata, all recent versions have consistent metadata, and we are not aware of any major package with inconsistent metadata. There is however no requirement in the Python packaging standards that metadata must be consistent, and requests to enforce this in the standards have been rejected (https://discuss.python.org/t/enforcing-consistent-metadata-for-packages/50008).</p> <p>There are packages that have native code that links against the native code in another package, such as torch. These package may support building against a range of torch versions, but once built, they are constrained to a specific torch version, and the runtime torch version must match the build-time version. These are currently a pain point across all package managers, as all major package managers from pip to uv cache source distribution builds. uv supports multiple builds depending on the version of the already installed package using  <code>tool.uv.extra-build-dependencies</code> with <code>match-runtime = true</code>. This is a workaround that needs to be made on the user side for each affected package, instead of library developers declaring this requirement, which would be possible with native standards support.</p>"},{"location":"reference/internals/resolver/#requires-python","title":"Requires-python","text":"<p>To ensure that a resolution with <code>requires-python = \"&gt;=3.9\"</code> can actually be installed for the included Python versions, uv requires that all dependencies have the same minimum Python version. Package versions that declare a higher minimum Python version, e.g., <code>requires-python = \"&gt;=3.10\"</code>, are rejected, because a resolution with that version can't be installed on Python 3.9. This ensures that when you are on an old Python version, you can install old packages, instead of getting newer packages that require newer Python syntax or standard library features.</p> <p>uv ignores upper-bounds on <code>requires-python</code>, with special handling for packages with only ABI-specific wheels. For example, if a package declares <code>requires-python = \"&gt;=3.8,&lt;4\"</code>, the <code>&lt;4</code> part is ignored. There is a detailed discussion with drawbacks and alternatives in #4022 and this DPO thread, this section summarizes the aspects most relevant to uv's design.</p> <p>For most projects, it's not possible to determine whether they will be compatible with a new version before it's released, so blocking newer versions in advance would block users from upgrading or testing newer Python versions. The exceptions are packages which use the unstable C ABI or internals of CPython such as its bytecode format.</p> <p>Introducing a <code>requires-python</code> upper bound to a project that previously wasn't using one will not prevent the project from being used on a too recent Python version. Instead of failing, the resolver will pick an older version without the bound, circumventing the bound.</p> <p>For the resolution to be as universally installable as possible, uv ensures that the selected dependency versions are compatible with the <code>requires-python</code> range of the project. For example, for a project with <code>requires-python = \"&gt;=3.12\"</code>, uv will not use a dependency version with <code>requires-python = \"&gt;=3.13\"</code>, as otherwise the resolution is not installable on Python 3.12, which the project declares to support. Applying the same logic to upper bounds means that bumping the upper Python version bound on a project makes it compatible with less dependency versions, potentially failing to resolve when no version of a dependency supports the required range. (Bumping the lower Python version bound has the inverse effect, it only increases the set of supported dependency versions.)</p> <p>Note that this is different for Conda, as the Conda solver also determines the Python version, so it can choose a lower Python version instead. Conda can also change metadata after a release, so it can update compatibility for a new Python version, while metadata on PyPI cannot be changed once published.</p> <p>Ignoring an upper bound is a problem for packages such as numpy which use the version-dependent C API of CPython. As of writing, each numpy release support 4 Python minor versions, e.g., numpy 2.0.0 has wheels for CPython 3.9 through 3.12 and declares <code>requires-python = \"&gt;=3.9\"</code>, while numpy 2.1.0 has wheels for CPython 3.10 through 3.13 and declares <code>requires-python = \"&gt;=3.10\"</code>. This means that when uv resolves a <code>numpy&gt;=2,&lt;3</code> requirement in a project with <code>requires-python = \"&gt;=3.9\"</code>, it selects numpy 2.0.0 and the lockfile doesn't install on Python 3.13 or newer. To alleviate this, whenever uv rejects a version that requires a newer Python version, we fork by splitting the resolution markers on that Python version. This behavior can be controlled by <code>--fork-strategy</code>. In the example case, upon encountering numpy 2.1.0 we fork into Python versions <code>&gt;=3.9,&lt;3.10</code> and <code>&gt;=3.10</code> and resolve two different numpy versions:</p> <pre><code>numpy==2.0.0; python_version &gt;= \"3.9\" and python_version &lt; \"3.10\"\nnumpy==2.1.0; python_version &gt;= \"3.10\"\n</code></pre> <p>There's one case where uv does consider the upper bound: When the project uses an upper bound on requires Python, such as <code>requires-python = \"==3.13.*\"</code> for an application that only deploys to Python 3.13. uv prunes wheels from the lockfile that are outside the range (e.g., <code>cp312</code> and <code>cp314</code>) in a post-processing step, which does not influence the resolution itself.</p>"},{"location":"reference/internals/resolver/#url-dependencies","title":"URL dependencies","text":"<p>In uv, a dependency can either be a registry dependency, a package with a version specifier or the plain package name, or a URL dependency. All requirements in the form <code>{name} @ {url}</code> are URL dependencies, and also all dependencies that have a <code>git</code>,<code>url</code>, <code>path</code>, or <code>workspace</code> source.</p> <p>When a URL is declared for a package, uv pins the package to this URL, and the version this URL implies. If there are two conflicting URLs for a package, the resolver errors, as a URL can only be declared as something akin to an exact <code>==</code> pin, and not as list of URLs. A list of URLs is supported through flat indexes instead.</p> <p>uv requires that URLs are either declared directly (in the project, in a workspace member, in a constraint, or in an override, any location that is discovered directly), or by other URL dependencies. uv discovers all URL dependencies and their transitive URL dependencies ahead of the resolution and pins all packages to the URLs and the versions they imply.</p> <p>uv does not allow URLs in index packages. This has two reasons: One is a security and predictability aspect, that forbids registry distributions to point to non-registry distributions and helps auditing which URLs can be accessed. For example, when only using one index URL and no URL dependencies, uv will not install any package from outside the index.</p> <p>The other is that URLs can add additional versions to the resolution. Say the root package depends on foo, bar, and baz, all registry dependencies. foo depends on <code>bar &gt;= 2</code>, but bar only has version 1 on the index. With the incremental approach, this is an error: foo cannot be fulfilled, there is a resolver error. If URLs on index packages were allowed, it could be that there is a version of baz declares a dependency on baz-core and that has a version that declares <code>bar @ https://example.com/bar-2-py3-none-any.whl</code> adding a version of bar that makes requirements resolve. If a dependency can add new versions, discarding any version in the resolver would require looking at all possible versions of all direct and transitive dependencies. This breaks the core assumption incremental resolvers make that the set of versions for a package is static and would require to always fetch the metadata for all possibly reachable version.</p>"},{"location":"reference/internals/resolver/#prioritization","title":"Prioritization","text":"<p>Prioritization is important for both performance and for better resolutions.</p> <p>If we try many versions we have to later discard, resolution is slow, both because we have to read metadata we didn't need and because we have to track a lot of (conflict) information for this discarded subtree.</p> <p>There are expectations about which solution uv should choose, even if the version constraints allow multiple solutions. Generally, a desirable solution prioritizes use the highest versions for direct dependencies over those for indirect dependencies, it avoids backtracking to very old versions and can be installed on a target machine.</p> <p>Internally, uv represent each package with a given package name as a number of virtual packages, for example, one package for each activated extra, for dependency groups, or for having a marker. While PubGrub needs to choose a version for each virtual package, uv's prioritization works on the package name level.</p> <p>Whenever we encounter a requirement on a package, we match it to a priority. The root package and URL requirements have the highest priority, then singleton requirements with the <code>==</code> operator, as their version can be directly determined, then highly conflicting packages (next paragraph), and finally all other packages. Inside each category, packages are sorted by when they were first encountered, creating a breadth first search that prioritizes direct dependencies including workspace dependencies over transitive dependencies.</p> <p>A common problem is that we have a package A with a higher priority than package B, and B is only compatible with older versions of A. We decide the latest version for package A. Each time we decide a version for B, it is immediately discarded due to the conflict with A. We have to try all possible versions of B, until we have either exhausted the possible range (slow), pick a very old version that doesn't depend on A, but most likely isn't compatible with the project either (bad) or fail to build a very old version (bad). Once we see such conflict happen five time, we set A and B to special highly-conflicting priority levels, and set them so that B is decided before A. We then manually backtrack to a state before deciding A, in the next iteration now deciding B instead of A. See #8157 and #9843 for a more detailed description with real world examples.</p>"},{"location":"reference/policies/","title":"Policies","text":"<ul> <li>Versioning</li> <li>Platform support</li> <li>License</li> </ul>"},{"location":"reference/policies/license/","title":"License","text":"<p>uv is licensed under either of</p> <ul> <li>Apache License, Version 2.0</li> </ul> <p>LICENSE-APACHE or   https://www.apache.org/licenses/LICENSE-2.0</p> <ul> <li>MIT License</li> </ul> <p>LICENSE-MIT or   https://opensource.org/licenses/MIT</p> <p>at your option.</p> <p>Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.</p>"},{"location":"reference/policies/platforms/","title":"Platform support","text":"<p>uv has Tier 1 support for the following platforms:</p> <ul> <li>macOS (Apple Silicon)</li> <li>macOS (x86_64)</li> <li>Linux (x86_64)</li> <li>Windows (x86_64)</li> </ul> <p>uv is continuously built, tested, and developed against its Tier 1 platforms. Inspired by the Rust project, Tier 1 can be thought of as \"guaranteed to work\".</p> <p>uv has Tier 2 support (\"guaranteed to build\") for the following platforms:</p> <ul> <li>Linux (PPC64)</li> <li>Linux (PPC64LE)</li> <li>Linux (RISC-V64)</li> <li>Linux (aarch64)</li> <li>Linux (armv7)</li> <li>Linux (i686)</li> <li>Linux (s390x)</li> <li>Windows (arm64)</li> </ul> <p>uv ships pre-built wheels to PyPI for its Tier 1 and Tier 2 platforms. However, while Tier 2 platforms are continuously built, they are not continuously tested or developed against, and so stability may vary in practice.</p> <p>Beyond the Tier 1 and Tier 2 platforms, uv is known to build on i686 Windows, and known not to build on aarch64 Windows, but does not consider either platform to be supported at this time. The minimum supported Windows versions are Windows 10 and Windows Server 2016, following Rust's own Tier 1 support.</p>"},{"location":"reference/policies/platforms/#macos-versions","title":"macOS versions","text":"<p>uv supports macOS 13+ (Ventura).</p> <p>uv is known to work on macOS 12, but requires installation of a <code>realpath</code> executable.</p>"},{"location":"reference/policies/platforms/#python-support","title":"Python support","text":"<p>uv supports and is tested against the following Python versions:</p> <ul> <li>3.8</li> <li>3.9</li> <li>3.10</li> <li>3.11</li> <li>3.12</li> <li>3.13</li> <li>3.14</li> </ul> <p>uv has Tier 1 support for the following Python implementations:</p> <ul> <li>CPython</li> </ul> <p>As with platforms, Tier 1 support can be thought of \"guaranteed to work\". uv supports managed installations of these implementations, and the builds are maintained by Astral.</p> <p>uv has Tier 2 support for:</p> <ul> <li>PyPy</li> <li>GraalPy</li> </ul> <p>uv is \"expected to work\" with these implementations. uv also supports managed installations of these Python implementations, but the builds are not maintained by Astral.</p> <p>uv has Tier 3 support for:</p> <ul> <li>Pyston</li> <li>Pyodide</li> </ul> <p>uv \"should work\" with these implementations, but stability may vary.</p>"},{"location":"reference/policies/versioning/","title":"Versioning","text":"<p>uv uses a custom versioning scheme in which the minor version number is bumped for breaking changes, and the patch version number is bumped for bug fixes, enhancements, and other non-breaking changes.</p> <p>uv is widely used in production. However, we value the ability to iterate on new features quickly and gather changes that could be breaking into clearly marked releases.</p> <p>Once uv v1.0.0 is released, the versioning scheme will adhere to Semantic Versioning. There is not a particular goal that must be achieved for uv to reach this milestone.</p> <p>uv's changelog can be viewed on GitHub.</p>"},{"location":"reference/policies/versioning/#cache-versioning","title":"Cache versioning","text":"<p>Cache versions are considered internal to uv, and so may be changed in a minor or patch release. See Cache versioning for more.</p>"},{"location":"reference/policies/versioning/#lockfile-versioning","title":"Lockfile versioning","text":"<p>The <code>uv.lock</code> schema version is considered part of the public API, and so will only be incremented in a minor release as a breaking change. See Lockfile versioning for more.</p>"},{"location":"reference/policies/versioning/#minimum-supported-rust-version","title":"Minimum supported Rust version","text":"<p>The minimum supported Rust version required to compile uv is listed in the <code>rust-version</code> key of the <code>[workspace.package]</code> section in <code>Cargo.toml</code>. It may change in any release (minor or patch). It will never be newer than N-2 Rust versions, where N is the latest stable version. For example, if the latest stable Rust version is 1.85, uv's minimum supported Rust version will be at most 1.83.</p> <p>This is only relevant to users who build uv from source. Installing uv from the Python package index usually installs a pre-built binary and does not require Rust compilation.</p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":"<p>The troubleshooting section provides information about investigating failures in uv:</p> <ul> <li>Build failures: Understanding common causes of package build failures.</li> <li>Reproducible examples: How to write a minimal reproducible example   for a uv issue.</li> </ul>"},{"location":"reference/troubleshooting/build-failures/","title":"Troubleshooting build failures","text":"<p>uv needs to build packages when there is not a compatible wheel (a pre-built distribution of the package) available. Building packages can fail for many reasons, some of which may be unrelated to uv itself.</p>"},{"location":"reference/troubleshooting/build-failures/#recognizing-a-build-failure","title":"Recognizing a build failure","text":"<p>An example build failure can be produced by trying to install and old version of numpy on a new, unsupported version of Python:</p> <pre><code>$ uv pip install -p 3.13 'numpy&lt;1.20'\nResolved 1 package in 62ms\n  \u00d7 Failed to build `numpy==1.19.5`\n  \u251c\u2500\u25b6 The build backend returned an error\n  \u2570\u2500\u25b6 Call to `setuptools.build_meta:__legacy__.build_wheel()` failed (exit status: 1)\n      [stderr]\n      Traceback (most recent call last):\n        File \"&lt;string&gt;\", line 8, in &lt;module&gt;\n          from setuptools.build_meta import __legacy__ as backend\n        File \"/home/konsti/.cache/uv/builds-v0/.tmpi4bgKb/lib/python3.13/site-packages/setuptools/__init__.py\", line 9, in &lt;module&gt;\n          import distutils.core\n      ModuleNotFoundError: No module named 'distutils'\n      hint: `distutils` was removed from the standard library in Python 3.12. Consider adding a constraint (like `numpy &gt;1.19.5`) to avoid building a version of `numpy` that depends\n      on `distutils`.\n</code></pre> <p>Notice that the error message is prefaced by \"The build backend returned an error\".</p> <p>The build failure includes the <code>[stderr]</code> (and <code>[stdout]</code>, if present) from the build backend that was used for the build. The error logs are not from uv itself.</p> <p>The message following the <code>\u2570\u2500\u25b6</code> is a hint provided by uv, to help resolve common build failures. A hint will not be available for all build failures.</p>"},{"location":"reference/troubleshooting/build-failures/#confirming-that-a-build-failure-is-specific-to-uv","title":"Confirming that a build failure is specific to uv","text":"<p>Build failures are usually related to your system and the build backend. It is rare that a build failure is specific to uv. You can confirm that the build failure is not related to uv by attempting to reproduce it with pip:</p> <pre><code>$ uv venv -p 3.13 --seed\n$ source .venv/bin/activate\n$ pip install --use-pep517 --no-cache --force-reinstall 'numpy==1.19.5'\nCollecting numpy==1.19.5\n  Using cached numpy-1.19.5.zip (7.3 MB)\n  Installing build dependencies ... done\n  Getting requirements to build wheel ... done\nERROR: Exception:\nTraceback (most recent call last):\n  ...\n  File \"/Users/example/.cache/uv/archive-v0/3783IbOdglemN3ieOULx2/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_impl.py\", line 321, in _call_hook\n    raise BackendUnavailable(data.get('traceback', ''))\npip._vendor.pyproject_hooks._impl.BackendUnavailable: Traceback (most recent call last):\n  File \"/Users/example/.cache/uv/archive-v0/3783IbOdglemN3ieOULx2/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 77, in _build_backend\n    obj = import_module(mod_path)\n  File \"/Users/example/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/importlib/__init__.py\", line 88, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1387, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1360, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1310, in _find_and_load_unlocked\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 488, in _call_with_frames_removed\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1387, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1360, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1331, in _find_and_load_unlocked\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 935, in _load_unlocked\n  File \"&lt;frozen importlib._bootstrap_external&gt;\", line 1022, in exec_module\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 488, in _call_with_frames_removed\n  File \"/private/var/folders/6p/k5sd5z7j31b31pq4lhn0l8d80000gn/T/pip-build-env-vdpjme7d/overlay/lib/python3.13/site-packages/setuptools/__init__.py\", line 9, in &lt;module&gt;\n    import distutils.core\nModuleNotFoundError: No module named 'distutils'\n</code></pre> <p>Important</p> <p>The <code>--use-pep517</code> flag should be included with the <code>pip install</code> invocation to ensure the same build isolation behavior. uv always uses build isolation by default.</p> <p>We also recommend including the <code>--force-reinstall</code> and <code>--no-cache</code> options when reproducing failures.</p> <p>Since this build failure occurs in pip too, it is not likely to be a bug with uv.</p> <p>If a build failure is reproducible with another installer, you should investigate upstream (in this example, <code>numpy</code> or <code>setuptools</code>), find a way to avoid building the package in the first place, or make the necessary adjustments to your system for the build to succeed.</p>"},{"location":"reference/troubleshooting/build-failures/#why-does-uv-build-a-package","title":"Why does uv build a package?","text":"<p>When generating the cross-platform lockfile, uv needs to determine the dependencies of all packages, even those only installed on other platforms. uv tries to avoid package builds during resolution. It uses any wheel if exist for that version, then tries to find static metadata in the source distribution (mainly pyproject.toml with static <code>project.version</code>, <code>project.dependencies</code> and <code>project.optional-dependencies</code> or METADATA v2.2+). Only if all of that fails, it builds the package.</p> <p>When installing, uv needs to have a wheel for the current platform for each package. If no matching wheel exists in the index, uv tries to build the source distribution.</p> <p>You can check which wheels exist for a PyPI project under \u201cDownload Files\u201d, e.g. https://pypi.org/project/numpy/2.1.1.md#files. Wheels with <code>...-py3-none-any.whl</code> filenames work everywhere, others have the operating system and platform in the filename. In the linked <code>numpy</code> example, you can see that there are pre-built distributions for Python 3.10 to 3.13 on macOS, Linux and Windows.</p>"},{"location":"reference/troubleshooting/build-failures/#common-build-failures","title":"Common build failures","text":"<p>The following examples demonstrate common build failures and how to resolve them.</p>"},{"location":"reference/troubleshooting/build-failures/#command-is-not-found","title":"Command is not found","text":"<p>If the build error mentions a missing command, for example, <code>gcc</code>:</p> <pre><code>\u00d7 Failed to build `pysha3==1.0.2`\n\u251c\u2500\u25b6 The build backend returned an error\n\u2570\u2500\u25b6 Call to `setuptools.build_meta:__legacy__.build_wheel` failed (exit status: 1)\n\n    [stdout]\n    running bdist_wheel\n    running build\n    running build_py\n    creating build/lib.linux-x86_64-cpython-310\n    copying sha3.py -&gt; build/lib.linux-x86_64-cpython-310\n    running build_ext\n    building '_pysha3' extension\n    creating build/temp.linux-x86_64-cpython-310/Modules/_sha3\n    gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DPY_WITH_KECCAK=1 -I/root/.cache/uv/builds-v0/.tmp8V4iEk/include -I/usr/local/include/python3.10 -c\n    Modules/_sha3/sha3module.c -o build/temp.linux-x86_64-cpython-310/Modules/_sha3/sha3module.o\n\n    [stderr]\n    error: command 'gcc' failed: No such file or directory\n</code></pre> <p>Then, you'll need to install it with your system package manager, e.g., to resolve the error above:</p> <pre><code>$ apt install gcc\n</code></pre> <p>Tip</p> <p>When using the uv-managed Python versions, it's common to need <code>clang</code> installed instead of <code>gcc</code>.</p> <p>Many Linux distributions provide a package that includes all the common build dependencies. You can address most build requirements by installing it, e.g., for Debian or Ubuntu:</p> <pre><code>$ apt install build-essential\n</code></pre>"},{"location":"reference/troubleshooting/build-failures/#header-or-library-is-missing","title":"Header or library is missing","text":"<p>If the build error mentions a missing header or library, e.g., a <code>.h</code> file, then you'll need to install it with your system package manager.</p> <p>For example, installing <code>pygraphviz</code> requires Graphviz to be installed:</p> <pre><code>\u00d7 Failed to build `pygraphviz==1.14`\n\u251c\u2500\u25b6 The build backend returned an error\n\u2570\u2500\u25b6 Call to `setuptools.build_meta.build_wheel` failed (exit status: 1)\n\n  [stdout]\n  running bdist_wheel\n  running build\n  running build_py\n  ...\n  gcc -fno-strict-overflow -Wsign-compare -DNDEBUG -g -O3 -Wall -fPIC -DSWIG_PYTHON_STRICT_BYTE_CHAR -I/root/.cache/uv/builds-v0/.tmpgLYPe0/include -I/usr/local/include/python3.12 -c pygraphviz/graphviz_wrap.c -o\n  build/temp.linux-x86_64-cpython-312/pygraphviz/graphviz_wrap.o\n\n  [stderr]\n  ...\n  pygraphviz/graphviz_wrap.c:9: warning: \"SWIG_PYTHON_STRICT_BYTE_CHAR\" redefined\n      9 | #define SWIG_PYTHON_STRICT_BYTE_CHAR\n        |\n  &lt;command-line&gt;: note: this is the location of the previous definition\n  pygraphviz/graphviz_wrap.c:3023:10: fatal error: graphviz/cgraph.h: No such file or directory\n    3023 | #include \"graphviz/cgraph.h\"\n        |          ^~~~~~~~~~~~~~~~~~~\n  compilation terminated.\n  error: command '/usr/bin/gcc' failed with exit code 1\n\n  hint: This error likely indicates that you need to install a library that provides \"graphviz/cgraph.h\" for `pygraphviz@1.14`\n</code></pre> <p>To resolve this error on Debian, you'd install the <code>libgraphviz-dev</code> package:</p> <pre><code>$ apt install libgraphviz-dev\n</code></pre> <p>Note that installing the <code>graphviz</code> package is not sufficient, the development headers need to be installed.</p> <p>Tip</p> <p>To resolve an error where <code>Python.h</code> is missing, install the <code>python3-dev</code> package.</p>"},{"location":"reference/troubleshooting/build-failures/#module-is-missing-or-cannot-be-imported","title":"Module is missing or cannot be imported","text":"<p>If the build error mentions a failing import, consider disabling build isolation.</p> <p>For example, some packages assume that <code>pip</code> is available without declaring it as a build dependency:</p> <pre><code>  \u00d7 Failed to build `chumpy==0.70`\n  \u251c\u2500\u25b6 The build backend returned an error\n  \u2570\u2500\u25b6 Call to `setuptools.build_meta:__legacy__.build_wheel` failed (exit status: 1)\n\n    [stderr]\n    Traceback (most recent call last):\n      File \"&lt;string&gt;\", line 9, in &lt;module&gt;\n    ModuleNotFoundError: No module named 'pip'\n\n    During handling of the above exception, another exception occurred:\n\n    Traceback (most recent call last):\n      File \"&lt;string&gt;\", line 14, in &lt;module&gt;\n      File \"/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py\", line 334, in get_requires_for_build_wheel\n        return self._get_build_requires(config_settings, requirements=[])\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n      File \"/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py\", line 304, in _get_build_requires\n        self.run_setup()\n      File \"/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py\", line 522, in run_setup\n        super().run_setup(setup_script=setup_script)\n      File \"/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py\", line 320, in run_setup\n        exec(code, locals())\n      File \"&lt;string&gt;\", line 11, in &lt;module&gt;\n    ModuleNotFoundError: No module named 'pip'\n</code></pre> <p>To resolve this error, pre-install the build dependencies then disable build isolation for the package:</p> <pre><code>$ uv pip install pip setuptools\n$ uv pip install chumpy --no-build-isolation-package chumpy\n</code></pre> <p>Note you will need to install the missing package, e.g., <code>pip</code>, and all the other build dependencies of the package, e.g, <code>setuptools</code>.</p>"},{"location":"reference/troubleshooting/build-failures/#old-version-of-the-package-is-built","title":"Old version of the package is built","text":"<p>If a package fails to build during resolution and the version that failed to build is older than the version you want to use, try adding a constraint with a lower bound (e.g., <code>numpy&gt;=1.17</code>). Sometimes, due to algorithmic limitations, the uv resolver tries to find a fitting version using unreasonably old packages, which can be prevented by using lower bounds.</p> <p>For example, when resolving the following dependencies on Python 3.10, uv attempts to build an old version of <code>apache-beam</code>.</p> requirements.txt<pre><code>dill&lt;0.3.9,&gt;=0.2.2\napache-beam&lt;=2.49.0\n</code></pre> <pre><code>\u00d7 Failed to build `apache-beam==2.0.0`\n\u251c\u2500\u25b6 The build backend returned an error\n\u2570\u2500\u25b6 Call to `setuptools.build_meta:__legacy__.build_wheel` failed (exit status: 1)\n\n    [stderr]\n    ...\n</code></pre> <p>Adding a lower bound constraint, e.g., <code>apache-beam&lt;=2.49.0,&gt;2.30.0</code>, resolves this build failure as uv will avoid using an old version of <code>apache-beam</code>.</p> <p>Constraints can also be defined for indirect dependencies using <code>constraints.txt</code> files or the <code>constraint-dependencies</code> setting.</p>"},{"location":"reference/troubleshooting/build-failures/#old-version-of-a-build-dependency-is-used","title":"Old Version of a build dependency is used","text":"<p>If a package fails to build because <code>uv</code> selects an incompatible or outdated version of a build-time dependency, you can enforce constraints specifically for build dependencies. The <code>build-constraint-dependencies</code> setting (or an analogous <code>build-constraints.txt</code> file) can be used to ensure that <code>uv</code> selects an appropriate version of a given build requirements.</p> <p>For example, the issue described in #5551 could be addressed by specifying a build constraint that excludes <code>setuptools</code> version <code>72.0.0</code>:</p> pyproject.toml<pre><code>[tool.uv]\n# Prevent setuptools version 72.0.0 from being used as a build dependency.\nbuild-constraint-dependencies = [\"setuptools!=72.0.0\"]\n</code></pre> <p>The build constraint will thus ensure that any package requiring <code>setuptools</code> during the build process will avoid using the problematic version, preventing build failures caused by incompatible build dependencies.</p>"},{"location":"reference/troubleshooting/build-failures/#package-is-only-needed-for-an-unused-platform","title":"Package is only needed for an unused platform","text":"<p>If locking fails due to building a package from a platform you do not need to support, consider limiting resolution to your supported platforms.</p>"},{"location":"reference/troubleshooting/build-failures/#package-does-not-support-all-python-versions","title":"Package does not support all Python versions","text":"<p>If you support a large range of Python versions, consider using markers to use older versions for older Python versions and newer versions for newer Python version. For example, <code>numpy</code> only supports four Python minor version at a time, so to support a wider range of Python versions, e.g., Python 3.8 to 3.13, the <code>numpy</code> requirement needs to be split:</p> <pre><code>numpy&gt;=1.23; python_version &gt;= \"3.10\"\nnumpy&lt;1.23; python_version &lt; \"3.10\"\n</code></pre>"},{"location":"reference/troubleshooting/build-failures/#package-is-only-usable-on-a-specific-platform","title":"Package is only usable on a specific platform","text":"<p>If locking fails due to building a package that is only usable on another platform, you can provide dependency metadata manually to skip the build. uv can not verify this information, so it is important to specify correct metadata when using this override.</p>"},{"location":"reference/troubleshooting/reproducible-examples/","title":"Reproducible examples","text":""},{"location":"reference/troubleshooting/reproducible-examples/#why-reproducible-examples-are-important","title":"Why reproducible examples are important","text":"<p>A minimal reproducible example (MRE) is essential for fixing bugs. Without an example that can be used to reproduce the problem, a maintainer cannot debug it or test if it is fixed. If the example is not minimal, i.e., if it includes lots of content which is not related to the issue, it can take a maintainer much longer to identify the root cause of the problem.</p>"},{"location":"reference/troubleshooting/reproducible-examples/#how-to-write-a-reproducible-example","title":"How to write a reproducible example","text":"<p>When writing a reproducible example, the goal is to provide all the context necessary for someone else to reproduce your example. This includes:</p> <ul> <li>The platform you're using (e.g., the operating system and architecture)</li> <li>Any relevant system state (e.g., explicitly set environment variables)</li> <li>The version of uv</li> <li>The version of other relevant tools</li> <li>The relevant files (the <code>uv.lock</code>, <code>pyproject.toml</code>, etc.)</li> <li>The commands to run</li> </ul> <p>To ensure your reproduction is minimal, remove as many dependencies, settings, and files as possible. Be sure to test your reproduction before sharing it. We recommend including verbose logs from your reproduction; they may differ on your machine in a critical way. Using a Gist can be helpful for very long logs.</p> <p>Below, we'll cover several specific strategies for creating and sharing reproducible examples.</p> <p>Tip</p> <p>There's a great guide to the basics of creating MREs on Stack Overflow.</p>"},{"location":"reference/troubleshooting/reproducible-examples/#strategies-for-reproducible-examples","title":"Strategies for reproducible examples","text":""},{"location":"reference/troubleshooting/reproducible-examples/#docker-image","title":"Docker image","text":"<p>Writing a Docker image is often the best way to share a reproducible example because it is entirely self-contained. This means that the state from the reproducer's system does not affect the problem.</p> <p>Note</p> <p>Using a Docker image is only feasible if the issue is reproducible on Linux. When using macOS, it's prudent to ensure your image is not reproducible on Linux but some bugs are specific to the operating system. While using Docker to run Windows containers is feasible, it's not commonplace. These sorts of bugs are expected to be reported as a script instead.</p> <p>When writing a Docker MRE with uv, it's best to start with one of uv's Docker images. When doing so, be sure to pin to a specific version of uv.</p> <pre><code>FROM ghcr.io/astral-sh/uv:0.5.24-debian-slim\n</code></pre> <p>While Docker images are isolated from the system, the build will use your system's architecture by default. When sharing a reproduction, you can explicitly set the platform to ensure a reproducer gets the expected behavior. uv publishes images for <code>linux/amd64</code> (e.g., Intel or AMD) and <code>linux/arm64</code> (e.g., Apple M Series or ARM)</p> <pre><code>FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim\n</code></pre> <p>Docker images are best for reproducing issues that can be constructed with commands, e.g.:</p> <pre><code>FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim\n\nRUN uv init /mre\nWORKDIR /mre\nRUN uv add pydantic\nRUN uv sync\nRUN uv run -v python -c \"import pydantic\"\n</code></pre> <p>However, you can also write files into the image inline:</p> <pre><code>FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim\n\nCOPY &lt;&lt;EOF /mre/pyproject.toml\n[project]\nname = \"example\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\"pydantic\"]\nEOF\n\nWORKDIR /mre\nRUN uv lock\n</code></pre> <p>If you need to write many files, it's better to create and publish a Git repository. You can combine these approaches and include a <code>Dockerfile</code> in the repository.</p> <p>When sharing a Docker reproduction, it's helpful to include the build logs. You can see more output from the build steps by disabling caching and the fancy output:</p> <pre><code>docker build . --progress plain --no-cache\n</code></pre>"},{"location":"reference/troubleshooting/reproducible-examples/#script","title":"Script","text":"<p>When reporting platform-specific bugs that cannot be reproduced in a container, it's best practice to include a script showing the commands that can be used to reproduce the bug, e.g.:</p> <pre><code>uv init\nuv add pydantic\nuv sync\nuv run -v python -c \"import pydantic\"\n</code></pre> <p>If your reproduction requires many files, use a Git repository to share them.</p> <p>In addition to the script, include verbose logs (i.e., with the <code>-v</code> flag) of the failure and the complete error message.</p> <p>Whenever a script relies on external state, be sure to share that information. For example, if you wrote the script on Windows, and it uses a Python version that you installed with <code>choco</code> and runs on PowerShell 6.2, please include that in the report.</p>"},{"location":"reference/troubleshooting/reproducible-examples/#git-repository","title":"Git repository","text":"<p>When sharing a Git repository reproduction, include a script that reproduces the problem or, even better, a Dockerfile. The first step of the script should be to clone the repository and checkout a specific commit:</p> <pre><code>$ git clone https://github.com/&lt;user&gt;/&lt;project&gt;.git\n$ cd &lt;project&gt;\n$ git checkout &lt;commit&gt;\n$ &lt;commands to produce error&gt;\n</code></pre> <p>You can quickly create a new repository in the GitHub UI or with the <code>gh</code> CLI:</p> <pre><code>$ gh repo create uv-mre-1234 --clone\n</code></pre> <p>When using a Git repository for a reproduction, please remember to minimize the contents by excluding files or settings that are not required to reproduce your problem.</p>"}]}