{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"uv","text":"<p>An extremely fast Python package and project manager, written in Rust.</p> <p> </p> <p> </p> <p> Installing the Trio dependencies with a warm cache. </p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>\ud83d\ude80 A single tool to replace <code>pip</code>, <code>pip-tools</code>, <code>pipx</code>, <code>poetry</code>, <code>pyenv</code>, <code>virtualenv</code>, and more.</li> <li>\u26a1\ufe0f 10-100x faster than <code>pip</code>.</li> <li>\ud83d\udc0d Installs and manages Python versions.</li> <li>\ud83d\udee0\ufe0f Runs and installs Python applications.</li> <li>\u2747\ufe0f Runs scripts, with support for   inline dependency metadata.</li> <li>\ud83d\uddc2\ufe0f Provides comprehensive project management, with a   universal lockfile.</li> <li>\ud83d\udd29 Includes a pip-compatible interface for a performance boost with a   familiar CLI.</li> <li>\ud83c\udfe2 Supports Cargo-style workspaces for scalable projects.</li> <li>\ud83d\udcbe Disk-space efficient, with a global cache for dependency deduplication.</li> <li>\u23ec Installable without Rust or Python via <code>curl</code> or <code>pip</code>.</li> <li>\ud83d\udda5\ufe0f Supports macOS, Linux, and Windows.</li> </ul> <p>uv is backed by Astral, the creators of Ruff.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Install uv with our official standalone installer:</p> macOS and Linux<pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> Windows<pre><code>$ powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>Then, check out the first steps or read on for a brief overview.</p> <p>Tip</p> <p>uv may also be installed with pip, Homebrew, and more. See all of the methods on the installation page.</p>"},{"location":"#project-management","title":"Project management","text":"<p>uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to <code>rye</code> or <code>poetry</code>:</p> <pre><code>$ uv init example\nInitialized project `example` at `/home/user/example`\n$ cd example\n\n$ uv add ruff\nCreating virtualenv at: .venv\nResolved 2 packages in 170ms\n   Built example @ file:///home/user/example\nPrepared 2 packages in 627ms\nInstalled 2 packages in 1ms\n + example==0.1.0 (from file:///home/user/example)\n + ruff==0.5.4\n$ uv run ruff check\nAll checks passed!\n</code></pre> <p>See the project guide to get started.</p>"},{"location":"#tool-management","title":"Tool management","text":"<p>uv executes and installs command-line tools provided by Python packages, similar to <code>pipx</code>.</p> <p>Run a tool in an ephemeral environment with <code>uvx</code>:</p> <pre><code>$ uvx pycowsay 'hello world!'\nResolved 1 package in 167ms\nInstalled 1 package in 9ms\n + pycowsay==0.0.0.2\n  \"\"\"\n  ------------\n&lt; hello world! &gt;\n  ------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre> <p>Install a tool with <code>uv tool install</code>:</p> <pre><code>$ uv tool install ruff\nResolved 1 package in 6ms\nInstalled 1 package in 2ms\n + ruff==0.5.4\nInstalled 1 executable: ruff\n$ ruff --version\nruff 0.5.4\n</code></pre> <p>See the tools guide to get started.</p>"},{"location":"#python-management","title":"Python management","text":"<p>uv installs Python and allows quickly switching between versions.</p> <p>Install multiple Python versions:</p> <pre><code>$ uv python install 3.10 3.11 3.12\nSearching for Python versions matching: Python 3.10\nSearching for Python versions matching: Python 3.11\nSearching for Python versions matching: Python 3.12\nInstalled 3 versions in 3.42s\n + cpython-3.10.14-macos-aarch64-none\n + cpython-3.11.9-macos-aarch64-none\n + cpython-3.12.4-macos-aarch64-none\n</code></pre> <p>Download Python versions as needed:</p> <pre><code>$ uv venv --python 3.12.0\nUsing Python 3.12.0\nCreating virtualenv at: .venv\nActivate with: source .venv/bin/activate\n$ uv run --python pypy@3.8 -- python --version\nPython 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)\n[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;&gt;\n</code></pre> <p>Use a specific Python version in the current directory:</p> <pre><code>$ uv python pin pypy@3.11\nPinned `.python-version` to `pypy@3.11`\n</code></pre> <p>See the installing Python guide to get started.</p>"},{"location":"#the-pip-interface","title":"The pip interface","text":"<p>uv provides a drop-in replacement for common <code>pip</code>, <code>pip-tools</code>, and <code>virtualenv</code> commands.</p> <p>uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.</p> <p>Migrate to uv without changing your existing workflows \u2014 and experience a 10-100x speedup \u2014 with the <code>uv pip</code> interface.</p> <p>Compile requirements into a platform-independent requirements file:</p> <pre><code>$ uv pip compile docs/requirements.in \\\n--universal \\\n--output-file docs/requirements.txt\nResolved 43 packages in 12ms\n</code></pre> <p>Create a virtual environment:</p> <pre><code>$ uv venv\nUsing Python 3.12.3\nCreating virtualenv at: .venv\nActivate with: source .venv/bin/activate\n</code></pre> <p>Install the locked requirements:</p> <pre><code>$ uv pip sync docs/requirements.txt\nResolved 43 packages in 11ms\nInstalled 43 packages in 208ms\n + babel==2.15.0\n + black==24.4.2\n + certifi==2024.7.4\n ...\n</code></pre> <p>See the pip interface documentation to get started.</p>"},{"location":"#learn-more","title":"Learn more","text":"<p>See the first steps or jump straight to the guides to start using uv.</p>"},{"location":"concepts/","title":"Concepts overview","text":"<p>Read the concept documents to learn more about uv's features:</p> <ul> <li>Projects</li> <li>Dependencies</li> <li>Workspaces</li> <li>Tools</li> <li>Python versions</li> <li>Resolution</li> <li>Caching</li> </ul> <p>Looking for a quick introduction to features? See the guides instead.</p>"},{"location":"concepts/cache/","title":"Caching","text":""},{"location":"concepts/cache/#dependency-caching","title":"Dependency caching","text":"<p>uv uses aggressive caching to avoid re-downloading (and re-building dependencies) that have already been accessed in prior runs.</p> <p>The specifics of uv's caching semantics vary based on the nature of the dependency:</p> <ul> <li>For registry dependencies (like those downloaded from PyPI), uv respects HTTP caching headers.</li> <li>For direct URL dependencies, uv respects HTTP caching headers, and also caches based on the   URL itself.</li> <li>For Git dependencies, uv caches based on the fully-resolved Git commit hash. As such,   <code>uv pip compile</code> will pin Git dependencies to a specific commit hash when writing the resolved   dependency set.</li> <li>For local dependencies, uv caches based on the last-modified time of the source archive (i.e.,   the local <code>.whl</code> or <code>.tar.gz</code> file). For directories, uv caches based on the last-modified time of   the <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file.</li> </ul> <p>It's safe to run multiple uv commands concurrently, even against the same virtual environment. uv's cache is designed to be thread-safe and append-only, and thus robust to multiple concurrent readers and writers. uv applies a file-based lock to the target virtual environment when installing, to avoid concurrent modifications across processes.</p> <p>Note that it's not safe to modify the uv cache (e.g., <code>uv cache clean</code>) while other uv commands are running, and never safe to modify the cache directly (e.g., by removing a file or directory).</p> <p>If you're running into caching issues, uv includes a few escape hatches:</p> <ul> <li>To force uv to revalidate cached data for all dependencies, run <code>uv pip install --refresh ...</code>.</li> <li>To force uv to revalidate cached data for a specific dependency, run, e.g.,   <code>uv pip install --refresh-package flask ...</code>.</li> <li>To force uv to ignore existing installed versions, run <code>uv pip install --reinstall ...</code>.</li> </ul>"},{"location":"concepts/cache/#clearing-the-cache","title":"Clearing the cache","text":"<p>uv provides a few different mechanisms for removing entries from the cache:</p> <ul> <li><code>uv cache clean</code> removes all cache entries from the cache directory, clearing it out entirely.</li> <li><code>uv cache clean ruff</code> removes all cache entries for the <code>ruff</code> package, useful for invalidating   the cache for a single or finite set of packages.</li> <li><code>uv cache prune</code> removes all unused cache entries. For example, the cache directory may contain   entries created in previous uv versions that are no longer necessary and can be safely removed.   <code>uv cache prune</code> is safe to run periodically, to keep the cache directory clean.</li> </ul>"},{"location":"concepts/cache/#caching-in-continuous-integration","title":"Caching in continuous integration","text":"<p>It's common to cache package installation artifacts in continuous integration environments (like GitHub Actions or GitLab CI) to speed up subsequent runs.</p> <p>By default, uv caches both the wheels that it builds from source and the pre-built wheels that it downloads directly, to enable high-performance package installation.</p> <p>However, in continuous integration environments, persisting pre-built wheels may be undesirable. With uv, it turns out that it's often faster to omit pre-built wheels from the cache (and instead re-download them from the registry on each run). On the other hand, caching wheels that are built from source tends to be worthwhile, since the wheel building process can be expensive, especially for extension modules.</p> <p>To support this caching strategy, uv provides a <code>uv cache prune --ci</code> command, which removes all pre-built wheels from the cache but retains any wheels that were built from source. We recommend running <code>uv cache prune --ci</code> at the end of your continuous integration job to ensure maximum cache efficiency. For an example, see the GitHub integration guide.</p>"},{"location":"concepts/dependencies/","title":"Specifying dependencies","text":"<p>In uv, project dependencies are declared across two <code>pyproject.toml</code> tables: <code>project.dependencies</code> and <code>tool.uv.sources</code>.</p> <p><code>project.dependencies</code> defines the standards-compliant dependency metadata, propagated when uploading to PyPI or building a wheel.</p> <p><code>tool.uv.sources</code> enriches the dependency metadata with additional sources, incorporated during development. A dependency source can be a Git repository, a URL, a local path, or an alternative registry.</p> <p><code>tool.uv.sources</code> enables uv to support common patterns like editable installations and relative paths that are not supported by the <code>project.dependencies</code> standard. For example:</p> pyproject.toml<pre><code>[project]\nname = \"albatross\"\nversion = \"0.1.0\"\ndependencies = [\n\"bird-feeder\",\n]\n[tool.uv.sources]\nbird-feeder = { path = \"./packages/bird-feeder\" }\n</code></pre>"},{"location":"concepts/dependencies/#project-dependencies","title":"Project dependencies","text":"<p>The <code>project.dependencies</code> table represents the dependencies that are used when uploading to PyPI or building a wheel. Individual dependencies are specified using PEP 508 syntax, and the table follows the PEP 621 standard.</p> <p><code>project.dependencies</code> defines the list of packages that are required for the project, along with the version constraints that should be used when installing them. Each entry includes a dependency name and version. An entry may include extras or environment markers for platform-specific packages. For example:</p> pyproject.toml<pre><code>[project]\nname = \"albatross\"\nversion = \"0.1.0\"\ndependencies = [\n# Any version in this range\n\"tqdm &gt;=4.66.2,&lt;5\",\n# Exactly this version of torch\n\"torch ==2.2.2\",\n# Install transformers with the torch extra\n\"transformers[torch] &gt;=4.39.3,&lt;5\",\n# Only install this package on older python versions\n# See \"Environment Markers\" for more information\n\"importlib_metadata &gt;=7.1.0,&lt;8; python_version &lt; '3.10'\",\n\"mollymawk ==0.1.0\"\n]\n</code></pre> <p>If the project only requires packages from standard package indexes, then <code>project.dependencies</code> is sufficient. If the project depends on packages from Git, remote URLs, or local sources, <code>tool.uv.sources</code> can be used to enrich the dependency metadata without ejecting from the stands-compliant <code>project.dependencies</code> table.</p>"},{"location":"concepts/dependencies/#dependency-sources","title":"Dependency sources","text":"<p>During development, a project may rely on a package that isn't available on PyPI. The following additional sources are supported by uv:</p> <ul> <li>Git: A Git repository.</li> <li>URL: A remote wheel or source distribution.</li> <li>Path: A local wheel, source distribution, or project directory.</li> <li>Workspace: A member of the current workspace.</li> </ul> <p>Only a single source may be defined for each dependency.</p> <p>Note that if a non-uv project uses a project with sources as a Git- or path-dependency, only <code>project.dependencies</code> and <code>project.optional-dependencies</code> are respected. Any information provided in the source table will need to be re-specified in a format specific to the other package manager.</p> <p>To instruct uv to ignore the <code>tool.uv.sources</code> table (e.g., to simulate resolving with the package's published metadata), use the <code>--no-sources</code> flag:</p> <pre><code>$ uv lock --no-sources\n</code></pre> <p>The use of <code>--no-sources</code> will also prevent uv from discovering any workspace members that could satisfy a given dependency.</p>"},{"location":"concepts/dependencies/#git","title":"Git","text":"<p>To add a Git dependency source, prefix a Git-compatible URL to clone with <code>git+</code>.</p> <p>For example:</p> <pre><code>$ uv add git+https://github.com/encode/httpx\n</code></pre> <p>Will result in a <code>pyproject.toml</code> with:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n\"httpx\",\n]\n[tool.uv.sources]\nhttpx = { git = \"https://github.com/encode/httpx\" }\n</code></pre> <p>A revision, tag, or branch may also be included:</p> <pre><code>$ uv add git+https://github.com/encode/httpx --tag 0.27.0\n$ uv add git+https://github.com/encode/httpx --branch main\n$ uv add git+https://github.com/encode/httpx --rev 326b943\n</code></pre> <p>Git dependencies can also be manually added or edited in the <code>pyproject.toml</code> with the <code>{ git = &lt;url&gt; }</code> syntax. A target revision may be specified with one of: <code>rev</code>, <code>tag</code>, or <code>branch</code>. A <code>subdirectory</code> may be specified if the package isn't in the repository root.</p>"},{"location":"concepts/dependencies/#url","title":"URL","text":"<p>To add a URL source, provide a <code>https://</code> URL to either a wheel (ending in <code>.whl</code>) or a source distribution (ending in <code>.zip</code> or <code>.tar.gz</code>).</p> <p>For example:</p> <pre><code>$ uv add \"https://files.pythonhosted.org/packages/5c/2d/3da5bdf4408b8b2800061c339f240c1802f2e82d55e50bd39c5a881f47f0/httpx-0.27.0.tar.gz\"\n</code></pre> <p>Will result in a <code>pyproject.toml</code> with:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n\"httpx\",\n]\n[tool.uv.sources]\nhttpx = { url = \"https://files.pythonhosted.org/packages/5c/2d/3da5bdf4408b8b2800061c339f240c1802f2e82d55e50bd39c5a881f47f0/httpx-0.27.0.tar.gz\" }\n</code></pre> <p>URL dependencies can also be manually added or edited in the <code>pyproject.toml</code> with the <code>{ url = &lt;url&gt; }</code> syntax. A <code>subdirectory</code> may be specified if the if the source distribution isn't in the archive root.</p>"},{"location":"concepts/dependencies/#path","title":"Path","text":"<p>To add a path source, provide the path of a wheel (ending in <code>.whl</code>), a source distribution (ending in <code>.zip</code> or <code>.tar.gz</code>), or a directory containing a <code>pyproject.toml</code>.</p> <p>For example:</p> <pre><code>$ uv add /example/foo-0.1.0-py3-none-any.whl\n</code></pre> <p>Will result in a <code>pyproject.toml</code> with:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n\"foo\",\n]\n[tool.uv.sources]\nfoo = { path = \"/example/foo-0.1.0-py3-none-any.whl\" }\n</code></pre> <p>The path may also be a relative path:</p> <pre><code>$ uv add ./foo-0.1.0-py3-none-any.whl\n</code></pre> <p>Or, a path to a project directory:</p> <pre><code>$ uv add ~/projects/bar/\n</code></pre> <p>Important</p> <p>An editable installation is not used for path dependencies by default. An editable installation may be requested for project directories:</p> <pre><code>$ uv add --editable ~/projects/bar/\n</code></pre> <p>However, it is recommended to use workspaces instead of manual path dependencies.</p>"},{"location":"concepts/dependencies/#workspace-member","title":"Workspace member","text":"<p>To declare a dependency on a workspace member, add the member name with <code>{ workspace = true }</code>. All workspace members must be explicitly stated. Workspace members are always editable . See the workspace documentation for more details on workspaces.</p> pyproject.toml<pre><code>[project]\ndependencies = [\n\"mollymawk ==0.1.0\"\n]\n[tool.uv.sources]\nmollymawk = { workspace = true }\n[tool.uv.workspace]\ninclude = [\n\"packages/mollymawk\"\n]\n</code></pre>"},{"location":"concepts/dependencies/#optional-dependencies","title":"Optional dependencies","text":"<p>It is common for projects that are published as libraries to make some features optional to reduce the default dependency tree. For example, Pandas has an <code>excel</code> extra and a <code>plot</code> extra to avoid installation of Excel parsers and <code>matplotlib</code> unless someone explicitly requires them. Extras are requested with the <code>package[&lt;extra&gt;]</code> syntax, e.g., <code>pandas[plot, excel]</code>.</p> <p>Optional dependencies are specified in <code>[project.optional-dependencies]</code>, a TOML table that maps from extra name to its dependencies, following PEP 508 syntax.</p> <p>Optional dependencies can have entries in <code>tool.uv.sources</code> the same as normal dependencies.</p> pyproject.toml<pre><code>[project]\nname = \"pandas\"\nversion = \"1.0.0\"\n[project.optional-dependencies]\nplot = [\n\"matplotlib&gt;=3.6.3\"\n]\nexcel = [\n\"odfpy&gt;=1.4.1\",\n\"openpyxl&gt;=3.1.0\",\n\"python-calamine&gt;=0.1.7\",\n\"pyxlsb&gt;=1.0.10\",\n\"xlrd&gt;=2.0.1\",\n\"xlsxwriter&gt;=3.0.5\"\n]\n</code></pre> <p>To add an optional dependency, use the <code>--optional &lt;extra&gt;</code> option:</p> <pre><code>$ uv add httpx --optional network\n</code></pre>"},{"location":"concepts/dependencies/#development-dependencies","title":"Development dependencies","text":"<p>Unlike optional dependencies, development dependencies are local-only and will not be included in the project requirements when published to PyPI or other indexes. As such, development dependencies are included under <code>[tool.uv]</code> instead of <code>[project]</code>.</p> <p>Development dependencies can have entries in <code>tool.uv.sources</code> the same as normal dependencies.</p> pyproject.toml<pre><code>[tool.uv]\ndev-dependencies = [\n\"pytest &gt;=8.1.1,&lt;9\"\n]\n</code></pre> <p>To add a development dependency, include the <code>--dev</code> flag:</p> <pre><code>$ uv add ruff --dev\n</code></pre>"},{"location":"concepts/dependencies/#pep-508","title":"PEP 508","text":"<p>PEP 508 defines a syntax for dependency specification. It is composed of, in order:</p> <ul> <li>The dependency name</li> <li>The extras you want (optional)</li> <li>The version specifier</li> <li>An environment marker (optional)</li> </ul> <p>The version specifiers are comma separated and added together, e.g., <code>foo &gt;=1.2.3,&lt;2,!=1.4.0</code> is interpreted as \"a version of <code>foo</code> that's at least 1.2.3, but less than 2, and not 1.4.0\".</p> <p>Specifiers are padded with trailing zeros if required, so <code>foo ==2</code> matches foo 2.0.0, too.</p> <p>A star can be used for the last digit with equals, e.g. <code>foo ==2.1.*</code> will accept any release from the 2.1 series. Similarly, <code>~=</code> matches where the last digit is equal or higher, e.g., <code>foo ~=1.2</code> is equal to <code>foo &gt;=1.2,&lt;2</code>, and <code>foo ~=1.2.3</code> is equal to <code>foo &gt;=1.2.3,&lt;1.3</code>.</p> <p>Extras are comma-separated in square bracket between name and version, e.g., <code>pandas[excel,plot] ==2.2</code>. Whitespace between extra names is ignored.</p> <p>Some dependencies are only required in specific environments, e.g., a specific Python version or operating system. For example to install the <code>importlib-metadata</code> backport for the <code>importlib.metadata</code> module, use <code>importlib-metadata &gt;=7.1.0,&lt;8; python_version &lt; '3.10'</code>. To install <code>colorama</code> on Windows (but omit it on other platforms), use <code>colorama &gt;=0.4.6,&lt;5; platform_system == \"Windows\"</code>.</p> <p>Markers are combined with <code>and</code>, <code>or</code>, and parentheses, e.g., <code>aiohttp &gt;=3.7.4,&lt;4; (sys_platform != 'win32' or implementation_name != 'pypy') and python_version &gt;= '3.10'</code>. Note that versions within markers must be quoted, while versions outside of markers must not be quoted.</p>"},{"location":"concepts/dependencies/#editable-dependencies","title":"Editable dependencies","text":"<p>A regular installation of a directory with a Python package first builds a wheel and then installs that wheel into your virtual environment, copying all source files. When the package source files are edited, the virtual environment will contain outdated versions.</p> <p>Editable installations solve this problem by adding a link to the project within the virtual environment (a <code>.pth</code> file), which instructs the interpreter to include the source files directly.</p> <p>There are some limitations to editables (mainly: the build backend needs to support them, and native modules aren't recompiled before import), but they are useful for development, as the virtual environment will always use the latest changes to the package.</p> <p>uv uses editable installation for workspace packages by default.</p> <p>To add an editable dependency, use the <code>--editable</code> flag:</p> <pre><code>$ uv add --editable ./path/foo\n</code></pre> <p>Or, to opt-out of using an editable dependency in a workspace:</p> <pre><code>$ uv add --no-editable ./path/foo\n</code></pre>"},{"location":"concepts/projects/","title":"Projects","text":"<p>Python projects help manage Python applications spanning multiple files.</p> <p>Tip</p> <p>Looking for an introduction to creating a project with uv? See the projects guide first.</p>"},{"location":"concepts/projects/#project-metadata","title":"Project metadata","text":"<p>Python project metadata is defined in a <code>pyproject.toml</code> file.</p> <p><code>uv init</code> can be used to create a new project, with a basic <code>pyproject.toml</code> and package definition.</p> <p>A minimal project definition includes a name, version, and description:</p> pyproject.toml<pre><code>[project]\nname = \"example\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\n</code></pre> <p>Additionally, it's recommended to include a Python version requirement:</p> pyproject.toml<pre><code>[project]\nrequires-python = \"&gt;=3.12\"\n</code></pre> <p>This Python version requirement determines what syntax is valid in the project and affects the versions of dependencies which can be used (they must support the same Python range).</p> <p>The <code>pyproject.toml</code> also lists dependencies of the project. uv supports modifying the standard dependency list from the command line with <code>uv add</code> and <code>uv remove</code>. uv also supports extended package sources for advanced users.</p> <p>Tip</p> <p>See the official <code>pyproject.toml</code> guide for more details on getting started with a <code>pyproject.toml</code>.</p>"},{"location":"concepts/projects/#project-environments","title":"Project environments","text":"<p>uv creates a virtual environment in a <code>.venv</code> directory next to the <code>pyproject.toml</code>. This virtual environment contains the project and its dependencies. It is stored inside the project to make it easy for editors to find \u2014 they need the environment to give code completions and type hints. It is not recommended to include the <code>.venv</code> directory in version control; it is automatically excluded from <code>git</code> with an internal <code>.gitignore</code> file.</p> <p>To run a command in the project environment, use <code>uv run</code>. Alternatively the project environment can be activated as normal for a virtual environment.</p> <p>When <code>uv run</code> is invoked, it will create the project environment if it does not exist yet or ensure it is up to date if it exists. The project environment can also be explicitly created with <code>uv sync</code>.</p> <p>It is not recommended to modify the project environment manually, e.g., with <code>uv pip install</code>. For project dependencies, use <code>uv add</code> to add a package to the environment. For one-off requirements, use <code>uvx</code> or <code>uv run --with</code>.</p>"},{"location":"concepts/projects/#lockfile","title":"Lockfile","text":"<p>uv creates a <code>uv.lock</code> file next to the <code>pyproject.toml</code>.</p> <p><code>uv.lock</code> is a universal lockfile that captures the packages that would be installed across all possible Python markers such as operating system, architecture, and Python version.</p> <p>Unlike the <code>pyproject.toml</code>, which is used to specify the broad requirements of your project, the lockfile contains the exact resolved versions that are installed in the project environment. This file should be checked into version control, allowing for consistent and reproducible installations across machines.</p> <p>A lockfile ensures that developers working on the project are using a consistent set of package versions. Additionally, it ensures when deploying the project as an application that the exact set of used package versions is known.</p> <p>The lockfile is created and updated during uv invocations that use the project environment, i.e., <code>uv sync</code> and <code>uv run</code>. The lockfile may also be explicitly updated using <code>uv lock</code>.</p> <p><code>uv.lock</code> is a human-readable TOML file but is managed by uv and should not be edited manually. There is no Python standard for lockfiles at this time, so the format of this file is specific to uv and not generally usable by other tools.</p> <p>To avoid updating the lockfile during <code>uv sync</code> and <code>uv run</code> invocations, use the <code>--frozen</code> flag.</p> <p>To assert the lockfile is up to date, use the <code>--locked</code> flag. If the lockfile is not up to date, an error will be raised instead of updating the lockfile.</p>"},{"location":"concepts/projects/#managing-dependencies","title":"Managing dependencies","text":"<p>uv is capable of adding, updating, and removing dependencies using the CLI.</p> <p>To add a dependency:</p> <pre><code>$ uv add httpx\n</code></pre> <p>uv supports adding editable dependencies, development dependencies, optional dependencies, and alternative dependency sources. See the dependency specification documentation for more details.</p> <p>uv will raise an error if the dependency cannot be resolved, e.g.:</p> <pre><code>$ uv add 'httpx&gt;9999'\nerror: Because only httpx&lt;=9999 is available and example==0.1.0 depends on httpx&gt;9999, we can conclude that example==0.1.0 cannot be used.\nAnd because only example==0.1.0 is available and you require example, we can conclude that the requirements are unsatisfiable.\n</code></pre> <p>To remove a dependency:</p> <pre><code>$ uv remove httpx\n</code></pre> <p>To update an existing dependency, e.g., to add a lower bound to the <code>httpx</code> version:</p> <pre><code>$ uv add 'httpx&gt;0.1.0'\n</code></pre> <p>Or, to change the bounds for <code>httpx</code>:</p> <pre><code>$ uv add 'httpx&lt;0.2.0'\n</code></pre> <p>To add a dependency source, e.g., to use <code>httpx</code> from GitHub during development:</p> <pre><code>$ uv add git+https://github.com/encode/httpx\n</code></pre>"},{"location":"concepts/projects/#running-commands","title":"Running commands","text":"<p>When working on a project, it is installed into virtual environment at <code>.venv</code>. This environment is isolated from the current shell by default, so invocations that require the project, e.g., <code>python -c \"import example\"</code>, will fail. Instead, use <code>uv run</code> to run commands in the project environment:</p> <pre><code>$ uv run python -c \"import example\"\n</code></pre> <p>When using <code>run</code>, uv will ensure that the project environment is up to date before running the given command.</p> <p>The given command can be provided by the project environment or exist outside of it, e.g.:</p> <pre><code>$ # Presuming the project provides `example-cli`\n$ uv run example-cli foo\n\n$ # Running a `bash` script that requires the project to be available\n$ uv run bash scripts/foo.sh\n</code></pre>"},{"location":"concepts/projects/#running-commands-with-additional-dependencies","title":"Running commands with additional dependencies","text":"<p>Additional dependencies or different versions of dependencies can be requested per invocation.</p> <p>The <code>--with</code> option is used to include a dependency for the invocation, e.g., to request a different version of <code>httpx</code>:</p> <pre><code>$ uv run --with httpx==0.26.0 python -c \"import httpx; print(httpx.__version__)\"\n0.26.0\n$ uv run --with httpx==0.25.0 python -c \"import httpx; print(httpx.__version__)\"\n0.25.0\n</code></pre> <p>The requested version will be respected regardless of the project's requirements. For example, even if the project requires <code>httpx==0.24.0</code>, the output above would be the same.</p>"},{"location":"concepts/projects/#running-scripts","title":"Running scripts","text":"<p>Scripts that declare inline metadata are automatically executed in environments isolated from the project. See the scripts guide for more details.</p> <p>For example, given a script:</p> example.py<pre><code># /// script\n# dependencies = [\n#   \"httpx\",\n# ]\n# ///\nimport httpx\nresp = httpx.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\nprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n</code></pre> <p>The invocation <code>uv run example.py</code> would run isolated from the project with only the given dependencies listed.</p>"},{"location":"concepts/projects/#projects-with-many-packages","title":"Projects with many packages","text":"<p>If working in a project composed of many packages, see the workspaces documentation.</p>"},{"location":"concepts/python-versions/","title":"Python versions","text":"<p>A Python version is composed of a Python interpreter (i.e. the <code>python</code> executable), the standard library, and other supporting files.</p>"},{"location":"concepts/python-versions/#managed-and-system-python-installations","title":"Managed and system Python installations","text":"<p>Since it is common for a system to have an existing Python installation, uv supports discovering Python versions. However, uv also supports installing Python versions itself. To distinguish between these two types of Python installations, uv refers to Python versions it installs as managed Python installations and all other Python installations as system Python installations.</p> <p>Note</p> <p>uv does not distinguish between Python versions installed by the operating system vs those installed and managed by other tools. For example, if a Python installation is managed with <code>pyenv</code>, it would still be considered a system Python version in uv.</p>"},{"location":"concepts/python-versions/#requesting-a-version","title":"Requesting a version","text":"<p>A specific Python version can be requested with the <code>--python</code> flag in most uv commands. For example, when creating a virtual environment:</p> <pre><code>$ uv venv --python 3.11.6\n</code></pre> <p>uv will ensure that Python 3.11.6 is available \u2014 downloading and installing it if necessary \u2014 then create the virtual environment with it.</p> <p>The following Python version request formats are supported:</p> <ul> <li><code>&lt;version&gt;</code> e.g. <code>3</code>, <code>3.12</code>, <code>3.12.3</code></li> <li><code>&lt;version-specifier&gt;</code> e.g. <code>&gt;=3.12,&lt;3.13</code></li> <li><code>&lt;implementation&gt;</code> e.g. <code>cpython</code> or <code>cp</code></li> <li><code>&lt;implementation&gt;@&lt;version&gt;</code> e.g. <code>cpython@3.12</code></li> <li><code>&lt;implementation&gt;&lt;version&gt;</code> e.g. <code>cpython3.12</code> or <code>cp312</code></li> <li><code>&lt;implementation&gt;&lt;version-specifier&gt;</code> e.g. <code>cpython&gt;=3.12,&lt;3.13</code></li> <li><code>&lt;implementation&gt;-&lt;version&gt;-&lt;os&gt;-&lt;arch&gt;-&lt;libc&gt;</code> e.g. <code>cpython-3.12.3-macos-aarch64-none</code></li> </ul> <p>Additionally, a specific system Python interpreter can be requested with:</p> <ul> <li><code>&lt;executable-path&gt;</code> e.g. <code>/opt/homebrew/bin/python3</code></li> <li><code>&lt;executable-name&gt;</code> e.g. <code>mypython3</code></li> <li><code>&lt;install-dir&gt;</code> e.g. <code>/some/environment/</code></li> </ul> <p>By default, uv will automatically download Python versions if they cannot be found on the system. This behavior can be disabled with the <code>python-downloads</code> option.</p>"},{"location":"concepts/python-versions/#installing-a-python-version","title":"Installing a Python version","text":"<p>uv bundles a list of downloadable CPython and PyPy distributions for macOS, Linux, and Windows.</p> <p>Tip</p> <p>By default, Python versions are automatically downloaded as needed without using <code>uv python install</code>.</p> <p>To install a Python version at a specific version:</p> <pre><code>$ uv python install 3.12.3\n</code></pre> <p>To install the latest patch version:</p> <pre><code>$ uv python install 3.12\n</code></pre> <p>To install a version that satisfies constraints:</p> <pre><code>$ uv python install '&gt;=3.8,&lt;3.10'\n</code></pre> <p>To install multiple versions:</p> <pre><code>$ uv python install 3.9 3.10 3.11\n</code></pre> <p>To install a specific implementation:</p> <pre><code>$ uv python install pypy\n</code></pre> <p>All of the Python version request formats are supported except those that are used for requesting local interpreters such as a file path.</p>"},{"location":"concepts/python-versions/#project-python-versions","title":"Project Python versions","text":"<p>By default <code>uv python install</code> will verify that a managed Python version is installed or install the latest version.</p> <p>However, a project may define a <code>.python-version</code> file specifying the default Python version to be used. If present, uv will install the Python version listed in the file.</p> <p>Alternatively, a project that requires multiple Python versions may also define a <code>.python-versions</code> file. If present, uv will install all of the Python versions listed in the file. This file takes precedence over the <code>.python-version</code> file.</p> <p>uv will also respect Python requirements defined in a <code>pyproject.toml</code> file during project command invocations.</p>"},{"location":"concepts/python-versions/#viewing-available-python-versions","title":"Viewing available Python versions","text":"<p>To list installed and available Python versions:</p> <pre><code>$ uv python list\n</code></pre> <p>By default, downloads for other platforms and old patch versions are hidden.</p> <p>To view all versions:</p> <pre><code>$ uv python list --all-versions\n</code></pre> <p>To view Python versions for other platforms:</p> <pre><code>$ uv python list --all-platforms\n</code></pre> <p>To exclude downloads and only show installed Python versions:</p> <pre><code>$ uv python list --only-installed\n</code></pre>"},{"location":"concepts/python-versions/#discovery-of-python-versions","title":"Discovery of Python versions","text":"<p>When searching for a Python version, the following locations are checked:</p> <ul> <li>Managed Python installations in the <code>UV_PYTHON_INSTALL_DIR</code>.</li> <li>A Python interpreter on the <code>PATH</code> as <code>python</code>, <code>python3</code>, or <code>python3.x</code> on macOS and Linux, or   <code>python.exe</code> on Windows.</li> <li>On Windows, the Python interpreter returned by <code>py --list-paths</code> that matches the requested   version.</li> </ul> <p>In some cases, uv allows using a Python version from a virtual environment. In this case, the virtual environment's interpreter will be checked for compatibility with the request before searching for an installation as described above. See the pip-compatible virtual environment discovery documentation for details.</p> <p>When performing discovery, non-executable files will be ignored. Each discovered executable is queried for metadata to ensure it meets the requested Python version. If the query fails, the executable will be skipped. If the executable satisfies the request, it is used without inspecting additional executables.</p> <p>When searching for a managed Python version, uv will prefer newer versions first. When searching for a system Python version, uv will use the first compatible version \u2014 not the newest version.</p> <p>If a Python version cannot be found on the system, uv will check for a compatible managed Python version download.</p>"},{"location":"concepts/python-versions/#disabling-automatic-python-downloads","title":"Disabling automatic Python downloads","text":"<p>By default, uv will automatically download Python versions when needed.</p> <p>The <code>python-downloads</code> option can be used to disable this behavior. By default, it is set to <code>automatic</code>; set to <code>manual</code> to only allow Python downloads during <code>uv python install</code>.</p>"},{"location":"concepts/python-versions/#adjusting-python-version-preferences","title":"Adjusting Python version preferences","text":"<p>By default, uv will attempt to use Python versions found on the system and only download managed interpreters when necessary.</p> <p>The <code>python-preference</code> option can be used to adjust this behavior. By default, it is set to <code>managed</code> which prefers managed Python installations over system Python installations. However, system Python installations are still preferred over downloading a managed Python version.</p> <p>The following alternative options are available:</p> <ul> <li><code>only-managed</code>: Only use managed Python installations; never use system Python installations</li> <li><code>system</code>: Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>: Only use system Python installations; never use managed Python installations</li> </ul> <p>These options allow disabling uv's managed Python versions entirely or always using them and ignoring any existing system installations.</p> <p>Note</p> <p>Automatic Python version downloads can be disabled without changing the preference.</p>"},{"location":"concepts/python-versions/#python-implementation-support","title":"Python implementation support","text":"<p>uv supports the CPython, PyPy, and GraalPy Python implementations. If a Python implementation is not supported, uv will fail to discover its interpreter.</p> <p>The implementations may be requested with either the long or short name:</p> <ul> <li>CPython: <code>cpython</code>, <code>cp</code></li> <li>PyPy: <code>pypy</code>, <code>pp</code></li> <li>GraalPy: <code>graalpy</code>, <code>gp</code></li> </ul> <p>Implementation name requests are not case sensitive.</p> <p>See the Python version request documentation for more details on the supported formats.</p>"},{"location":"concepts/python-versions/#managed-python-distributions","title":"Managed Python distributions","text":"<p>uv supports downloading and installing CPython and PyPy distributions.</p>"},{"location":"concepts/python-versions/#cpython-distributions","title":"CPython distributions","text":"<p>Python does not publish official distributable CPython binaries, uv uses third-party standalone distributions from the <code>python-build-standalone</code> project. The project is partially maintained by the uv maintainers and is used by many other Python projects.</p> <p>The uv Python distributions are self-contained, highly-portable, and performant. While Python can be built from source, as in tools like <code>pyenv</code>, it requires preinstalled system dependencies and creating optimized, performant builds is very slow.</p> <p>These distributions have some behavior quirks, generally as a consequence of portability. See the <code>python-build-standalone</code> quirks documentation for details.</p>"},{"location":"concepts/python-versions/#pypy-distributions","title":"PyPy distributions","text":"<p>PyPy distributions are provided by the PyPy project.</p>"},{"location":"concepts/resolution/","title":"Resolution","text":"<p>Resolution is the process of taking a list of requirements and converting them to a list of package versions that fulfill the requirements. Resolution requires recursively searching for compatible versions of packages, ensuring that the requested requirements are fulfilled and that the requirements of the requested packages are compatible.</p>"},{"location":"concepts/resolution/#dependencies","title":"Dependencies","text":"<p>Most projects and packages have dependencies. Dependencies are other packages that are needed in order for the current package to work. A package defines its dependencies as requirements, roughly a combination of a package name and acceptable versions. The dependencies defined by the current project are called direct dependencies. The requirements added by each dependency of the current project are called indirect or transitive dependencies.</p> <p>Note</p> <p>See the dependency specifiers page in the Python Packaging documentation for details about dependencies.</p>"},{"location":"concepts/resolution/#basic-examples","title":"Basic examples","text":"<p>To help demonstrate the resolution process, consider the following dependencies:</p> <ul> <li>The project depends on <code>foo</code> and <code>bar</code>.</li> <li><code>foo</code> has one version, 1.0.0:<ul> <li><code>foo 1.0.0</code> depends on <code>lib&gt;=1.0.0</code>.</li> </ul> </li> <li><code>bar</code> has one version, 1.0.0:<ul> <li><code>bar 1.0.0</code> depends on <code>lib&gt;=2.0.0</code>.</li> </ul> </li> <li><code>lib</code> has two versions, 1.0.0 and 2.0.0. Both versions have no dependencies.</li> </ul> <p>In this example, the resolver must find a set of package versions which satisfies the project requirements. Since there is only one version of both <code>foo</code> and <code>bar</code>, those will be used. The resolution must also include the transitive dependencies, so a version of <code>lib</code> must be chosen. <code>foo 1.0.0</code> allows all of the available versions of <code>lib</code>, but <code>bar 1.0.0</code> requires <code>lib&gt;=2.0.0</code> so <code>lib 2.0.0</code> must be used.</p> <p>In some resolutions, there is more than one solution. Consider the following dependencies:</p> <ul> <li>The project depends on <code>foo</code> and <code>bar</code>.</li> <li><code>foo</code> has two versions, 1.0.0 and 2.0.0:<ul> <li><code>foo 1.0.0</code> has no dependencies.</li> <li><code>foo 2.0.0</code> depends on <code>lib==2.0.0</code>.</li> </ul> </li> <li><code>bar</code> has two versions, 1.0.0 and 2.0.0:<ul> <li><code>bar 1.0.0</code> has no dependencies.</li> <li><code>bar 2.0.0</code> depends on <code>lib==1.0.0</code></li> </ul> </li> <li><code>lib</code> has two versions, 1.0.0 and 2.0.0. Both versions have no dependencies.</li> </ul> <p>In this example, some version of both <code>foo</code> and <code>bar</code> must be picked, however, determining which version requires considering the dependencies of each version of <code>foo</code> and <code>bar</code>. <code>foo 2.0.0</code> and <code>bar 2.0.0</code> cannot be installed together because they conflict on their required version of <code>lib</code>, so the resolver must select either <code>foo 1.0.0</code> or <code>bar 1.0.0</code>. Both are valid solutions, and different resolution algorithms may give either result.</p>"},{"location":"concepts/resolution/#platform-markers","title":"Platform markers","text":"<p>Markers allow attaching an expression to requirements that indicate when the dependency should be used. For example <code>bar; python_version&lt;\"3.9\"</code> can be used to only require <code>bar</code> on Python 3.8 and older.</p> <p>Markers are used to adjust a package's dependencies dependending on the current environment or platform. For example, markers can be used to change dependencies based on the operating system, the CPU architecture, the Python version, the Python implementation, and more.</p> <p>Note</p> <p>See the environment markers section in the Python Packaging documentation for more details about markers.</p> <p>Markers are important for resolution because their values change the required dependencies. Typically, Python package resolvers use the markers of the current platform to determine which dependencies to use since the package is often being installed on the current platform. However, for locking dependencies this is problematic \u2014 the lockfile would only work for developers using the same platform the lockfile was created on. To solve this problem, platform-independent, or \"universal\" resolvers exist.</p> <p>uv supports both platform-specific and universal resolution.</p>"},{"location":"concepts/resolution/#universal-resolution","title":"Universal resolution","text":"<p>uv's lockfile (<code>uv.lock</code>) is created with a universal resolution and is portable across platforms. This ensures that dependencies are locked for everyone working on the project, regardless of operating system, architecture, and Python version. The uv lockfile is created and modified by project commands such as <code>uv lock</code>, <code>uv sync</code>, and <code>uv add</code>.</p> <p>universal resolution is also available in uv's pip interface, i.e., <code>uv pip compile</code>, with the <code>--universal</code> flag. The resulting requirements file will contain markers to indicate which platform each dependency is relevant for.</p> <p>During universal resolution, a package may be listed multiple times with different versions or URLs if different versions are needed for different platforms \u2014 the markers determine which version will be used. A universal resolution is often more constrained than a platform-specific resolution, since we need to take the requirements for all markers into account.</p> <p>During universal resolution, a minimum Python version must be specified. Project commands read the minimum required version from <code>project.requires-python</code> in the <code>pyproject.toml</code>. When using the pip interface, provide a value with the <code>--python-version</code> option, otherwise the current Python version will be treated as a lower bound. For example, <code>--universal --python-version 3.9</code> writes a universal resolution for Python 3.9 and later.</p> <p>Setting the minimum Python version is important because all package versions we select have to be compatible with the Python version range. For example, a universal resolution of <code>numpy&lt;2</code> with <code>--python-version 3.8</code> resolves to <code>numpy==1.24.4</code>, while <code>--python-version 3.9</code> resolves to <code>numpy==1.26.4</code>, as <code>numpy</code> releases after 1.26.4 require at Python 3.9+. Note that we only consider the lower bound of any Python requirement, upper bounds are always ignored.</p>"},{"location":"concepts/resolution/#platform-specific-resolution","title":"Platform-specific resolution","text":"<p>By default, uv's pip interface, i.e., <code>uv pip compile</code>, produces a resolution that is platform-specific, like <code>pip-tools</code>. There is no way to use platform-specific resolution in the uv's project interface.</p> <p>uv also supports resolving for specific, alternate platforms and Python versions with the <code>--python-platform</code> and <code>--python-version</code> options. For example, if using Python 3.12 on macOS, <code>uv pip compile --python-platform linux --python-version 3.10 requirements.in</code> can be used to produce a resolution for Python 3.10 on Linux instead. Unlike universal resolution, during platform-specific resolution, the provided <code>--python-version</code> is the exact python version to use, not a lower bound.</p> <p>Note</p> <p>Python's environment markers expose far more information about the current machine than can be expressed by a simple <code>--python-platform</code> argument. For example, the <code>platform_version</code> marker on macOS includes the time at which the kernel was built, which can (in theory) be encoded in package requirements. uv's resolver makes a best-effort attempt to generate a resolution that is compatible with any machine running on the target <code>--python-platform</code>, which should be sufficient for most use cases, but may lose fidelity for complex package and platform combinations.</p>"},{"location":"concepts/resolution/#dependency-preferences","title":"Dependency preferences","text":"<p>If resolution output file exists, i.e. a uv lockfile (<code>uv.lock</code>) or a requirements output file (<code>requirements.txt</code>), uv will prefer the dependency versions listed there. Similarly, if installing a package into a virtual environment, uv will prefer the already installed version if present. This means that locked or installed versions will not change unless an incompatible version is requested or an upgrade is explicitly requested with <code>--upgrade</code>.</p>"},{"location":"concepts/resolution/#resolution-strategy","title":"Resolution strategy","text":"<p>By default, uv tries to use the latest version of each package. For example, <code>uv pip install flask&gt;=2.0.0</code> will install the latest version of Flask, e.g., 3.0.0. If <code>flask&gt;=2.0.0</code> is a dependency of the project, only <code>flask</code> 3.0.0 will be used. This is important, for example, because running tests will not check that the the project is actually compatible with its stated lower bound of <code>flask</code> 2.0.0.</p> <p>With <code>--resolution lowest</code>, uv will install the lowest possible version for all dependencies, both direct and indirect (transitive). Alternatively, <code>--resolution lowest-direct</code> will use the lowest compatible versions for all direct dependencies, while using the latest compatible versions for all other dependencies. uv will always use the latest versions for build dependencies.</p> <p>For example, given the following <code>requirements.in</code> file:</p> requirements.in<pre><code>flask&gt;=2.0.0\n</code></pre> <p>Running <code>uv pip compile requirements.in</code> would produce the following <code>requirements.txt</code> file:</p> requirements.txt<pre><code># This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in\nblinker==1.7.0\n    # via flask\nclick==8.1.7\n    # via flask\nflask==3.0.0\nitsdangerous==2.1.2\n    # via flask\njinja2==3.1.2\n    # via flask\nmarkupsafe==2.1.3\n    # via\n    #   jinja2\n    #   werkzeug\nwerkzeug==3.0.1\n    # via flask\n</code></pre> <p>However, <code>uv pip compile --resolution lowest requirements.in</code> would instead produce:</p> requirements.in<pre><code># This file was autogenerated by uv via the following command:\n#    uv pip compile requirements.in --resolution lowest\nclick==7.1.2\n    # via flask\nflask==2.0.0\nitsdangerous==2.0.0\n    # via flask\njinja2==3.0.0\n    # via flask\nmarkupsafe==2.0.0\n    # via jinja2\nwerkzeug==2.0.0\n    # via flask\n</code></pre> <p>When publishing libraries, it is recommended to separately run tests with <code>--resolution lowest</code> or <code>--resolution lowest-direct</code> in continuous integration to ensure compatibility with the declared lower bounds.</p>"},{"location":"concepts/resolution/#pre-release-handling","title":"Pre-release handling","text":"<p>By default, uv will accept pre-release versions during dependency resolution in two cases:</p> <ol> <li>If the package is a direct dependency, and its version specifiers include a pre-release specifier    (e.g., <code>flask&gt;=2.0.0rc1</code>).</li> <li>If all published versions of a package are pre-releases.</li> </ol> <p>If dependency resolution fails due to a transitive pre-release, uv will prompt use of <code>--prerelease allow</code> to allow pre-releases for all dependencies.</p> <p>Alternatively, the transitive dependency can be added as a constraint or direct dependency (i.e. in <code>requirements.in</code> or <code>pyproject.toml</code>) with a pre-release version specifier (e.g., <code>flask&gt;=2.0.0rc1</code>) to opt-in to pre-release support for that specific dependency.</p> <p>Pre-releases are notoriously difficult to model, and are a frequent source of bugs in other packaging tools. uv's pre-release handling is intentionally limited and requires user opt-in for pre-releases to ensure correctness.</p> <p>For more details, see Pre-release compatibility.</p>"},{"location":"concepts/resolution/#dependency-constraints","title":"Dependency constraints","text":"<p>uv supports constraints files (<code>--constraint constraints.txt</code>), like pip, which narrow the set of acceptable versions for the given packages. Constraint files are like a regular requirements files, but they do not add packages to the requirements \u2014 they only take affect if the package is requested in a direct or transitive dependency. Constraints are often useful for reducing the range of available versions for a transitive dependency without adding a direct requirement on the package.</p>"},{"location":"concepts/resolution/#dependency-overrides","title":"Dependency overrides","text":"<p>Overrides allow bypassing failing or undesirable resolutions by overriding the declared dependencies of a package. Overrides are a useful last resort for cases in which the you know that a dependency is compatible with a newer version of a package than it declares, but the it has not yet been updated to declare that compatibility.</p> <p>For example, if a transitive dependency declares the requirement <code>pydantic&gt;=1.0,&lt;2.0</code>, but works with <code>pydantic&gt;=2.0</code>, the user can override the declared dependency with <code>pydantic&gt;=1.0,&lt;3</code> to allow the resolver to installer a newer version of <code>pydantic</code>.</p> <p>While constraints and dependencies are purely additive, and thus cannot expand the set of acceptable versions for a package, overrides can expand the set of acceptable versions for a package, providing an escape hatch for erroneous upper version bounds. As with constraints, overrides do not add a dependency on the package and only take affect if the package is requested in a direct or transitive dependency.</p> <p>In a <code>pyproject.toml</code>, use <code>tool.uv.override-dependencies</code> to define a list of overrides. In the pip-compatible interface, the <code>--override</code> option can be used to pass files with the same format as constraints files.</p> <p>If multiple overrides are provided for the same package, they must be differentiated with markers. If a package has a dependency with a marker, it is replaced unconditionally when using overrides \u2014 it does not matter if the marker evaluates to true or false.</p>"},{"location":"concepts/resolution/#reproducible-resolutions","title":"Reproducible resolutions","text":"<p>uv supports an <code>--exclude-newer</code> option to limit resolution to distributions published before a specific date, allowing reproduction of installations regardless of new package releases. The date may be specified as an RFC 3339 timestamp (e.g., <code>2006-12-02T02:07:43Z</code>) or UTC date in the same format (e.g., <code>2006-12-02</code>).</p> <p>Note the package index must support the <code>upload-time</code> field as specified in <code>PEP 700</code>. If the field is not present for a given distribution, the distribution will be treated as unavailable. PyPI provides <code>upload-time</code> for all packages.</p> <p>To ensure reproducibility, messages for unsatisfiable resolutions will not mention that distributions were excluded due to the <code>--exclude-newer</code> flag \u2014 newer distributions will be treated as if they do not exist.</p>"},{"location":"concepts/resolution/#learn-more","title":"Learn more","text":"<p>For more details about the internals of the resolver, see the resolver reference documentation.</p>"},{"location":"concepts/tools/","title":"Tools","text":"<p>Tools are Python packages that provide command-line interfaces. Tools can be invoked without installation using <code>uvx</code>, in which case their dependencies are installed in a temporary virtual environment isolated from the current project. Tools can also be installed with <code>uv tool install</code>, in which case their executables are available on the <code>PATH</code> \u2014 an isolated virtual environment is still used but it is not treated as disposable.</p> <p>Note</p> <p>See the tools guide for an introduction to working with the tools interface \u2014 this document discusses details of tool management.</p>"},{"location":"concepts/tools/#tool-environments","title":"Tool environments","text":"<p>When running a tool with <code>uvx</code> or <code>uv tool run</code>, a virtual environment is stored in the uv cache directory and is treated as disposable. The environment is cached to reduce the overhead of invocations.</p> <p>When installing a tool with <code>uv tool install</code>, a virtual environment is created in the uv tools directory.</p>"},{"location":"concepts/tools/#tools-directory","title":"Tools directory","text":"<p>By default, the uv tools directory is named <code>tools</code> and is in the uv application state directory, e.g., <code>~/.local/share/uv/tools</code>. The location may be customized with the <code>UV_TOOL_DIR</code> environment variable.</p> <p>To display the path to the tool installation directory:</p> <pre><code>$ uv tool dir\n</code></pre> <p>Tool environments are placed in a directory with the same name as the tool package, e.g., <code>.../tools/&lt;name&gt;</code>.</p>"},{"location":"concepts/tools/#mutating-tool-environments","title":"Mutating tool environments","text":"<p>Tool environments are not intended to be mutated directly. It is strongly recommended never to mutate a tool environment manually with a <code>pip</code> operation.</p> <p>Tool environments may be upgraded via <code>uv tool upgrade</code>, or re-created entirely via subsequent <code>uv tool install</code> operations.</p> <p>To upgrade all packages in a tool environment</p> <pre><code>$ uv tool upgrade black\n</code></pre> <p>To upgrade a single package in a tool environment:</p> <pre><code>$ uv tool upgrade black --upgrade-package click\n</code></pre> <p>To reinstall all packages in a tool environment</p> <pre><code>$ uv tool upgrade black --reinstall\n</code></pre> <p>To reinstall a single package in a tool environment:</p> <pre><code>$ uv tool upgrade black --reinstall-package click\n</code></pre> <p>Tool upgrades will respect the version constraints provided when installing the tool. For example, <code>uv tool install black &gt;=23,&lt;24</code> followed by <code>uv tool upgrade black</code> will upgrade Black to the latest version in the range <code>&gt;=23,&lt;24</code>.</p> <p>To instead replace the version constraints, re-install the tool with <code>uv tool install</code>:</p> <pre><code>$ uv tool install black&gt;=24\n</code></pre> <p>Similarly, tool upgrades will retain the settings provided when installing the tool. For example, <code>uv tool install black --prelease allow</code> followed by <code>uv tool upgrade black</code> will retain the <code>--prelease allow</code> setting.</p> <p>Tool upgrades will reinstall the tool executables, even if they have not changed.</p>"},{"location":"concepts/tools/#including-additional-dependencies","title":"Including additional dependencies","text":"<p>Additional packages can be included during tool invocations:</p> <pre><code>$ uvx --with &lt;extra-package&gt; &lt;tool&gt;\n</code></pre> <p>And installations:</p> <pre><code>$ uv tool install --with &lt;extra-package&gt; &lt;tool-package&gt;\n</code></pre> <p>The <code>--with</code> option can be provided multiple times to include additional packages.</p> <p>The <code>--with</code> option supports package specifications, so a specific version can be requested:</p> <pre><code>$ uvx --with &lt;extra-package&gt;==&lt;version&gt; &lt;tool-package&gt;\n</code></pre> <p>If the requested version conflicts with the requirements of the tool package, package resolution will fail and the command will error.</p>"},{"location":"concepts/tools/#tool-executables","title":"Tool executables","text":"<p>Tool executables include all console entry points, script entry points, and binary scripts provided by a Python package. Tool executables are symlinked into the <code>bin</code> directory on Unix and copied on Windows.</p>"},{"location":"concepts/tools/#the-bin-directory","title":"The <code>bin</code> directory","text":"<p>Executables are installed into the user <code>bin</code> directory following the XDG standard, e.g., <code>~/.local/bin</code>. Unlike other directory schemes in uv, the XDG standard is used on all platforms notably including Windows and macOS \u2014 there is no clear alternative location to place executables on these platforms. The installation directory is determined from the first available environment variable:</p> <ul> <li><code>$XDG_BIN_HOME</code></li> <li><code>$XDG_DATA_HOME/../bin</code></li> <li><code>$HOME/.local/bin</code></li> </ul> <p>Executables provided by dependencies of tool packages are not installed.</p>"},{"location":"concepts/tools/#the-path","title":"The <code>PATH</code>","text":"<p>The <code>bin</code> directory must be in the <code>PATH</code> variable for tool executables to be available from the shell. If it is not in the <code>PATH</code>, a warning will be displayed. The <code>uv tool update-shell</code> command can be used to add the <code>bin</code> directory to the <code>PATH</code> in common shell configuration files.</p>"},{"location":"concepts/tools/#overwriting-executables","title":"Overwriting executables","text":"<p>Installation of tools will not overwrite executables in the <code>bin</code> directory that were not previously installed by uv. For example, if <code>pipx</code> has been used to install a tool, <code>uv tool install</code> will fail. The <code>--force</code> flag can be used to override this behavior.</p>"},{"location":"concepts/tools/#relationship-to-uv-run","title":"Relationship to <code>uv run</code>","text":"<p>The invocation <code>uv tool run &lt;name&gt;</code> is nearly equivalent to:</p> <pre><code>$ uv run --no-project --with &lt;name&gt; -- &lt;name&gt;\n</code></pre> <p>However, there are a couple notable differences when using uv's tool interface:</p> <ul> <li>The <code>--with</code> option is not needed \u2014 the required package is inferred from the command name.</li> <li>The temporary environment is cached in a dedicated location.</li> <li>The <code>--no-project</code> flag is not needed \u2014 tools are always run isolated from the project.</li> <li>If a tool is already installed, <code>uv tool run</code> will use the installed version but <code>uv run</code> will   not.</li> <li>The project will be built and installed instead of using an editable installation</li> </ul>"},{"location":"concepts/workspaces/","title":"Workspaces","text":"<p>Workspaces help organize large codebases by splitting them into multiple packages with independent dependencies. Each package in a workspace has its own <code>pyproject.toml</code>, but they are all locked together in a shared lockfile and installed to shared virtual environment.</p> <p>Using the project interface, <code>uv run</code> and <code>uv sync</code> will install all packages of the workspace, unless you select a single workspace member with <code>--package</code>. When using the <code>uv pip</code> interface, workspace dependencies behave like editable path dependencies.</p>"},{"location":"concepts/workspaces/#when-not-to-use-workspaces","title":"When (not) to use workspaces","text":"<p>One common use case for a workspace is that the codebase grows large, and eventually you want some modules to become independent packages with their own dependency specification. Other use cases are separating parts of the codebase with different responsibilities, e.g. in a repository with a library package and CLI package, where the CLI package makes features of the library available but has additional dependencies, a webserver with a backend and an ingestion package, or a library that has a performance-critical subroutine implemented in a native language.</p> <p>Workspaces are not suited when you don't want to install all members together, members have conflicting requirements, or you simply want individual virtual environments per project. In this case, use regular (editable) relative path dependencies.</p> <p>Currently, workspace don't properly support different members having different <code>requires-python</code> values, we apply the highest of all <code>requires-python</code> lower bounds to the entire workspace. You need to use a <code>uv pip</code> to install individual member in an older virtual environment.</p> <p>Note</p> <p>As Python does not provide dependency isolation, uv can't ensure that a package uses only the dependencies it has declared, and not also imports a package that was installed for another dependency. For workspaces specifically, uv can't ensure that packages don't import dependencies declared by another workspace member.</p>"},{"location":"concepts/workspaces/#usage","title":"Usage","text":"<p>A workspace can be created by adding a <code>tool.uv.workspace</code> table to a <code>pyproject.toml</code> that will become the workspace root. This table contains <code>members</code> (mandatory) and <code>exclude</code> (optional), with lists of globs of directories:</p> pyproject.toml<pre><code>[tool.uv.workspace]\nmembers = [\"packages/*\", \"examples/*\"]\nexclude = [\"example/excluded_example\"]\n</code></pre> <p><code>uv.lock</code> and <code>.venv</code> for the entire workspace are created next to this <code>pyproject.toml</code>. All members need to be in directories below it.</p> <p>If <code>tool.uv.sources</code> is defined in the workspace root, it applies to all members, unless overridden in the <code>tool.uv.sources</code> of a specific member.</p> <p>Using <code>uv init</code> inside a workspace will add the newly created package to <code>members</code>.</p>"},{"location":"concepts/workspaces/#common-structures","title":"Common structures","text":"<p>There a two main workspace structures: A root package with helpers and a flat workspace.</p> <p>The root workspace layout defines one main package in the root of the repository, with helper packages in <code>packages</code>. In this example <code>albatross/pyproject.toml</code> has both a <code>project</code> section and a <code>tool.uv.workspace</code> section.</p> <pre><code>albatross\n\u251c\u2500\u2500 packages\n\u2502   \u251c\u2500\u2500 provider_a\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u2502   \u2514\u2500\u2500 src\n\u2502   \u2502       \u2514\u2500\u2500 provider_a\n\u2502   \u2502           \u251c\u2500\u2500 __init__.py\n\u2502   \u2502           \u2514\u2500\u2500 foo.py\n\u2502   \u2514\u2500\u2500 provider_b\n\u2502       \u251c\u2500\u2500 pyproject.toml\n\u2502       \u2514\u2500\u2500 src\n\u2502           \u2514\u2500\u2500 provider_b\n\u2502               \u251c\u2500\u2500 __init__.py\n\u2502               \u2514\u2500\u2500 bar.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 uv.lock\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 albatross\n        \u2514\u2500\u2500 main.py\n</code></pre> <p>In the flat layout, all packages are in the <code>packages</code> directory, and the root <code>pyproject.toml</code> defines a so-called virtual workspace. In this example <code>albatross/pyproject.toml</code> has only a <code>tool.uv.workspace</code> section, but no <code>project</code>.</p> <pre><code>albatross\n\u251c\u2500\u2500 packages\n\u2502   \u251c\u2500\u2500 albatross\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u2502   \u2514\u2500\u2500 src\n\u2502   \u2502       \u2514\u2500\u2500 albatross\n\u2502   \u2502           \u251c\u2500\u2500 __init__.py\n\u2502   \u2502           \u2514\u2500\u2500 foo.py\n\u2502   \u251c\u2500\u2500 provider_a\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u2502   \u2514\u2500\u2500 src\n\u2502   \u2502       \u2514\u2500\u2500 provider_a\n\u2502   \u2502           \u251c\u2500\u2500 __init__.py\n\u2502   \u2502           \u2514\u2500\u2500 foo.py\n\u2502   \u2514\u2500\u2500 provider_b\n\u2502       \u251c\u2500\u2500 pyproject.toml\n\u2502       \u2514\u2500\u2500 src\n\u2502           \u2514\u2500\u2500 provider_b\n\u2502               \u251c\u2500\u2500 __init__.py\n\u2502               \u2514\u2500\u2500 bar.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 uv.lock\n</code></pre> <p>In the flat layout, you may still define development dependencies in the workspace root <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[tool.uv.workspace]\nmembers = [\"packages/*\"]\n[tool.uv]\ndev-dependencies = [\n\"pytest &gt;=8.3.2,&lt;9\"\n]\n</code></pre>"},{"location":"configuration/","title":"Configuration overview","text":"<p>Read about the various ways to configure uv:</p> <ul> <li>Using configuration files</li> <li>Using environment variables</li> <li>Configuring authentication</li> </ul> <p>Or, jump to the settings reference which enumerates the available configuration options.</p>"},{"location":"configuration/authentication/","title":"Authentication","text":""},{"location":"configuration/authentication/#git-authentication","title":"Git authentication","text":"<p>uv allows packages to be installed from Git and supports the following schemes for authenticating with private repositories.</p> <p>Using SSH:</p> <ul> <li><code>git+ssh://git@&lt;hostname&gt;/...</code> (e.g. <code>git+ssh://git@github.com/astral-sh/uv</code>)</li> <li><code>git+ssh://git@&lt;host&gt;/...</code> (e.g. <code>git+ssh://git@github.com-key-2/astral-sh/uv</code>)</li> </ul> <p>See the GitHub SSH documentation for more details on how to configure SSH.</p> <p>Using a password or token:</p> <ul> <li><code>git+https://&lt;user&gt;:&lt;token&gt;@&lt;hostname&gt;/...</code> (e.g.   <code>git+https://git:github_pat_asdf@github.com/astral-sh/uv</code>)</li> <li><code>git+https://&lt;token&gt;@&lt;hostname&gt;/...</code> (e.g. <code>git+https://github_pat_asdf@github.com/astral-sh/uv</code>)</li> <li><code>git+https://&lt;user&gt;@&lt;hostname&gt;/...</code> (e.g. <code>git+https://git@github.com/astral-sh/uv</code>)</li> </ul> <p>When using a GitHub personal access token, the username is arbitrary. GitHub does not support logging in with password directly, although other hosts may. If a username is provided without credentials, you will be prompted to enter them.</p> <p>If there are no credentials present in the URL and authentication is needed, the Git credential helper will be queried.</p>"},{"location":"configuration/authentication/#http-authentication","title":"HTTP authentication","text":"<p>uv supports credentials over HTTP when querying package registries.</p> <p>Authentication can come from the following sources, in order of precedence:</p> <ul> <li>The URL, e.g., <code>https://&lt;user&gt;:&lt;password&gt;@&lt;hostname&gt;/...</code></li> <li>A <code>netrc</code> configuration file</li> <li>A keyring provider (requires opt-in)</li> </ul> <p>If authentication is found for a single net location (scheme, host, and port), it will be cached for the duration of the command and used for other queries to that net location. Authentication is not cached across invocations of uv.</p> <p>Note <code>--keyring-provider subprocess</code> or <code>UV_KEYRING_PROVIDER=subprocess</code> must be provided to enable keyring-based authentication.</p> <p>Authentication may be used for hosts specified in the following contexts:</p> <ul> <li><code>index-url</code></li> <li><code>extra-index-url</code></li> <li><code>find-links</code></li> <li><code>package @ https://...</code></li> </ul> <p>See the <code>pip</code> compatibility guide for details on differences from <code>pip</code>.</p>"},{"location":"configuration/authentication/#custom-ca-certificates","title":"Custom CA certificates","text":"<p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS, where reading the system trust store incurs a significant delay).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store. To instruct uv to use the system's trust store, run uv with the <code>--native-tls</code> command-line flag, or set the <code>UV_NATIVE_TLS</code> environment variable to <code>true</code>.</p> <p>If a direct path to the certificate is required (e.g., in CI), set the <code>SSL_CERT_FILE</code> environment variable to the path of the certificate bundle, to instruct uv to use that file instead of the system's trust store.</p> <p>If client certificate authentication (mTLS) is desired, set the <code>SSL_CLIENT_CERT</code> environment variable to the path of the PEM formatted file containing the certificate followed by the private key.</p>"},{"location":"configuration/authentication/#authentication-with-alternative-package-indexes","title":"Authentication with alternative package indexes","text":"<p>See the alternative indexes integration guide for details on authentication with popular alternative Python package indexes.</p>"},{"location":"configuration/environment/","title":"Environment variables","text":"<p>uv accepts the following command-line arguments as environment variables:</p> <ul> <li><code>UV_INDEX_URL</code>: Equivalent to the <code>--index-url</code> command-line argument. If set, uv will use this   URL as the base index for searching for packages.</li> <li><code>UV_EXTRA_INDEX_URL</code>: Equivalent to the <code>--extra-index-url</code> command-line argument. If set, uv will   use this space-separated list of URLs as additional indexes when searching for packages.</li> <li><code>UV_CACHE_DIR</code>: Equivalent to the <code>--cache-dir</code> command-line argument. If set, uv will use this   directory for caching instead of the default cache directory.</li> <li><code>UV_NO_CACHE</code>: Equivalent to the <code>--no-cache</code> command-line argument. If set, uv will not use the   cache for any operations.</li> <li><code>UV_RESOLUTION</code>: Equivalent to the <code>--resolution</code> command-line argument. For example, if set to   <code>lowest-direct</code>, uv will install the lowest compatible versions of all direct dependencies.</li> <li><code>UV_PRERELEASE</code>: Equivalent to the <code>--prerelease</code> command-line argument. For example, if set to   <code>allow</code>, uv will allow pre-release versions for all dependencies.</li> <li><code>UV_SYSTEM_PYTHON</code>: Equivalent to the <code>--system</code> command-line argument. If set to <code>true</code>, uv will   use the first Python interpreter found in the system <code>PATH</code>. WARNING: <code>UV_SYSTEM_PYTHON=true</code> is   intended for use in continuous integration (CI) or containerized environments and should be used   with caution, as modifying the system Python can lead to unexpected behavior.</li> <li><code>UV_PYTHON</code>: Equivalent to the <code>--python</code> command-line argument. If set to a path, uv will use   this Python interpreter for all operations.</li> <li><code>UV_BREAK_SYSTEM_PACKAGES</code>: Equivalent to the <code>--break-system-packages</code> command-line argument. If   set to <code>true</code>, uv will allow the installation of packages that conflict with system-installed   packages. WARNING: <code>UV_BREAK_SYSTEM_PACKAGES=true</code> is intended for use in continuous integration   (CI) or containerized environments and should be used with caution, as modifying the system Python   can lead to unexpected behavior.</li> <li><code>UV_NATIVE_TLS</code>: Equivalent to the <code>--native-tls</code> command-line argument. If set to <code>true</code>, uv will   use the system's trust store instead of the bundled <code>webpki-roots</code> crate.</li> <li><code>UV_INDEX_STRATEGY</code>: Equivalent to the <code>--index-strategy</code> command-line argument. For example, if   set to <code>unsafe-any-match</code>, uv will consider versions of a given package available across all index   URLs, rather than limiting its search to the first index URL that contains the package.</li> <li><code>UV_REQUIRE_HASHES</code>: Equivalent to the <code>--require-hashes</code> command-line argument. If set to <code>true</code>,   uv will require that all dependencies have a hash specified in the requirements file.</li> <li><code>UV_CONSTRAINT</code>: Equivalent to the <code>--constraint</code> command-line argument. If set, uv will use this   file as the constraints file. Uses space-separated list of files.</li> <li><code>UV_LINK_MODE</code>: Equivalent to the <code>--link-mode</code> command-line argument. If set, uv will use this as   a link mode.</li> <li><code>UV_NO_BUILD_ISOLATION</code>: Equivalent to the <code>--no-build-isolation</code> command-line argument. If set,   uv will skip isolation when building source distributions.</li> <li><code>UV_CUSTOM_COMPILE_COMMAND</code>: Used to override uv in the output header of the <code>requirements.txt</code>   files generated by <code>uv pip compile</code>. Intended for use-cases in which <code>uv pip compile</code> is called   from within a wrapper script, to include the name of the wrapper script in the output file.</li> <li><code>UV_KEYRING_PROVIDER</code>: Equivalent to the <code>--keyring-provider</code> command-line argument. If set, uv   will use this value as the keyring provider.</li> <li><code>UV_CONFIG_FILE</code>: Equivalent to the <code>--config-file</code> command-line argument. Expects a path to a   local <code>uv.toml</code> file to use as the configuration file.</li> <li><code>UV_CONCURRENT_DOWNLOADS</code>: Sets the maximum number of in-flight concurrent downloads that uv will   perform at any given time.</li> <li><code>UV_CONCURRENT_BUILDS</code>: Sets the maximum number of source distributions that uv will build   concurrently at any given time.</li> <li><code>UV_CONCURRENT_INSTALLS</code>: Used to control the number of threads used when installing and unzipping   packages.</li> <li><code>UV_EXCLUDE_NEWER</code>: Equivalent to the <code>--exclude-newer</code> command-line argument. If set, uv will   exclude distributions published after the specified date.</li> <li><code>UV_PYTHON_INSTALL_MIRROR</code>: Managed Python installations are downloaded from   <code>python-build-standalone</code>. This variable   can be set to a mirror URL to use a different source for Python installations. The provided URL   will replace <code>https://github.com/indygreg/python-build-standalone/releases/download</code> in, e.g.,   <code>https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz</code>.</li> <li><code>UV_PYPY_INSTALL_MIRROR</code>: Managed PyPy installations are downloaded from   python.org. This variable can be set to a mirror URL to use a   different source for PyPy installations. The provided URL will replace   <code>https://downloads.python.org/pypy</code> in, e.g.,   <code>https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2</code>.</li> </ul> <p>In each case, the corresponding command-line argument takes precedence over an environment variable.</p> <p>In addition, uv respects the following environment variables:</p> <ul> <li><code>SSL_CERT_FILE</code>: If set, uv will use this file as the certificate bundle instead of the system's   trust store.</li> <li><code>SSL_CLIENT_CERT</code>: If set, uv will use this file for mTLS authentication. This should be a single   file containing both the certificate and the private key in PEM format.</li> <li><code>RUST_LOG</code>: If set, uv will use this value as the log level for its <code>--verbose</code> output. Accepts   any filter compatible with the <code>tracing_subscriber</code> crate. For example, <code>RUST_LOG=trace</code> will   enable trace-level logging. See the   tracing documentation   for more.</li> <li><code>HTTP_PROXY</code>, <code>HTTPS_PROXY</code>, <code>ALL_PROXY</code>: The proxy to use for all HTTP/HTTPS requests.</li> <li><code>HTTP_TIMEOUT</code> (or <code>UV_HTTP_TIMEOUT</code>): If set, uv will use this value (in seconds) as the timeout   for HTTP reads (default: 30 s).</li> <li><code>PYC_INVALIDATION_MODE</code>: The validation modes to use when run with <code>--compile</code>. See:   <code>PycInvalidationMode</code>.</li> <li><code>VIRTUAL_ENV</code>: Used to detect an activated virtual environment.</li> <li><code>CONDA_PREFIX</code>: Used to detect an activated Conda environment.</li> <li><code>PROMPT</code>: Used to detect the use of the Windows Command Prompt (as opposed to PowerShell).</li> <li><code>NU_VERSION</code>: Used to detect the use of NuShell.</li> <li><code>FISH_VERSION</code>: Used to detect the use of the Fish shell.</li> <li><code>BASH_VERSION</code>: Used to detect the use of the Bash shell.</li> <li><code>ZSH_VERSION</code>: Used to detect the use of the Zsh shell.</li> <li><code>MACOSX_DEPLOYMENT_TARGET</code>: Used with <code>--python-platform macos</code> and related variants to set the   deployment target (i.e., the minimum supported macOS version). Defaults to <code>12.0</code>, the   least-recent non-EOL macOS version at time of writing.</li> <li><code>NO_COLOR</code>: Disable colors. Takes precedence over <code>FORCE_COLOR</code>. See   no-color.org.</li> <li><code>FORCE_COLOR</code>: Enforce colors regardless of TTY support. See   force-color.org.</li> </ul>"},{"location":"configuration/files/","title":"Configuration files","text":"<p>uv supports persistent configuration files at both the project- and user-level.</p> <p>Specifically, uv will search for a <code>pyproject.toml</code> or <code>uv.toml</code> file in the current directory, or in the nearest parent directory.</p> <p>Note</p> <p>For <code>tool</code> commands, which operate the user level, local configuration files will be ignored. Instead, uv will exclusively read from user-level configuration (e.g., <code>~/.config/uv/uv.toml</code>).</p> <p>In workspaces, uv will begin its search at the workspace root, ignoring any configuration defined in workspace members. Since the workspace is locked as a single unit, configuration is shared across all members.</p> <p>If a <code>pyproject.toml</code> file is found, uv will read configuration from the <code>[tool.uv.pip]</code> table. For example, to set a persistent index URL, add the following to a <code>pyproject.toml</code>:</p> project.toml<pre><code>[tool.uv.pip]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre> <p>(If there is no such table, the <code>pyproject.toml</code> file will be ignored, and uv will continue searching in the directory hierarchy.)</p> <p>If a <code>uv.toml</code> file is found, uv will read from the <code>[pip]</code> table. For example:</p> uv.toml<pre><code>[pip]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre> <p>uv will also discover user-level configuration at <code>~/.config/uv/uv.toml</code> (or <code>$XDG_CONFIG_HOME/uv/uv.toml</code>) on macOS and Linux, or <code>%APPDATA%\\uv\\uv.toml</code> on Windows. User-level configuration must use the <code>uv.toml</code> format, rather than the <code>pyproject.toml</code> format, as a <code>pyproject.toml</code> is intended to define a Python project.</p> <p>If both project- and user-level configuration are found, the settings will be merged, with the project-level configuration taking precedence. Specifically, if a string, number, or boolean is present in both tables, the project-level value will be used, and the user-level value will be ignored. If an array is present in both tables, the arrays will be concatenated, with the project-level settings appearing earlier in the merged array.</p> <p>Settings provided via environment variables take precedence over persistent configuration, and settings provided via the command line take precedence over both.</p> <p>uv accepts a <code>--no-config</code> command-line argument which, when provided, disables the discovery of any persistent configuration.</p> <p>uv also accepts a <code>--config-file</code> command-line argument, which accepts a path to a <code>uv.toml</code> to use as the configuration file. When provided, this file will be used in place of any discovered configuration files (e.g., user-level configuration will be ignored).</p>"},{"location":"configuration/files/#settings","title":"Settings","text":"<p>See the settings reference for an enumeration of the available settings.</p>"},{"location":"getting-started/features/","title":"Features","text":"<p>uv provides essential features for Python development \u2014 from installing Python and hacking on simple scripts to working on large projects that support multiple Python versions and platforms.</p> <p>uv's interface can be broken down into sections, which can be used independently or together.</p>"},{"location":"getting-started/features/#python-versions","title":"Python versions","text":"<p>Installing and managing Python itself.</p> <ul> <li><code>uv python install</code>: Install Python versions.</li> <li><code>uv python list</code>: View available Python versions.</li> <li><code>uv python find</code>: Find an installed Python version.</li> <li><code>uv python pin</code>: Pin the current project to use a specific Python version.</li> <li><code>uv python uninstall</code>: Uninstall a Python version.</li> </ul> <p>See the guide on installing Python to get started.</p>"},{"location":"getting-started/features/#scripts","title":"Scripts","text":"<p>Executing standalone Python scripts, e.g., <code>example.py</code>.</p> <ul> <li><code>uv run</code>: Run a script.</li> </ul> <p>See the guide on running scripts to get started.</p>"},{"location":"getting-started/features/#projects","title":"Projects","text":"<p>Creating and working on Python projects, i.e., with a <code>pyproject.toml</code>.</p> <ul> <li><code>uv init</code>: Create a new Python project.</li> <li><code>uv add</code>: Add a dependency to the project.</li> <li><code>uv remove</code>: Remove a dependency from the project.</li> <li><code>uv sync</code>: Sync the project's dependencies with the environment.</li> <li><code>uv lock</code>: Create a lockfile for the project's dependencies.</li> <li><code>uv run</code>: Run a command in the project environment.</li> <li><code>uv tree</code>: View the dependency tree for the project.</li> </ul> <p>See the guide on projects to get started.</p>"},{"location":"getting-started/features/#tools","title":"Tools","text":"<p>Running and installing tools published to Python package indexes, e.g., <code>ruff</code> or <code>black</code>.</p> <ul> <li><code>uvx</code> / <code>uv tool run</code>: Run a tool in a temporary environment.</li> <li><code>uv tool install</code>: Install a tool user-wide.</li> <li><code>uv tool uninstall</code>: Uninstall a tool.</li> <li><code>uv tool list</code>: List installed tools.</li> <li><code>uv tool update-shell</code>: Update the shell to include tool executables.</li> </ul> <p>See the guide on tools to get started.</p>"},{"location":"getting-started/features/#the-pip-interface","title":"The pip interface","text":"<p>Manually managing environments and packages \u2014 intended to be used in legacy workflows or cases where the high-level commands do not provide enough control.</p> <p>Creating virtual environments (replacing <code>venv</code> and <code>virtualenv</code>):</p> <ul> <li><code>uv venv</code>: Create a new virtual environment.</li> </ul> <p>See the documentation on using environments for details.</p> <p>Managing packages in an environment (replacing <code>pip</code> and <code>pipdeptree</code>):</p> <ul> <li><code>uv pip install</code>: Install packages into the current environment.</li> <li><code>uv pip show</code>: Show details about an installed package.</li> <li><code>uv pip freeze</code>: List installed packages and their versions.</li> <li><code>uv pip check</code>: Check that the current environment has compatible packages.</li> <li><code>uv pip list</code>: List installed packages.</li> <li><code>uv pip uninstall</code>: Uninstall packages.</li> <li><code>uv pip tree</code>: View the dependency tree for the environment.</li> </ul> <p>See the documentation on managing packages for details.</p> <p>Locking packages in an environment (replacing <code>pip-tools</code>):</p> <ul> <li><code>uv pip compile</code>: Compile requirements into a lockfile.</li> <li><code>uv pip sync</code>: Sync an environment with a lockfile.</li> </ul> <p>See the documentation on locking environments for details.</p> <p>Important</p> <p>These commands do not exactly implement the interfaces and behavior of the tools they are based on. The further you stray from common workflows, the more likely you are to encounter differences. Consult the pip-compatibility guide for details.</p>"},{"location":"getting-started/features/#utility","title":"Utility","text":"<p>Managing and inspecting uv's state, such as the cache, storage directories, or performing a self-update:</p> <ul> <li><code>uv cache clean</code>: Remove cache entries.</li> <li><code>uv cache prune</code>: Remove outdated cache entries.</li> <li><code>uv cache dir</code>: Show the uv cache directory path.</li> <li><code>uv tool dir</code>: Show the uv tool directory path.</li> <li><code>uv python dir</code>: Show the uv installed Python versions path.</li> <li><code>uv self update</code>: Update uv to the latest version.</li> </ul>"},{"location":"getting-started/features/#next-steps","title":"Next steps","text":"<p>Read the guides for an introduction to each feature, check out concept pages for in-depth details about uv's features, or learn how to get help if you run into any problems.</p>"},{"location":"getting-started/first-steps/","title":"First steps with uv","text":"<p>After installing uv, you can check that uv is available by running the <code>uv</code> command:</p> <pre><code>$ uv\nAn extremely fast Python package manager.\nUsage: uv [OPTIONS] &lt;COMMAND&gt;\n...\n</code></pre> <p>You should see a help menu listing the available commands.</p> <p>Read on for a brief overview of the help menu and version command, or jump to an overview of features to start using uv.</p>"},{"location":"getting-started/first-steps/#next-steps","title":"Next steps","text":"<p>Now that you've confirmed uv is installed and know how to get help, check out an overview of features or jump to the guides to start using uv.</p>"},{"location":"getting-started/help/","title":"Getting help","text":""},{"location":"getting-started/help/#help-menus","title":"Help menus","text":"<p>The <code>--help</code> flag can be used to view the help menu for a command, e.g., for <code>uv</code>:</p> <pre><code>$ uv --help\n</code></pre> <p>To view the help menu for a specific command, e.g., for <code>uv init</code>:</p> <pre><code>$ uv init --help\n</code></pre> <p>When using the <code>--help</code> flag, uv displays a condensed help menu. To view a longer help menu for a command, use <code>uv help</code>:</p> <pre><code>$ uv help\n</code></pre> <p>To view the long help menu for a specific command, e.g., for <code>uv init</code>:</p> <pre><code>$ uv help init\n</code></pre> <p>When using the long help menu, uv will attempt to use <code>less</code> or <code>more</code> to \"page\" the output so it is not all displayed at once. To exit the pager, press <code>q</code>.</p>"},{"location":"getting-started/help/#viewing-the-version","title":"Viewing the version","text":"<p>When seeking help, it's important to determine the version of uv that you're using \u2014 sometimes the problem is already solved in a newer version.</p> <p>To check the installed version:</p> <pre><code>$ uv version\n</code></pre> <p>The following are also valid:</p> <pre><code>$ uv --version      # Same output as `uv version`\n$ uv -V             # Will not include the build commit and date\n$ uv pip --version  # Can be used with a subcommand\n</code></pre>"},{"location":"getting-started/help/#open-an-issue-on-github","title":"Open an issue on GitHub","text":"<p>The issue tracker on GitHub is a good place to report bugs and request features. Make sure to search for similar issues first, as it is common for someone else to encounter the same problem.</p>"},{"location":"getting-started/help/#chat-on-discord","title":"Chat on Discord","text":"<p>Astral has a Discord server, which is a great place to ask questions, learn more about uv, and engage with other community members.</p>"},{"location":"getting-started/installation/","title":"Installing uv","text":"<p>Install uv with our standalone installers or your package manager of choice (e.g., <code>pip install uv</code>).</p>"},{"location":"getting-started/installation/#standalone-installer","title":"Standalone installer","text":"<p>uv provides a standalone installer to download and install uv:</p> macOS and Linux<pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> Windows<pre><code>$ powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>By default, uv is installed to <code>~/.cargo/bin</code>.</p> <p>Tip</p> <p>The installation script may be inspected before use:</p> macOS and Linux<pre><code>$ curl -LsSf https://astral.sh/uv/install.sh | less\n</code></pre> Windows<pre><code>$ powershell -c \"irm https://astral.sh/uv/install.ps1 | more\"\n</code></pre> <p>Alternatively, the installer or binaries can be downloaded directly from GitHub.</p> <p>Request a specific version by including it in the URL:</p> macOS and Linux<pre><code>$ curl -LsSf https://astral.sh/uv/0.2.11/install.sh | sh\n</code></pre> Windows<pre><code>$ powershell -c \"irm https://astral.sh/uv/0.2.11/install.ps1 | iex\"\n</code></pre> <p>Tip</p> <p>When uv is installed via the standalone installer, self-updates are enabled:</p> <pre><code>$ uv self update\n</code></pre> <p>When another installation method is used, self-updates are disabled. Use the package manager's upgrade method instead.</p>"},{"location":"getting-started/installation/#pypi","title":"PyPI","text":"<p>For convenience, uv is published to PyPI.</p> <p>If installing from PyPI, we recommend installing uv into an isolated environment, e.g., with <code>pipx</code>:</p> <pre><code>$ pipx install uv\n</code></pre> <p>However, <code>pip</code> can also be used:</p> <pre><code>$ pip install uv\n</code></pre> <p>Note</p> <p>uv ships with prebuilt distributions (wheels) for many platforms; if a wheel is not available for a given platform, uv will be built from source, which requires a Rust toolchain. See the contributing setup guide for details on building uv from source.</p>"},{"location":"getting-started/installation/#homebrew","title":"Homebrew","text":"<p>uv is available in the core Homebrew packages.</p> <pre><code>$ brew install uv\n</code></pre>"},{"location":"getting-started/installation/#docker","title":"Docker","text":"<p>uv provides a Docker image at <code>ghcr.io/astral-sh/uv</code>.</p> <p>See our guide on using uv in Docker for more details.</p>"},{"location":"getting-started/installation/#github-releases","title":"GitHub Releases","text":"<p>uv release artifacts can be downloaded directly from GitHub Releases.</p> <p>Each release page includes binaries for all supported platforms as well as instructions for using the standalone installer via <code>github.com</code> instead of <code>astral.sh</code>.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next steps","text":"<p>See the first steps or jump straight to the guides to start using uv.</p>"},{"location":"guides/","title":"Guides overview","text":"<p>Check out one of the core guides to get started:</p> <ul> <li>Installing Python versions</li> <li>Running scripts and declaring dependencies</li> <li>Running and installing applications as tools</li> <li>Creating and working on projects</li> </ul> <p>Learn how to integrate uv with other software:</p> <ul> <li>Using in Docker images</li> <li>Using with pre-commit</li> <li>Using in GitHub Actions</li> <li>Using with alternative package indexes</li> </ul> <p>Or, explore the concept documentation for comprehensive breakdown of each feature.</p>"},{"location":"guides/install-python/","title":"Installing Python","text":"<p>If Python is already installed on your system, uv will detect and use it without configuration. However, uv can also install and manage Python versions for you.</p> <p>Tip</p> <p>uv will automatically fetch Python versions as needed \u2014 you don't need to install Python to get started.</p>"},{"location":"guides/install-python/#getting-started","title":"Getting started","text":"<p>To install the latest Python version:</p> <pre><code>$ uv python install\n</code></pre> <p>This will install a uv-managed Python version even if there is already a Python installation on your system. If you've previously installed Python with uv, a new version will not be installed.</p> <p>Note</p> <p>Python does not publish official distributable binaries. As such, uv uses third-party distributions from the <code>python-build-standalone</code> project. The project is partially maintained by the uv maintainers and is used by other prominent Python projects (e.g., Rye, Bazel). See the Python distributions documentation for more details.</p> <p>Once Python is installed, it will be used by <code>uv</code> commands automatically.</p> <p>Important</p> <p>When Python is installed by uv, it will not be available globally (i.e. via the <code>python</code> command). Support for this feature is planned for a future release. In the meantime, use <code>uv run</code> or create and activate a virtual environment to use <code>python</code> directly.</p>"},{"location":"guides/install-python/#installing-a-specific-version","title":"Installing a specific version","text":"<p>To install a specific Python version:</p> <pre><code>$ uv python install 3.12\n</code></pre> <p>To install multiple Python versions:</p> <pre><code>$ uv python install 3.11 3.12\n</code></pre> <p>To install an alternative Python implementation, e.g. PyPy:</p> <pre><code>$ uv python install pypy@3.12\n</code></pre> <p>See the <code>python install</code> documentation for more details.</p>"},{"location":"guides/install-python/#viewing-python-installations","title":"Viewing Python installations","text":"<p>To view available and installed Python versions:</p> <pre><code>$ uv python list\n</code></pre> <p>See the <code>python list</code> documentation for more details.</p>"},{"location":"guides/install-python/#automatic-python-downloads","title":"Automatic Python downloads","text":"<p>Note that Python does not need to be explicitly installed to use uv. By default, uv will automatically download Python versions when they are required. For example, the following would download Python 3.12 if it was not installed:</p> <pre><code>$ uv run --python 3.12 python -c 'print(\"hello world\")'\n</code></pre> <p>Even if a specific Python version is not requested, uv will download the latest version on demand. For example, the following will create a new virtual environment and download a managed Python version if Python is not found:</p> <pre><code>$ uv venv\n</code></pre> <p>Tip</p> <p>Automatic Python downloads can be easily disabled if you want more control over when Python is downloaded.</p>"},{"location":"guides/install-python/#using-an-existing-python-installation","title":"Using an existing Python installation","text":"<p>uv will use existing Python installations if present on your system. There is no configuration necessary for this behavior: uv will use the system Python if it satisfies the requirements of the command invocation. See the Python discovery documentation for details.</p> <p>To force uv to use the system Python, provide the <code>--python-preference only-system</code> option. See the Python version preference documentation for more details.</p>"},{"location":"guides/install-python/#next-steps","title":"Next steps","text":"<p>To learn more about <code>uv python</code>, see the Python version concept page and the command reference.</p> <p>Or, read on to learn how to run scripts and invoke Python with uv.</p>"},{"location":"guides/projects/","title":"Working on projects","text":"<p>uv is capable of managing Python projects using a <code>pyproject.toml</code> with a <code>[project]</code> metadata table.</p>"},{"location":"guides/projects/#creating-a-new-project","title":"Creating a new project","text":"<p>You can create a new Python project using the <code>uv init</code> command:</p> <pre><code>$ uv init hello-world\n$ cd hello-world\n</code></pre> <p>Alternatively, you can initialize a project in the working directory:</p> <pre><code>$ mkdir hello-world\n$ cd hello-world\n$ uv init\n</code></pre> <p>This will create the following directory structure:</p> <pre><code>.\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 hello_world\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"guides/projects/#working-on-an-existing-project","title":"Working on an existing project","text":"<p>If your project already contains a standard <code>pyproject.toml</code>, you can start using uv immediately. Commands like <code>uv add</code> and <code>uv run</code> will create a lockfile and environment the first time they are used.</p> <p>If you are migrating from an alternative Python package manager, you may need to edit your <code>pyproject.toml</code> manually before using uv. Most Python package managers extend the <code>pyproject.toml</code> standard to support common features, such as development dependencies. These extensions are specific to each package manager and will need to be converted to uv's format. See the documentation on project dependencies for more details.</p>"},{"location":"guides/projects/#project-structure","title":"Project structure","text":"<p>A project consists of a few important parts that work together and allow uv to manage your project. Along with the files created by <code>uv init</code>, uv will create a virtual environment and <code>uv.lock</code> file in the root of your project the first time you run a project command.</p>"},{"location":"guides/projects/#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>The <code>pyproject.toml</code> contains metadata about your project:</p> pyproject.toml<pre><code>[project]\nname = \"hello-world\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\ndependencies = []\n[tool.uv]\ndev-dependencies = []\n</code></pre> <p>This is where you specify dependencies, as well as details about the project such as its description or license. You can edit this file manually, or use commands like <code>uv add</code> and <code>uv remove</code> to manage your project through the CLI.</p> <p>Tip</p> <p>See the official <code>pyproject.toml</code> guide for more details on getting started with the <code>pyproject.toml</code> format.</p>"},{"location":"guides/projects/#venv","title":"<code>.venv</code>","text":"<p>The <code>.venv</code> folder contains your project's virtual environment, a Python environment that is isolated from the rest of your system. This is where uv will install your project's dependencies.</p> <p>See the project environment documentation for more details.</p>"},{"location":"guides/projects/#uvlock","title":"<code>uv.lock</code>","text":"<p><code>uv.lock</code> is a cross-platform lockfile that contains exact information about your project's dependencies. Unlike the <code>pyproject.toml</code> which is used to specify the broad requirements of your project, the lockfile contains the exact resolved versions that are installed in the project environment. This file should be checked into version control, allowing for consistent and reproducible installations across machines.</p> <p><code>uv.lock</code> is a human-readable TOML file but is managed by uv and should not be edited manually.</p> <p>See the lockfile documentation for more details.</p>"},{"location":"guides/projects/#managing-dependencies","title":"Managing dependencies","text":"<p>You can add dependencies to your <code>pyproject.toml</code> with the <code>uv add</code> command. This will also update the lockfile and project environment:</p> <pre><code>$ uv add requests\n</code></pre> <p>You can also specify version constraints or alternative sources:</p> <pre><code>$ # Specify a version constraint\n$ uv add 'requests==2.31.0'\n$ # Add a git dependency\n$ uv add requests --git https://github.com/psf/requests\n</code></pre> <p>To remove a package, you can use <code>uv remove</code>:</p> <pre><code>$ uv remove requests\n</code></pre> <p>See the documentation on managing dependencies for more details.</p>"},{"location":"guides/projects/#running-commands","title":"Running commands","text":"<p><code>uv run</code> can be used to run arbitrary scripts or commands in your project environment.</p> <p>Prior to every <code>uv run</code> invocation, uv will verify that the lockfile is up-to-date with the <code>pyproject.toml</code>, and that the environment is up-to-date with the lockfile, keeping your project in-sync without the need for manual intervention. <code>uv run</code> guarantees that your command is run in a consistent, locked environment.</p> <p>For example, to use <code>flask</code>:</p> <pre><code>$ uv add flask\n$ uv run -- flask run -p 3000\n</code></pre> <p>Or, to run a script:</p> example.py<pre><code># Require a project dependency\nimport flask\nprint(\"hello world\")\n</code></pre> <pre><code>$ uv run example.py\n</code></pre> <p>Alternatively, you can use <code>uv sync</code> to manually update the environment then activate it before executing a command:</p> <pre><code>$ uv sync\n$ source .venv/bin/activate\n$ flask run -p 3000\n$ python example.py\n</code></pre> <p>Note</p> <p>The virtual environment must be active to run scripts and commands in the project without <code>uv run</code>. Virtual environment activation differs per shell and platform.</p> <p>See the documentation on running commands and running scripts in projects for more details.</p>"},{"location":"guides/projects/#next-steps","title":"Next steps","text":"<p>To learn more about working on projects with uv, see the Projects concept page and the command reference.</p> <p>Or, read on to learn how to publish your project as a package.</p>"},{"location":"guides/publish/","title":"Publishing a package","text":"<p>uv does not yet have dedicated commands for building and publishing a package. Instead, you can use the PyPA tools <code>build</code> and <code>twine</code>, both of which can be invoked via <code>uvx</code>.</p>"},{"location":"guides/publish/#building-your-package","title":"Building your package","text":"<p>Build your package with the official <code>build</code> frontend:</p> <pre><code>$ uvx --from build pyproject-build --installer uv\n</code></pre> <p>Note</p> <p>Using <code>--installer uv</code> is not required, but uses uv instead of the default, pip, for faster builds.</p> <p>The build artifacts will be placed in <code>dist/</code>.</p>"},{"location":"guides/publish/#publishing-your-package","title":"Publishing your package","text":"<p>Publish your package with <code>twine</code>:</p> <pre><code>$ uvx twine upload dist/*\n</code></pre> <p>Tip</p> <p>To provide credentials, use the <code>TWINE_USERNAME</code> and <code>TWINE_PASSWORD</code> environment variables.</p>"},{"location":"guides/publish/#installing-your-package","title":"Installing your package","text":"<p>Test that the package can be installed and imported with <code>uv run</code>:</p> <pre><code>$ uv run --with &lt;PACKAGE&gt; --no-project -- python -c \"import &lt;PACKAGE&gt;\"\n</code></pre> <p>The <code>--no-project</code> flag is used to avoid installing the package from your local project directory.</p> <p>Tip</p> <p>If you have recently installed the package, you may need to include the <code>--refresh-package &lt;PACKAGE&gt;</code> option to avoid using a cached version of the package.</p>"},{"location":"guides/publish/#next-steps","title":"Next steps","text":"<p>To learn more about publishing packages, check out the PyPA guides on building and publishing.</p> <p>Or, read on for more details about the concepts in uv.</p>"},{"location":"guides/scripts/","title":"Running scripts","text":"<p>A Python script is a file intended for standalone execution, e.g., with <code>python &lt;script&gt;.py</code>. Using uv to execute scripts ensures that script dependencies are managed without manually managing environments.</p> <p>Note</p> <p>If you are not familiar with Python environments: every Python installation has an environment that packages can be installed in. Typically, creating virtual environments is recommended to isolate packages required by each script. uv automatically manages virtual environments for you and prefers a declarative approach to dependencies.</p>"},{"location":"guides/scripts/#running-a-script-without-dependencies","title":"Running a script without dependencies","text":"<p>If your script has no dependencies, you can execute it with <code>uv run</code>:</p> example.py<pre><code>print(\"Hello world\")\n</code></pre> <pre><code>$ uv run example.py\nHello world\n</code></pre> <p>Similarly, if your script depends on a module in the standard library, there's nothing more to do:</p> example.py<pre><code>import os\nprint(os.path.expanduser(\"~\"))\n</code></pre> <pre><code>$ uv run example.py\n/Users/astral\n</code></pre> <p>Arguments may be provided to the script:</p> example.py<pre><code>import sys\nprint(\" \".join(sys.argv[1:]))\n</code></pre> <pre><code>$ uv run example.py test\ntest\n$ uv run example.py hello world!\nhello world!\n</code></pre> <p>Note that if you use <code>uv run</code> in a project, i.e. a directory with a <code>pyproject.toml</code>, it will install the current project before running the script. If your script does not depend on the project, use the <code>--no-project</code> flag to skip this:</p> <pre><code>$ # Note, it is important that the flag comes _before_ the script\n$ uv run --no-project example.py\n</code></pre> <p>See the projects guide for more details on working in projects.</p>"},{"location":"guides/scripts/#running-a-script-with-dependencies","title":"Running a script with dependencies","text":"<p>When your script requires other packages, they must be installed into the environment that the script runs in. uv prefers to create these environments on-demand instead of using a long-lived virtual environment with manually managed dependencies. This requires explicit declaration of dependencies that are required for the script. Generally, it's recommended to use a project or inline metadata to declare dependencies, but uv supports requesting dependencies per invocation as well.</p> <p>For example, the following script requires <code>rich</code>.</p> example.py<pre><code>import time\nfrom rich.progress import track\nfor i in track(range(20), description=\"For example:\"):\ntime.sleep(0.05)\n</code></pre> <p>If executed without specifying a dependency, this script will fail:</p> <pre><code>$ uv run --no-project example.py\nTraceback (most recent call last):\n  File \"/Users/astral/example.py\", line 2, in &lt;module&gt;\n    from rich.progress import track\nModuleNotFoundError: No module named 'rich'\n</code></pre> <p>Request the dependency using the <code>--with</code> option:</p> <pre><code>$ uv run --with rich example.py\nFor example: \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:01\n</code></pre> <p>Constraints can be added to the requested dependency if specific versions are needed:</p> <pre><code>$ uv run --with 'rich&gt;12,&lt;13' example.py\n</code></pre> <p>Multiple dependencies can be requested by repeating with <code>--with</code> option.</p> <p>Note that if <code>uv run</code> is used in a project, these dependencies will be included in addition to the project's dependencies. To opt-out of this behavior, use the <code>--no-project</code> flag.</p>"},{"location":"guides/scripts/#declaring-script-dependencies","title":"Declaring script dependencies","text":"<p>Python recently added a standard format for inline script metadata. This allows the dependencies for a script to be declared in the script itself.</p> <p>To use inline script metadata, include a <code>script</code> section at the top of the script and declare the dependencies using TOML:</p> example.py<pre><code># /// script\n# dependencies = [\n#   \"requests&lt;3\",\n#   \"rich\",\n# ]\n# ///\nimport requests\nfrom rich.pretty import pprint\nresp = requests.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n</code></pre> <p>uv will automatically create an environment with the dependencies necessary to run the script, e.g.:</p> <pre><code>$ uv run example.py\n[\n\u2502   ('1', 'PEP Purpose and Guidelines'),\n\u2502   ('2', 'Procedure for Adding New Modules'),\n\u2502   ('3', 'Guidelines for Handling Bug Reports'),\n\u2502   ('4', 'Deprecation of Standard Modules'),\n\u2502   ('5', 'Guidelines for Language Evolution'),\n\u2502   ('6', 'Bug Fix Releases'),\n\u2502   ('7', 'Style Guide for C Code'),\n\u2502   ('8', 'Style Guide for Python Code'),\n\u2502   ('9', 'Sample Plaintext PEP Template'),\n\u2502   ('10', 'Voting Guidelines')\n]\n</code></pre> <p>Important</p> <p>When using inline script metadata, even if <code>uv run</code> is used in a project, the project's dependencies will be ignored. The <code>--no-project</code> flag is not required.</p> <p>uv also respects Python version requirements:</p> example.py<pre><code># /// script\n# requires-python = \"&gt;=3.12\"\n# dependencies = []\n# ///\n# Use some syntax added in Python 3.12\ntype Point = tuple[float, float]\nprint(Point)\n</code></pre> <p>Note</p> <p>The <code>dependencies</code> field must be provided even if empty.</p> <p><code>uv run</code> will search for and use the required Python version. The Python version will download if it is not installed \u2014 see the documentation on Python versions for more details.</p>"},{"location":"guides/scripts/#using-different-python-versions","title":"Using different Python versions","text":"<p>uv allows arbitrary Python versions to be requested on each script invocation, for example:</p> example.py<pre><code>import sys\nprint(\".\".join(map(str, sys.version_info[:3])))\n</code></pre> <pre><code>$ # Use the default Python version, may differ on your machine\n$ uv run example.py\n3.12.1\n</code></pre> <pre><code>$ # Use a specific Python version\n$ uv run --python 3.10 example.py\n3.10.13\n</code></pre> <p>See the Python version request documentation for more details on requesting Python versions.</p>"},{"location":"guides/scripts/#next-steps","title":"Next steps","text":"<p>To learn more about <code>uv run</code>, see the command reference.</p> <p>Or, read on to learn how to run and install tools with uv.</p>"},{"location":"guides/tools/","title":"Using tools","text":"<p>Many Python packages provide applications that can be used as tools. uv has specialized support for easily invoking and installing tools.</p>"},{"location":"guides/tools/#running-tools","title":"Running tools","text":"<p>The <code>uvx</code> command invokes a tool without installing it.</p> <p>For example, to run <code>ruff</code>:</p> <pre><code>$ uvx ruff\n</code></pre> <p>Note</p> <p>This is exactly equivalent to:</p> <pre><code>$ uv tool run ruff\n</code></pre> <p><code>uvx</code> is provided as an alias for convenience.</p> <p>Arguments can be provided after the tool name:</p> <pre><code>$ uvx pycowsay hello from uv\n\n  -------------\n&lt; hello from uv &gt;\n  -------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre> <p>Tools are installed into temporary, isolated environments when using <code>uvx</code>.</p>"},{"location":"guides/tools/#commands-with-different-package-names","title":"Commands with different package names","text":"<p>When <code>uvx ruff</code> is invoked, uv installs the <code>ruff</code> package which provides the <code>ruff</code> command. However, sometimes the package and command names differ.</p> <p>The <code>--from</code> option can be used to invoke a command from a specific package, e.g. <code>http</code> which is provided by <code>httpie</code>:</p> <pre><code>$ uvx --from httpie http\n</code></pre>"},{"location":"guides/tools/#requesting-specific-versions","title":"Requesting specific versions","text":"<p>To run a tool at a specific version, use <code>command@&lt;version&gt;</code>:</p> <pre><code>$ uvx ruff@0.3.0 check\n</code></pre> <p>The <code>--from</code> option can also be used to specify package versions, as above:</p> <pre><code>$ uvx --from 'ruff==0.3.0' ruff check\n</code></pre> <p>Or, to constrain to a range of versions:</p> <pre><code>$ uvx --from 'ruff&gt;0.2.0,&lt;0.3.0' ruff check\n</code></pre> <p>Note the <code>@</code> syntax cannot be used for anything other than an exact version.</p>"},{"location":"guides/tools/#requesting-different-sources","title":"Requesting different sources","text":"<p>The <code>--from</code> option can also be used to install from alternative sources.</p> <p>For example, to pull from git:</p> <pre><code>$ uvx --from git+https://github.com/httpie/cli httpie\n</code></pre>"},{"location":"guides/tools/#commands-with-plugins","title":"Commands with plugins","text":"<p>Additional dependencies can be included, e.g., to include <code>mkdocs-material</code> when running <code>mkdocs</code>:</p> <pre><code>$ uvx --with mkdocs-material mkdocs --help\n</code></pre>"},{"location":"guides/tools/#installing-tools","title":"Installing tools","text":"<p>If a tool is used often, it is useful to install it to a persistent environment and add it to the <code>PATH</code> instead of invoking <code>uvx</code> repeatedly.</p> <p>To install <code>ruff</code>:</p> <pre><code>$ uv tool install ruff\n</code></pre> <p>When a tool is installed, its executables are placed in a <code>bin</code> directory in the <code>PATH</code> which allows the tool to be run without uv. If it's not on the <code>PATH</code>, a warning will be displayed and <code>uv tool update-shell</code> can be used to add it to the <code>PATH</code>.</p> <p>After installing <code>ruff</code>, it should be available:</p> <pre><code>$ ruff --version\n</code></pre> <p>Unlike <code>uv pip install</code>, installing a tool does not make its modules available in the current environment. For example, the following command will fail:</p> <pre><code>$ python -c \"import ruff\"\n</code></pre> <p>This isolation is important for reducing interactions and conflicts between dependencies of tools, scripts, and projects.</p> <p>Unlike <code>uvx</code>, <code>uv tool install</code> operates on a package and will install all executables provided by the tool.</p> <p>For example, the following will install the <code>http</code>, <code>https</code>, and <code>httpie</code> executables:</p> <pre><code>$ uv tool install httpie\n</code></pre> <p>Additionally, package versions can be included without <code>--from</code>:</p> <pre><code>$ uv tool install 'httpie&gt;0.1.0'\n</code></pre> <p>And, similarly, for package sources:</p> <pre><code>$ uv tool install git+https://github.com/httpie/cli\n</code></pre> <p>As with <code>uvx</code>, installations can include additional packages:</p> <pre><code>$ uv tool install mkdocs --with mkdocs-material\n</code></pre>"},{"location":"guides/tools/#upgrading-tools","title":"Upgrading tools","text":"<p>To upgrade a tool, use <code>uv tool upgrade</code>:</p> <pre><code>$ uv tool upgrade ruff\n</code></pre> <p>Tool upgrades will respect the version constraints provided when installing the tool. For example, <code>uv tool install ruff &gt;=0.3,&lt;0.4</code> followed by <code>uv tool upgrade ruff</code> will upgrade Ruff to the latest version in the range <code>&gt;=0.3,&lt;0.4</code>.</p> <p>To instead replace the version constraints, re-install the tool with <code>uv tool install</code>:</p> <pre><code>$ uv tool install ruff&gt;=0.4\n</code></pre> <p>To instead upgrade all tools:</p> <pre><code>$ uv tool upgrade --all\n</code></pre>"},{"location":"guides/tools/#next-steps","title":"Next steps","text":"<p>To learn more about managing tools with uv, see the Tools concept page and the command reference.</p> <p>Or, read on to learn how to to work on projects.</p>"},{"location":"guides/integration/","title":"Integration guides","text":"<p>Learn how to integrate uv with other software:</p> <ul> <li>Using in Docker images</li> <li>Using with pre-commit</li> <li>Using in GitHub Actions</li> <li>Using an Azure Artifacts index</li> </ul>"},{"location":"guides/integration/alternative-indexes/","title":"Using alternative package indexes","text":"<p>While uv uses the official Python Package Index (PyPI) by default, it also supports alternative package indexes. Most alternative indexes require various forms of authentication, which requires some initial setup.</p>"},{"location":"guides/integration/alternative-indexes/#azure-artifacts","title":"Azure Artifacts","text":"<p>uv can install packages from Azure DevOps Artifacts. Authenticate to a feed using a Personal Access Token (PAT) or interactively using the <code>keyring</code> package.</p>"},{"location":"guides/integration/alternative-indexes/#using-a-pat","title":"Using a PAT","text":"<p>If there is a PAT available (eg <code>$(System.AccessToken)</code> in an Azure pipeline), credentials can be provided via the \"Basic\" HTTP authentication scheme. Include the PAT in the password field of the URL. A username must be included as well, but can be any string.</p> <p>For example, with the token stored in the <code>$ADO_PAT</code> environment variable, set the index URL with:</p> <pre><code>$ export UV_EXTRA_INDEX_URL=https://dummy:$ADO_PAT@pkgs.dev.azure.com/{organisation}/{project}/_packaging/{feedName}/pypi/simple/\n</code></pre>"},{"location":"guides/integration/alternative-indexes/#using-keyring","title":"Using <code>keyring</code>","text":"<p>If there is not a PAT available, authenticate to Artifacts using the <code>keyring</code> package with the <code>artifacts-keyring</code> plugin. Because these two packages are required to authenticate to Azure Artifacts, they must be pre-installed from a source other than Artifacts.</p> <p>The <code>artifacts-keyring</code> plugin wraps the Azure Artifacts Credential Provider tool. The credential provider supports a few different authentication modes including interactive login \u2014 see the tool's documentation for information on configuration.</p> <p>uv only supports using the <code>keyring</code> package in subprocess mode. The <code>keyring</code> executable must be in the <code>PATH</code>, i.e., installed globally or in the active environment. The <code>keyring</code> CLI requires a username in the URL, so the index URL must include the default username <code>VssSessionToken</code>.</p> <pre><code>$ # Pre-install keyring and the Artifacts plugin from the public PyPI\n$ uv tool install keyring --with artifacts-keyring\n\n$ # Enable keyring authentication\n$ export UV_KEYRING_PROVIDER=subprocess\n\n$ # Configure the index URL with the username\n$ export UV_EXTRA_INDEX_URL=https://VssSessionToken@pkgs.dev.azure.com/{organisation}/{project}/_packaging/{feedName}/pypi/simple/\n</code></pre>"},{"location":"guides/integration/alternative-indexes/#other-indexes","title":"Other indexes","text":"<p>uv is also known to work with JFrog's Artifactory, the Google Cloud Artifact Registry, and AWS Code Artifact.</p>"},{"location":"guides/integration/docker/","title":"Using uv in Docker","text":""},{"location":"guides/integration/docker/#running-in-docker","title":"Running in Docker","text":"<p>A Docker image is published with a built version of uv available. To run a uv command in a container:</p> <pre><code>$ docker run ghcr.io/astral-sh/uv --help\n</code></pre>"},{"location":"guides/integration/docker/#installing-uv","title":"Installing uv","text":"<p>uv can be installed by copying from the official Docker image:</p> Dockerfile<pre><code>FROM python:3.12-slim-bullseye\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv\n</code></pre> <p>Or with the standalone installer:</p> Dockerfile<pre><code>FROM python:3.12-slim-bullseye\nRUN apt-get update &amp;&amp; apt-get install -y curl --no-install-recommends\nRUN curl -LsSf https://astral.sh/uv/install.sh | sh\nENV PATH=\"/root/.cargo/bin/:$PATH\"\n</code></pre> <p>Note this requires <code>curl</code> to be available.</p> <p>In either case, it is best practice to pin to a specific uv version.</p>"},{"location":"guides/integration/docker/#installing-a-package","title":"Installing a package","text":"<p>Once uv is installed in an image, it can be used to install some packages.</p> <p>The system Python environment is safe to use this context, since a container is already isolated. The <code>--system</code> flag can be used to install in the system environment:</p> Dockerfile<pre><code>RUN uv pip install --system ruff\n</code></pre> <p>To use the system Python environment by default, set the <code>UV_SYSTEM_PYTHON</code> variable:</p> Dockerfile<pre><code>ENV UV_SYSTEM_PYTHON=1\n</code></pre> <p>Alternatively, a virtual environment can be created and activated:</p> Dockerfile<pre><code>RUN uv venv /opt/venv\n# Use the virtual environment automatically\nENV VIRTUAL_ENV=/opt/venv\n# Place entry points in the environment at the front of the path\nENV PATH=\"/opt/venv/bin:$PATH\"\n</code></pre> <p>When using a virtual environment, the <code>--system</code> flag should be omitted from uv invocations:</p> Dockerfile<pre><code>RUN uv pip install ruff\n</code></pre>"},{"location":"guides/integration/docker/#installing-requirements","title":"Installing requirements","text":"<p>To install requirements files, copy them into the container:</p> Dockerfile<pre><code>COPY requirements.txt .\nRUN uv pip install -r requirements.txt\n</code></pre>"},{"location":"guides/integration/docker/#installing-a-project","title":"Installing a project","text":"<p>When installing a project alongside requirements, it is prudent to separate copying the requirements from the rest of the source code. This allows the dependencies of the project (which do not change often) to be cached separately from the project itself (which changes very frequently).</p> Dockerfile<pre><code>COPY pyproject.toml .\nRUN uv pip install -r pyproject.toml\nCOPY . .\nRUN uv pip install -e .\n</code></pre>"},{"location":"guides/integration/docker/#optimizations","title":"Optimizations","text":""},{"location":"guides/integration/docker/#using-uv-temporarily","title":"Using uv temporarily","text":"<p>If uv isn't needed in the final image, the binary can be mounted in each invocation:</p> Dockerfile<pre><code>RUN --mount=from=uv,source=/uv,target=/bin/uv \\\nuv pip install --system ruff\n</code></pre>"},{"location":"guides/integration/docker/#caching","title":"Caching","text":"<p>A cache mount can be used to improve performance across builds:</p> Dockerfile<pre><code>RUN --mount=type=cache,target=/root/.cache/uv \\\n./uv pip install -r requirements.txt --&gt;\n</code></pre> <p>Note the cache directory's location can be determined with the <code>uv cache dir</code> command. Alternatively, the cache can be set to a constant location:</p> Dockerfile<pre><code>ENV UV_CACHE_DIR=/opt/uv-cache/\n</code></pre> <p>If not mounting the cache, image size can be reduced with <code>--no-cache</code> flag.</p>"},{"location":"guides/integration/github/","title":"Using uv in GitHub Actions","text":""},{"location":"guides/integration/github/#installation","title":"Installation","text":"<p>uv installation differs depending on the platform.</p>"},{"location":"guides/integration/github/#unix","title":"Unix","text":"example.yml<pre><code>name: Example on Unix\njobs:\nuv-example-linux:\nname: python-linux\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v4\n- name: Set up uv\n# Install uv using the standalone installer\nrun: curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"guides/integration/github/#windows","title":"Windows","text":"example.yml<pre><code>name: Example on Windows\njobs:\nuv-example-windows:\nname: python-windows\nruns-on: windows-latest\nsteps:\n- uses: actions/checkout@v4\n- name: Set up uv\n# Install uv using the standalone installer\nrun: irm https://astral.sh/uv/install.ps1 | iex\nshell: powershell\n</code></pre>"},{"location":"guides/integration/github/#using-a-matrix","title":"Using a matrix","text":"example.yml<pre><code>name: Example\njobs:\nuv-example-multiplatform:\nname: python-${{ matrix.os }}\nstrategy:\nmatrix:\nos:\n- ubuntu-latest\n- windows-latest\n- macos-latest\nfail-fast: false\nruns-on: ${{ matrix.os }}\nsteps:\n- uses: actions/checkout@v4\n- name: Set up uv\nif: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}\nrun: curl -LsSf https://astral.sh/uv/install.sh | sh\n- name: Set up uv\nif: ${{ matrix.os == 'windows-latest' }}\nrun: irm https://astral.sh/uv/install.ps1 | iex\nshell: powershell\n</code></pre>"},{"location":"guides/integration/github/#setting-up-python","title":"Setting up Python","text":"<p>Python can be installed with the <code>python install</code> command:</p> example.yml<pre><code>steps:\n# ... setup up uv ...\n- name: Set up Python\nrun: uv python install\n</code></pre> <p>This will respect the Python version pinned in the project.</p> <p>Or, when using a matrix, as in:</p> example.yml<pre><code>strategy:\nmatrix:\npython-version:\n- \"3.10\"\n- \"3.11\"\n- \"3.12\"\n</code></pre> <p>Provide the version to the <code>python install</code> invocation:</p> example.yml<pre><code>steps:\n# ... setup up uv ...\n- name: Set up Python ${{ matrix.python-version }}\nrun: uv python install ${{ matrix.python-version }}\n</code></pre> <p>Alternatively, the official GitHub <code>setup-python</code> action can be used. This is generally faster, but will not respect the project's pinned Python version.</p> example.yml<pre><code>steps:\n- name: \"Set up Python\"\nuses: actions/setup-python@v5\nwith:\npython-version: 3.12\n</code></pre>"},{"location":"guides/integration/github/#syncing-and-running","title":"Syncing and running","text":"<p>Once uv and Python are installed, the project can be installed with <code>uv sync</code> and commands can be run in the environment with <code>uv run</code>:</p> example.yml<pre><code>steps:\n# ... setup up Python and uv ...\n- name: Install the project\nrun: uv sync --all-extras --dev\n- name: Run tests\n# For example, using `pytest`\nrun: uv run pytest tests\n</code></pre>"},{"location":"guides/integration/github/#caching","title":"Caching","text":"<p>It may improve CI times to store uv's cache across workflow runs.</p> <p>The cache can be saved and restored with the official GitHub <code>cache</code> action:</p> example.yml<pre><code>jobs:\ninstall_job:\nenv:\n# Configure a constant location for the uv cache\nUV_CACHE_DIR: /tmp/.uv-cache\nsteps:\n# ... setup up Python and uv ...\n- name: Restore uv cache\nuses: actions/cache@v4\nwith:\npath: /tmp/.uv-cache\nkey: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}\nrestore-keys: |\nuv-${{ runner.os }}-${{ hashFiles('uv.lock') }}\nuv-${{ runner.os }}\n# ... install packages, run tests, etc ...\n- name: Minimize uv cache\nrun: uv cache prune --ci\n</code></pre> <p>The <code>uv cache prune --ci</code> command is used to reduce the size of the cache and is optimized for CI. Its effect on performance is dependent on the packages being installed.</p> <p>Tip</p> <p>If using <code>uv pip</code>, use <code>requirements.txt</code> instead of <code>uv.lock</code> in the cache key.</p>"},{"location":"guides/integration/github/#using-uv-pip","title":"Using <code>uv pip</code>","text":"<p>If using the <code>uv pip</code> interface instead of the uv project interface, uv requires a virtual environment by default. To allow installing packages into the system environment, use the <code>--system</code> flag on all <code>uv</code> invocations or set the <code>UV_SYSTEM_PYTHON</code> variable.</p> <p>The <code>UV_SYSTEM_PYTHON</code> variable can be defined in at different scopes.</p> <p>Opt-in for the entire workflow by defining it at the top level:</p> example.yml<pre><code>env:\nUV_SYSTEM_PYTHON: 1\njobs: ...\n</code></pre> <p>Or, opt-in for a specific job in the workflow:</p> example.yml<pre><code>jobs:\ninstall_job:\nenv:\nUV_SYSTEM_PYTHON: 1\n...\n</code></pre> <p>Or, opt-in for a specific step in a job:</p> example.yml<pre><code>steps:\n- name: Install requirements\nrun: uv pip install -r requirements.txt\nenv:\nUV_SYSTEM_PYTHON: 1\n</code></pre> <p>To opt-out again, the <code>--no-system</code> flag can be used in any uv invocation.</p>"},{"location":"guides/integration/pre-commit/","title":"Using uv in pre-commit","text":"<p>An official pre-commit hook is provided at <code>astral-sh/uv-pre-commit</code>.</p> <p>To compile requirements via pre-commit, add the following to the <code>.pre-commit-config.yaml</code>:</p> .pre-commit-config.yaml<pre><code>- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.2.36\nhooks:\n# Compile requirements\n- id: pip-compile\nargs: [requirements.in, -o, requirements.txt]\n</code></pre> <p>To compile alternative files, modify <code>args</code> and <code>files</code>:</p> .pre-commit-config.yaml<pre><code>- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.2.36\nhooks:\n# Compile requirements\n- id: pip-compile\nargs: [requirements-dev.in, -o, requirements-dev.txt]\nfiles: ^requirements-dev\\.(in|txt)$\n</code></pre> <p>To run the hook over multiple files at the same time:</p> .pre-commit-config.yaml<pre><code>- repo: https://github.com/astral-sh/uv-pre-commit\n# uv version.\nrev: 0.2.36\nhooks:\n# Compile requirements\n- id: pip-compile\nname: pip-compile requirements.in\nargs: [requirements.in, -o, requirements.txt]\n- id: pip-compile\nname: pip-compile requirements-dev.in\nargs: [requirements-dev.in, -o, requirements-dev.txt]\nfiles: ^requirements-dev\\.(in|txt)$\n</code></pre>"},{"location":"pip/","title":"The pip interface","text":"<p>uv provides a drop-in replacement for common <code>pip</code>, <code>pip-tools</code>, and <code>virtualenv</code> commands. These commands work directly with the virtual environment, in contrast to uv's primary interfaces where the virtual environment is managed automatically. The <code>uv pip</code> interface exposes the speed and functionality of uv to power users and projects that are not ready to transition away from <code>pip</code> and <code>pip-tools</code>.</p> <p>The following sections discuss the basics of using <code>uv pip</code>:</p> <ul> <li>Creating and using environments</li> <li>Installing and managing packages</li> <li>Inspecting environments and packages</li> <li>Declaring package dependencies</li> <li>Locking and syncing environments</li> </ul> <p>Please note these commands do not exactly implement the interfaces and behavior of the tools they are based on. The further you stray from common workflows, the more likely you are to encounter differences. Consult the pip-compatibility guide for details.</p> <p>Important</p> <p>uv does not rely on or invoke pip. The pip interface is named as such to highlight its dedicated purpose of providing low-level commands that match pip's interface and to separate it from the rest of uv's commands which operate at a higher level of abstraction.</p>"},{"location":"pip/compatibility/","title":"Compatibility with <code>pip</code> and <code>pip-tools</code>","text":"<p>uv is designed as a drop-in replacement for common <code>pip</code> and <code>pip-tools</code> workflows.</p> <p>Informally, the intent is such that existing <code>pip</code> and <code>pip-tools</code> users can switch to uv without making meaningful changes to their packaging workflows; and, in most cases, swapping out <code>pip install</code> for <code>uv pip install</code> should \"just work\".</p> <p>However, uv is not intended to be an exact clone of <code>pip</code>, and the further you stray from common <code>pip</code> workflows, the more likely you are to encounter differences in behavior. In some cases, those differences may be known and intentional; in others, they may be the result of implementation details; and in others, they may be bugs.</p> <p>This document outlines the known differences between uv and <code>pip</code>, along with rationale, workarounds, and a statement of intent for compatibility in the future.</p>"},{"location":"pip/compatibility/#configuration-files-and-environment-variables","title":"Configuration files and environment variables","text":"<p>uv does not read configuration files or environment variables that are specific to <code>pip</code>, like <code>pip.conf</code> or <code>PIP_INDEX_URL</code>.</p> <p>Reading configuration files and environment variables intended for other tools has a number of drawbacks:</p> <ol> <li>It requires bug-for-bug compatibility with the target tool, since users end up relying on bugs in    the format, the parser, etc.</li> <li>If the target tool changes the format in some way, uv is then locked-in to changing it in    equivalent ways.</li> <li>If that configuration is versioned in some way, uv would need to know which version of the    target tool the user is expecting to use.</li> <li>It prevents uv from introducing any settings or configuration that don't exist in the target    tool, since otherwise <code>pip.conf</code> (or similar) would no longer be usable with <code>pip</code>.</li> <li>It can lead to user confusion, since uv would be reading settings that don't actually affect its    behavior, and many users may not expect uv to read configuration files intended for other    tools.</li> </ol> <p>Instead, uv supports its own environment variables, like <code>UV_INDEX_URL</code>. In the future, uv will also support persistent configuration in its own configuration file format (e.g., <code>pyproject.toml</code> or <code>uv.toml</code> or similar). For more, see #651.</p>"},{"location":"pip/compatibility/#pre-release-compatibility","title":"Pre-release compatibility","text":"<p>By default, uv will accept pre-release versions during dependency resolution in two cases:</p> <ol> <li>If the package is a direct dependency, and its version markers include a pre-release specifier    (e.g., <code>flask&gt;=2.0.0rc1</code>).</li> <li>If all published versions of a package are pre-releases.</li> </ol> <p>If dependency resolution fails due to a transitive pre-release, uv will prompt the user to re-run with <code>--prerelease allow</code>, to allow pre-releases for all dependencies.</p> <p>Alternatively, you can add the transitive dependency to your <code>requirements.in</code> file with pre-release specifier (e.g., <code>flask&gt;=2.0.0rc1</code>) to opt in to pre-release support for that specific dependency.</p> <p>In sum, uv needs to know upfront whether the resolver should accept pre-releases for a given package. <code>pip</code>, meanwhile, may respect pre-release identifiers in transitive dependencies depending on the order in which the resolver encounters the relevant specifiers (#1641).</p> <p>Pre-releases are notoriously difficult to model, and are a frequent source of bugs in packaging tools. Even <code>pip</code>, which is viewed as a reference implementation, has a number of open questions around pre-release handling (#12469, #12470, #40505, etc.). uv's pre-release handling is intentionally limited and intentionally requires user opt-in for pre-releases, to ensure correctness.</p> <p>In the future, uv may support pre-release identifiers in transitive dependencies. However, it's likely contingent on evolution in the Python packaging specifications. The existing PEPs do not cover \"dependency resolution\" and are instead focused on behavior for a single version specifier. As such, there are unresolved questions around the correct and intended behavior for pre-releases in the packaging ecosystem more broadly.</p>"},{"location":"pip/compatibility/#local-version-identifiers","title":"Local version identifiers","text":"<p>uv does not implement spec-compliant handling of local version identifiers (e.g., <code>1.2.3+local</code>). This is considered a known limitation. Although local version identifiers are rare in published packages (and, e.g., disallowed on PyPI), they're common in the PyTorch ecosystem, and uv's approach to local versions does support typical PyTorch workflows to succeed out-of-the-box.</p> <p>PEP 440 specifies that the local version segment should typically be ignored when evaluating version specifiers, with a few exceptions. For example, <code>foo==1.2.3</code> should accept <code>1.2.3+local</code>, but <code>foo==1.2.3+local</code> should not accept <code>1.2.3</code>. These asymmetries are hard to model in a resolution algorithm. As such, uv treats <code>1.2.3</code> and <code>1.2.3+local</code> as entirely separate versions, but respects local versions provided as direct dependencies throughout the resolution, such that if you provide <code>foo==1.2.3+local</code> as a direct dependency, <code>1.2.3+local</code> will be accepted for any transitive dependencies that request <code>foo==1.2.3</code>.</p> <p>To take an example from the PyTorch ecosystem, it's common to specify <code>torch==2.0.0+cu118</code> and <code>torchvision==0.15.1+cu118</code> as direct dependencies. <code>torchvision @ 0.15.1+cu118</code> declares a dependency on <code>torch==2.0.0</code>. In this case, uv would recognize that <code>torch==2.0.0+cu118</code> satisfies the specifier, since it was provided as a direct dependency.</p> <p>As compared to pip, the main differences in observed behavior are as follows:</p> <ul> <li>In general, local versions must be provided as direct dependencies. Resolution may succeed for   transitive dependencies that request a non-local version, but this is not guaranteed.</li> <li>If only local versions exist for a package <code>foo</code> at a given version (e.g., <code>1.2.3+local</code> exists,   but <code>1.2.3</code> does not), <code>uv pip install foo==1.2.3</code> will fail, while <code>pip install foo==1.2.3</code> will   resolve to an arbitrary local version.</li> </ul>"},{"location":"pip/compatibility/#packages-that-exist-on-multiple-indexes","title":"Packages that exist on multiple indexes","text":"<p>In both uv and <code>pip</code>, users can specify multiple package indexes from which to search for the available versions of a given package. However, uv and <code>pip</code> differ in how they handle packages that exist on multiple indexes.</p> <p>For example, imagine that a company publishes an internal version of <code>requests</code> on a private index (<code>--extra-index-url</code>), but also allows installing packages from PyPI by default. In this case, the private <code>requests</code> would conflict with the public <code>requests</code> on PyPI.</p> <p>When uv searches for a package across multiple indexes, it will iterate over the indexes in order (preferring the <code>--extra-index-url</code> over the default index), and stop searching as soon as it finds a match. This means that if a package exists on multiple indexes, uv will limit its candidate versions to those present in the first index that contains the package.</p> <p><code>pip</code>, meanwhile, will combine the candidate versions from all indexes, and select the best version from the combined set, though it makes no guarantees around the order in which it searches indexes, and expects that packages are unique up to name and version, even across indexes.</p> <p>uv's behavior is such that if a package exists on an internal index, it should always be installed from the internal index, and never from PyPI. The intent is to prevent \"dependency confusion\" attacks, in which an attacker publishes a malicious package on PyPI with the same name as an internal package, thus causing the malicious package to be installed instead of the internal package. See, for example, the <code>torchtriton</code> attack from December 2022.</p> <p>As of v0.1.39, users can opt in to <code>pip</code>-style behavior for multiple indexes via the <code>--index-strategy</code> command-line option, or the <code>UV_INDEX_STRATEGY</code> environment variable, which supports the following values:</p> <ul> <li><code>first-match</code> (default): Search for each package across all indexes, limiting the candidate   versions to those present in the first index that contains the package, prioritizing the   <code>--extra-index-url</code> indexes over the default index URL.</li> <li><code>unsafe-first-match</code>: Search for each package across all indexes, but prefer the first index with   a compatible version, even if newer versions are available on other indexes.</li> <li><code>unsafe-best-match</code>: Search for each package across all indexes, and select the best version from   the combined set of candidate versions.</li> </ul> <p>While <code>unsafe-best-match</code> is the closest to <code>pip</code>'s behavior, it exposes users to the risk of \"dependency confusion\" attacks.</p> <p>In the future, uv will support pinning packages to dedicated indexes (see: #171). Additionally, PEP 708 is a provisional standard that aims to address the \"dependency confusion\" issue across package registries and installers.</p>"},{"location":"pip/compatibility/#transitive-direct-url-dependencies-for-constraints-and-overrides","title":"Transitive direct URL dependencies for constraints and overrides","text":"<p>While uv does support URL dependencies (e.g., <code>black @ https://...</code>), it does not support transitive (i.e., \"nested\") direct URL dependencies for constraints and overrides.</p> <p>Specifically, if a constraint or override is defined using a direct URL dependency, and the constrained package has a direct URL dependency of its own, uv may reject that transitive direct URL dependency during resolution.</p> <p>uv also makes the assumption that non-URL dependencies won't introduce URL dependencies (i.e., that dependencies fetched from a registry will not themselves have direct URL dependencies). If a non-URL dependency does introduce a URL dependency, uv will reject the URL dependency during resolution.</p> <p>If uv rejects a transitive URL dependency in either case, the best course of action is to provide the URL dependency as a direct dependency in the <code>requirements.in</code> file, rather than as a constraint, override, or transitive dependency.</p>"},{"location":"pip/compatibility/#virtual-environments-by-default","title":"Virtual environments by default","text":"<p><code>uv pip install</code> and <code>uv pip sync</code> are designed to work with virtual environments by default.</p> <p>Specifically, uv will always install packages into the currently active virtual environment, or search for a virtual environment named <code>.venv</code> in the current directory or any parent directory (even if it is not activated).</p> <p>This differs from <code>pip</code>, which will install packages into a global environment if no virtual environment is active, and will not search for inactive virtual environments.</p> <p>In uv, you can install into non-virtual environments by providing a path to a Python executable via the <code>--python /path/to/python</code> option, or via the <code>--system</code> flag, which installs into the first Python interpreter found on the <code>PATH</code>, like <code>pip</code>.</p> <p>In other words, uv inverts the default, requiring explicit opt-in to installing into the system Python, which can lead to breakages and other complications, and should only be done in limited circumstances.</p> <p>For more, see \"Using arbitrary Python environments\".</p>"},{"location":"pip/compatibility/#resolution-strategy","title":"Resolution strategy","text":"<p>For a given set of dependency specifiers, it's often the case that there is no single \"correct\" set of packages to install. Instead, there are many valid sets of packages that satisfy the specifiers.</p> <p>Neither <code>pip</code> nor uv make any guarantees about the exact set of packages that will be installed; only that the resolution will be consistent, deterministic, and compliant with the specifiers. As such, in some cases, <code>pip</code> and uv will yield different resolutions; however, both resolutions should be equally valid.</p> <p>For example, consider:</p> requirements.txt<pre><code>starlette\nfastapi\n</code></pre> <p>At time of writing, the most recent <code>starlette</code> version is <code>0.37.2</code>, and the most recent <code>fastapi</code> version is <code>0.110.0</code>. However, <code>fastapi==0.110.0</code> also depends on <code>starlette</code>, and introduces an upper bound: <code>starlette&gt;=0.36.3,&lt;0.37.0</code>.</p> <p>If a resolver prioritizes including the most recent version of <code>starlette</code>, it would need to use an older version of <code>fastapi</code> that excludes the upper bound on <code>starlette</code>. In practice, this requires falling back to <code>fastapi==0.1.17</code>:</p> <pre><code># This file was autogenerated by uv via the following command:\n#    uv pip compile -\nannotated-types==0.6.0\n    # via pydantic\nanyio==4.3.0\n    # via starlette\nfastapi==0.1.17\nidna==3.6\n    # via anyio\npydantic==2.6.3\n    # via fastapi\npydantic-core==2.16.3\n    # via pydantic\nsniffio==1.3.1\n    # via anyio\nstarlette==0.37.2\n    # via fastapi\ntyping-extensions==4.10.0\n    # via\n    #   pydantic\n    #   pydantic-core\n</code></pre> <p>Alternatively, if a resolver prioritizes including the most recent version of <code>fastapi</code>, it would need to use an older version of <code>starlette</code> that satisfies the upper bound. In practice, this requires falling back to <code>starlette==0.36.3</code>:</p> <pre><code>#    uv pip compile -\nannotated-types==0.6.0\n    # via pydantic\nanyio==4.3.0\n    # via starlette\nfastapi==0.110.0\nidna==3.6\n    # via anyio\npydantic==2.6.3\n    # via fastapi\npydantic-core==2.16.3\n    # via pydantic\nsniffio==1.3.1\n    # via anyio\nstarlette==0.36.3\n    # via fastapi\ntyping-extensions==4.10.0\n    # via\n    #   fastapi\n    #   pydantic\n    #   pydantic-core\n</code></pre> <p>When uv resolutions differ from <code>pip</code> in undesirable ways, it's often a sign that the specifiers are too loose, and that the user should consider tightening them. For example, in the case of <code>starlette</code> and <code>fastapi</code>, the user could require <code>fastapi&gt;=0.110.0</code>.</p>"},{"location":"pip/compatibility/#pip-check","title":"<code>pip check</code>","text":"<p>At present, <code>uv pip check</code> will surface the following diagnostics:</p> <ul> <li>A package has no <code>METADATA</code> file, or the <code>METADATA</code> file can't be parsed.</li> <li>A package has a <code>Requires-Python</code> that doesn't match the Python version of the running   interpreter.</li> <li>A package has a dependency on a package that isn't installed.</li> <li>A package has a dependency on a package that's installed, but at an incompatible version.</li> <li>Multiple versions of a package are installed in the virtual environment.</li> </ul> <p>In some cases, <code>uv pip check</code> will surface diagnostics that <code>pip check</code> does not, and vice versa. For example, unlike <code>uv pip check</code>, <code>pip check</code> will not warn when multiple versions of a package are installed in the current environment.</p>"},{"location":"pip/compatibility/#-user-and-the-user-install-scheme","title":"<code>--user</code> and the <code>user</code> install scheme","text":"<p>uv does not support the <code>--user</code> flag, which installs packages based on the <code>user</code> install scheme. Instead, we recommend the use of virtual environments to isolate package installations.</p> <p>Additionally, pip will fall back to the <code>user</code> install scheme if it detects that the user does not have write permissions to the target directory, as is the case on some systems when installing into the system Python. uv does not implement any such fallback.</p> <p>For more, see #2077.</p>"},{"location":"pip/compatibility/#-only-binary-enforcement","title":"<code>--only-binary</code> enforcement","text":"<p>The <code>--only-binary</code> argument is used to restrict installation to pre-built binary distributions. When <code>--only-binary :all:</code> is provided, both pip and uv will refuse to build source distributions from PyPI and other registries.</p> <p>However, when a dependency is provided as a direct URL (e.g., <code>uv pip install https://...</code>), pip does not enforce <code>--only-binary</code>, and will build source distributions for all such packages.</p> <p>uv, meanwhile, does enforce <code>--only-binary</code> for direct URL dependencies, with one exception: given <code>uv pip install https://... --only-binary flask</code>, uv will build the source distribution at the given URL if it cannot infer the package name ahead of time, since uv can't determine whether the package is \"allowed\" in such cases without building its metadata.</p> <p>Both pip and uv allow editables requirements to be built and installed even when <code>--only-binary</code> is provided. For example, <code>uv pip install -e . --only-binary :all:</code> is allowed.</p>"},{"location":"pip/compatibility/#bytecode-compilation","title":"Bytecode compilation","text":"<p>Unlike pip, uv does not compile <code>.py</code> files to <code>.pyc</code> files during installation by default (i.e., uv does not create or populate <code>__pycache__</code> directories). To enable bytecode compilation during installs, pass the <code>--compile-bytecode</code> flag to <code>uv pip install</code> or <code>uv pip sync</code>.</p>"},{"location":"pip/compatibility/#strictness-and-spec-enforcement","title":"Strictness and spec enforcement","text":"<p>uv tends to be stricter than <code>pip</code>, and will often reject packages that <code>pip</code> would install. For example, uv omits packages with invalid version specifiers in its metadata, which <code>pip</code> similarly plans to exclude in a future release.</p> <p>In some cases, uv implements lenient behavior for popular packages that are known to have specific spec compliance issues.</p> <p>If uv rejects a package that <code>pip</code> would install due to a spec violation, the best course of action is to first attempt to install a newer version of the package; and, if that fails, to report the issue to the package maintainer.</p>"},{"location":"pip/compatibility/#pip-command-line-options-and-subcommands","title":"<code>pip</code> command-line options and subcommands","text":"<p>uv does not support the complete set of <code>pip</code>'s command-line options and subcommands, although it does support a large subset.</p> <p>Missing options and subcommands are prioritized based on user demand and the complexity of the implementation, and tend to be tracked in individual issues. For example:</p> <ul> <li><code>--prefix</code></li> <li><code>--trusted-host</code></li> <li><code>--user</code></li> </ul> <p>If you encounter a missing option or subcommand, please search the issue tracker to see if it has already been reported, and if not, consider opening a new issue. Feel free to upvote any existing issues to convey your interest.</p>"},{"location":"pip/compatibility/#registry-authentication","title":"Registry authentication","text":"<p>uv does not support <code>pip</code>'s <code>auto</code> or <code>import</code> options for <code>--keyring-provider</code>. At present, only the <code>subproces</code> option is supported.</p> <p>Unlike <code>pip</code>, uv does not enable keyring authentication by default.</p> <p>Unlike <code>pip</code>, uv does not wait until a request returns a HTTP 401 before searching for authentication. uv attaches authentication to all requests for hosts with credentials available.</p>"},{"location":"pip/compatibility/#egg-support","title":"<code>egg</code> support","text":"<p>uv does not support features that are considered legacy or deprecated in <code>pip</code>. For example, uv does not support <code>.egg</code>-style distributions.</p> <p>However, uv does have partial support for (1) <code>.egg-info</code>-style distributions (which are occasionally found in Docker images and Conda environments) and (2) legacy editable <code>.egg-link</code>-style distributions.</p> <p>Specifically, uv does not support installing new <code>.egg-info</code>- or <code>.egg-link</code>-style distributions, but will respect any such existing distributions during resolution, list them with <code>uv pip list</code> and <code>uv pip freeze</code>, and uninstall them with <code>uv pip uninstall</code>.</p>"},{"location":"pip/compatibility/#pip-compile-defaults","title":"<code>pip compile</code> defaults","text":"<p>There are a few small but notable differences in the default behaviors of <code>pip compile</code> and <code>pip-tools</code>.</p> <p>By default, uv does not write the compiled requirements to an output file. Instead, uv requires that the user specify an output file explicitly with the <code>-o</code> or <code>--output-file</code> option.</p> <p>By default, uv strips extras when outputting the compiled requirements. In other words, uv defaults to <code>--strip-extras</code>, while <code>pip-compile</code> defaults to <code>--no-strip-extras</code>. <code>pip-compile</code> is scheduled to change this default in the next major release (v8.0.0), at which point both tools will default to <code>--strip-extras</code>. To retain extras with uv, pass the <code>--no-strip-extras</code> flag to <code>uv pip compile</code>.</p> <p>By default, uv does not write any index URLs to the output file, while <code>pip-compile</code> outputs any <code>--index-url</code> or <code>--extra-index-url</code> that does not match the default (PyPI). To include index URLs in the output file, pass the <code>--emit-index-url</code> flag to <code>uv pip compile</code>. Unlike <code>pip-compile</code>, uv will include all index URLs when <code>--emit-index-url</code> is passed, including the default index URL.</p> <p>By default, uv does not write any <code>--no-build</code> or <code>--only-binary</code> options to the output file, unlike <code>pip-compile</code>. To include these options in the output file, pass the <code>--emit-build-options</code> flag to <code>uv pip compile</code>.</p>"},{"location":"pip/compile/","title":"Locking environments","text":"<p>Locking is to take a dependency, e.g., <code>ruff</code>, and write an exact version to use to a file. When working with many dependencies, it is useful to lock the exact versions so the environment can be reproduced. Without locking, the versions of dependencies could change over time, when using a different tool, or across platforms.</p>"},{"location":"pip/compile/#locking-requirements","title":"Locking requirements","text":"<p>uv allows dependencies to be locked in the <code>requirements.txt</code> format. It is recommended to use the standard <code>pyproject.toml</code> to define dependencies, but other dependency formats are supported as well. See the documentation on declaring dependencies for more details on how to define dependencies.</p> <p>To lock dependencies declared in a <code>pyproject.toml</code>:</p> <pre><code>$ uv pip compile pyproject.toml -o requirements.txt\n</code></pre> <p>Note by default the <code>uv pip compile</code> output is just displayed and <code>--output-file</code> / <code>-o</code> argument is needed to write to a file.</p> <p>To lock dependencies declared in a <code>requirements.in</code>:</p> <pre><code>$ uv pip compile requirements.in -o requirements.txt\n</code></pre> <p>To lock dependencies declared in multiple files:</p> <pre><code>$ uv pip compile pyproject.toml requirements-dev.in -o requirements-dev.txt\n</code></pre> <p>uv also supports legacy <code>setup.py</code> and <code>setup.cfg</code> formats. To lock dependencies declared in a <code>setup.py</code>:</p> <pre><code>$ uv pip compile setup.py -o requirements.txt\n</code></pre> <p>To lock dependencies from stdin, use <code>-</code>:</p> <pre><code>$ echo \"ruff\" | uv pip compile -\n</code></pre> <p>To lock with optional dependencies enabled, e.g., the \"foo\" extra:</p> <pre><code>$ uv pip install -r pyproject.toml --extra foo\n</code></pre> <p>To lock with all optional dependencies enabled:</p> <pre><code>$ uv pip install -r pyproject.toml --all-extras\n</code></pre> <p>Note extras are not supported with the <code>requirements.in</code> format.</p>"},{"location":"pip/compile/#upgrading-requirements","title":"Upgrading requirements","text":"<p>When using an output file, uv will consider the versions pinned in an existing output file. If a dependency is pinned it will not be upgraded on a subsequent compile run. For example:</p> <pre><code>$ echo \"ruff==0.3.0\" &gt; requirements.txt\n$ echo \"ruff\" | uv pip compile - -o requirements.txt\n# This file was autogenerated by uv via the following command:\n#    uv pip compile - -o requirements.txt\nruff==0.3.0\n</code></pre> <p>To upgrade a dependency, use the <code>--upgrade-package</code> flag:</p> <pre><code>$ uv pip compile - -o requirements.txt --upgrade-package ruff\n</code></pre> <p>To upgrade all dependencies, there is an <code>--upgrade</code> flag.</p>"},{"location":"pip/compile/#syncing-an-environment","title":"Syncing an environment","text":"<p>Dependencies can be installed directly from their definition files or from compiled <code>requirements.txt</code> files with <code>uv pip install</code>. See the documentation on installing packages from files for more details.</p> <p>When installing with <code>uv pip install</code>, packages that are already installed will not be removed unless they conflict with the lockfile. This means that the environment can have dependencies that aren't declared in the lockfile, which isn't great for reproducibility. To ensure the environment exactly matches the lockfile, use <code>uv pip sync</code> instead.</p> <p>To sync an environment with a <code>requirements.txt</code> file:</p> <pre><code>$ uv pip sync requirements.txt\n</code></pre> <p>To sync an environment with a <code>pyproject.toml</code> file:</p> <pre><code>$ uv pip sync pyproject.toml\n</code></pre>"},{"location":"pip/compile/#adding-constraints","title":"Adding constraints","text":"<p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that's installed. However, including a package in a constraints file will not trigger the installation of that package. Constraints can be used to add bounds to dependencies that are not dependencies of the current project.</p> <p>To define a constraint, define a bound for a package:</p> constraints.txt<pre><code>pydantic&lt;2.0\n</code></pre> <p>To use a constraints file:</p> <pre><code>$ uv pip compile requirements.in --constraint constraints.txt\n</code></pre> <p>Note that multiple constraints can be defined in each file and multiple files can be used.</p>"},{"location":"pip/compile/#overriding-dependency-versions","title":"Overriding dependency versions","text":"<p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they're combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <p>Overrides are most often used to remove upper bounds from a transtive dependency. For example, if <code>a</code> requires <code>c&gt;=1.0,&lt;2.0</code> and <code>b</code> requires <code>c&gt;=2.0</code> and the current project requires <code>a</code> and <code>b</code> then the dependencies cannot be resolved.</p> <p>To define an override, define the new requirement for the problematic package:</p> overrides.txt<pre><code>c&gt;=2.0\n</code></pre> <p>To use an overrides file:</p> <pre><code>$ uv pip compile requirements.in --override overrides.txt\n</code></pre> <p>Now, resolution can succeed. However, note that if <code>a</code> is correct that it does not support <code>c&gt;=2.0</code> then a runtime error will likely be encountered when using the packages.</p> <p>Note that multiple overrides can be defined in each file and multiple files can be used.</p>"},{"location":"pip/dependencies/","title":"Declaring dependencies","text":"<p>It is best practice to declare dependencies in a static file instead of modifying environments with ad-hoc installations. Once dependencies are defined, they can be locked to create a consistent, reproducible environment.</p>"},{"location":"pip/dependencies/#using-pyprojecttoml","title":"Using <code>pyproject.toml</code>","text":"<p>The <code>pyproject.toml</code> file is the Python standard for defining configuration for a project.</p> <p>To define project dependencies in a <code>pyproject.toml</code> file:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n\"httpx\",\n\"ruff&gt;=0.3.0\"\n]\n</code></pre> <p>To define optional dependencies in a <code>pyproject.toml</code> file:</p> pyproject.toml<pre><code>[project.optional-dependencies]\ncli = [\n\"rich\",\n\"click\",\n]\n</code></pre> <p>Each of the keys defines an \"extra\", which can be installed using the <code>--extra</code> and <code>--all-extras</code> flags or <code>package[&lt;extra&gt;]</code> syntax. See the documentation on installing packages for more details.</p> <p>See the official <code>pyproject.toml</code> guide for more details on getting started with a <code>pyproject.toml</code>.</p>"},{"location":"pip/dependencies/#using-requirementsin","title":"Using <code>requirements.in</code>","text":"<p>It is also common to use a lightweight <code>requirements.txt</code> format to declare the dependencies for the project. Each requirement is defined on its own line. Commonly, this file is called <code>requirements.in</code> to distinguish it from <code>requirements.txt</code> which is used for the locked dependencies.</p> <p>To define dependencies in a <code>requirements.in</code> file:</p> requirements.in<pre><code>httpx\nruff&gt;=0.3.0\n</code></pre> <p>Optional dependencies groups are not supported in this format.</p>"},{"location":"pip/environments/","title":"Python environments","text":"<p>Each Python installation has an environment that is active when Python is used. Packages can be installed into an environment to make their modules available from your Python scripts. Generally, it is considered best practice not to modify a Python installation's environment. This is especially important for Python installations that come with the operating system which often manage the packages themselves. A virtual environment is a lightweight way to isolate packages from a Python installation's environment. Unlike <code>pip</code>, uv requires using a virtual environment by default.</p>"},{"location":"pip/environments/#creating-a-virtual-environment","title":"Creating a virtual environment","text":"<p>uv supports creating virtual environments, e.g., to create a virtual environment at <code>.venv</code>:</p> <pre><code>$ uv venv\n</code></pre> <p>A specific name or path can be specified, e.g., to create a virtual environment at <code>my-name</code>:</p> <pre><code>$ uv venv my-name\n</code></pre> <p>A Python version can be requested, e.g., to create a virtual environment with Python 3.11:</p> <pre><code>$ uv venv --python 3.11\n</code></pre> <p>Note this requires the requested Python version to be available on the system. However, if available, uv will download Python for you. See the Python version documentation for more details.</p>"},{"location":"pip/environments/#using-a-virtual-environment","title":"Using a virtual environment","text":"<p>When using the default virtual environment name, uv will automatically find and use the virtual environment during subsequent invocations.</p> <pre><code>$ uv venv\n\n$ # Install a package in the new virtual environment\n$ uv pip install ruff\n</code></pre> <p>The virtual environment can be \"activated\" to make its packages available:</p> macOS and Linux<pre><code>$ source .venv/bin/activate\n</code></pre> Windows<pre><code>$ .venv\\Scripts\\activate\n</code></pre>"},{"location":"pip/environments/#using-arbitrary-python-environments","title":"Using arbitrary Python environments","text":"<p>Since uv has no dependency on Python, it can install into virtual environments other than its own. For example, setting <code>VIRTUAL_ENV=/path/to/venv</code> will cause uv to install into <code>/path/to/venv</code>, regardless of where uv is installed. Note that if <code>VIRTUAL_ENV</code> is set to a directory that is not a PEP 405 compliant virtual environment, it will be ignored.</p> <p>uv can also install into arbitrary, even non-virtual environments, with the <code>--python</code> argument provided to <code>uv pip sync</code> or <code>uv pip install</code>. For example, <code>uv pip install --python /path/to/python</code> will install into the environment linked to the <code>/path/to/python</code> interpreter.</p> <p>For convenience, <code>uv pip install --system</code> will install into the system Python environment. Using <code>--system</code> is roughly equivalent to <code>uv pip install --python $(which python)</code>, but note that executables that are linked to virtual environments will be skipped. Although we generally recommend using virtual environments for dependency management, <code>--system</code> is appropriate in continuous integration and containerized environments.</p> <p>The <code>--system</code> flag is also used to opt in to mutating system environments. For example, the the <code>--python</code> argument can be used to request a Python version (e.g., <code>--python 3.12</code>), and uv will search for an interpreter that meets the request. If uv finds a system interpreter (e.g., <code>/usr/lib/python3.12</code>), then the <code>--system</code> flag is required to allow modification of this non-virtual Python environment. Without the <code>--system</code> flag, uv will ignore any interpreters that are not in virtual environments. Conversely, when the <code>--system</code> flag is provided, uv will ignore any interpreters that are in virtual environments.</p> <p>Installing into system Python across platforms and distributions is notoriously difficult. uv supports the common cases, but will not work in all cases. For example, installing into system Python on Debian prior to Python 3.10 is unsupported due to the distribution's patching of <code>distutils</code> (but not <code>sysconfig</code>). While we always recommend the use of virtual environments, uv considers them to be required in these non-standard environments.</p> <p>If uv is installed in a Python environment, e.g., with <code>pip</code>, it can still be used to modify other environments. However, when invoked with <code>python -m uv</code>, uv will default to using the parent interpreter's environment. Invoking uv via Python adds startup overhead and is not recommended for general usage.</p> <p>uv itself does not depend on Python, but it does need to locate a Python environment to (1) install dependencies into the environment and (2) build source distributions.</p>"},{"location":"pip/environments/#discovery-of-python-environments","title":"Discovery of Python environments","text":"<p>When running a command that mutates an environment such as <code>uv pip sync</code> or <code>uv pip install</code>, uv will search for a virtual environment in the following order:</p> <ul> <li>An activated virtual environment based on the <code>VIRTUAL_ENV</code> environment variable.</li> <li>An activated Conda environment based on the <code>CONDA_PREFIX</code> environment variable.</li> <li>A virtual environment at <code>.venv</code> in the current directory, or in the nearest parent directory.</li> </ul> <p>If no virtual environment is found, uv will prompt the user to create one in the current directory via <code>uv venv</code>.</p> <p>If the <code>--system</code> flag is included, uv will skip virtual environments search for an installed Python version. Similarly, when running a command that does not mutate the environment such as <code>uv pip compile</code>, uv does not require a virtual environment \u2014 however, a Python interpreter is still required. See the documentation on Python discovery for details on the discovery of installed Python versions.</p>"},{"location":"pip/inspection/","title":"Inspecting environments","text":""},{"location":"pip/inspection/#listing-installed-packages","title":"Listing installed packages","text":"<p>To list all of the packages in the environment:</p> <pre><code>$ uv pip list\n</code></pre> <p>To list the packages in a JSON format:</p> <pre><code>$ uv pip list --format json\n</code></pre> <p>To list all of the packages in the environment in a <code>requirements.txt</code> format:</p> <pre><code>$ uv pip freeze\n</code></pre>"},{"location":"pip/inspection/#inspecting-a-package","title":"Inspecting a package","text":"<p>To show information about an installed package, e.g., <code>numpy</code>:</p> <pre><code>$ uv pip show numpy\n</code></pre> <p>Multiple packages can be inspected at once.</p>"},{"location":"pip/inspection/#verifying-an-environment","title":"Verifying an environment","text":"<p>It is possible to install packages with conflicting requirements into an environment if installed in multiple steps.</p> <p>To check for conflicts or missing dependencies in the environment:</p> <pre><code>$ uv pip check\n</code></pre>"},{"location":"pip/packages/","title":"Managing packages","text":""},{"location":"pip/packages/#installing-a-package","title":"Installing a package","text":"<p>To install a package into the virtual environment, e.g., Flask:</p> <pre><code>$ uv pip install flask\n</code></pre> <p>To install a package with optional dependencies enabled, e.g., Flask with the \"dotenv\" extra:</p> <pre><code>$ uv pip install \"flask[dotenv]\"\n</code></pre> <p>To install multiple packages, e.g., Flask and Ruff:</p> <pre><code>$ uv pip install flask ruff\n</code></pre> <p>To install a package with a constraint, e.g., Ruff v0.2.0 or newer:</p> <pre><code>$ uv pip install 'ruff&gt;=0.2.0'\n</code></pre> <p>To install a package at a specific version, e.g., Ruff v0.3.0:</p> <pre><code>$ uv pip install 'ruff==0.3.0'\n</code></pre> <p>To install a package from the disk:</p> <pre><code>$ uv pip install \"ruff @ ./projects/ruff\"\n</code></pre> <p>To install a package from GitHub:</p> <pre><code>$ uv pip install \"git+https://github.com/astral-sh/ruff\"\n</code></pre> <p>To install a package from GitHub at a specific reference:</p> <pre><code>$ # Install a tag\n$ uv pip install \"git+https://github.com/astral-sh/ruff@v0.2.0\"\n$ # Install a commit\n$ uv pip install \"git+https://github.com/astral-sh/ruff@1fadefa67b26508cc59cf38e6130bde2243c929d\"\n$ # Install a branch\n$ uv pip install \"git+https://github.com/astral-sh/ruff@main\"\n</code></pre> <p>See the Git authentication documentation for installation from a private repository.</p>"},{"location":"pip/packages/#editable-packages","title":"Editable packages","text":"<p>Editable packages do not need to be reinstalled for change to their source code to be active.</p> <p>To install the current project as an editable package</p> <pre><code>$ uv pip install -e .\n</code></pre> <p>To install a project in another directory as an editable package:</p> <pre><code>$ uv pip install -e ruff @ ./project/ruff\n</code></pre>"},{"location":"pip/packages/#installing-packages-from-files","title":"Installing packages from files","text":"<p>Multiple packages can be installed at once from standard file formats.</p> <p>Install from a <code>requirements.txt</code> file:</p> <pre><code>$ uv pip install -r requirements.txt\n</code></pre> <p>See the <code>uv pip compile</code> documentation for more information on <code>requirements.txt</code> files.</p> <p>Install from a <code>pyproject.toml</code> file:</p> <pre><code>$ uv pip install -r pyproject.toml\n</code></pre> <p>Install from a <code>pyproject.toml</code> file with optional dependencies enabled, e.g., the \"foo\" extra:</p> <pre><code>$ uv pip install -r pyproject.toml --extra foo\n</code></pre> <p>Install from a <code>pyproject.toml</code> file with all optional dependencies enabled:</p> <pre><code>$ uv pip install -r pyproject.toml --all-extras\n</code></pre>"},{"location":"pip/packages/#uninstalling-a-package","title":"Uninstalling a package","text":"<p>To uninstall a package, e.g., Flask:</p> <pre><code>$ uv pip uninstall flask\n</code></pre> <p>To uninstall multiple packages, e.g., Flask and Ruff:</p> <pre><code>$ uv pip uninstall flask ruff\n</code></pre>"},{"location":"reference/cli/","title":"CLI Reference","text":""},{"location":"reference/cli/#uv","title":"uv","text":"<p>An extremely fast Python package manager.</p> Usage <pre><code>uv [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv run</code><p>Run a command or script (experimental)</p> <code>uv init</code><p>Create a new project (experimental)</p> <code>uv add</code><p>Add dependencies to the project (experimental)</p> <code>uv remove</code><p>Remove dependencies from the project (experimental)</p> <code>uv sync</code><p>Update the project\u2019s environment (experimental)</p> <code>uv lock</code><p>Update the project\u2019s lockfile (experimental)</p> <code>uv tree</code><p>Display the project\u2019s dependency tree (experimental)</p> <code>uv tool</code><p>Run and install commands provided by Python packages (experimental)</p> <code>uv python</code><p>Manage Python versions and installations (experimental)</p> <code>uv pip</code><p>Manage Python packages with a pip-compatible interface</p> <code>uv venv</code><p>Create a virtual environment</p> <code>uv cache</code><p>Manage uv\u2019s cache</p> <code>uv version</code><p>Display uv\u2019s version</p> <code>uv help</code><p>Display documentation for a command</p>"},{"location":"reference/cli/#uv-run","title":"uv run","text":"<p>Run a command or script (experimental).</p> <p>Ensures that the command runs in a Python environment.</p> <p>When used with a file ending in <code>.py</code>, the file will be treated as a script and run with a Python interpreter, i.e., <code>uv run file.py</code> is equivalent to <code>uv run python file.py</code>. If the script contains inline dependency metadata, it will be installed into an isolated, ephemeral environment.</p> <p>When used in a project, the project environment will be created and updated before invoking the command.</p> <p>When used outside a project, if a virtual environment can be found in the current directory or a parent directory, the command will be run in that environment. Otherwise, the command will be run in the environment of the discovered interpreter.</p> <p>Arguments following the command (or script) are not interpreted as arguments to uv. All options to uv must be provided before the command, e.g., <code>uv run --verbose foo</code>. A <code>--</code> can be used to separate the command from uv options for clarity, e.g., <code>uv run --python 3.12 -- python</code>.</p> Usage <pre><code>uv run [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Options <code>--all-extras</code><p>Include all optional dependencies.</p> <p>Optional dependencies are defined via <code>project.optional-dependencies</code> in a <code>pyproject.toml</code>.</p> <p>This option is only available when running in a project.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra</code> extra<p>Include optional dependencies from the extra group name.</p> <p>May be provided more than once.</p> <p>Optional dependencies are defined via <code>project.optional-dependencies</code> in a <code>pyproject.toml</code>.</p> <p>This option is only available when running in a project.</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--frozen</code><p>Run without updating the <code>uv.lock</code> file.</p> <p>Instead of checking if the lockfile is up-to-date, uses the versions in the lockfile as the source of truth. If the lockfile is missing, uv will exit with an error. If the <code>pyproject.toml</code> includes changes to dependencies that have not been included in the lockfile yet, they will not be present in the environment.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--isolated</code><p>Run the tool in an isolated virtual environment.</p> <p>Usually, the project environment is reused for performance. This option forces a fresh environment to be used for the project, enforcing strict isolation between dependencies and declaration of requirements.</p> <p>An editable installation is still used for the project.</p> <p>When used with <code>--with</code> or <code>--with-requirements</code>, the additional dependencies will still be layered in a second environment.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-dev</code><p>Omit development dependencies.</p> <p>This option is only available when running in a project.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-project</code><p>Avoid discovering the project or workspace.</p> <p>Instead of searching for projects in the current directory and parent directories, run in an isolated, ephemeral environment populated by the <code>--with</code> requirements.</p> <p>If a virtual environment is active or found in a current or parent directory, it will be used as if there was no project or workspace.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--package</code> package<p>Run the command in a specific package in the workspace.</p> <p>If not in a workspace, or if the workspace member does not exist, uv will exit with an error.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for the run environment.</p> <p>If the interpreter request is satisfied by a discovered environment, the environment will be used.</p> <p>See uv python to view supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p> <code>--with</code> with<p>Run with the given packages installed.</p> <p>When used in a project, these dependencies will be layered on top of the project environment in a separate, ephemeral environment. These dependencies are allowed to conflict with those specified by the project.</p> <code>--with-requirements</code> with-requirements<p>Run with all packages listed in the given <code>requirements.txt</code> files.</p> <p>The same environment semantics as <code>--with</code> apply.</p> <p>Using <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> files is not allowed.</p>"},{"location":"reference/cli/#uv-init","title":"uv init","text":"<p>Create a new project (experimental).</p> <p>Follows the <code>pyproject.toml</code> specification.</p> <p>If a <code>pyproject.toml</code> already exists at the target, uv will exit with an error.</p> <p>If a <code>pyproject.toml</code> is found in any of the parent directories of the target path, the project will be added as a workspace member of the parent.</p> <p>Some project state is not created until needed, e.g., the project virtual environment (<code>.venv</code>) and lockfile (<code>uv.lock</code>) are lazily created during the first sync.</p> Usage <pre><code>uv init [OPTIONS] [PATH]\n</code></pre> Arguments <code>PATH</code><p>The path to use for the project.</p> <p>Defaults to the current working directory. Accepts relative and absolute paths.</p> <p>If a <code>pyproject.toml</code> is found in any of the parent directories of the target path, the project will be added as a workspace member of the parent, unless <code>--no-workspace</code> is provided.</p> Options <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--name</code> name<p>The name of the project.</p> <p>Defaults to the name of the directory.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-readme</code><p>Do not create a <code>README.md</code> file</p> <code>--no-workspace</code><p>Avoid discovering a workspace.</p> <p>Instead, create a standalone project.</p> <p>By default, uv searches for workspaces in the current directory or any parent directory.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use to determine the minimum supported Python version.</p> <p>See uv python to view supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p> <code>--virtual</code><p>Create a virtual workspace instead of a project.</p> <p>A virtual workspace does not define project dependencies and cannot be published. Instead, workspace members declare project dependencies. Development dependencies may still be declared.</p>"},{"location":"reference/cli/#uv-add","title":"uv add","text":"<p>Add dependencies to the project (experimental).</p> <p>Dependencies are added to the project's <code>pyproject.toml</code> file.</p> <p>If no constraint or URL is provided for a dependency, a lower bound is added equal to the latest compatible version of the package, e.g., <code>&gt;=1.2.3</code>, unless <code>--frozen</code> is provided, in which case no resolution is performed.</p> <p>The lockfile and project environment will be updated to reflect the added dependencies. To skip updating the lockfile, use <code>--frozen</code>. To skip updating the environment, use <code>--no-sync</code>.</p> <p>If any of the requested dependencies cannot be found, uv will exit with an error, unless the <code>--frozen</code> flag is provided, in which case uv will add the dependencies verbatim without checking that they exist or are compatible with the project.</p> <p>uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.</p> Usage <pre><code>uv add [OPTIONS] &lt;REQUIREMENTS&gt;...\n</code></pre> Arguments <code>REQUIREMENTS</code><p>The packages to add, as PEP 508 requirements (e.g., <code>ruff==0.5.0</code>)</p> Options <code>--branch</code> branch<p>Branch to use when adding a dependency from Git</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--dev</code><p>Add the requirements as development dependencies</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra</code> extra<p>Extras to enable for the dependency.</p> <p>May be provided more than once.</p> <p>To add this dependency to an optional group in the current project instead, see <code>--optional</code>.</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--frozen</code><p>Add dependencies without re-locking the project.</p> <p>The project environment will not be synced.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-editable</code><p>Don\u2019t add the requirements as editables</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--no-sync</code><p>Avoid syncing the virtual environment after re-locking the project</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--optional</code> optional<p>Add the requirements to the specified optional dependency group.</p> <p>The group may then be activated when installing the project with the <code>--extra</code> flag.</p> <p>To enable an optional dependency group for this requirement instead, see <code>--extra</code>.</p> <code>--package</code> package<p>Add the dependency to a specific package in the workspace</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for resolving and syncing.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--raw-sources</code><p>Add source requirements to <code>project.dependencies</code>, rather than <code>tool.uv.sources</code>.</p> <p>By default, uv will use the <code>tool.uv.sources</code> section to record source information for Git, local, editable, and direct URL requirements.</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--rev</code> rev<p>Commit to use when adding a dependency from Git</p> <code>--script</code> script<p>Add the dependency to the specified Python script, rather than to a project.</p> <p>If provided, uv will add the dependency to the script\u2019s inline metadata table, in adhere with PEP 723. If no such inline metadata table is present, a new one will be created and added to the script. When executed via <code>uv run</code>, uv will create a temporary environment for the script with all inline dependencies installed.</p> <code>--tag</code> tag<p>Tag to use when adding a dependency from Git</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-remove","title":"uv remove","text":"<p>Remove dependencies from the project (experimental).</p> <p>Dependencies are removed from the project's <code>pyproject.toml</code> file.</p> <p>The lockfile and project environment will be updated to reflect the removed dependencies. To skip updating the lockfile, use <code>--frozen</code>. To skip updating the environment, use <code>--no-sync</code>.</p> <p>If any of the requested dependencies are not present in the project, uv will exit with an error.</p> <p>If a package has been manually installed in the environment, i.e., with <code>uv pip install</code>, it will not be removed by <code>uv remove</code>.</p> <p>uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.</p> Usage <pre><code>uv remove [OPTIONS] &lt;PACKAGES&gt;...\n</code></pre> Arguments <code>PACKAGES</code><p>The names of the dependencies to remove (e.g., <code>ruff</code>)</p> Options <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--dev</code><p>Remove the packages from the development dependencies</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--frozen</code><p>Remove dependencies without re-locking the project.</p> <p>The project environment will not be synced.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--no-sync</code><p>Avoid syncing the virtual environment after re-locking the project</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--optional</code> optional<p>Remove the packages from the specified optional dependency group</p> <code>--package</code> package<p>Remove the dependencies from a specific package in the workspace</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for resolving and syncing.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--script</code> script<p>Remove the dependency from the specified Python script, rather than from a project.</p> <p>If provided, uv will remove the dependency from the script\u2019s inline metadata table, in adhere with PEP 723.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-sync","title":"uv sync","text":"<p>Update the project's environment (experimental).</p> <p>Syncing ensures that all project dependencies are installed and up-to-date with the lockfile. Syncing also removes packages that are not declared as dependencies of the project.</p> <p>If the project virtual environment (<code>.venv</code>) does not exist, it will be created.</p> <p>The project is re-locked before syncing unless the <code>--locked</code> or <code>--frozen</code> flag is provided.</p> <p>uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.</p> Usage <pre><code>uv sync [OPTIONS]\n</code></pre> Options <code>--all-extras</code><p>Include all optional dependencies</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra</code> extra<p>Include optional dependencies from the extra group name.</p> <p>May be provided more than once.</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--frozen</code><p>Sync without updating the <code>uv.lock</code> file.</p> <p>Instead of checking if the lockfile is up-to-date, uses the versions in the lockfile as the source of truth. If the lockfile is missing, uv will exit with an error. If the <code>pyproject.toml</code> includes changes to dependencies that have not been included in the lockfile yet, they will not be present in the environment.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-clean</code><p>Do not remove extraneous packages.</p> <p>When enabled, uv will make the minimum necessary changes to satisfy the requirements.</p> <p>By default, syncing will remove any extraneous packages from the environment, unless <code>--no-build-isolation</code> is enabled, in which case extra packages are considered necessary for builds.</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-dev</code><p>Omit development dependencies</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--package</code> package<p>Sync for a specific package in the workspace.</p> <p>The workspace\u2019s environment (<code>.venv</code>) is updated to reflect the subset of dependencies declared by the specified workspace member package.</p> <p>If not in a workspace, or if the workspace member does not exist, uv will exit with an error.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for the project environment.</p> <p>By default, the first interpreter that meets the project\u2019s <code>requires-python</code> constraint is used.</p> <p>If a Python interpreter in a virtual environment is provided, the packages will not be synced to the given environment. The interpreter will be used to create a virtual environment in the project.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-lock","title":"uv lock","text":"<p>Update the project's lockfile (experimental).</p> <p>If the project lockfile (<code>uv.lock</code>) does not exist, it will be created. If a lockfile is present, its contents will be used as preferences for the resolution.</p> <p>If there are no changes to the project's dependencies, locking will have no effect unless the <code>--upgrade</code> flag is provided.</p> Usage <pre><code>uv lock [OPTIONS]\n</code></pre> Options <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--frozen</code><p>Assert that a <code>uv.lock</code> exists, without updating it</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use during resolution.</p> <p>A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.</p> <p>The interpreter is also used as the fallback value for the minimum Python version if <code>requires-python</code> is not set.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-tree","title":"uv tree","text":"<p>Display the project's dependency tree (experimental)</p> Usage <pre><code>uv tree [OPTIONS]\n</code></pre> Options <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--depth</code>, <code>-d</code> depth<p>Maximum display depth of the dependency tree</p> <p>[default: 255]</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--frozen</code><p>Display the requirements without locking the project.</p> <p>If the lockfile is missing, uv will exit with an error.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--invert</code><p>Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--locked</code><p>Assert that the <code>uv.lock</code> will remain unchanged.</p> <p>Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-dedupe</code><p>Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--package</code> package<p>Display only the specified packages</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--prune</code> prune<p>Prune the given package from the display of the dependency tree</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for locking and filtering.</p> <p>By default, the tree is filtered to match the platform as reported by the Python interpreter. Use <code>--universal</code> to display the tree for all platforms, or use <code>--python-version</code> or <code>--python-platform</code> to override a subset of markers.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-platform</code> python-platform<p>The platform to use when filtering the tree.</p> <p>For example, pass <code>--platform windows</code> to display the dependencies that would be included when installing on Windows.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aaarch64-apple-darwin</code>.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  An x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> </ul> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--python-version</code> python-version<p>The Python version to use when filtering the tree.</p> <p>For example, pass <code>--python-version 3.10</code> to display the dependencies that would be included when installing on Python 3.10.</p> <p>Defaults to the version of the discovered Python interpreter.</p> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--universal</code><p>Show a platform-independent dependency tree.</p> <p>Shows resolved package versions for all Python versions and platforms, rather than filtering to those that are relevant for the current environment.</p> <p>Multiple versions may be shown for a each package.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-tool","title":"uv tool","text":"<p>Run and install commands provided by Python packages (experimental)</p> Usage <pre><code>uv tool [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv tool run</code><p>Run a command provided by a Python package</p> <code>uv tool install</code><p>Install commands provided by a Python package</p> <code>uv tool upgrade</code><p>Upgrade installed tools</p> <code>uv tool list</code><p>List installed tools</p> <code>uv tool uninstall</code><p>Uninstall a tool</p> <code>uv tool update-shell</code><p>Ensure that the tool executable directory is on the <code>PATH</code></p> <code>uv tool dir</code><p>Show the path to the uv tools directory</p>"},{"location":"reference/cli/#uv-tool-run","title":"uv tool runUsageOptions","text":"<p>Run a command provided by a Python package.</p> <p>By default, the package to install is assumed to match the command name.</p> <p>The name of the command can include an exact version in the format <code>&lt;package&gt;@&lt;version&gt;</code>, e.g., <code>uv run ruff@0.3.0</code>. If more complex version specification is desired or if the command is provided by a different package, use <code>--from</code>.</p> <p>If the tool was previously installed, i.e., via <code>uv tool install</code>, the installed version will be used unless a version is requested or the <code>--isolated</code> flag is used.</p> <p><code>uvx</code> is provided as a convenient alias for <code>uv tool run</code>, their behavior is identical.</p> <p>If no command is provided, the installed tools are displayed.</p> <p>Packages are installed into an ephemeral virtual environment in the uv cache directory.</p> <pre><code>uv tool run [OPTIONS] [COMMAND]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--from</code> from<p>Use the given package to provide the command.</p> <p>By default, the package name is assumed to match the command name.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--isolated</code><p>Run the tool in an isolated virtual environment, ignoring any already-installed tools</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use to build the run environment.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p> <code>--with</code> with<p>Run with the given packages installed</p> <code>--with-requirements</code> with-requirements<p>Run with all packages listed in the given <code>requirements.txt</code> files</p>"},{"location":"reference/cli/#uv-tool-install","title":"uv tool installUsageArgumentsOptions","text":"<p>Install commands provided by a Python package.</p> <p>Packages are installed into an isolated virtual environment in the uv tools directory. The executables are linked the tool executable directory, which is determined according to the XDG standard and can be retrieved with <code>uv tool dir --bin</code>.</p> <p>If the tool was previously installed, the existing tool will generally be replaced.</p> <pre><code>uv tool install [OPTIONS] &lt;PACKAGE&gt;\n</code></pre> <code>PACKAGE</code><p>The package to install commands from</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--editable</code>, <code>-e</code><code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--force</code><p>Force installation of the tool.</p> <p>Will replace any existing entry points with the same name in the executable directory.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use to build the tool environment.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p> <code>--with</code> with<p>Include the following extra requirements</p> <code>--with-requirements</code> with-requirements<p>Run all requirements listed in the given <code>requirements.txt</code> files</p>"},{"location":"reference/cli/#uv-tool-upgrade","title":"uv tool upgradeUsageArgumentsOptions","text":"<p>Upgrade installed tools.</p> <p>If a tool was installed with version constraints, they will be respected on upgrade \u2014 to upgrade a tool beyond the originally provided constraints, use <code>uv tool install</code> again.</p> <p>If a tool was installed with specific settings, they will be respected on upgraded. For example, if <code>--prereleases allow</code> was provided during installation, it will continue to be respected in upgrades.</p> <pre><code>uv tool upgrade [OPTIONS] &lt;NAME&gt;\n</code></pre> <code>NAME</code><p>The name of the tool to upgrade</p> <code>--all</code><p>Upgrade all tools</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code><p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <code>--no-binary-package</code> no-binary-package<p>Don\u2019t install pre-built wheels for a specific package</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-build-package</code> no-build-package<p>Don\u2019t build source distributions for a specific package</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-tool-list","title":"uv tool listUsageOptions","text":"<p>List installed tools</p> <pre><code>uv tool list [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--show-paths</code><p>Whether to display the path to each tool environment and installed executable</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-tool-uninstall","title":"uv tool uninstallUsageArgumentsOptions","text":"<p>Uninstall a tool</p> <pre><code>uv tool uninstall [OPTIONS] &lt;NAME&gt;\n</code></pre> <code>NAME</code><p>The name of the tool to uninstall</p> <code>--all</code><p>Uninstall all tools</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-tool-update-shell","title":"uv tool update-shellUsageOptions","text":"<p>Ensure that the tool executable directory is on the <code>PATH</code>.</p> <p>If the tool executable directory is not present on the <code>PATH</code>, uv will attempt to add it to the relevant shell configuration files.</p> <p>If the shell configuration files already include a blurb to add the executable directory to the path, but the directory is not present on the <code>PATH</code>, uv will exit with an error.</p> <p>The tool executable directory is determined according to the XDG standard and can be retrieved with <code>uv tool dir --bin</code>.</p> <pre><code>uv tool update-shell [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-tool-dir","title":"uv tool dirUsageOptions","text":"<p>Show the path to the uv tools directory.</p> <p>The tools directory is used to store environments and metadata for installed tools.</p> <p>To instead view the directory uv installs executables into, use the <code>--bin</code> flag.</p> <pre><code>uv tool dir [OPTIONS]\n</code></pre> <code>--bin</code><p>Show the directory into which <code>uv tool</code> will install executables.</p> <p>By default, <code>uv tool dir</code> shows the directory into which the tool Python environments themselves are installed, rather than the directory containing the linked executables.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-python","title":"uv python","text":"<p>Manage Python versions and installations (experimental)</p> <p>Generally, uv first searches for Python in a virtual environment, either active or in a <code>.venv</code> directory  in the current working directory or any parent directory. If a virtual environment is not required, uv will then search for a Python interpreter. Python interpreters are found by searching for Python executables in the <code>PATH</code> environment variable.</p> <p>On Windows, the <code>py</code> launcher is also invoked to find Python executables.</p> <p>When preview is enabled, i.e., via <code>--preview</code> or by using a preview command, uv will download Python if a version cannot be found. This behavior can be disabled with the <code>--python-downloads</code> option.</p> <p>The <code>--python</code> option allows requesting a different interpreter.</p> <p>The following Python version request formats are supported:</p> <ul> <li><code>&lt;version&gt;</code> e.g. <code>3</code>, <code>3.12</code>, <code>3.12.3</code></li> <li><code>&lt;version-specifier&gt;</code> e.g. <code>&gt;=3.12,&lt;3.13</code></li> <li><code>&lt;implementation&gt;</code> e.g. <code>cpython</code> or <code>cp</code></li> <li><code>&lt;implementation&gt;@&lt;version&gt;</code> e.g. <code>cpython@3.12</code></li> <li><code>&lt;implementation&gt;&lt;version&gt;</code> e.g. <code>cpython3.12</code> or <code>cp312</code></li> <li><code>&lt;implementation&gt;&lt;version-specifier&gt;</code> e.g. <code>cpython&gt;=3.12,&lt;3.13</code></li> <li><code>&lt;implementation&gt;-&lt;version&gt;-&lt;os&gt;-&lt;arch&gt;-&lt;libc&gt;</code> e.g.   <code>cpython-3.12.3-macos-aarch64-none</code></li> </ul> <p>Additionally, a specific system Python interpreter can often be requested with:</p> <ul> <li><code>&lt;executable-path&gt;</code> e.g. <code>/opt/homebrew/bin/python3</code></li> <li><code>&lt;executable-name&gt;</code> e.g. <code>mypython3</code></li> <li><code>&lt;install-dir&gt;</code> e.g. <code>/some/environment/</code></li> </ul> <p>When the <code>--python</code> option is used, normal discovery rules apply but discovered interpreters are checked for compatibility with the request, e.g., if <code>pypy</code> is requested, uv will first check if the virtual environment contains a PyPy interpreter then check if each executable in the path is a PyPy interpreter.</p> <p>uv supports discovering CPython, PyPy, and GraalPy interpreters. Unsupported interpreters will be skipped during discovery. If an unsupported interpreter implementation is requested, uv will exit with an error.</p> Usage <pre><code>uv python [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv python list</code><p>List the available Python installations</p> <code>uv python install</code><p>Download and install Python versions</p> <code>uv python find</code><p>Search for a Python installation</p> <code>uv python pin</code><p>Pin to a specific Python version</p> <code>uv python dir</code><p>Show the uv Python installation directory</p> <code>uv python uninstall</code><p>Uninstall Python versions</p>"},{"location":"reference/cli/#uv-python-list","title":"uv python listUsageOptions","text":"<p>List the available Python installations.</p> <p>By default, installed Python versions and the downloads for latest available patch version of each supported Python major version are shown.</p> <p>The displayed versions are filtered by the <code>--python-preference</code> option, i.e., if using <code>only-system</code>, no managed Python versions will be shown.</p> <p>Use <code>--all-versions</code> to view all available patch versions.</p> <p>Use <code>--only-installed</code> to omit available downloads.</p> <pre><code>uv python list [OPTIONS]\n</code></pre> <code>--all-platforms</code><p>List Python downloads for all platforms.</p> <p>By default, only downloads for the current platform are shown.</p> <code>--all-versions</code><p>List all Python versions, including old patch versions.</p> <p>By default, only the latest patch version is shown for each minor version.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--only-installed</code><p>Only show installed Python versions, exclude available downloads.</p> <p>By default, available downloads for the current platform are shown.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-python-install","title":"uv python installUsageArgumentsOptions","text":"<p>Download and install Python versions.</p> <p>Multiple Python versions may be requested.</p> <p>Supports CPython and PyPy.</p> <p>CPython distributions are downloaded from the <code>python-build-standalone</code> project.</p> <p>Python versions are installed into the uv Python directory, which can be retrieved with <code>uv python dir</code>. A <code>python</code> executable is not made globally available, managed Python versions are only used in uv commands or in active virtual environments.</p> <p>See <code>uv help python</code> to view supported request formats.</p> <pre><code>uv python install [OPTIONS] [TARGETS]...\n</code></pre> <code>TARGETS</code><p>The Python version(s) to install.</p> <p>If not provided, the requested Python version(s) will be read from the <code>.python-versions</code> or <code>.python-version</code> files. If neither file is present, uv will check if it has installed any Python versions. If not, it will install the latest stable version of Python.</p> <p>See uv python to view supported request formats.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--reinstall</code>, <code>-r</code><p>Reinstall the requested Python version, if it\u2019s already installed.</p> <p>By default, uv will exit successfully if the version is already installed.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-python-find","title":"uv python findUsageArgumentsOptions","text":"<p>Search for a Python installation.</p> <p>Displays the path to the Python executable.</p> <p>See <code>uv help python</code> to view supported request formats and details on discovery behavior.</p> <pre><code>uv python find [OPTIONS] [REQUEST]\n</code></pre> <code>REQUEST</code><p>The Python request.</p> <p>See uv python to view supported request formats.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-python-pin","title":"uv python pinUsageArgumentsOptions","text":"<p>Pin to a specific Python version.</p> <p>Writes the pinned version to a <code>.python-version</code> file, which is then read by other uv commands when determining the required Python version.</p> <p>See <code>uv help python</code> to view supported request formats.</p> <pre><code>uv python pin [OPTIONS] [REQUEST]\n</code></pre> <code>REQUEST</code><p>The Python version request.</p> <p>uv supports more formats than other tools that read <code>.python-version</code> files, i.e., <code>pyenv</code>. If compatibility with those tools is needed, only use version numbers instead of complex requests such as <code>cpython@3.10</code>.</p> <p>See uv python to view supported request formats.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-workspace</code><p>Avoid validating the Python pin is compatible with the workspace.</p> <p>By default, a workspace is discovered in the current directory or any parent directory. If a workspace is found, the Python pin is validated against the workspace\u2019s <code>requires-python</code> constraint.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--resolved</code><p>Write the resolved Python interpreter path instead of the request.</p> <p>Ensures that the exact same interpreter is used.</p> <p>This option is usually not safe to use when committing the <code>.python-version</code> file to version control.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-python-dir","title":"uv python dirUsageOptions","text":"<p>Show the uv Python installation directory</p> <pre><code>uv python dir [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-python-uninstall","title":"uv python uninstallUsageArgumentsOptions","text":"<p>Uninstall Python versions</p> <pre><code>uv python uninstall [OPTIONS] &lt;TARGETS&gt;...\n</code></pre> <code>TARGETS</code><p>The Python version(s) to uninstall.</p> <p>See uv python to view supported request formats.</p> <code>--all</code><p>Uninstall all managed Python versions</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip","title":"uv pip","text":"<p>Manage Python packages with a pip-compatible interface</p> Usage <pre><code>uv pip [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv pip compile</code><p>Compile a <code>requirements.in</code> file to a <code>requirements.txt</code> file</p> <code>uv pip sync</code><p>Sync an environment with a <code>requirements.txt</code> file</p> <code>uv pip install</code><p>Install packages into an environment</p> <code>uv pip uninstall</code><p>Uninstall packages from an environment</p> <code>uv pip freeze</code><p>List, in requirements format, packages installed in an environment</p> <code>uv pip list</code><p>List, in tabular format, packages installed in an environment</p> <code>uv pip show</code><p>Show information about one or more installed packages</p> <code>uv pip tree</code><p>Display the dependency tree for an environment</p> <code>uv pip check</code><p>Verify installed packages have compatible dependencies</p>"},{"location":"reference/cli/#uv-pip-compile","title":"uv pip compileUsageArgumentsOptions","text":"<p>Compile a <code>requirements.in</code> file to a <code>requirements.txt</code> file</p> <pre><code>uv pip compile [OPTIONS] &lt;SRC_FILE&gt;...\n</code></pre> <code>SRC_FILE</code><p>Include all packages listed in the given <code>requirements.in</code> files.</p> <p>If a <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file is provided, uv will extract the requirements for the relevant project.</p> <p>If <code>-</code> is provided, then requirements will be read from stdin.</p> <code>--all-extras</code><p>Include all optional dependencies.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--annotation-style</code> annotation-style<p>The style of the annotation comments included in the output file, used to indicate the source of each package.</p> <p>Defaults to <code>split</code>.</p> <p>Possible values:</p> <ul> <li><code>line</code>:  Render the annotations on a single, comma-separated line</li> <li><code>split</code>:  Render each annotation on its own line</li> </ul> <code>--build-constraint</code>, <code>-b</code> build-constraint<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that\u2019s installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--constraint</code>, <code>-c</code> constraint<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that\u2019s installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip\u2019s <code>--constraint</code> option.</p> <code>--custom-compile-command</code> custom-compile-command<p>The header comment to include at the top of the output file generated by <code>uv pip compile</code>.</p> <p>Used to reflect custom build scripts and commands that wrap <code>uv pip compile</code>.</p> <code>--emit-build-options</code><p>Include <code>--no-binary</code> and <code>--only-binary</code> entries in the generated output file</p> <code>--emit-find-links</code><p>Include <code>--find-links</code> entries in the generated output file</p> <code>--emit-index-annotation</code><p>Include comment annotations indicating the index used to resolve each package (e.g., <code># from https://pypi.org/simple</code>)</p> <code>--emit-index-url</code><p>Include <code>--index-url</code> and <code>--extra-index-url</code> entries in the generated output file</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra</code> extra<p>Include optional dependencies from the extra group name; may be provided more than once.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--generate-hashes</code><p>Include distribution hashes in the output file</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--legacy-setup-py</code><p>Use legacy <code>setuptools</code> behavior when building source distributions without a <code>pyproject.toml</code></p> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used when building source distributions.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-annotate</code><p>Exclude comment annotations indicating the source of each package</p> <code>--no-binary</code> no-binary<p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-deps</code><p>Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting the requirements file</p> <code>--no-emit-package</code> no-emit-package<p>Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile\u2019s <code>--unsafe-package</code> option</p> <code>--no-header</code><p>Exclude the comment header at the top of the generated output file</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--no-strip-extras</code><p>Include extras in the output file.</p> <p>By default, uv strips extras, as any packages pulled in by the extras are already included as dependencies in the output file directly. Further, output files generated with <code>--no-strip-extras</code> cannot be used as constraints files in <code>install</code> and <code>sync</code> invocations.</p> <code>--no-strip-markers</code><p>Include environment markers in the output file.</p> <p>By default, uv strips environment markers, as the resolution generated by <code>compile</code> is only guaranteed to be correct for the target environment.</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--only-binary</code> only-binary<p>Only use pre-built wheels; don\u2019t build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--output-file</code>, <code>-o</code> output-file<p>Write the compiled requirements to the given <code>requirements.txt</code> file.</p> <p>If the file already exists, the existing versions will be preferred when resolving dependencies, unless <code>--upgrade</code> is also specified.</p> <code>--override</code> override<p>Override versions using the given requirements files.</p> <p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they\u2019re combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code> python<p>The Python interpreter to use during resolution.</p> <p>A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.</p> <p>The interpreter is also used to determine the default minimum Python version, unless <code>--python-version</code> is provided.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-platform</code> python-platform<p>The platform for which requirements should be resolved.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aaarch64-apple-darwin</code>.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  An x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> </ul> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--python-version</code>, <code>-p</code> python-version<p>The Python version to use for resolution.</p> <p>For example, <code>3.8</code> or <code>3.8.17</code>.</p> <p>Defaults to the version of the Python interpreter used for resolution.</p> <p>Defines the minimum Python version that must be supported by the resolved requirements.</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.8</code> is mapped to <code>3.8.0</code>.</p> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--system</code><p>Install packages into the system Python environment.</p> <p>By default, uv uses the virtual environment in the current working directory or any parent directory, falling back to searching for a Python executable in <code>PATH</code>. The <code>--system</code> option instructs uv to avoid using a virtual environment Python and restrict its search to the system path.</p> <code>--universal</code><p>Perform a universal resolution, attempting to generate a single <code>requirements.txt</code> output file that is compatible with all operating systems, architectures, and Python implementations.</p> <p>In universal mode, the current Python version (or user-provided <code>--python-version</code>) will be treated as a lower bound. For example, <code>--universal --python-version 3.7</code> would produce a universal resolution for Python 3.7 and later.</p> <p>Implies <code>--no-strip-markers</code>.</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-sync","title":"uv pip syncUsageArgumentsOptions","text":"<p>Sync an environment with a <code>requirements.txt</code> file</p> <pre><code>uv pip sync [OPTIONS] &lt;SRC_FILE&gt;...\n</code></pre> <code>SRC_FILE</code><p>Include all packages listed in the given <code>requirements.txt</code> files.</p> <p>If a <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file is provided, uv will extract the requirements for the relevant project.</p> <p>If <code>-</code> is provided, then requirements will be read from stdin.</p> <code>--allow-empty-requirements</code><p>Allow sync of empty requirements, which will clear the environment of all packages</p> <code>--break-system-packages</code><p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or <code>pip</code>).</p> <code>--build-constraint</code>, <code>-b</code> build-constraint<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that\u2019s installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--constraint</code>, <code>-c</code> constraint<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that\u2019s installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip\u2019s <code>--constraint</code> option.</p> <code>--dry-run</code><p>Perform a dry run, i.e., don\u2019t actually install anything but resolve the dependencies and print the resulting plan</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--legacy-setup-py</code><p>Use legacy <code>setuptools</code> behavior when building source distributions without a <code>pyproject.toml</code></p> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-allow-empty-requirements</code><code>--no-binary</code> no-binary<p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--no-break-system-packages</code><code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--only-binary</code> only-binary<p>Only use pre-built wheels; don\u2019t build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--prefix</code> prefix<p>Install packages into <code>lib</code>, <code>bin</code>, and other top-level folders under the specified directory, as if a virtual environment were present at that location.</p> <p>In general, prefer the use of <code>--python</code> to install into an alternate environment, as scripts and other artifacts installed via <code>--prefix</code> will reference the installing interpreter, rather than any interpreter added to the <code>--prefix</code> directory, rendering them non-portable.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter into which packages should be installed.</p> <p>By default, syncing requires a virtual environment. An path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aaarch64-apple-darwin</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  An x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> </ul> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--python-version</code> python-version<p>The minimum Python version that should be supported by the requirements (e.g., <code>3.7</code> or <code>3.7.9</code>).</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.7</code> is mapped to <code>3.7.0</code>.</p> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--require-hashes</code><p>Require a matching hash for each requirement.</p> <p>Hash-checking mode is all or nothing. If enabled, all requirements must be provided with a corresponding hash or set of hashes. Additionally, if enabled, all requirements must either be pinned to exact versions (e.g., <code>==1.0.0</code>), or be specified via direct URL.</p> <p>Hash-checking mode introduces a number of additional constraints:</p> <ul> <li>Git dependencies are not supported. - Editable installs are not supported. - Local dependencies are not supported, unless they point to a specific wheel (<code>.whl</code>) or source archive (<code>.zip</code>, <code>.tar.gz</code>), as opposed to a directory.</li> </ul> <code>--strict</code><p>Validate the Python environment after completing the installation, to detect and with missing dependencies or other issues</p> <code>--system</code><p>Install packages into the system Python environment.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <code>--target</code> target<p>Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--verify-hashes</code><p>Validate any hashes provided in the requirements file.</p> <p>Unlike <code>--require-hashes</code>, <code>--verify-hashes</code> does not require that all requirements have hashes; instead, it will limit itself to verifying the hashes of those requirements that do include them.</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-install","title":"uv pip installUsageArgumentsOptions","text":"<p>Install packages into an environment</p> <pre><code>uv pip install [OPTIONS] &lt;PACKAGE|--requirement &lt;REQUIREMENT&gt;|--editable &lt;EDITABLE&gt;&gt;\n</code></pre> <code>PACKAGE</code><p>Install all listed packages</p> <code>--all-extras</code><p>Include all optional dependencies.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--break-system-packages</code><p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or <code>pip</code>).</p> <code>--build-constraint</code>, <code>-b</code> build-constraint<p>Constrain build dependencies using the given requirements files when building source distributions.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that\u2019s installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--compile-bytecode</code><p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--config-setting</code>, <code>-C</code> config-setting<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs</p> <code>--constraint</code>, <code>-c</code> constraint<p>Constrain versions using the given requirements files.</p> <p>Constraints files are <code>requirements.txt</code>-like files that only control the version of a requirement that\u2019s installed. However, including a package in a constraints file will not trigger the installation of that package.</p> <p>This is equivalent to pip\u2019s <code>--constraint</code> option.</p> <code>--dry-run</code><p>Perform a dry run, i.e., don\u2019t actually install anything but resolve the dependencies and print the resulting plan</p> <code>--editable</code>, <code>-e</code> editable<p>Install the editable package based on the provided local file path</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra</code> extra<p>Include optional dependencies from the extra group name; may be provided more than once.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--legacy-setup-py</code><p>Use legacy <code>setuptools</code> behavior when building source distributions without a <code>pyproject.toml</code></p> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-binary</code> no-binary<p>Don\u2019t install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--no-break-system-packages</code><code>--no-build</code><p>Don\u2019t build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <code>--no-build-isolation</code><p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <code>--no-build-isolation-package</code> no-build-isolation-package<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages\u2019 build dependencies specified by PEP 518  are already installed.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-deps</code><p>Ignore package dependencies, instead only installing those packages explicitly listed on the command line or in the requirements files</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-sources</code><p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--only-binary</code> only-binary<p>Only use pre-built wheels; don\u2019t build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <code>--override</code> override<p>Override versions using the given requirements files.</p> <p>Overrides files are <code>requirements.txt</code>-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.</p> <p>While constraints are additive, in that they\u2019re combined with the requirements of the constituent packages, overrides are absolute, in that they completely replace the requirements of the constituent packages.</p> <code>--prefix</code> prefix<p>Install packages into <code>lib</code>, <code>bin</code>, and other top-level folders under the specified directory, as if a virtual environment were present at that location.</p> <p>In general, prefer the use of <code>--python</code> to install into an alternate environment, as scripts and other artifacts installed via <code>--prefix</code> will reference the installing interpreter, rather than any interpreter added to the <code>--prefix</code> directory, rendering them non-portable.</p> <code>--prerelease</code> prerelease<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Possible values:</p> <ul> <li><code>disallow</code>:  Disallow all pre-release versions</li> <li><code>allow</code>:  Allow all pre-release versions</li> <li><code>if-necessary</code>:  Allow pre-release versions if all versions of a package are pre-release</li> <li><code>explicit</code>:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>if-necessary-or-explicit</code>:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <code>--python</code>, <code>-p</code> python<p>The Python interpreter into which packages should be installed.</p> <p>By default, installation requires a virtual environment. An path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-platform</code> python-platform<p>The platform for which requirements should be installed.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aaarch64-apple-darwin</code>.</p> <p>WARNING: When specified, uv will select wheels that are compatible with the target platform; as a result, the installed distributions may not be compatible with the current platform. Conversely, any distributions that are built from source may be incompatible with the target platform, as they will be built for the current platform. The <code>--python-platform</code> option is intended for advanced use cases.</p> <p>Possible values:</p> <ul> <li><code>windows</code>:  An alias for <code>x86_64-pc-windows-msvc</code>, the default target for Windows</li> <li><code>linux</code>:  An alias for <code>x86_64-unknown-linux-gnu</code>, the default target for Linux</li> <li><code>macos</code>:  An alias for <code>aarch64-apple-darwin</code>, the default target for macOS</li> <li><code>x86_64-pc-windows-msvc</code>:  An x86 Windows target</li> <li><code>x86_64-unknown-linux-gnu</code>:  An x86 Linux target. Equivalent to <code>x86_64-manylinux_2_17</code></li> <li><code>aarch64-apple-darwin</code>:  An ARM-based macOS target, as seen on Apple Silicon devices</li> <li><code>x86_64-apple-darwin</code>:  An x86 macOS target</li> <li><code>aarch64-unknown-linux-gnu</code>:  An ARM64 Linux target. Equivalent to <code>aarch64-manylinux_2_17</code></li> <li><code>aarch64-unknown-linux-musl</code>:  An ARM64 Linux target</li> <li><code>x86_64-unknown-linux-musl</code>:  An <code>x86_64</code> Linux target</li> <li><code>x86_64-manylinux_2_17</code>:  An <code>x86_64</code> target for the <code>manylinux_2_17</code> platform</li> <li><code>x86_64-manylinux_2_28</code>:  An <code>x86_64</code> target for the <code>manylinux_2_28</code> platform</li> <li><code>x86_64-manylinux_2_31</code>:  An <code>x86_64</code> target for the <code>manylinux_2_31</code> platform</li> <li><code>aarch64-manylinux_2_17</code>:  An ARM64 target for the <code>manylinux_2_17</code> platform</li> <li><code>aarch64-manylinux_2_28</code>:  An ARM64 target for the <code>manylinux_2_28</code> platform</li> <li><code>aarch64-manylinux_2_31</code>:  An ARM64 target for the <code>manylinux_2_31</code> platform</li> </ul> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--python-version</code> python-version<p>The minimum Python version that should be supported by the requirements (e.g., <code>3.7</code> or <code>3.7.9</code>).</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.7</code> is mapped to <code>3.7.0</code>.</p> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--refresh</code><p>Refresh all cached data</p> <code>--refresh-package</code> refresh-package<p>Refresh cached data for a specific package</p> <code>--reinstall</code><p>Reinstall all packages, regardless of whether they\u2019re already installed. Implies <code>--refresh</code></p> <code>--reinstall-package</code> reinstall-package<p>Reinstall a specific package, regardless of whether it\u2019s already installed. Implies <code>--refresh-package</code></p> <code>--require-hashes</code><p>Require a matching hash for each requirement.</p> <p>Hash-checking mode is all or nothing. If enabled, all requirements must be provided with a corresponding hash or set of hashes. Additionally, if enabled, all requirements must either be pinned to exact versions (e.g., <code>==1.0.0</code>), or be specified via direct URL.</p> <p>Hash-checking mode introduces a number of additional constraints:</p> <ul> <li>Git dependencies are not supported. - Editable installs are not supported. - Local dependencies are not supported, unless they point to a specific wheel (<code>.whl</code>) or source archive (<code>.zip</code>, <code>.tar.gz</code>), as opposed to a directory.</li> </ul> <code>--requirement</code>, <code>-r</code> requirement<p>Install all packages listed in the given <code>requirements.txt</code> files.</p> <p>If a <code>pyproject.toml</code>, <code>setup.py</code>, or <code>setup.cfg</code> file is provided, uv will extract the requirements for the relevant project.</p> <p>If <code>-</code> is provided, then requirements will be read from stdin.</p> <code>--resolution</code> resolution<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Possible values:</p> <ul> <li><code>highest</code>:  Resolve the highest compatible version of each package</li> <li><code>lowest</code>:  Resolve the lowest compatible version of each package</li> <li><code>lowest-direct</code>:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <code>--strict</code><p>Validate the Python environment after completing the installation, to detect and with missing dependencies or other issues</p> <code>--system</code><p>Install packages into the system Python environment.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <code>--target</code> target<p>Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory</p> <code>--upgrade</code>, <code>-U</code><p>Allow package upgrades, ignoring pinned versions in any existing output file. Implies <code>--refresh</code></p> <code>--upgrade-package</code>, <code>-P</code> upgrade-package<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies <code>--refresh-package</code></p> <code>--user</code><code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--verify-hashes</code><p>Validate any hashes provided in the requirements file.</p> <p>Unlike <code>--require-hashes</code>, <code>--verify-hashes</code> does not require that all requirements have hashes; instead, it will limit itself to verifying the hashes of those requirements that do include them.</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-uninstall","title":"uv pip uninstallUsageArgumentsOptions","text":"<p>Uninstall packages from an environment</p> <pre><code>uv pip uninstall [OPTIONS] &lt;PACKAGE|--requirement &lt;REQUIREMENT&gt;&gt;\n</code></pre> <code>PACKAGE</code><p>Uninstall all listed packages</p> <code>--break-system-packages</code><p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or <code>pip</code>).</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for remote requirements files.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-break-system-packages</code><code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--prefix</code> prefix<p>Uninstall packages from the specified <code>--prefix</code> directory</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter from which packages should be uninstalled.</p> <p>By default, uninstallation requires a virtual environment. An path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--requirement</code>, <code>-r</code> requirement<p>Uninstall all packages listed in the given requirements files</p> <code>--system</code><p>Use the system Python to uninstall packages.</p> <p>By default, uv uninstalls from the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <code>--target</code> target<p>Uninstall packages from the specified <code>--target</code> directory</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-freeze","title":"uv pip freezeUsageOptions","text":"<p>List, in requirements format, packages installed in an environment</p> <pre><code>uv pip freeze [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--exclude-editable</code><p>Exclude any editable packages from output</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be listed.</p> <p>By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>List packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-list","title":"uv pip listUsageOptions","text":"<p>List, in tabular format, packages installed in an environment</p> <pre><code>uv pip list [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--editable</code>, <code>-e</code><p>Only include editable projects</p> <code>--exclude</code> exclude<p>Exclude the specified package(s) from the output</p> <code>--exclude-editable</code><p>Exclude any editable packages from output</p> <code>--format</code> format<p>Select the output format between: <code>columns</code> (default), <code>freeze</code>, or <code>json</code></p> <p>[default: columns]</p> <p>Possible values:</p> <ul> <li><code>columns</code>:  Display the list of packages in a human-readable table</li> <li><code>freeze</code>:  Display the list of packages in a <code>pip freeze</code>-like format, with one package per line alongside its version</li> <li><code>json</code>:  Display the list of packages in a machine-readable JSON format</li> </ul> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be listed.</p> <p>By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>List packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-show","title":"uv pip showUsageArgumentsOptions","text":"<p>Show information about one or more installed packages</p> <pre><code>uv pip show [OPTIONS] [PACKAGE]...\n</code></pre> <code>PACKAGE</code><p>The package(s) to display</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to find the package in.</p> <p>By default, uv looks for packages in a virtual environment but will look for packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>Show a package in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-tree","title":"uv pip treeUsageOptions","text":"<p>Display the dependency tree for an environment</p> <pre><code>uv pip tree [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--depth</code>, <code>-d</code> depth<p>Maximum display depth of the dependency tree</p> <p>[default: 255]</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--invert</code><p>Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-dedupe</code><p>Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--no-system</code><code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--package</code> package<p>Display only the specified packages</p> <code>--prune</code> prune<p>Prune the given package from the display of the dependency tree</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be listed.</p> <p>By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--show-version-specifiers</code><p>Show the version constraint(s) imposed on each package</p> <code>--strict</code><p>Validate the Python environment, to detect packages with missing dependencies and other issues</p> <code>--system</code><p>List packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-pip-check","title":"uv pip checkUsageOptions","text":"<p>Verify installed packages have compatible dependencies</p> <pre><code>uv pip check [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter for which packages should be checked.</p> <p>By default, uv checks packages in a virtual environment but will check packages in a system Python environment if no virtual environment is found.</p> <p>See uv python for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--system</code><p>Check packages in the system Python environment.</p> <p>Disables discovery of virtual environments.</p> <p>See uv python for details on Python discovery.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-venv","title":"uv venv","text":"<p>Create a virtual environment.</p> <p>By default, creates a virtual environment named <code>.venv</code> in the working directory. An alternative path may be provided positionally.</p> <p>If a virtual environment exists at the target path, it will be removed and a new, empty virtual environment will be created.</p> <p>When using uv, the virtual environment does not need to be activated. uv will find a virtual environment (named <code>.venv</code>) in the working directory or any parent directories.</p> Usage <pre><code>uv venv [OPTIONS] [NAME]\n</code></pre> Arguments <code>NAME</code><p>The path to the virtual environment to create</p> Options <code>--allow-existing</code><p>Preserve any existing files or directories at the target path.</p> <p>By default, <code>uv venv</code> will remove an existing virtual environment at the given path, and exit with an error if the path is non-empty but not a virtual environment. The <code>--allow-existing</code> option will instead write to the given path, regardless of its contents, and without clearing it beforehand.</p> <p>WARNING: This option can lead to unexpected behavior if the existing virtual environment and the newly-created virtual environment are linked to different Python interpreters.</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--exclude-newer</code> exclude-newer<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <code>--extra-index-url</code> extra-index-url<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>--index-url</code> (which defaults to PyPI). When multiple <code>--extra-index-url</code> flags are provided, earlier values take priority.</p> <code>--find-links</code>, <code>-f</code> find-links<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--index-strategy</code> index-strategy<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Possible values:</p> <ul> <li><code>first-index</code>:  Only use results from the first index that returns a match for a given package name</li> <li><code>unsafe-first-match</code>:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>unsafe-best-match</code>:  Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <code>--index-url</code>, <code>-i</code> index-url<p>The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index given by this flag is given lower priority than all other indexes specified via the <code>--extra-index-url</code> flag.</p> <code>--keyring-provider</code> keyring-provider<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Defaults to <code>disabled</code>.</p> <p>Possible values:</p> <ul> <li><code>disabled</code>:  Do not use keyring for credential lookup</li> <li><code>subprocess</code>:  Use the <code>keyring</code> command for credential lookup</li> </ul> <code>--link-mode</code> link-mode<p>The method to use when installing packages from the global cache.</p> <p>This option is only used for installing seed packages.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Possible values:</p> <ul> <li><code>clone</code>:  Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>copy</code>:  Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>hardlink</code>:  Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>symlink</code>:  Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-index</code><p>Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code></p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--prompt</code> prompt<p>Provide an alternative prompt prefix for the virtual environment.</p> <p>By default, the prompt is dependent on whether a path was provided to <code>uv venv</code>. If provided (e.g, <code>uv venv project</code>), the prompt is set to the directory name. If not provided (<code>uv venv</code>), the prompt is set to the current directory\u2019s name.</p> <p>If \".\" is provided, the the current directory name will be used regardless of whether a path was provided to <code>uv venv</code>.</p> <code>--python</code>, <code>-p</code> python<p>The Python interpreter to use for the virtual environment.</p> <p>During virtual environment creation, uv will not look for Python interpreters in virtual environments.</p> <p>See <code>uv python help</code> for details on Python discovery and supported request formats.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--relocatable</code><p>Make the virtual environment relocatable.</p> <p>A relocatable virtual environment can be moved around and redistributed without invalidating its associated entrypoint and activation scripts.</p> <p>Note that this can only be guaranteed for standard <code>console_scripts</code> and <code>gui_scripts</code>. Other scripts may be adjusted if they ship with a generic <code>#!python[w]</code> shebang, and binaries are left as-is.</p> <p>As a result of making the environment relocatable (by way of writing relative, rather than absolute paths), the entrypoints and scripts themselves will not be relocatable. In other words, copying those entrypoints and scripts to a location outside the environment will not work, as they reference paths relative to the environment itself.</p> <code>--seed</code><p>Install seed packages (one or more of: <code>pip</code>, <code>setuptools</code>, and <code>wheel</code>) into the virtual environment.</p> <p>Note <code>setuptools</code> and <code>wheel</code> are not included in Python 3.12+ environments.</p> <code>--system-site-packages</code><p>Give the virtual environment access to the system site packages directory.</p> <p>Unlike <code>pip</code>, when a virtual environment is created with <code>--system-site-packages</code>, uv will not take system site packages into account when running commands like <code>uv pip list</code> or <code>uv pip install</code>. The <code>--system-site-packages</code> flag will provide the virtual environment with access to the system site packages directory at runtime, but will not affect the behavior of uv commands.</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-cache","title":"uv cache","text":"<p>Manage uv's cache</p> Usage <pre><code>uv cache [OPTIONS] &lt;COMMAND&gt;\n</code></pre> Commands <code>uv cache clean</code><p>Clear the cache, removing all entries or those linked to specific packages</p> <code>uv cache prune</code><p>Prune all unreachable objects from the cache</p> <code>uv cache dir</code><p>Show the cache directory</p>"},{"location":"reference/cli/#uv-cache-clean","title":"uv cache cleanUsageArgumentsOptions","text":"<p>Clear the cache, removing all entries or those linked to specific packages</p> <pre><code>uv cache clean [OPTIONS] [PACKAGE]...\n</code></pre> <code>PACKAGE</code><p>The packages to remove from the cache</p> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-cache-prune","title":"uv cache pruneUsageOptions","text":"<p>Prune all unreachable objects from the cache</p> <pre><code>uv cache prune [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--ci</code><p>Optimize the cache for persistence in a continuous integration environment, like GitHub Actions.</p> <p>By default, uv caches both the wheels that it builds from source and the pre-built wheels that it downloads directly, to enable high-performance package installation. In some scenarios, though, persisting pre-built wheels may be undesirable. For example, in GitHub Actions, it\u2019s faster to omit pre-built wheels from the cache and instead have re-download them on each run. However, it typically is faster to cache wheels that are built from source, since the wheel building process can be expensive, especially for extension modules.</p> <p>In <code>--ci</code> mode, uv will prune any pre-built wheels from the cache, but retain any wheels that were built from source.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-cache-dir","title":"uv cache dirUsageOptions","text":"<p>Show the cache directory</p> <pre><code>uv cache dir [OPTIONS]\n</code></pre> <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-version","title":"uv version","text":"<p>Display uv's version</p> Usage <pre><code>uv version [OPTIONS]\n</code></pre> Options <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--output-format</code> output-format<code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/cli/#uv-help","title":"uv help","text":"<p>Display documentation for a command</p> Usage <pre><code>uv help [OPTIONS] [COMMAND]...\n</code></pre> Arguments <code>COMMAND</code> Options <code>--cache-dir</code> cache-dir<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <code>--color</code> color-choice<p>Control colors in output</p> <p>[default: auto]</p> <p>Possible values:</p> <ul> <li><code>auto</code>:  Enables colored output only when the output is going to a terminal or TTY with support</li> <li><code>always</code>:  Enables colored output regardless of the detected environment</li> <li><code>never</code>:  Disables colored output</li> </ul> <code>--config-file</code> config-file<p>The path to a <code>uv.toml</code> file to use for configuration.</p> <p>While uv configuration can be included in a <code>pyproject.toml</code> file, it is not allowed in this context.</p> <code>--help</code>, <code>-h</code><p>Display the concise help for this command</p> <code>--native-tls</code><p>Whether to load TLS certificates from the platform\u2019s native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform\u2019s native certificate store, especially if you\u2019re relying on a corporate trust root (e.g., for a mandatory proxy) that\u2019s included in your system\u2019s certificate store.</p> <code>--no-cache</code>, <code>-n</code><p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation</p> <code>--no-config</code><p>Avoid discovering configuration files (<code>pyproject.toml</code>, <code>uv.toml</code>).</p> <p>Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.</p> <code>--no-pager</code><p>Disable pager when printing help</p> <code>--no-progress</code><p>Hide all progress outputs.</p> <p>For example, spinners or progress bars.</p> <code>--no-python-downloads</code><p>Disable automatic downloads of Python</p> <code>--offline</code><p>Disable network access.</p> <p>When disabled, uv will only use locally cached data and locally available files.</p> <code>--python-preference</code> python-preference<p>Whether to prefer uv-managed or system Python installations.</p> <p>By default, uv prefers using Python versions it manages. However, it will use system Python installations if a uv-managed Python is not installed. This option allows prioritizing or ignoring system Python installations.</p> <p>Possible values:</p> <ul> <li><code>only-managed</code>:  Only use managed Python installations; never use system Python installations</li> <li><code>managed</code>:  Prefer managed Python installations over system Python installations</li> <li><code>system</code>:  Prefer system Python installations over managed Python installations</li> <li><code>only-system</code>:  Only use system Python installations; never use managed Python installations</li> </ul> <code>--quiet</code>, <code>-q</code><p>Do not print any output</p> <code>--verbose</code>, <code>-v</code><p>Use verbose output.</p> <p>You can configure fine-grained logging using the <code>RUST_LOG</code> environment variable. (&lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&gt;)</p> <code>--version</code>, <code>-V</code><p>Display the uv version</p>"},{"location":"reference/platforms/","title":"Platform support","text":"<p>uv has Tier 1 support for the following platforms:</p> <ul> <li>macOS (Apple Silicon)</li> <li>macOS (x86_64)</li> <li>Linux (x86_64)</li> <li>Windows (x86_64)</li> </ul> <p>uv is continuously built, tested, and developed against its Tier 1 platforms. Inspired by the Rust project, Tier 1 can be thought of as \"guaranteed to work\".</p> <p>uv has Tier 2 support (\"guaranteed to build\") for the following platforms:</p> <ul> <li>Linux (PPC64)</li> <li>Linux (PPC64LE)</li> <li>Linux (aarch64)</li> <li>Linux (armv7)</li> <li>Linux (i686)</li> <li>Linux (s390x)</li> </ul> <p>uv ships pre-built wheels to PyPI for its Tier 1 and Tier 2 platforms. However, while Tier 2 platforms are continuously built, they are not continuously tested or developed against, and so stability may vary in practice.</p> <p>Beyond the Tier 1 and Tier 2 platforms, uv is known to build on i686 Windows, and known not to build on aarch64 Windows, but does not consider either platform to be supported at this time. The minimum supported Windows version is Windows 10, following Rust's own Tier 1 support.</p> <p>uv supports and is tested against Python 3.8, 3.9, 3.10, 3.11, and 3.12.</p>"},{"location":"reference/resolver-internals/","title":"Resolver internals","text":"<p>Tip</p> <p>This document focuses on the internal workings of uv's resolver. For using uv, see the resolution concept documentation.</p>"},{"location":"reference/resolver-internals/#resolver","title":"Resolver","text":"<p>As defined in a textbook, resolution, or finding a set of version to install from a given set of requirements, is equivalent to the SAT problem and thereby NP-complete: in the worst case you have to try all possible combinations of all versions of all packages and there are no general, fast algorithms. In practice, this is misleading for a number of reasons:</p> <ul> <li>The slowest part of resolution in uv is loading package and version metadata, even if it's cached.</li> <li>There are many possible solutions, but some are preferable than others. For example we generally   prefer using the latest version of packages.</li> <li>Package's dependencies are complex, e.g., there are contiguous versions ranges \u2014 not arbitrary   boolean inclusion/exclusions of versions, adjacent releases often have the same or similar   requirements, etc.</li> <li>For most resolutions, the resolver doesn't need to backtrack, picking versions iteratively is   sufficient. If there are version preferences from a previous resolution, barely any work needs to   be done.</li> <li>When resolution fails, more information is needed than a message that there is no solution (as is   seen in SAT solvers). Instead, the resolver should produce an understandable error trace that   states which packages are involved in away to allows a user to remove the conflict.</li> </ul> <p>uv uses pubgrub-rs, the Rust implementation of PubGrub, an incremental version solver. PubGrub in uv works in the following steps:</p> <ul> <li>Start with a partial solution that declares which packages versions have been selected and which   are undecided. Initially, only a virtual root package is decided.</li> <li>The highest priority package is selected from the undecided packages. Package with URLs (including   file, git, etc.) have the highest priority, then those with more exact specifiers (such as <code>==</code>),   then those with less strict specifiers. Inside each category, packages are ordered by when they   were first seen (i.e. order in a file), making the resolution deterministic.</li> <li>A version is picked for the selected package. The version must works with all specifiers from the   requirements in the partial solution and must not be previously marked as incompatible. The   resolver prefers versions from a lockfile (<code>uv.lock</code> or <code>-o requirements.txt</code>) and those installed   in the current environment. Versions are checked from highest to lowest (unless using an   alternative resolution strategy).</li> <li>All requirements of the selected package version are added to the undecided packages. uv   prefetches their metadata in the background to improve performance.</li> <li>The process is either repeated with the next package unless a conflict is detected, in which the   resolver will backtrack. For example, the partial solution contains, among other packages, <code>a 2</code>   then <code>b 2</code> with the requirements <code>a 2 -&gt; c 1</code> and <code>b 2 -&gt; c 2</code>. No compatible version of <code>c</code> can   be found. PubGrub can determine this was caused by <code>a 2</code> and <code>b 2</code> and add the incompatibility   <code>{a 2, b 2}</code>, meaning that when either is picked, the other cannot be selected. The partial   solution is restored to <code>a 2</code> with the tracked incompatibility and the resolver attempts to pick a   new version for <code>b</code>.</li> </ul> <p>Eventually, the resolver either picks compatible versions for all packages (a successful resolution) or there is an incompatibility including the virtual \"root\" package which defines the versions requested by the user. An incompatibility with the root package indicates that whatever versions of the root dependencies and their transitive dependencies are picked, there will always be a conflict. From the incompatibilities tracked in PubGrub, an error message is constructed to enumerate the involved packages.</p> <p>Tip</p> <p>For more details on the PubGrub algorithm, see Internals of the PubGrub algorithm.</p>"},{"location":"reference/resolver-internals/#forking","title":"Forking","text":"<p>Python resolvers historically didn't support backtracking, and even with backtracking, resolution was usually limited to single environment, which one specific architecture, operating system, Python version, and Python implementation. Some packages use contradictory requirements for different environments, for example:</p> <pre><code>numpy&gt;=2,&lt;3 ; python_version &gt;= \"3.11\"\nnumpy&gt;=1.16,&lt;2 ; python_version &lt; \"3.11\"\n</code></pre> <p>Since Python only allows one version of each package, a naive resolver would error here. Inspired by Poetry, uv uses a forking resolver: whenever there are multiple requirements for a package with different markers, the resolution is split.</p> <p>In the above example, the partial solution would be split into two resolutions, one for <code>python_version &gt;= \"3.11\"</code> and one for <code>python_version &lt; \"3.11\"</code>.</p> <p>If markers overlap or are missing a part of the marker space, the resolver splits additional times \u2014 there can be many forks per package. For example, given:</p> <pre><code>flask &gt; 1 ; sys_platform == 'darwin'\nflask &gt; 2 ; sys_platform == 'win32'\nflask\n</code></pre> <p>A fork would be created for <code>sys_platform == 'darwin'</code>, for <code>sys_platform == 'win32'</code>, and for <code>sys_platform != 'darwin' and sys_platform != 'win32'</code>.</p> <p>Forks can be nested, e.g., each fork is dependent on any previous forks that occurred. Forks with identical packages are merged to keep the number of forks low.</p> <p>Tip</p> <p>Forking can be observed in the logs of <code>uv lock -v</code> by looking for <code>Splitting resolution on ...</code>, <code>Solving split ... (requires-python: ...)</code> and <code>Split ... resolution took ...</code>.</p> <p>One difficulty in a forking resolver is that where splits occur is dependent on the order packages are seen, which is in turn dependent on the preferences, e.g., from <code>uv.lock</code>. So it is possible for the resolver to solve the requirements with specific forks, write this to the lockfile, and when the resolver is invoked again, a different solution is found because the preferences result in different fork points. To avoid this, the <code>environment-markers</code> of each fork and each package that diverges between forks is written to the lockfile. When performing a new resolution, the forks from the lockfile are used to ensure the resolution is stable. When requirements change, new forks may be added to the saved forks.</p>"},{"location":"reference/resolver-internals/#requires-python","title":"Requires-python","text":"<p>To ensure that a resolution with <code>requires-python = \"&gt;=3.9\"</code> can actually be installed for the included Python versions, uv requires that all dependencies have the same minimum Python version. Package versions that declare a higher minimum Python version, e.g., <code>requires-python = \"&gt;=3.10\"</code>, are rejected, because a resolution with that version can't be installed on Python 3.9. For simplicity and forward compatibility, only lower bounds in <code>requires-python</code> are respected. For example, if a package declares <code>requires-python = \"&gt;=3.8,&lt;4\"</code>, the <code>&lt;4</code> marker is not propagated to the entire resolution.</p>"},{"location":"reference/resolver-internals/#wheel-tags","title":"Wheel tags","text":"<p>While uv's resolution is universal with respect to environment markers, this doesn't extend to wheel tags. Wheel tags can encode the Python version, Python implementation, operating system, and architecture. For example, <code>torch-2.4.0-cp312-cp312-manylinux2014_aarch64.whl</code> is only compatible with CPython 3.12 on arm64 Linux with <code>glibc&gt;=2.17</code> (per the <code>manylinux2014</code> policy), while <code>tqdm-4.66.4-py3-none-any.whl</code> works with all Python 3 versions and interpreters on any operating system and architecture. Most projects have a universally compatible source distribution that can be used when attempted to install a package that has no compatible wheel, but some packages, such as <code>torch</code>, don't publish a source distribution. In this case an installation on, e.g., Python 3.13, an uncommon operating system, or architecture, will fail and complain that there is no matching wheel.</p>"},{"location":"reference/settings/","title":"Settings","text":""},{"location":"reference/settings/#global","title":"Global","text":""},{"location":"reference/settings/#cache-dir","title":"<code>cache-dir</code>","text":"<p>Path to the cache directory.</p> <p>Defaults to <code>$HOME/Library/Caches/uv</code> on macOS, <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Linux, and <code>{FOLDERID_LocalAppData}\\uv\\cache</code> on Windows.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ncache-dir = \"./.uv_cache\"\n</code></pre> <pre><code>cache-dir = \"./.uv_cache\"\n</code></pre>"},{"location":"reference/settings/#compile-bytecode","title":"<code>compile-bytecode</code>","text":"<p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\ncompile-bytecode = true\n</code></pre> <pre><code>compile-bytecode = true\n</code></pre>"},{"location":"reference/settings/#config-settings","title":"<code>config-settings</code>","text":"<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nconfig-settings = { editable_mode = \"compat\" }\n</code></pre> <pre><code>config-settings = { editable_mode = \"compat\" }\n</code></pre>"},{"location":"reference/settings/#exclude-newer","title":"<code>exclude-newer</code>","text":"<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nexclude-newer = \"2006-12-02\"\n</code></pre> <pre><code>exclude-newer = \"2006-12-02\"\n</code></pre>"},{"location":"reference/settings/#extra-index-url","title":"<code>extra-index-url</code>","text":"<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>index_url</code>. When multiple indexes are provided, earlier values take priority.</p> <p>To control uv's resolution strategy when multiple indexes are present, see <code>index_strategy</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre> <pre><code>extra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre>"},{"location":"reference/settings/#find-links","title":"<code>find-links</code>","text":"<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre> <pre><code>find-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre>"},{"location":"reference/settings/#index-strategy","title":"<code>index-strategy</code>","text":"<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Default value: <code>\"first-index\"</code></p> <p>Possible values:</p> <ul> <li><code>\"first-index\"</code>: Only use results from the first index that returns a match for a given package name</li> <li><code>\"unsafe-first-match\"</code>: Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>\"unsafe-best-match\"</code>: Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nindex-strategy = \"unsafe-best-match\"\n</code></pre> <pre><code>index-strategy = \"unsafe-best-match\"\n</code></pre>"},{"location":"reference/settings/#index-url","title":"<code>index-url</code>","text":"<p>The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index provided by this setting is given lower priority than any indexes specified via <code>extra_index_url</code>.</p> <p>Default value: <code>\"https://pypi.org/simple\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre> <pre><code>index-url = \"https://test.pypi.org/simple\"\n</code></pre>"},{"location":"reference/settings/#keyring-provider","title":"<code>keyring-provider</code>","text":"<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Default value: <code>\"disabled\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nkeyring-provider = \"subprocess\"\n</code></pre> <pre><code>keyring-provider = \"subprocess\"\n</code></pre>"},{"location":"reference/settings/#link-mode","title":"<code>link-mode</code>","text":"<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Default value: <code>\"clone\" (macOS) or \"hardlink\" (Linux, Windows)</code></p> <p>Possible values:</p> <ul> <li><code>\"clone\"</code>: Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"copy\"</code>: Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"hardlink\"</code>: Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"symlink\"</code>: Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nlink-mode = \"copy\"\n</code></pre> <pre><code>link-mode = \"copy\"\n</code></pre>"},{"location":"reference/settings/#managed","title":"<code>managed</code>","text":"<p>Whether the project is managed by uv. If <code>false</code>, uv will ignore the project when <code>uv run</code> is invoked.</p> <p>Default value: <code>true</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nmanaged = false\n</code></pre> <pre><code>managed = false\n</code></pre>"},{"location":"reference/settings/#native-tls","title":"<code>native-tls</code>","text":"<p>Whether to load TLS certificates from the platform's native certificate store.</p> <p>By default, uv loads certificates from the bundled <code>webpki-roots</code> crate. The <code>webpki-roots</code> are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).</p> <p>However, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nnative-tls = true\n</code></pre> <pre><code>native-tls = true\n</code></pre>"},{"location":"reference/settings/#no-binary","title":"<code>no-binary</code>","text":"<p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-binary = true\n</code></pre> <pre><code>no-binary = true\n</code></pre>"},{"location":"reference/settings/#no-binary-package","title":"<code>no-binary-package</code>","text":"<p>Don't install pre-built wheels for a specific package.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-binary-package = [\"ruff\"]\n</code></pre> <pre><code>no-binary-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#no-build","title":"<code>no-build</code>","text":"<p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build = true\n</code></pre> <pre><code>no-build = true\n</code></pre>"},{"location":"reference/settings/#no-build-isolation","title":"<code>no-build-isolation</code>","text":"<p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build-isolation = true\n</code></pre> <pre><code>no-build-isolation = true\n</code></pre>"},{"location":"reference/settings/#no-build-isolation-package","title":"<code>no-build-isolation-package</code>","text":"<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>Vec&lt;PackageName&gt;</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre> <pre><code>no-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre>"},{"location":"reference/settings/#no-build-package","title":"<code>no-build-package</code>","text":"<p>Don't build source distributions for a specific package.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-build-package = [\"ruff\"]\n</code></pre> <pre><code>no-build-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#no-cache","title":"<code>no-cache</code>","text":"<p>Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-cache = true\n</code></pre> <pre><code>no-cache = true\n</code></pre>"},{"location":"reference/settings/#no-index","title":"<code>no-index</code>","text":"<p>Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-index = true\n</code></pre> <pre><code>no-index = true\n</code></pre>"},{"location":"reference/settings/#no-sources","title":"<code>no-sources</code>","text":"<p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nno-sources = true\n</code></pre> <pre><code>no-sources = true\n</code></pre>"},{"location":"reference/settings/#offline","title":"<code>offline</code>","text":"<p>Disable network access, relying only on locally cached data and locally available files.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\noffline = true\n</code></pre> <pre><code>offline = true\n</code></pre>"},{"location":"reference/settings/#prerelease","title":"<code>prerelease</code>","text":"<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Default value: <code>\"if-necessary-or-explicit\"</code></p> <p>Possible values:</p> <ul> <li><code>\"disallow\"</code>: Disallow all pre-release versions</li> <li><code>\"allow\"</code>: Allow all pre-release versions</li> <li><code>\"if-necessary\"</code>: Allow pre-release versions if all versions of a package are pre-release</li> <li><code>\"explicit\"</code>: Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>\"if-necessary-or-explicit\"</code>: Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nprerelease = \"allow\"\n</code></pre> <pre><code>prerelease = \"allow\"\n</code></pre>"},{"location":"reference/settings/#preview","title":"<code>preview</code>","text":"<p>Whether to enable experimental, preview features.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npreview = true\n</code></pre> <pre><code>preview = true\n</code></pre>"},{"location":"reference/settings/#python-downloads","title":"<code>python-downloads</code>","text":"<p>Whether to allow Python downloads.</p> <p>Default value: <code>\"automatic\"</code></p> <p>Possible values:</p> <ul> <li><code>\"automatic\"</code>: Automatically download managed Python installations when needed</li> <li><code>\"manual\"</code>: Do not automatically download managed Python installations; require explicit installation</li> <li><code>\"never\"</code>: Do not ever allow Python downloads</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npython-downloads = \"manual\"\n</code></pre> <pre><code>python-downloads = \"manual\"\n</code></pre>"},{"location":"reference/settings/#python-preference","title":"<code>python-preference</code>","text":"<p>Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv.</p> <p>Default value: <code>\"only-system\" (stable) or \"managed\" (preview)</code></p> <p>Possible values:</p> <ul> <li><code>\"only-managed\"</code>: Only use managed Python installations; never use system Python installations</li> <li><code>\"managed\"</code>: Prefer managed Python installations over system Python installations</li> <li><code>\"system\"</code>: Prefer system Python installations over managed Python installations</li> <li><code>\"only-system\"</code>: Only use system Python installations; never use managed Python installations</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\npython-preference = \"managed\"\n</code></pre> <pre><code>python-preference = \"managed\"\n</code></pre>"},{"location":"reference/settings/#reinstall","title":"<code>reinstall</code>","text":"<p>Reinstall all packages, regardless of whether they're already installed. Implies <code>refresh</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nreinstall = true\n</code></pre> <pre><code>reinstall = true\n</code></pre>"},{"location":"reference/settings/#reinstall-package","title":"<code>reinstall-package</code>","text":"<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>refresh-package</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nreinstall-package = [\"ruff\"]\n</code></pre> <pre><code>reinstall-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#resolution","title":"<code>resolution</code>","text":"<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Default value: <code>\"highest\"</code></p> <p>Possible values:</p> <ul> <li><code>\"highest\"</code>: Resolve the highest compatible version of each package</li> <li><code>\"lowest\"</code>: Resolve the lowest compatible version of each package</li> <li><code>\"lowest-direct\"</code>: Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nresolution = \"lowest-direct\"\n</code></pre> <pre><code>resolution = \"lowest-direct\"\n</code></pre>"},{"location":"reference/settings/#upgrade","title":"<code>upgrade</code>","text":"<p>Allow package upgrades, ignoring pinned versions in any existing output file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nupgrade = true\n</code></pre> <pre><code>upgrade = true\n</code></pre>"},{"location":"reference/settings/#upgrade-package","title":"<code>upgrade-package</code>","text":"<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file.</p> <p>Accepts both standalone package names (<code>ruff</code>) and version specifiers (<code>ruff&lt;0.5.0</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv]\nupgrade-package = [\"ruff\"]\n</code></pre> <pre><code>upgrade-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip","title":"<code>pip</code>","text":"<p>Settings that are specific to the <code>uv pip</code> command-line interface.</p> <p>These values will be ignored when running commands outside the <code>uv pip</code> namespace (e.g., <code>uv lock</code>, <code>uvx</code>).</p>"},{"location":"reference/settings/#pip_all-extras","title":"<code>all-extras</code>","text":"<p>Include all optional dependencies.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nall-extras = true\n</code></pre> <pre><code>[pip]\nall-extras = true\n</code></pre>"},{"location":"reference/settings/#pip_allow-empty-requirements","title":"<code>allow-empty-requirements</code>","text":"<p>Allow <code>uv pip sync</code> with empty requirements, which will clear the environment of all packages.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nallow-empty-requirements = true\n</code></pre> <pre><code>[pip]\nallow-empty-requirements = true\n</code></pre>"},{"location":"reference/settings/#pip_annotation-style","title":"<code>annotation-style</code>","text":"<p>The style of the annotation comments included in the output file, used to indicate the source of each package.</p> <p>Default value: <code>\"split\"</code></p> <p>Possible values:</p> <ul> <li><code>\"line\"</code>: Render the annotations on a single, comma-separated line</li> <li><code>\"split\"</code>: Render each annotation on its own line</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nannotation-style = \"line\"\n</code></pre> <pre><code>[pip]\nannotation-style = \"line\"\n</code></pre>"},{"location":"reference/settings/#pip_break-system-packages","title":"<code>break-system-packages</code>","text":"<p>Allow uv to modify an <code>EXTERNALLY-MANAGED</code> Python installation.</p> <p>WARNING: <code>--break-system-packages</code> is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like <code>apt</code>. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or pip).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nbreak-system-packages = true\n</code></pre> <pre><code>[pip]\nbreak-system-packages = true\n</code></pre>"},{"location":"reference/settings/#pip_compile-bytecode","title":"<code>compile-bytecode</code>","text":"<p>Compile Python files to bytecode after installation.</p> <p>By default, uv does not compile Python (<code>.py</code>) files to bytecode (<code>__pycache__/*.pyc</code>); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.</p> <p>When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ncompile-bytecode = true\n</code></pre> <pre><code>[pip]\ncompile-bytecode = true\n</code></pre>"},{"location":"reference/settings/#pip_concurrent-builds","title":"<code>concurrent-builds</code>","text":"<p>The maximum number of source distributions that uv will build concurrently at any given time.</p> <p>Defaults to the number of available CPU cores.</p> <p>Default value: <code>None</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nconcurrent-builds = 4\n</code></pre> <pre><code>[pip]\nconcurrent-builds = 4\n</code></pre>"},{"location":"reference/settings/#pip_concurrent-downloads","title":"<code>concurrent-downloads</code>","text":"<p>The maximum number of in-flight concurrent downloads that uv will perform at any given time.</p> <p>Default value: <code>50</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nconcurrent-downloads = 4\n</code></pre> <pre><code>[pip]\nconcurrent-downloads = 4\n</code></pre>"},{"location":"reference/settings/#pip_concurrent-installs","title":"<code>concurrent-installs</code>","text":"<p>The number of threads used when installing and unzipping packages.</p> <p>Defaults to the number of available CPU cores.</p> <p>Default value: <code>None</code></p> <p>Type: <code>int</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nconcurrent-installs = 4\n</code></pre> <pre><code>[pip]\nconcurrent-installs = 4\n</code></pre>"},{"location":"reference/settings/#pip_config-settings","title":"<code>config-settings</code>","text":"<p>Settings to pass to the PEP 517 build backend, specified as <code>KEY=VALUE</code> pairs.</p> <p>Default value: <code>{}</code></p> <p>Type: <code>dict</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nconfig-settings = { editable_mode = \"compat\" }\n</code></pre> <pre><code>[pip]\nconfig-settings = { editable_mode = \"compat\" }\n</code></pre>"},{"location":"reference/settings/#pip_custom-compile-command","title":"<code>custom-compile-command</code>","text":"<p>The header comment to include at the top of the output file generated by <code>uv pip compile</code>.</p> <p>Used to reflect custom build scripts and commands that wrap <code>uv pip compile</code>.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ncustom-compile-command = \"./custom-uv-compile.sh\"\n</code></pre> <pre><code>[pip]\ncustom-compile-command = \"./custom-uv-compile.sh\"\n</code></pre>"},{"location":"reference/settings/#pip_emit-build-options","title":"<code>emit-build-options</code>","text":"<p>Include <code>--no-binary</code> and <code>--only-binary</code> entries in the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-build-options = true\n</code></pre> <pre><code>[pip]\nemit-build-options = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-find-links","title":"<code>emit-find-links</code>","text":"<p>Include <code>--find-links</code> entries in the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-find-links = true\n</code></pre> <pre><code>[pip]\nemit-find-links = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-index-annotation","title":"<code>emit-index-annotation</code>","text":"<p>Include comment annotations indicating the index used to resolve each package (e.g., <code># from https://pypi.org/simple</code>).</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-index-annotation = true\n</code></pre> <pre><code>[pip]\nemit-index-annotation = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-index-url","title":"<code>emit-index-url</code>","text":"<p>Include <code>--index-url</code> and <code>--extra-index-url</code> entries in the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-index-url = true\n</code></pre> <pre><code>[pip]\nemit-index-url = true\n</code></pre>"},{"location":"reference/settings/#pip_emit-marker-expression","title":"<code>emit-marker-expression</code>","text":"<p>Whether to emit a marker string indicating the conditions under which the set of pinned dependencies is valid.</p> <p>The pinned dependencies may be valid even when the marker expression is false, but when the expression is true, the requirements are known to be correct.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nemit-marker-expression = true\n</code></pre> <pre><code>[pip]\nemit-marker-expression = true\n</code></pre>"},{"location":"reference/settings/#pip_exclude-newer","title":"<code>exclude-newer</code>","text":"<p>Limit candidate packages to those that were uploaded prior to the given date.</p> <p>Accepts both RFC 3339 timestamps (e.g., <code>2006-12-02T02:07:43Z</code>) and UTC dates in the same format (e.g., <code>2006-12-02</code>).</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nexclude-newer = \"2006-12-02\"\n</code></pre> <pre><code>[pip]\nexclude-newer = \"2006-12-02\"\n</code></pre>"},{"location":"reference/settings/#pip_extra","title":"<code>extra</code>","text":"<p>Include optional dependencies from the extra group name; may be provided more than once.</p> <p>Only applies to <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> sources.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nextra = [\"dev\", \"docs\"]\n</code></pre> <pre><code>[pip]\nextra = [\"dev\", \"docs\"]\n</code></pre>"},{"location":"reference/settings/#pip_extra-index-url","title":"<code>extra-index-url</code>","text":"<p>Extra URLs of package indexes to use, in addition to <code>--index-url</code>.</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>All indexes provided via this flag take priority over the index specified by <code>index_url</code>. When multiple indexes are provided, earlier values take priority.</p> <p>To control uv's resolution strategy when multiple indexes are present, see <code>index_strategy</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre> <pre><code>[pip]\nextra-index-url = [\"https://download.pytorch.org/whl/cpu\"]\n</code></pre>"},{"location":"reference/settings/#pip_find-links","title":"<code>find-links</code>","text":"<p>Locations to search for candidate distributions, in addition to those found in the registry indexes.</p> <p>If a path, the target must be a directory that contains packages as wheel files (<code>.whl</code>) or source distributions (<code>.tar.gz</code> or <code>.zip</code>) at the top level.</p> <p>If a URL, the page must contain a flat list of links to package files adhering to the formats described above.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre> <pre><code>[pip]\nfind-links = [\"https://download.pytorch.org/whl/torch_stable.html\"]\n</code></pre>"},{"location":"reference/settings/#pip_generate-hashes","title":"<code>generate-hashes</code>","text":"<p>Include distribution hashes in the output file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ngenerate-hashes = true\n</code></pre> <pre><code>[pip]\ngenerate-hashes = true\n</code></pre>"},{"location":"reference/settings/#pip_index-strategy","title":"<code>index-strategy</code>","text":"<p>The strategy to use when resolving against multiple index URLs.</p> <p>By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (<code>first-match</code>). This prevents \"dependency confusion\" attacks, whereby an attack can upload a malicious package under the same name to a secondary.</p> <p>Default value: <code>\"first-index\"</code></p> <p>Possible values:</p> <ul> <li><code>\"first-index\"</code>: Only use results from the first index that returns a match for a given package name</li> <li><code>\"unsafe-first-match\"</code>: Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next</li> <li><code>\"unsafe-best-match\"</code>: Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nindex-strategy = \"unsafe-best-match\"\n</code></pre> <pre><code>[pip]\nindex-strategy = \"unsafe-best-match\"\n</code></pre>"},{"location":"reference/settings/#pip_index-url","title":"<code>index-url</code>","text":"<p>The URL of the Python package index (by default: https://pypi.org/simple).</p> <p>Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.</p> <p>The index provided by this setting is given lower priority than any indexes specified via <code>extra_index_url</code>.</p> <p>Default value: <code>\"https://pypi.org/simple\"</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre> <pre><code>[pip]\nindex-url = \"https://test.pypi.org/simple\"\n</code></pre>"},{"location":"reference/settings/#pip_keyring-provider","title":"<code>keyring-provider</code>","text":"<p>Attempt to use <code>keyring</code> for authentication for index URLs.</p> <p>At present, only <code>--keyring-provider subprocess</code> is supported, which configures uv to use the <code>keyring</code> CLI to handle authentication.</p> <p>Default value: <code>disabled</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nkeyring-provider = \"subprocess\"\n</code></pre> <pre><code>[pip]\nkeyring-provider = \"subprocess\"\n</code></pre>"},{"location":"reference/settings/#pip_legacy-setup-py","title":"<code>legacy-setup-py</code>","text":"<p>Use legacy <code>setuptools</code> behavior when building source distributions without a <code>pyproject.toml</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nlegacy-setup-py = true\n</code></pre> <pre><code>[pip]\nlegacy-setup-py = true\n</code></pre>"},{"location":"reference/settings/#pip_link-mode","title":"<code>link-mode</code>","text":"<p>The method to use when installing packages from the global cache.</p> <p>Defaults to <code>clone</code> (also known as Copy-on-Write) on macOS, and <code>hardlink</code> on Linux and Windows.</p> <p>Default value: <code>\"clone\" (macOS) or \"hardlink\" (Linux, Windows)</code></p> <p>Possible values:</p> <ul> <li><code>\"clone\"</code>: Clone (i.e., copy-on-write) packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"copy\"</code>: Copy packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"hardlink\"</code>: Hard link packages from the wheel into the <code>site-packages</code> directory</li> <li><code>\"symlink\"</code>: Symbolically link packages from the wheel into the <code>site-packages</code> directory</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nlink-mode = \"copy\"\n</code></pre> <pre><code>[pip]\nlink-mode = \"copy\"\n</code></pre>"},{"location":"reference/settings/#pip_no-annotate","title":"<code>no-annotate</code>","text":"<p>Exclude comment annotations indicating the source of each package from the output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-annotate = true\n</code></pre> <pre><code>[pip]\nno-annotate = true\n</code></pre>"},{"location":"reference/settings/#pip_no-binary","title":"<code>no-binary</code>","text":"<p>Don't install pre-built wheels.</p> <p>The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-binary = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nno-binary = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_no-build","title":"<code>no-build</code>","text":"<p>Don't build source distributions.</p> <p>When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Alias for <code>--only-binary :all:</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-build = true\n</code></pre> <pre><code>[pip]\nno-build = true\n</code></pre>"},{"location":"reference/settings/#pip_no-build-isolation","title":"<code>no-build-isolation</code>","text":"<p>Disable isolation when building source distributions.</p> <p>Assumes that build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-build-isolation = true\n</code></pre> <pre><code>[pip]\nno-build-isolation = true\n</code></pre>"},{"location":"reference/settings/#pip_no-build-isolation-package","title":"<code>no-build-isolation-package</code>","text":"<p>Disable isolation when building source distributions for a specific package.</p> <p>Assumes that the packages' build dependencies specified by PEP 518 are already installed.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>Vec&lt;PackageName&gt;</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre> <pre><code>[pip]\nno-build-isolation-package = [\"package1\", \"package2\"]\n</code></pre>"},{"location":"reference/settings/#pip_no-deps","title":"<code>no-deps</code>","text":"<p>Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting the requirements file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-deps = true\n</code></pre> <pre><code>[pip]\nno-deps = true\n</code></pre>"},{"location":"reference/settings/#pip_no-emit-package","title":"<code>no-emit-package</code>","text":"<p>Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile's <code>--unsafe-package</code> option.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-emit-package = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nno-emit-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_no-header","title":"<code>no-header</code>","text":"<p>Exclude the comment header at the top of output file generated by <code>uv pip compile</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-header = true\n</code></pre> <pre><code>[pip]\nno-header = true\n</code></pre>"},{"location":"reference/settings/#pip_no-index","title":"<code>no-index</code>","text":"<p>Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and those provided via <code>--find-links</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-index = true\n</code></pre> <pre><code>[pip]\nno-index = true\n</code></pre>"},{"location":"reference/settings/#pip_no-sources","title":"<code>no-sources</code>","text":"<p>Ignore the <code>tool.uv.sources</code> table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-sources = true\n</code></pre> <pre><code>[pip]\nno-sources = true\n</code></pre>"},{"location":"reference/settings/#pip_no-strip-extras","title":"<code>no-strip-extras</code>","text":"<p>Include extras in the output file.</p> <p>By default, uv strips extras, as any packages pulled in by the extras are already included as dependencies in the output file directly. Further, output files generated with <code>--no-strip-extras</code> cannot be used as constraints files in <code>install</code> and <code>sync</code> invocations.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-strip-extras = true\n</code></pre> <pre><code>[pip]\nno-strip-extras = true\n</code></pre>"},{"location":"reference/settings/#pip_no-strip-markers","title":"<code>no-strip-markers</code>","text":"<p>Include environment markers in the output file generated by <code>uv pip compile</code>.</p> <p>By default, uv strips environment markers, as the resolution generated by <code>compile</code> is only guaranteed to be correct for the target environment.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nno-strip-markers = true\n</code></pre> <pre><code>[pip]\nno-strip-markers = true\n</code></pre>"},{"location":"reference/settings/#pip_only-binary","title":"<code>only-binary</code>","text":"<p>Only use pre-built wheels; don't build source distributions.</p> <p>When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.</p> <p>Multiple packages may be provided. Disable binaries for all packages with <code>:all:</code>. Clear previously specified packages with <code>:none:</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nonly-binary = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nonly-binary = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_output-file","title":"<code>output-file</code>","text":"<p>Write the requirements generated by <code>uv pip compile</code> to the given <code>requirements.txt</code> file.</p> <p>If the file already exists, the existing versions will be preferred when resolving dependencies, unless <code>--upgrade</code> is also specified.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\noutput-file = \"requirements.txt\"\n</code></pre> <pre><code>[pip]\noutput-file = \"requirements.txt\"\n</code></pre>"},{"location":"reference/settings/#pip_prefix","title":"<code>prefix</code>","text":"<p>Install packages into <code>lib</code>, <code>bin</code>, and other top-level folders under the specified directory, as if a virtual environment were present at that location.</p> <p>In general, prefer the use of <code>--python</code> to install into an alternate environment, as scripts and other artifacts installed via <code>--prefix</code> will reference the installing interpreter, rather than any interpreter added to the <code>--prefix</code> directory, rendering them non-portable.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nprefix = \"./prefix\"\n</code></pre> <pre><code>[pip]\nprefix = \"./prefix\"\n</code></pre>"},{"location":"reference/settings/#pip_prerelease","title":"<code>prerelease</code>","text":"<p>The strategy to use when considering pre-release versions.</p> <p>By default, uv will accept pre-releases for packages that only publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (<code>if-necessary-or-explicit</code>).</p> <p>Default value: <code>\"if-necessary-or-explicit\"</code></p> <p>Possible values:</p> <ul> <li><code>\"disallow\"</code>: Disallow all pre-release versions</li> <li><code>\"allow\"</code>: Allow all pre-release versions</li> <li><code>\"if-necessary\"</code>: Allow pre-release versions if all versions of a package are pre-release</li> <li><code>\"explicit\"</code>: Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements</li> <li><code>\"if-necessary-or-explicit\"</code>: Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nprerelease = \"allow\"\n</code></pre> <pre><code>[pip]\nprerelease = \"allow\"\n</code></pre>"},{"location":"reference/settings/#pip_python","title":"<code>python</code>","text":"<p>The Python interpreter into which packages should be installed.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--python</code> option allows you to specify a different interpreter, which is intended for use in continuous integration (CI) environments or other automated workflows.</p> <p>Supported formats: - <code>3.10</code> looks for an installed Python 3.10 using <code>py --list-paths</code> on Windows, or   <code>python3.10</code> on Linux and macOS. - <code>python3.10</code> or <code>python.exe</code> looks for a binary with the given name in <code>PATH</code>. - <code>/home/ferris/.local/bin/python3.10</code> uses the exact Python at the given path.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\npython = \"3.10\"\n</code></pre> <pre><code>[pip]\npython = \"3.10\"\n</code></pre>"},{"location":"reference/settings/#pip_python-platform","title":"<code>python-platform</code>","text":"<p>The platform for which requirements should be resolved.</p> <p>Represented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like <code>x86_64-unknown-linux-gnu</code> or <code>aaarch64-apple-darwin</code>.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\npython-platform = \"x86_64-unknown-linux-gnu\"\n</code></pre> <pre><code>[pip]\npython-platform = \"x86_64-unknown-linux-gnu\"\n</code></pre>"},{"location":"reference/settings/#pip_python-version","title":"<code>python-version</code>","text":"<p>The minimum Python version that should be supported by the resolved requirements (e.g., <code>3.8</code> or <code>3.8.17</code>).</p> <p>If a patch version is omitted, the minimum patch version is assumed. For example, <code>3.8</code> is mapped to <code>3.8.0</code>.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\npython-version = \"3.8\"\n</code></pre> <pre><code>[pip]\npython-version = \"3.8\"\n</code></pre>"},{"location":"reference/settings/#pip_reinstall","title":"<code>reinstall</code>","text":"<p>Reinstall all packages, regardless of whether they're already installed. Implies <code>refresh</code>.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nreinstall = true\n</code></pre> <pre><code>[pip]\nreinstall = true\n</code></pre>"},{"location":"reference/settings/#pip_reinstall-package","title":"<code>reinstall-package</code>","text":"<p>Reinstall a specific package, regardless of whether it's already installed. Implies <code>refresh-package</code>.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nreinstall-package = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nreinstall-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_require-hashes","title":"<code>require-hashes</code>","text":"<p>Require a matching hash for each requirement.</p> <p>Hash-checking mode is all or nothing. If enabled, all requirements must be provided with a corresponding hash or set of hashes. Additionally, if enabled, all requirements must either be pinned to exact versions (e.g., <code>==1.0.0</code>), or be specified via direct URL.</p> <p>Hash-checking mode introduces a number of additional constraints:</p> <ul> <li>Git dependencies are not supported.</li> <li>Editable installs are not supported.</li> <li>Local dependencies are not supported, unless they point to a specific wheel (<code>.whl</code>) or   source archive (<code>.zip</code>, <code>.tar.gz</code>), as opposed to a directory.</li> </ul> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nrequire-hashes = true\n</code></pre> <pre><code>[pip]\nrequire-hashes = true\n</code></pre>"},{"location":"reference/settings/#pip_resolution","title":"<code>resolution</code>","text":"<p>The strategy to use when selecting between the different compatible versions for a given package requirement.</p> <p>By default, uv will use the latest compatible version of each package (<code>highest</code>).</p> <p>Default value: <code>\"highest\"</code></p> <p>Possible values:</p> <ul> <li><code>\"highest\"</code>: Resolve the highest compatible version of each package</li> <li><code>\"lowest\"</code>: Resolve the lowest compatible version of each package</li> <li><code>\"lowest-direct\"</code>: Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies</li> </ul> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nresolution = \"lowest-direct\"\n</code></pre> <pre><code>[pip]\nresolution = \"lowest-direct\"\n</code></pre>"},{"location":"reference/settings/#pip_strict","title":"<code>strict</code>","text":"<p>Validate the Python environment, to detect packages with missing dependencies and other issues.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nstrict = true\n</code></pre> <pre><code>[pip]\nstrict = true\n</code></pre>"},{"location":"reference/settings/#pip_system","title":"<code>system</code>","text":"<p>Install packages into the system Python environment.</p> <p>By default, uv installs into the virtual environment in the current working directory or any parent directory. The <code>--system</code> option instructs uv to instead use the first Python found in the system <code>PATH</code>.</p> <p>WARNING: <code>--system</code> is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nsystem = true\n</code></pre> <pre><code>[pip]\nsystem = true\n</code></pre>"},{"location":"reference/settings/#pip_target","title":"<code>target</code>","text":"<p>Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory.</p> <p>Default value: <code>None</code></p> <p>Type: <code>str</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\ntarget = \"./target\"\n</code></pre> <pre><code>[pip]\ntarget = \"./target\"\n</code></pre>"},{"location":"reference/settings/#pip_universal","title":"<code>universal</code>","text":"<p>Perform a universal resolution, attempting to generate a single <code>requirements.txt</code> output file that is compatible with all operating systems, architectures, and Python implementations.</p> <p>In universal mode, the current Python version (or user-provided <code>--python-version</code>) will be treated as a lower bound. For example, <code>--universal --python-version 3.7</code> would produce a universal resolution for Python 3.7 and later.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nuniversal = true\n</code></pre> <pre><code>[pip]\nuniversal = true\n</code></pre>"},{"location":"reference/settings/#pip_upgrade","title":"<code>upgrade</code>","text":"<p>Allow package upgrades, ignoring pinned versions in any existing output file.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nupgrade = true\n</code></pre> <pre><code>[pip]\nupgrade = true\n</code></pre>"},{"location":"reference/settings/#pip_upgrade-package","title":"<code>upgrade-package</code>","text":"<p>Allow upgrades for a specific package, ignoring pinned versions in any existing output file.</p> <p>Accepts both standalone package names (<code>ruff</code>) and version specifiers (<code>ruff&lt;0.5.0</code>).</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nupgrade-package = [\"ruff\"]\n</code></pre> <pre><code>[pip]\nupgrade-package = [\"ruff\"]\n</code></pre>"},{"location":"reference/settings/#pip_verify-hashes","title":"<code>verify-hashes</code>","text":"<p>Validate any hashes provided in the requirements file.</p> <p>Unlike <code>--require-hashes</code>, <code>--verify-hashes</code> does not require that all requirements have hashes; instead, it will limit itself to verifying the hashes of those requirements that do include them.</p> <p>Default value: <code>false</code></p> <p>Type: <code>bool</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.pip]\nverify-hashes = true\n</code></pre> <pre><code>[pip]\nverify-hashes = true\n</code></pre>"},{"location":"reference/settings/#workspace","title":"<code>workspace</code>","text":""},{"location":"reference/settings/#workspace_exclude","title":"<code>exclude</code>","text":"<p>Packages to exclude as workspace members. If a package matches both <code>members</code> and <code>exclude</code>, it will be excluded.</p> <p>Supports both globs and explicit paths.</p> <p>For more information on the glob syntax, refer to the <code>glob</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.workspace]\nexclude = [\"member1\", \"path/to/member2\", \"libs/*\"]\n</code></pre> <pre><code>[workspace]\nexclude = [\"member1\", \"path/to/member2\", \"libs/*\"]\n</code></pre>"},{"location":"reference/settings/#workspace_members","title":"<code>members</code>","text":"<p>Packages to include as workspace members.</p> <p>Supports both globs and explicit paths.</p> <p>For more information on the glob syntax, refer to the <code>glob</code> documentation.</p> <p>Default value: <code>[]</code></p> <p>Type: <code>list[str]</code></p> <p>Example usage:</p> pyproject.tomluv.toml <pre><code>[tool.uv.workspace]\nmembers = [\"member1\", \"path/to/member2\", \"libs/*\"]\n</code></pre> <pre><code>[workspace]\nmembers = [\"member1\", \"path/to/member2\", \"libs/*\"]\n</code></pre>"},{"location":"reference/versioning/","title":"Versioning","text":"<p>uv uses a custom versioning scheme in which the minor version number is bumped for breaking changes, and the patch version number is bumped for bug fixes, enhancements, and other non-breaking changes.</p> <p>uv does not yet have a stable API; once uv's API is stable (v1.0.0), the versioning scheme will adhere to Semantic Versioning.</p> <p>uv's changelog can be viewed on GitHub.</p>"}]}